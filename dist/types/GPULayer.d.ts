import { GPUComposer } from './GPUComposer';
import { GPULayerArray, GPULayerFilter, GPULayerNumComponents, GPULayerType, GPULayerWrap } from './constants';
export declare class GPULayer {
    private readonly composer;
    readonly name: string;
    readonly type: GPULayerType;
    readonly numComponents: GPULayerNumComponents;
    readonly filter: GPULayerFilter;
    readonly wrapS: GPULayerWrap;
    readonly wrapT: GPULayerWrap;
    readonly writable: boolean;
    private _clearValue;
    private _bufferIndex;
    readonly numBuffers: number;
    private readonly buffers;
    _length?: number;
    private _width;
    private _height;
    readonly glInternalFormat: number;
    readonly glFormat: number;
    readonly internalType: GPULayerType;
    readonly glType: number;
    readonly glNumChannels: number;
    readonly internalFilter: GPULayerFilter;
    readonly glFilter: number;
    readonly internalWrapS: GPULayerWrap;
    readonly glWrapS: number;
    readonly internalWrapT: GPULayerWrap;
    readonly glWrapT: number;
    private textureOverrides?;
    constructor(composer: GPUComposer, params: {
        name: string;
        dimensions: number | [number, number];
        type: GPULayerType;
        numComponents: GPULayerNumComponents;
        array?: GPULayerArray | number[];
        filter?: GPULayerFilter;
        wrapS?: GPULayerWrap;
        wrapT?: GPULayerWrap;
        writable?: boolean;
        numBuffers?: number;
        clearValue?: number | number[];
    });
    private static calcSize;
    private static getInternalWrap;
    private static getInternalFilter;
    private static getInternalType;
    private static shouldCastIntTypeAsFloat;
    private static getGLTextureParameters;
    private static testFramebufferWrite;
    get bufferIndex(): number;
    saveCurrentStateToGPULayer(layer: GPULayer): void;
    _setCurrentStateTexture(texture: WebGLTexture): void;
    private static initArrayForInternalType;
    private validateDataArray;
    private initBuffers;
    getStateAtIndex(index: number): WebGLTexture;
    get currentState(): WebGLTexture;
    get lastState(): WebGLTexture;
    _usingTextureOverrideForCurrentBuffer(): WebGLTexture | undefined;
    incrementBufferIndex(): void;
    _bindOutputBufferForWrite(incrementBufferIndex: boolean): void;
    _bindOutputBuffer(): void;
    setFromArray(array: GPULayerArray | number[], applyToAllBuffers?: boolean): void;
    resize(dimensions: number | [number, number], array?: GPULayerArray | number[]): void;
    get clearValue(): number | number[];
    set clearValue(clearValue: number | number[]);
    clear(applyToAllBuffers?: boolean): void;
    get width(): number;
    get height(): number;
    get length(): number;
    private destroyBuffers;
    dispose(): void;
    clone(name?: string): GPULayer;
}
