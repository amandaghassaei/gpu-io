!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.WebGLCompute=t():e.WebGLCompute=t()}(self,(function(){return(()=>{var e={501:(e,t,r)=>{"use strict";r.r(t),r.d(t,{Float16Array:()=>de,getFloat16:()=>me,hfround:()=>h,setFloat16:()=>ve});const n=new ArrayBuffer(4),i=new Float32Array(n),o=new Uint32Array(n),a=new Uint32Array(512),s=new Uint32Array(512);for(let e=0;e<256;++e){const t=e-127;t<-27?(a[0|e]=0,a[256|e]=32768,s[0|e]=24,s[256|e]=24):t<-14?(a[0|e]=1024>>-t-14,a[256|e]=1024>>-t-14|32768,s[0|e]=-t-1,s[256|e]=-t-1):t<=15?(a[0|e]=t+15<<10,a[256|e]=t+15<<10|32768,s[0|e]=13,s[256|e]=13):t<128?(a[0|e]=31744,a[256|e]=64512,s[0|e]=24,s[256|e]=24):(a[0|e]=31744,a[256|e]=64512,s[0|e]=13,s[256|e]=13)}function l(e){i[0]=e;const t=o[0],r=t>>23&511;return a[r]+((8388607&t)>>s[r])}const u=new Uint32Array(2048),f=new Uint32Array(64),c=new Uint32Array(64);u[0]=0;for(let e=1;e<1024;++e){let t=e<<13,r=0;for(;0==(8388608&t);)r-=8388608,t<<=1;t&=-8388609,r+=947912704,u[e]=t|r}for(let e=1024;e<2048;++e)u[e]=939524096+(e-1024<<13);f[0]=0;for(let e=1;e<31;++e)f[e]=e<<23;f[31]=1199570944,f[32]=2147483648;for(let e=33;e<63;++e)f[e]=2147483648+(e-32<<23);f[63]=3347054592,c[0]=0;for(let e=1;e<64;++e)c[e]=32===e?0:1024;function p(e){const t=e>>10;return o[0]=u[c[t]+(1023&e)]+f[t],i[0]}function h(e){return e=Number(e),Number.isFinite(e)&&0!==e?p(l(e)):e}var d=r(277),_="object"==typeof self&&self&&self.Object===Object&&self;const g=d.Z||_||Function("return this")(),m=g.Symbol;var v=Object.prototype,y=v.hasOwnProperty,b=v.toString,T=m?m.toStringTag:void 0;var E=Object.prototype.toString;var w=m?m.toStringTag:void 0;const A=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":w&&w in Object(e)?function(e){var t=y.call(e,T),r=e[T];try{e[T]=void 0;var n=!0}catch(e){}var i=b.call(e);return n&&(t?e[T]=r:delete e[T]),i}(e):function(e){return E.call(e)}(e)},L=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)},x=g["__core-js_shared__"];var F,R=(F=/[^.]+$/.exec(x&&x.keys&&x.keys.IE_PROTO||""))?"Symbol(src)_1."+F:"";var U=Function.prototype.toString;var I=/^\[object .+?Constructor\]$/,O=Function.prototype,S=Object.prototype,N=O.toString,D=S.hasOwnProperty,P=RegExp("^"+N.call(D).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");const C=function(e){return!(!L(e)||(t=e,R&&R in t))&&(function(e){if(!L(e))return!1;var t=A(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}(e)?P:I).test(function(e){if(null!=e){try{return U.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e));var t},B=function(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return C(r)?r:void 0},G=B(Object,"create");var V=Object.prototype.hasOwnProperty;var k=Object.prototype.hasOwnProperty;function W(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}W.prototype.clear=function(){this.__data__=G?G(null):{},this.size=0},W.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},W.prototype.get=function(e){var t=this.__data__;if(G){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return V.call(t,e)?t[e]:void 0},W.prototype.has=function(e){var t=this.__data__;return G?void 0!==t[e]:k.call(t,e)},W.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=G&&void 0===t?"__lodash_hash_undefined__":t,this};const M=W,j=function(e,t){for(var r=e.length;r--;)if((n=e[r][0])===(i=t)||n!=n&&i!=i)return r;var n,i;return-1};var H=Array.prototype.splice;function X(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}X.prototype.clear=function(){this.__data__=[],this.size=0},X.prototype.delete=function(e){var t=this.__data__,r=j(t,e);return!(r<0||(r==t.length-1?t.pop():H.call(t,r,1),--this.size,0))},X.prototype.get=function(e){var t=this.__data__,r=j(t,e);return r<0?void 0:t[r][1]},X.prototype.has=function(e){return j(this.__data__,e)>-1},X.prototype.set=function(e,t){var r=this.__data__,n=j(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this};const Y=X,z=B(g,"Map"),q=function(e,t){var r,n,i=e.__data__;return("string"==(n=typeof(r=t))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?i["string"==typeof t?"string":"hash"]:i.map};function Z(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}Z.prototype.clear=function(){this.size=0,this.__data__={hash:new M,map:new(z||Y),string:new M}},Z.prototype.delete=function(e){var t=q(this,e).delete(e);return this.size-=t?1:0,t},Z.prototype.get=function(e){return q(this,e).get(e)},Z.prototype.has=function(e){return q(this,e).has(e)},Z.prototype.set=function(e,t){var r=q(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this};const K=Z;function $(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var n=arguments,i=t?t.apply(this,n):n[0],o=r.cache;if(o.has(i))return o.get(i);var a=e.apply(this,n);return r.cache=o.set(i,a)||o,a};return r.cache=new($.Cache||K),r}$.Cache=K;const J=$,Q=Object.getOwnPropertyDescriptor(new Uint8Array(1),0).writable;function ee(e){let t="number"!=typeof e?Number(e):e;return Number.isNaN(t)&&(t=0),Math.trunc(t)}function te(e,t){const[r,n]=[Number.isNaN(e),Number.isNaN(t)];if(r&&n)return 0;if(r)return 1;if(n)return-1;if(e<t)return-1;if(e>t)return 1;if(0===e&&0===t){const[r,n]=[Object.is(e,0),Object.is(t,0)];if(!r&&n)return-1;if(r&&!n)return 1}return 0}function re(e){return e instanceof DataView}function ne(e){return"string"==typeof e&&e===ee(e)+""}var ie=r(730),oe=ie.Z&&ie.Z.isArrayBuffer;const ae=oe?(se=oe,function(e){return se(e)}):function(e){return function(e){return null!=e&&"object"==typeof e}(e)&&"[object ArrayBuffer]"==A(e)};var se;const le=function(){const e=new WeakMap;return t=>{let r=e.get(t);return r||(r=Object.create(null),e.set(t,r),r)}}();function ue(e){return e instanceof de}function fe(e){if(!ue(e))throw new TypeError("This is not a Float16Array")}function ce(e){const t=e.length,r=new Array(t);for(let n=0;n<t;++n)r[n]=p(e[n]);return r}const pe={apply(e,t,r){return ue(t)&&"function"==typeof(n=e)&&ge.has(n)?Reflect.apply(e,le(t).target,r):Reflect.apply(e,t,r);var n}},he={get(e,t){let r=null;if(Q||(r=e,e=le(r).target),ne(t))return Reflect.has(e,t)?p(Reflect.get(e,t)):void 0;{const n=null!==r&&Reflect.has(r,t)?Reflect.get(r,t):Reflect.get(e,t);if("function"!=typeof n)return n;let i=le(n).proxy;return void 0===i&&(i=le(n).proxy=new Proxy(n,pe)),i}},set(e,t,r){let n=null;return Q||(n=e,e=le(n).target),ne(t)?Reflect.set(e,t,l(r)):null===n||Reflect.has(e,t)&&!Object.isFrozen(n)?Reflect.set(e,t,r):Reflect.set(n,t,r)}};Q||(he.getPrototypeOf=e=>Reflect.getPrototypeOf(le(e).target),he.setPrototypeOf=(e,t)=>Reflect.setPrototypeOf(le(e).target,t),he.defineProperty=(e,t,r)=>{const n=le(e).target;return!Reflect.has(n,t)||Object.isFrozen(e)?Reflect.defineProperty(e,t,r):Reflect.defineProperty(n,t,r)},he.deleteProperty=(e,t)=>{const r=le(e).target;return Reflect.has(e,t)?Reflect.deleteProperty(e,t):Reflect.deleteProperty(r,t)},he.has=(e,t)=>Reflect.has(e,t)||Reflect.has(le(e).target,t),he.isExtensible=e=>Reflect.isExtensible(e),he.preventExtensions=e=>Reflect.preventExtensions(e),he.getOwnPropertyDescriptor=(e,t)=>Reflect.getOwnPropertyDescriptor(e,t),he.ownKeys=e=>Reflect.ownKeys(e));class de extends Uint16Array{constructor(e,t,r){if(ue(e))super(le(e).target);else if(null===e||"object"!=typeof e||ae(e))switch(arguments.length){case 0:super();break;case 1:super(e);break;case 2:super(e,t);break;case 3:super(e,t,r);break;default:super(...arguments)}else{const t=Reflect.has(e,"length")||void 0===e[Symbol.iterator]?e:[...e],r=t.length;super(r);for(let e=0;e<r;++e)this[e]=l(t[e])}let n;if(Q)n=new Proxy(this,he);else{const e=Object.create(null);le(e).target=this,n=new Proxy(e,he)}return le(n).target=this,le(this).proxy=n,n}static from(e,...t){if(0===t.length)return new de(Uint16Array.from(e,l).buffer);const r=t[0],n=t[1];return new de(Uint16Array.from(e,(function(e,...t){return l(r.call(this,e,...t))}),n).buffer)}static of(...e){return new de(e)}*[Symbol.iterator](){for(const e of super[Symbol.iterator]())yield p(e)}keys(){return super.keys()}*values(){for(const e of super.values())yield p(e)}*entries(){for(const[e,t]of super.entries())yield[e,p(t)]}map(e,...t){fe(this);const r=t[0],n=[];for(let t=0,i=this.length;t<i;++t){const i=p(this[t]);n.push(e.call(r,i,t,le(this).proxy))}return new de(n)}filter(e,...t){fe(this);const r=t[0],n=[];for(let t=0,i=this.length;t<i;++t){const i=p(this[t]);e.call(r,i,t,le(this).proxy)&&n.push(i)}return new de(n)}reduce(e,...t){let r,n;fe(this),0===t.length?(r=p(this[0]),n=1):(r=t[0],n=0);for(let t=n,i=this.length;t<i;++t)r=e(r,p(this[t]),t,le(this).proxy);return r}reduceRight(e,...t){let r,n;fe(this);const i=this.length;0===t.length?(r=p(this[i-1]),n=i-1):(r=t[0],n=i);for(let t=n;t--;)r=e(r,p(this[t]),t,le(this).proxy);return r}forEach(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t)e.call(r,p(this[t]),t,le(this).proxy)}find(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t){const n=p(this[t]);if(e.call(r,n,t,le(this).proxy))return n}}findIndex(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t){const n=p(this[t]);if(e.call(r,n,t,le(this).proxy))return t}return-1}every(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t)if(!e.call(r,p(this[t]),t,le(this).proxy))return!1;return!0}some(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t)if(e.call(r,p(this[t]),t,le(this).proxy))return!0;return!1}set(e,...t){fe(this);const r=t[0];let n;if(ue(e))n=le(e).target;else{const t=Reflect.has(e,"length")||void 0===e[Symbol.iterator]?e:[...e],r=t.length;n=new Uint16Array(r);for(let e=0,r=t.length;e<r;++e)n[e]=l(t[e])}super.set(n,r)}reverse(){return fe(this),super.reverse(),le(this).proxy}fill(e,...t){return fe(this),super.fill(l(e),...t),le(this).proxy}copyWithin(e,t,...r){return fe(this),super.copyWithin(e,t,...r),le(this).proxy}sort(...e){fe(this);let t=e[0];void 0===t&&(t=te);const r=J(p);return super.sort(((e,n)=>t(r(e),r(n)))),le(this).proxy}slice(...e){let t;fe(this);try{t=super.slice(...e)}catch(r){if(!(r instanceof TypeError))throw r;t=new Uint16Array(this.buffer,this.byteOffset,this.length).slice(...e)}return new de(t.buffer)}subarray(...e){let t;fe(this);try{t=super.subarray(...e)}catch(r){if(!(r instanceof TypeError))throw r;t=new Uint16Array(this.buffer,this.byteOffset,this.length).subarray(...e)}return new de(t.buffer,t.byteOffset,t.length)}indexOf(e,...t){fe(this);const r=this.length;let n=ee(t[0]);n<0&&(n+=r,n<0&&(n=0));for(let t=n,i=r;t<i;++t)if(p(this[t])===e)return t;return-1}lastIndexOf(e,...t){fe(this);const r=this.length;let n=ee(t[0]);n=0===n?r:n+1,n>=0?n=n<r?n:r:n+=r;for(let t=n;t--;)if(p(this[t])===e)return t;return-1}includes(e,...t){fe(this);const r=this.length;let n=ee(t[0]);n<0&&(n+=r,n<0&&(n=0));const i=Number.isNaN(e);for(let t=n,o=r;t<o;++t){const r=p(this[t]);if(i&&Number.isNaN(r))return!0;if(r===e)return!0}return!1}join(...e){return fe(this),ce(this).join(...e)}toLocaleString(...e){return fe(this),ce(this).toLocaleString(...e)}get[Symbol.toStringTag](){if(ue(this))return"Float16Array"}}const _e=de.prototype,ge=new WeakSet;for(const e of Reflect.ownKeys(_e)){const t=_e[e];"function"==typeof t&&ge.add(t)}function me(e,t,...r){if(!re(e))throw new TypeError("First argument to getFloat16 function must be a DataView");return p(e.getUint16(t,...r))}function ve(e,t,r,...n){if(!re(e))throw new TypeError("First argument to setFloat16 function must be a DataView");e.setUint16(t,l(r),...n)}},809:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.changeDpiBlob=function(e,t){var r=e.slice(0,33);return new Promise((function(n,i){var o=new FileReader;o.onload=function(){var r=new Uint8Array(o.result),i=e.slice(33),a=p(r,t,e.type);n(new Blob([a,i],{type:e.type}))},o.readAsArrayBuffer(r)}))},t.changeDpiDataUrl=function(e,t){var r,l,u=e.split(","),f=u[0],c=u[1],h=void 0,d=void 0,_=!1;if(-1!==f.indexOf(n)){h=n;var g=(-1===(l=(r=c).indexOf(o))&&(l=r.indexOf(a)),-1===l&&(l=r.indexOf(s)),l);g>=0?(d=4*Math.ceil((g+28)/3),_=!0):d=44}-1!==f.indexOf(i)&&(h=i,d=24);for(var m=c.substring(0,d),v=c.substring(d),y=atob(m),b=new Uint8Array(y.length),T=0;T<b.length;T++)b[T]=y.charCodeAt(T);var E=p(b,t,h,_);return[f,",",btoa(String.fromCharCode.apply(String,function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(E))),v].join("")};var r=void 0,n="image/png",i="image/jpeg",o="AAlwSFlz",a="AAAJcEhZ",s="AAAACXBI",l="p".charCodeAt(0),u="H".charCodeAt(0),f="Y".charCodeAt(0),c="s".charCodeAt(0);function p(e,t,o,a){if(o===i)return e[13]=1,e[14]=t>>8,e[15]=255&t,e[16]=t>>8,e[17]=255&t,e;if(o===n){var s=new Uint8Array(13);t*=39.3701,s[0]=l,s[1]=u,s[2]=f,s[3]=c,s[4]=t>>>24,s[5]=t>>>16,s[6]=t>>>8,s[7]=255&t,s[8]=s[4],s[9]=s[5],s[10]=s[6],s[11]=s[7],s[12]=1;var p=function(e){var t=-1;r||(r=function(){for(var e=new Int32Array(256),t=0;t<256;t++){for(var r=t,n=0;n<8;n++)r=1&r?3988292384^r>>>1:r>>>1;e[t]=r}return e}());for(var n=0;n<e.length;n++)t=r[255&(t^e[n])]^t>>>8;return-1^t}(s),h=new Uint8Array(4);if(h[0]=p>>>24,h[1]=p>>>16,h[2]=p>>>8,h[3]=255&p,a){var d=function(e){for(var t=e.length-1;t>=4;t--)if(9===e[t-4]&&e[t-3]===l&&e[t-2]===u&&e[t-1]===f&&e[t]===c)return t-3}(e);return e.set(s,d),e.set(h,d+13),e}var _=new Uint8Array(4);_[0]=0,_[1]=0,_[2]=0,_[3]=9;var g=new Uint8Array(54);return g.set(e,0),g.set(_,33),g.set(s,37),g.set(h,50),g}}},162:function(e,t,r){var n,i;void 0===(i="function"==typeof(n=function(){"use strict";function t(e,t,r){var n=new XMLHttpRequest;n.open("GET",e),n.responseType="blob",n.onload=function(){s(n.response,t,r)},n.onerror=function(){console.error("could not download file")},n.send()}function n(e){var t=new XMLHttpRequest;t.open("HEAD",e,!1);try{t.send()}catch(e){}return 200<=t.status&&299>=t.status}function i(e){try{e.dispatchEvent(new MouseEvent("click"))}catch(r){var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),e.dispatchEvent(t)}}var o="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof r.g&&r.g.global===r.g?r.g:void 0,a=o.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),s=o.saveAs||("object"!=typeof window||window!==o?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(e,r,a){var s=o.URL||o.webkitURL,l=document.createElement("a");r=r||e.name||"download",l.download=r,l.rel="noopener","string"==typeof e?(l.href=e,l.origin===location.origin?i(l):n(l.href)?t(e,r,a):i(l,l.target="_blank")):(l.href=s.createObjectURL(e),setTimeout((function(){s.revokeObjectURL(l.href)}),4e4),setTimeout((function(){i(l)}),0))}:"msSaveOrOpenBlob"in navigator?function(e,r,o){if(r=r||e.name||"download","string"!=typeof e)navigator.msSaveOrOpenBlob(function(e,t){return void 0===t?t={autoBom:!1}:"object"!=typeof t&&(console.warn("Deprecated: Expected third argument to be a object"),t={autoBom:!t}),t.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["\ufeff",e],{type:e.type}):e}(e,o),r);else if(n(e))t(e,r,o);else{var a=document.createElement("a");a.href=e,a.target="_blank",setTimeout((function(){i(a)}))}}:function(e,r,n,i){if((i=i||open("","_blank"))&&(i.document.title=i.document.body.innerText="downloading..."),"string"==typeof e)return t(e,r,n);var s="application/octet-stream"===e.type,l=/constructor/i.test(o.HTMLElement)||o.safari,u=/CriOS\/[\d]+/.test(navigator.userAgent);if((u||s&&l||a)&&"undefined"!=typeof FileReader){var f=new FileReader;f.onloadend=function(){var e=f.result;e=u?e:e.replace(/^data:[^;]*;/,"data:attachment/file;"),i?i.location.href=e:location=e,i=null},f.readAsDataURL(e)}else{var c=o.URL||o.webkitURL,p=c.createObjectURL(e);i?i.location=p:location.href=p,i=null,setTimeout((function(){c.revokeObjectURL(p)}),4e4)}});o.saveAs=s.saveAs=s,e.exports=s})?n.apply(t,[]):n)||(e.exports=i)},277:(e,t,r)=>{"use strict";r.d(t,{Z:()=>n});const n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g},730:(e,t,r)=>{"use strict";r.d(t,{Z:()=>s});var n=r(277);e=r.hmd(e);var i="object"==typeof exports&&exports&&!exports.nodeType&&exports,o=i&&e&&!e.nodeType&&e,a=o&&o.exports===i&&n.Z.process;const s=function(){try{return o&&o.require&&o.require("util").types||a&&a.binding&&a.binding("util")}catch(e){}}()},627:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isArray=t.isString=t.isPositiveInteger=t.isInteger=t.isNumber=t.isValidTextureDataType=t.validTextureDataTypes=t.isValidTextureFormatType=t.validTextureFormatTypes=t.isValidWrapType=t.validWrapTypes=t.isValidFilterType=t.validFilterTypes=t.isValidDataType=t.validDataTypes=void 0;var n=r(738);function i(e){return!isNaN(e)}function o(e){return i(e)&&e%1==0}t.validDataTypes=[n.HALF_FLOAT,n.FLOAT,n.UNSIGNED_BYTE,n.BYTE,n.UNSIGNED_SHORT,n.SHORT,n.UNSIGNED_INT,n.INT],t.isValidDataType=function(e){return t.validDataTypes.indexOf(e)>-1},t.validFilterTypes=[n.LINEAR,n.NEAREST],t.isValidFilterType=function(e){return t.validFilterTypes.indexOf(e)>-1},t.validWrapTypes=[n.CLAMP_TO_EDGE,n.REPEAT],t.isValidWrapType=function(e){return t.validWrapTypes.indexOf(e)>-1},t.validTextureFormatTypes=[n.RGB,n.RGBA],t.isValidTextureFormatType=function(e){return t.validTextureFormatTypes.indexOf(e)>-1},t.validTextureDataTypes=[n.UNSIGNED_BYTE],t.isValidTextureDataType=function(e){return t.validTextureDataTypes.indexOf(e)>-1},t.isNumber=i,t.isInteger=o,t.isPositiveInteger=function(e){return o(e)&&e>0},t.isString=function(e){return"string"==typeof e},t.isArray=function(e){return Array.isArray(e)}},738:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.INT_4D_UNIFORM=t.INT_3D_UNIFORM=t.INT_2D_UNIFORM=t.INT_1D_UNIFORM=t.FLOAT_4D_UNIFORM=t.FLOAT_3D_UNIFORM=t.FLOAT_2D_UNIFORM=t.FLOAT_1D_UNIFORM=t.GLSL1=t.GLSL3=t.RGBA=t.RGB=t.CLAMP_TO_EDGE=t.REPEAT=t.NEAREST=t.LINEAR=t.INT=t.UNSIGNED_INT=t.SHORT=t.UNSIGNED_SHORT=t.BYTE=t.UNSIGNED_BYTE=t.FLOAT=t.HALF_FLOAT=void 0,t.HALF_FLOAT="HALF_FLOAT",t.FLOAT="FLOAT",t.UNSIGNED_BYTE="UNSIGNED_BYTE",t.BYTE="BYTE",t.UNSIGNED_SHORT="UNSIGNED_SHORT",t.SHORT="SHORT",t.UNSIGNED_INT="UNSIGNED_INT",t.INT="INT",t.LINEAR="LINEAR",t.NEAREST="NEAREST",t.REPEAT="REPEAT",t.CLAMP_TO_EDGE="CLAMP_TO_EDGE",t.RGB="RGB",t.RGBA="RGBA",t.GLSL3="300 es",t.GLSL1="100",t.FLOAT_1D_UNIFORM="1f",t.FLOAT_2D_UNIFORM="2f",t.FLOAT_3D_UNIFORM="3f",t.FLOAT_4D_UNIFORM="3f",t.INT_1D_UNIFORM="1i",t.INT_2D_UNIFORM="2i",t.INT_3D_UNIFORM="3i",t.INT_4D_UNIFORM="3i"},930:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DataLayer=void 0;var n=r(501),i=r(627),o=r(738),a=r(581),s=r(593),l=function(){function e(t){this._bufferIndex=0,this.buffers=[];var r=t.gl,n=t.errorCallback,a=t.name,s=t.dimensions,l=t.type,u=t.numComponents,f=t.data,c=t.glslVersion;if(this.name=a,this.gl=r,this.errorCallback=n,!i.isPositiveInteger(u)||u>4)throw new Error("Invalid numComponents "+u+' for DataLayer "'+a+'".');this.numComponents=u;var p=!!t.writable;this.writable=p;var h=e.calcSize(s,a),d=h.length,_=h.width,g=h.height;if(this.length=d,!i.isPositiveInteger(_))throw new Error("Invalid width "+_+' for DataLayer "'+a+'".');if(this.width=_,!i.isPositiveInteger(g))throw new Error("Invalid length "+g+' for DataLayer "'+a+'".');this.height=g;var m=void 0!==t.filter?t.filter:d?o.NEAREST:o.LINEAR;if(!i.isValidFilterType(m))throw new Error("Invalid filter: "+m+' for DataLayer "'+a+'", must be '+i.validFilterTypes.join(", ")+".");this.filter=m;var v=void 0!==t.wrapS?t.wrapS:o.CLAMP_TO_EDGE;if(!i.isValidWrapType(v))throw new Error("Invalid wrapS: "+v+' for DataLayer "'+a+'", must be '+i.validWrapTypes.join(", ")+".");this.wrapS=v;var y=void 0!==t.wrapT?t.wrapT:o.CLAMP_TO_EDGE;if(!i.isValidWrapType(y))throw new Error("Invalid wrapT: "+y+' for DataLayer "'+a+'", must be '+i.validWrapTypes.join(", ")+".");if(this.wrapT=y,!i.isValidDataType(l))throw new Error("Invalid type "+l+' for DataLayer "'+a+'", must be one of '+i.validDataTypes.join(", ")+".");this.type=l;var b=e.getInternalType({gl:r,type:l,glslVersion:c,writable:p,filter:m,name:a,errorCallback:n});this.internalType=b;var T=e.getGLTextureParameters({gl:r,name:a,numComponents:u,writable:p,internalType:b,glslVersion:c,errorCallback:n}),E=T.glFormat,w=T.glInternalFormat,A=T.glType,L=T.glNumChannels;this.glInternalFormat=w,this.glFormat=E,this.glType=A,this.glNumChannels=L,this.internalFilter=e.getInternalFilter({gl:r,filter:m,internalType:b,name:a,errorCallback:n}),this.glFilter=r[this.internalFilter],this.internalWrapS=e.getInternalWrap({gl:r,wrap:v,name:a}),this.glWrapS=r[this.internalWrapS],this.internalWrapT=e.getInternalWrap({gl:r,wrap:y,name:a}),this.glWrapT=r[this.internalWrapT];var x=void 0!==t.numBuffers?t.numBuffers:1;if(!i.isPositiveInteger(x))throw new Error("Invalid numBuffers: "+x+' for DataLayer "'+a+'", must be positive integer.');this.numBuffers=x,this.initBuffers(f)}return e.calcSize=function(e,t){var r,n,o;if(isNaN(e)){if(n=e[0],!i.isPositiveInteger(n))throw new Error("Invalid width "+n+' for DataLayer "'+t+'".');if(o=e[1],!i.isPositiveInteger(o))throw new Error("Invalid height "+o+' for DataLayer "'+t+'".')}else{if(!i.isPositiveInteger(e))throw new Error("Invalid length "+e+' for DataLayer "'+t+'".');for(var a=1,s=r=e;s>2;)a++,s/=2;n=Math.pow(2,Math.floor(a/2)+a%2),o=Math.pow(2,Math.floor(a/2))}return{width:n,height:o,length:r}},e.getInternalWrap=function(e){var t=e.gl,r=e.wrap,n=e.name;return s.isWebGL2(t)||r===o.CLAMP_TO_EDGE||s.isWebGL2(t)?r:(console.warn('Falling back to CLAMP_TO_EDGE wrapping for DataLayer "'+n+'" for WebGL 1.'),o.CLAMP_TO_EDGE)},e.getInternalFilter=function(e){var t=e.gl,r=e.errorCallback,n=e.internalType,i=e.name,s=e.filter;return s===o.NEAREST||(n===o.HALF_FLOAT&&(a.getExtension(t,a.OES_TEXTURE_HAlF_FLOAT_LINEAR,r,!0)||a.getExtension(t,a.OES_TEXTURE_FLOAT_LINEAR,r,!0)||(console.warn('Falling back to NEAREST filter for DataLayer "'+i+'".'),s=o.NEAREST)),n===o.FLOAT&&(a.getExtension(t,a.OES_TEXTURE_FLOAT_LINEAR,r,!0)||(console.warn('Falling back to NEAREST filter for DataLayer "'+i+'".'),s=o.NEAREST))),s},e.getInternalType=function(t){var r=t.gl,n=t.errorCallback,i=t.writable,l=t.name,u=t.glslVersion,f=t.type;return e.shouldCastIntTypeAsFloat(t)&&(f===o.UNSIGNED_BYTE||f===o.BYTE?f=o.HALF_FLOAT:(f===o.INT||o.UNSIGNED_INT,console.warn("Falling back "+f+' type to FLOAT type for glsl1.x support for DataLayer "'+l+'".\nLarge UNSIGNED_INT or INT with absolute value > 16,777,216 are not supported, on mobile UNSIGNED_INT, INT, UNSIGNED_SHORT, and SHORT with absolute value > 2,048 may not be supported.'),f=o.FLOAT)),s.isWebGL2(r)||(f===o.FLOAT&&(a.getExtension(r,a.OES_TEXTURE_FLOAT,n,!0)||(console.warn('FLOAT not supported, falling back to HALF_FLOAT type for DataLayer "'+l+'".'),f=o.HALF_FLOAT),i&&(e.testFramebufferWrite({gl:r,type:f,glslVersion:u})||f===o.HALF_FLOAT||(console.warn('FLOAT not supported for writing operations, falling back to HALF_FLOAT type for DataLayer "'+l+'".'),f=o.HALF_FLOAT))),f===o.HALF_FLOAT&&(a.getExtension(r,a.OES_TEXTURE_HALF_FLOAT,n),i&&(e.testFramebufferWrite({gl:r,type:f,glslVersion:u})||n("This browser does not support rendering to HALF_FLOAT textures.")))),i&&s.isWebGL2(r)&&(f===o.HALF_FLOAT||f===o.FLOAT)&&a.getExtension(r,a.EXT_COLOR_BUFFER_FLOAT,n),f},e.shouldCastIntTypeAsFloat=function(e){var t=e.gl,r=e.type,n=e.filter;return(e.glslVersion!==o.GLSL3||!s.isWebGL2(t))&&(r===o.UNSIGNED_BYTE&&n===o.LINEAR||r===o.BYTE||r===o.SHORT||r===o.INT||r===o.UNSIGNED_SHORT||r===o.UNSIGNED_INT)},e.getGLTextureParameters=function(e){var t,r,n,i,l=e.gl,u=e.errorCallback,f=e.name,c=e.numComponents,p=e.internalType,h=e.writable,d=e.glslVersion;if(s.isWebGL2(l)){if(i=c,3===c&&h&&(i=4),p===o.FLOAT||p===o.HALF_FLOAT)switch(i){case 1:r=l.RED;break;case 2:r=l.RG;break;case 3:r=l.RGB;break;case 4:r=l.RGBA;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}else if(d===o.GLSL1&&p===o.UNSIGNED_BYTE)switch(i){case 1:if(!h){r=l.ALPHA;break}case 2:if(!h){r=l.LUMINANCE_ALPHA;break}case 3:r=l.RGB,i=3;break;case 4:r=l.RGBA,i=4;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}else switch(i){case 1:r=l.RED_INTEGER;break;case 2:r=l.RG_INTEGER;break;case 3:r=l.RGB_INTEGER;break;case 4:r=l.RGBA_INTEGER;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}switch(p){case o.HALF_FLOAT:switch(t=l.HALF_FLOAT,i){case 1:n=l.R16F;break;case 2:n=l.RG16F;break;case 3:n=l.RGB16F;break;case 4:n=l.RGBA16F;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case o.FLOAT:switch(t=l.FLOAT,i){case 1:n=l.R32F;break;case 2:n=l.RG32F;break;case 3:n=l.RGB32F;break;case 4:n=l.RGBA32F;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case o.UNSIGNED_BYTE:if(t=l.UNSIGNED_BYTE,d===o.GLSL1&&p===o.UNSIGNED_BYTE)n=r;else switch(i){case 1:n=l.R8UI;break;case 2:n=l.RG8UI;break;case 3:n=l.RGB8UI;break;case 4:n=l.RGBA8UI;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case o.BYTE:switch(t=l.BYTE,i){case 1:n=l.R8I;break;case 2:n=l.RG8I;break;case 3:n=l.RGB8I;break;case 4:n=l.RGBA8I;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case o.SHORT:switch(t=l.SHORT,i){case 1:n=l.R16I;break;case 2:n=l.RG16I;break;case 3:n=l.RGB16I;break;case 4:n=l.RGBA16I;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case o.UNSIGNED_SHORT:switch(t=l.UNSIGNED_SHORT,i){case 1:n=l.R16UI;break;case 2:n=l.RG16UI;break;case 3:n=l.RGB16UI;break;case 4:n=l.RGBA16UI;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case o.INT:switch(t=l.INT,i){case 1:n=l.R32I;break;case 2:n=l.RG32I;break;case 3:n=l.RGB32I;break;case 4:n=l.RGBA32I;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case o.UNSIGNED_INT:switch(t=l.UNSIGNED_INT,i){case 1:n=l.R32UI;break;case 2:n=l.RG32UI;break;case 3:n=l.RGB32UI;break;case 4:n=l.RGBA32UI;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;default:throw new Error("Unsupported type "+p+' for DataLayer "'+f+'".')}}else{switch(c){case 1:if(!h){r=l.ALPHA;break}case 2:if(!h){r=l.LUMINANCE_ALPHA;break}case 3:r=l.RGB,n=l.RGB,i=3;break;case 4:r=l.RGBA,n=l.RGBA,i=4;break;default:throw new Error("Unsupported numComponents "+c+' for DataLayer "'+f+'".')}switch(p){case o.FLOAT:t=l.FLOAT;break;case o.HALF_FLOAT:t=l.HALF_FLOAT||a.getExtension(l,a.OES_TEXTURE_HALF_FLOAT,u).HALF_FLOAT_OES;break;case o.UNSIGNED_BYTE:t=l.UNSIGNED_BYTE;break;default:throw new Error("Unsupported type "+p+' in WebGL 1.0 for DataLayer "'+f+'".')}}if(void 0===t||void 0===r||void 0===n){var _=[];throw void 0===t&&_.push("glType"),void 0===r&&_.push("glFormat"),void 0===n&&_.push("glInternalFormat"),new Error("Invalid type: "+p+" for numComponents "+c+", unable to init parameter"+(_.length>1?"s":"")+" "+_.join(", ")+' for DataLayer "'+f+'".')}if(void 0===i||c<1||c>4||i<c)throw new Error("Invalid numChannels "+i+" for numComponents "+c+' for DataLayer "'+f+'".');return{glFormat:r,glInternalFormat:n,glType:t,glNumChannels:i}},e.testFramebufferWrite=function(t){var r=t.gl,n=t.type,i=t.glslVersion,a=r.createTexture();if(!a)return!1;r.bindTexture(r.TEXTURE_2D,a);var s=r[o.CLAMP_TO_EDGE],l=r[o.CLAMP_TO_EDGE],u=r[o.NEAREST];r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,s),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,l),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,u),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,u);var f=e.getGLTextureParameters({gl:r,name:"testFramebufferWrite",numComponents:1,writable:!0,internalType:n,glslVersion:i,errorCallback:function(){}}),c=f.glInternalFormat,p=f.glFormat,h=f.glType;r.texImage2D(r.TEXTURE_2D,0,c,100,100,0,p,h,null);var d=r.createFramebuffer();if(!d)return r.deleteTexture(a),!1;r.bindFramebuffer(r.FRAMEBUFFER,d),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,a,0);var _=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.deleteTexture(a),r.deleteFramebuffer(d),_},Object.defineProperty(e.prototype,"bufferIndex",{get:function(){return this._bufferIndex},enumerable:!1,configurable:!0}),e.prototype.saveCurrentStateToDataLayer=function(e){if(this.numBuffers<2)throw new Error("Can't call DataLayer.saveCurrentStateToDataLayer on DataLayer "+this.name+" with less than 2 buffers.");if(!this.writable)throw new Error("Can't call DataLayer.saveCurrentStateToDataLayer on read-only DataLayer "+this.name+".");if(e.writable)throw new Error("Can't call DataLayer.saveCurrentStateToDataLayer on DataLayer "+this.name+" using writable DataLayer "+e.name+".");if(e.glWrapS!==this.glWrapS||e.glWrapT!==this.glWrapT||e.wrapS!==this.wrapS||e.wrapT!==this.wrapT||e.width!==this.width||e.height!==this.height||e.glFilter!==this.glFilter||e.filter!==this.filter||e.glNumChannels!==this.glNumChannels||e.numComponents!==this.numComponents||e.glType!==this.glType||e.type!==this.type||e.glFormat!==this.glFormat||e.glInternalFormat!==this.glInternalFormat)throw new Error("Incompatible texture params between DataLayers "+e.name+" and "+this.name+".");if(!this.textureOverrides){this.textureOverrides=[];for(var t=0;t<this.numBuffers;t++)this.textureOverrides.push(void 0)}if(this.textureOverrides[this._bufferIndex])throw new Error("Can't call DataLayer.saveCurrentStateToDataLayer on DataLayer "+this.name+", this DataLayer has not written new state since last call to DataLayer.saveCurrentStateToDataLayer.");var r=this.getCurrentStateTexture();this.textureOverrides[this._bufferIndex]=r,this.buffers[this._bufferIndex].texture=e.getCurrentStateTexture(),e._setCurrentStateTexture(r);var n=this.gl,i=this.buffers[this._bufferIndex],o=i.framebuffer,a=i.texture;if(!o)throw new Error("No framebuffer for writable DataLayer "+this.name+".");n.bindFramebuffer(n.FRAMEBUFFER,o),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,a,0),n.bindFramebuffer(n.FRAMEBUFFER,null)},e.prototype._setCurrentStateTexture=function(e){if(this.writable)throw new Error("Can't call DataLayer._setCurrentStateTexture on writable texture "+this.name+".");this.buffers[this._bufferIndex].texture=e},e.prototype.validateDataArray=function(e){if(e){var t=this,r=t.width,i=t.height,a=t.length,s=t.numComponents,l=t.glNumChannels,u=t.type,f=t.internalType,c=t.name;if(a&&e.length!==a*s||!a&&e.length!==r*i*s)throw new Error("Invalid data length "+e.length+' for DataLayer "'+c+'" of size '+(a||r+"x"+i)+"x"+s+".");var p=!1;switch(u){case o.HALF_FLOAT:case o.FLOAT:p=p||e.constructor!==Float32Array;break;case o.UNSIGNED_BYTE:p=p||e.constructor!==Uint8Array;break;case o.BYTE:p=p||e.constructor!==Int8Array;break;case o.UNSIGNED_SHORT:p=p||e.constructor!==Uint16Array;break;case o.SHORT:p=p||e.constructor!==Int16Array;break;case o.UNSIGNED_INT:p=p||e.constructor!==Uint32Array;break;case o.INT:p=p||e.constructor!==Int32Array;break;default:throw new Error('Error initing DataLayer "'+c+'".  Unsupported type "'+u+'" for WebGLCompute.initDataLayer.')}if(p)throw new Error("Invalid TypedArray of type "+e.constructor.name+' supplied to DataLayer "'+c+'" of type "'+u+'".');var h=e,d=r*i*l,_=h.length!==d,g=f===o.HALF_FLOAT;if(u!==f||_||g){switch(f){case o.HALF_FLOAT:h=new Uint16Array(d);break;case o.FLOAT:h=new Float32Array(d);break;case o.UNSIGNED_BYTE:h=new Uint8Array(d);break;case o.BYTE:h=new Int8Array(d);break;case o.UNSIGNED_SHORT:h=new Uint16Array(d);break;case o.SHORT:h=new Int16Array(d);break;case o.UNSIGNED_INT:h=new Uint32Array(d);break;case o.INT:h=new Int32Array(d);break;default:throw new Error("Error initing "+c+".  Unsupported internalType "+f+" for WebGLCompute.initDataLayer.")}for(var m=g?new DataView(h.buffer):null,v=0,y=e.length/s;v<y;v++)for(var b=0;b<s;b++){var T=e[v*s+b],E=v*l+b;g?n.setFloat16(m,2*E,T,!0):h[E]=T}}return h}},e.prototype.initBuffers=function(e){for(var t=this,r=t.name,n=t.numBuffers,i=t.gl,o=t.width,a=t.height,s=t.glInternalFormat,l=t.glFormat,u=t.glType,f=t.glFilter,c=t.glWrapS,p=t.glWrapT,h=t.writable,d=t.errorCallback,_=this.validateDataArray(e),g=0;g<n;g++){var m=i.createTexture();if(!m)return void d('Could not init texture for DataLayer "'+r+'": '+i.getError()+".");i.bindTexture(i.TEXTURE_2D,m),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_S,c),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_T,p),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,f),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,f),i.texImage2D(i.TEXTURE_2D,0,s,o,a,0,l,u,_||null);var v={texture:m};if(h){var y=i.createFramebuffer();if(!y)return void d('Could not init framebuffer for DataLayer "'+r+'": '+i.getError()+".");i.bindFramebuffer(i.FRAMEBUFFER,y),i.framebufferTexture2D(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,m,0);var b=i.checkFramebufferStatus(i.FRAMEBUFFER);b!=i.FRAMEBUFFER_COMPLETE&&d('Invalid status for framebuffer for DataLayer "'+r+'": '+b+"."),v.framebuffer=y}this.buffers.push(v)}i.bindFramebuffer(i.FRAMEBUFFER,null)},e.prototype.getCurrentStateTexture=function(){return this.textureOverrides&&this.textureOverrides[this._bufferIndex]?this.textureOverrides[this._bufferIndex]:this.buffers[this._bufferIndex].texture},e.prototype.getPreviousStateTexture=function(e){if(void 0===e&&(e=-1),1===this.numBuffers)throw new Error('Cannot call getPreviousStateTexture on DataLayer "'+this.name+'" with only one buffer.');var t=this._bufferIndex+e+this.numBuffers;if(t<0||t>=this.numBuffers)throw new Error("Invalid index "+e+" passed to getPreviousStateTexture on DataLayer "+this.name+" with "+this.numBuffers+" buffers.");return this.textureOverrides&&this.textureOverrides[t]?this.textureOverrides[t]:this.buffers[t].texture},e.prototype._usingTextureOverrideForCurrentBuffer=function(){return this.textureOverrides&&this.textureOverrides[this.bufferIndex]},e.prototype._bindOutputBufferForWrite=function(e){this.gl,e&&(this._bufferIndex=(this._bufferIndex+1)%this.numBuffers),this._bindOutputBuffer(),this.textureOverrides&&(this.textureOverrides[this._bufferIndex]=void 0)},e.prototype._bindOutputBuffer=function(){var e=this.gl,t=this.buffers[this._bufferIndex].framebuffer;if(!t)throw new Error('DataLayer "'+this.name+'" is not writable.');e.bindFramebuffer(e.FRAMEBUFFER,t)},e.prototype.setData=function(e){this.destroyBuffers(),this.initBuffers(e)},e.prototype.resize=function(t,r){var n=e.calcSize(t,this.name),i=n.length,o=n.width,a=n.height;this.length=i,this.width=o,this.height=a,this.destroyBuffers(),this.initBuffers(r)},e.prototype.clear=function(){this.destroyBuffers(),this.initBuffers()},e.prototype.getDimensions=function(){return[this.width,this.height]},e.prototype.getLength=function(){if(!this.length)throw new Error('Cannot call getLength() on 2D DataLayer "'+this.name+'".');return this.length},e.prototype.destroyBuffers=function(){var e=this.gl,t=this.buffers;t.forEach((function(t){var r=t.framebuffer,n=t.texture;e.deleteTexture(n),r&&e.deleteFramebuffer(r),delete t.texture,delete t.framebuffer})),t.length=0,delete this.textureOverrides},e.prototype.destroy=function(){this.destroyBuffers(),delete this.gl,delete this.errorCallback},e}();t.DataLayer=l},664:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GPUProgram=void 0;var n=r(627),i=r(738),o=r(593),a="DEFAULT",s="SEGMENT",l="POINTS",u="VECTOR_FIELD",f="INDEXED_LINES",c=function(){function e(e){var t=this;this.uniforms={};var r=e.gl,i=e.errorCallback,a=e.name,s=e.fragmentShader,l=e.glslVersion,u=e.uniforms,f=e.defines;if(this.gl=r,this.errorCallback=i,this.name=a,this.glslVersion=l,"string"==typeof s||"string"==typeof s[0]){var c="string"==typeof s?s:s.join("\n");f&&(c=Object.keys(f).map((function(e){if(!n.isString(e)||!n.isString(f[e]))throw new Error("GPUProgram defines must be passed in as key value pairs that are both strings, got key value pair of type "+typeof e+" : "+typeof f[e]+".");return"#define "+e+" "+f[e]+"\n"})).join("\n")+c);var p=o.compileShader(r,i,c,r.FRAGMENT_SHADER,a);if(!p)return void i('Unable to compile fragment shader for program "'+a+'".');this.fragmentShader=p}else if(f)throw new Error('Unable to attach defines to program "'+a+'" because fragment shader is already compiled.');null==u||u.forEach((function(e){var r=e.name,n=e.value,i=e.dataType;t.setUniform(r,n,i)}))}return e.prototype.initProgram=function(e,t){var r=this,n=r.gl,i=r.fragmentShader,o=r.errorCallback,a=r.uniforms,s=n.createProgram();if(s){if(n.attachShader(s,i),n.attachShader(s,e),n.linkProgram(s),n.getProgramParameter(s,n.LINK_STATUS)){for(var l=Object.keys(a),u=0;u<l.length;u++){var f=l[u],c=a[f],p=c.value,h=c.type;this.setProgramUniform(s,t,f,p,h)}return s}o('Program "'+name+'" failed to link: '+n.getProgramInfoLog(s))}else o("Unable to init gl program: "+name+".")},Object.defineProperty(e.prototype,"defaultProgram",{get:function(){if(this._defaultProgram)return this._defaultProgram;if(void 0===e.defaultVertexShader){var t=this,n=t.gl,s=t.name,l=t.errorCallback,u=t.glslVersion===i.GLSL3?r(435):r(790),f=o.compileShader(n,l,u,n.VERTEX_SHADER,s);if(!f)return void l('Unable to compile default vertex shader for program "'+s+'".');e.defaultVertexShader=f}var c=this.initProgram(e.defaultVertexShader,a);return this._defaultProgram=c,this._defaultProgram},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"segmentProgram",{get:function(){if(this._segmentProgram)return this._segmentProgram;if(void 0===e.segmentVertexShader){var t=this,n=t.gl,a=t.name,l=t.errorCallback,u=t.glslVersion===i.GLSL3?r(218):r(852),f=o.compileShader(n,l,u,n.VERTEX_SHADER,a);if(!f)return void l('Unable to compile segment vertex shader for program "'+a+'".');e.segmentVertexShader=f}var c=this.initProgram(e.segmentVertexShader,s);return this._segmentProgram=c,this._segmentProgram},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pointsProgram",{get:function(){if(this._pointsProgram)return this._pointsProgram;if(void 0===e.pointsVertexShader){var t=this,n=t.gl,a=t.name,s=t.errorCallback,u=t.glslVersion===i.GLSL3?pointsVertexShaderSource_glsl3:r(198);if(void 0===u)throw new Error("Need to write glsl3 version of pointsVertexShader.");var f=o.compileShader(n,s,u,n.VERTEX_SHADER,a);if(!f)return void s('Unable to compile points vertex shader for program "'+a+'".');e.pointsVertexShader=f}var c=this.initProgram(e.pointsVertexShader,l);return this._pointsProgram=c,this._pointsProgram},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"vectorFieldProgram",{get:function(){if(this._vectorFieldProgram)return this._vectorFieldProgram;if(void 0===e.vectorFieldVertexShader){var t=this,n=t.gl,a=t.name,s=t.errorCallback,l=t.glslVersion===i.GLSL3?vectorFieldVertexShaderSource_glsl3:r(502);if(void 0===l)throw new Error("Need to write glsl3 version of vectorFieldVertexShader.");var f=o.compileShader(n,s,l,n.VERTEX_SHADER,a);if(!f)return void s('Unable to compile vector field vertex shader for program "'+a+'".');e.vectorFieldVertexShader=f}var c=this.initProgram(e.vectorFieldVertexShader,u);return this._vectorFieldProgram=c,this._vectorFieldProgram},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"indexedLinesProgram",{get:function(){if(this._indexedLinesProgram)return this._indexedLinesProgram;if(void 0===e.indexedLinesVertexShader){var t=this,n=t.gl,a=t.name,s=t.errorCallback,l=t.glslVersion===i.GLSL3?indexedLinesVertexShaderSource_glsl3:r(968);if(void 0===l)throw new Error("Need to write glsl3 version of indexedLinesVertexShader.");var u=o.compileShader(n,s,l,n.VERTEX_SHADER,a);if(!u)return void s('Unable to compile vector field vertex shader for program "'+a+'".');e.indexedLinesVertexShader=u}var c=this.initProgram(e.indexedLinesVertexShader,f);return this._indexedLinesProgram=c,this._indexedLinesProgram},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activePrograms",{get:function(){var e=[];return this._defaultProgram&&e.push({program:this._defaultProgram,programName:a}),this._segmentProgram&&e.push({program:this._segmentProgram,programName:s}),this._pointsProgram&&e.push({program:this._pointsProgram,programName:l}),this._vectorFieldProgram&&e.push({program:this._vectorFieldProgram,programName:u}),this._indexedLinesProgram&&e.push({program:this._indexedLinesProgram,programName:f}),e},enumerable:!1,configurable:!0}),e.prototype.uniformTypeForValue=function(e,t){var r=this;if(t===i.FLOAT){if(n.isArray(e))e.forEach((function(t){if(!n.isNumber(t))throw new Error("Invalid uniform value: "+e+' for program "'+r.name+'", expected float or float[] of length 1-4.')}));else if(!n.isNumber(e))throw new Error("Invalid uniform value: "+e+' for program "'+this.name+'", expected float or float[] of length 1-4.');if(!n.isArray(e)||1===e.length)return i.FLOAT_1D_UNIFORM;if(2===e.length)return i.FLOAT_2D_UNIFORM;if(3===e.length)return i.FLOAT_3D_UNIFORM;if(4===e.length)return i.FLOAT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e+' for program "'+this.name+'", expected float or float[] of length 1-4.')}if(t===i.INT){if(n.isArray(e))e.forEach((function(t){if(!n.isInteger(t))throw new Error("Invalid uniform value: "+e+' for program "'+r.name+'", expected int or int[] of length 1-4.')}));else if(!n.isInteger(e))throw new Error("Invalid uniform value: "+e+' for program "'+this.name+'", expected int or int[] of length 1-4.');if(!n.isArray(e)||1===e.length)return i.INT_1D_UNIFORM;if(2===e.length)return i.INT_2D_UNIFORM;if(3===e.length)return i.INT_3D_UNIFORM;if(4===e.length)return i.INT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e+' for program "'+this.name+'", expected int or int[] of length 1-4.')}throw new Error("Invalid uniform data type: "+t+' for program "'+this.name+'", expected '+i.FLOAT+" or "+i.INT+".")},e.prototype.setProgramUniform=function(e,t,r,n,o){var a,s=this,l=s.gl,u=s.uniforms,f=s.errorCallback;l.useProgram(e);var c=null===(a=u[r])||void 0===a?void 0:a.location[t];if(void 0===c){var p=l.getUniformLocation(e,r);if(!p)return void f('Could not init uniform "'+r+'" for program "'+this.name+'".\nCheck that uniform is present in shader code, unused uniforms may be removed by compiler.\nAlso check that uniform type in shader code matches type '+o+".\nError code: "+l.getError()+".");c=p,u[r]&&(u[r].location[t]=c)}switch(o){case i.FLOAT_1D_UNIFORM:l.uniform1f(c,n);break;case i.FLOAT_2D_UNIFORM:l.uniform2fv(c,n);break;case i.FLOAT_3D_UNIFORM:l.uniform3fv(c,n);break;case i.FLOAT_4D_UNIFORM:l.uniform4fv(c,n);break;case i.INT_1D_UNIFORM:l.uniform1i(c,n);break;case i.INT_2D_UNIFORM:l.uniform2iv(c,n);break;case i.INT_3D_UNIFORM:l.uniform3iv(c,n);break;case i.INT_4D_UNIFORM:l.uniform4iv(c,n);break;default:throw new Error("Unknown uniform type "+o+' for GPUProgram "'+this.name+'".')}},e.prototype.setUniform=function(e,t,r){var n,i=this.activePrograms,o=this.uniforms,a=null===(n=o[e])||void 0===n?void 0:n.type;if(r){var s=this.uniformTypeForValue(t,r);if(void 0===a)a=s;else if(a!==s)throw new Error('Uniform "'+e+'" for GPUProgram "'+this.name+'" cannot change from type '+a+" to type "+s+".")}if(void 0===a)throw new Error('Unknown type for uniform "'+e+'", please pass in dataType to GPUProgram.setUniform when initing a new uniform.');o[e]?o[e].value=t:o[e]={type:a,location:{},value:t};for(var l=0;l<i.length;l++){var u=i[l],f=u.program,c=u.programName;this.setProgramUniform(f,c,e,t,a)}},e.prototype.setVertexUniform=function(e,t,r,n){var i,o=this.uniformTypeForValue(r,n);if(void 0===e)throw new Error("Must pass in valid WebGLProgram to setVertexUniform, got undefined.");if(e===this._defaultProgram?i=a:e===this._segmentProgram?i=s:e===this._pointsProgram?i=l:e===this._vectorFieldProgram?i=u:e===this._indexedLinesProgram&&(i=f),void 0===i)throw new Error("Could not find valid programName for WebGLProgram.");this.setProgramUniform(e,i,t,r,o)},e.prototype.destroy=function(){var e=this,t=e.gl,r=e.fragmentShader;e.activePrograms.forEach((function(e){var r=e.program;t.deleteProgram(r)})),t.deleteShader(r),delete this._defaultProgram,delete this._segmentProgram,delete this._pointsProgram,delete this._vectorFieldProgram,delete this._indexedLinesProgram,delete this.fragmentShader,delete this.gl,delete this.errorCallback,delete this.program},e}();t.GPUProgram=c},215:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.WebGLCompute=void 0;var i=r(162),o=r(809),a=r(930),s=r(738),l=r(664),u=r(406),f=r(593),c=r(501),p=r(627),h=function(){function e(e,t,n){void 0===t&&(t=function(e){throw new Error(e)}),this.errorState=!1,this._circlePositionsBuffer={};var i=["canvas","context","antialias","glslVersion"];Object.keys(e).forEach((function(e){if(i.indexOf(e)<0)throw new Error("Invalid key "+e+" passed to WebGLCompute.constructor.  Valid keys are "+i.join(", ")+".")}));var o=this;this.errorCallback=function(e){o.errorState||(o.errorState=!0,t(e))};var a=e.canvas,l=e.context;if(!l){var u={};if(void 0!==e.antialias&&(u.antialias=e.antialias),null===(l=a.getContext("webgl2",u)||a.getContext("webgl",u)||a.getContext("experimental-webgl",u)))return void this.errorCallback("Unable to initialize WebGL context.")}f.isWebGL2(l)?console.log("Using WebGL 2.0 context."):console.log("Using WebGL 1.0 context."),this.gl=l,this.renderer=n;var c=void 0===e.glslVersion?s.GLSL1:e.glslVersion;this.glslVersion=c,f.isWebGL2(l)||c!==s.GLSL3||console.warn("GLSL3.x is incompatible with WebGL1.0 contexts."),l.disable(l.DEPTH_TEST),l.pixelStorei(l.UNPACK_ALIGNMENT,1),this.copyFloatProgram=this.initProgram({name:"copyFloat",fragmentShader:c===s.GLSL3?r(518):r(541),uniforms:[{name:"u_state",value:0,dataType:s.INT}]}),c===s.GLSL3?(this.copyIntProgram=this.initProgram({name:"copyInt",fragmentShader:r(546),uniforms:[{name:"u_state",value:0,dataType:s.INT}]}),this.copyUintProgram=this.initProgram({name:"copyUint",fragmentShader:r(374),uniforms:[{name:"u_state",value:0,dataType:s.INT}]})):(this.copyIntProgram=this.copyFloatProgram,this.copyUintProgram=this.copyFloatProgram),l.bindBuffer(l.ARRAY_BUFFER,null),this.onResize(a),this.maxNumTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),console.log(this.maxNumTextures+" textures max.")}return e.initWithThreeRenderer=function(t,r,i){return new e(n({canvas:t.domElement,context:t.getContext()},r),i,t)},Object.defineProperty(e.prototype,"singleColorProgram",{get:function(){if(void 0===this._singleColorProgram){var e=this.initProgram({name:"singleColor",fragmentShader:this.glslVersion===s.GLSL3?r(805):r(971)});this._singleColorProgram=e}return this._singleColorProgram},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"singleColorWithWrapCheckProgram",{get:function(){if(void 0===this._singleColorWithWrapCheckProgram){var e=this.initProgram({name:"singleColorWithWrapCheck",fragmentShader:this.glslVersion===s.GLSL3?r(674):r(425)});this._singleColorWithWrapCheckProgram=e}return this._singleColorWithWrapCheckProgram},enumerable:!1,configurable:!0}),e.prototype.isWebGL2=function(){return f.isWebGL2(this.gl)},Object.defineProperty(e.prototype,"quadPositionsBuffer",{get:function(){if(void 0===this._quadPositionsBuffer){var e=new Float32Array([-1,-1,1,-1,-1,1,1,1]);this._quadPositionsBuffer=this.initVertexBuffer(e)}return this._quadPositionsBuffer},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"boundaryPositionsBuffer",{get:function(){if(void 0===this._boundaryPositionsBuffer){var e=new Float32Array([-1,-1,1,-1,1,1,-1,1,-1,-1]);this._boundaryPositionsBuffer=this.initVertexBuffer(e)}return this._boundaryPositionsBuffer},enumerable:!1,configurable:!0}),e.prototype.getCirclePositionsBuffer=function(e){if(null==this._circlePositionsBuffer[e]){for(var t=[0,0],r=0;r<=e;r++)t.push(Math.cos(2*Math.PI*r/e),Math.sin(2*Math.PI*r/e));var n=new Float32Array(t),i=this.initVertexBuffer(n);this._circlePositionsBuffer[e]=i}return this._circlePositionsBuffer[e]},e.prototype.initVertexBuffer=function(e){var t=this.errorCallback,r=this.gl,n=r.createBuffer();if(n)return r.bindBuffer(r.ARRAY_BUFFER,n),r.bufferData(r.ARRAY_BUFFER,e,r.STATIC_DRAW),n;t("Unable to allocate gl buffer.")},e.prototype.initProgram=function(e){var t=["name","fragmentShader","uniforms","defines"];Object.keys(e).forEach((function(r){if(t.indexOf(r)<0)throw new Error("Invalid key "+r+" passed to WebGLCompute.initProgram with name "+e.name+".  Valid keys are "+t.join(", ")+".")}));var r=this,i=r.gl,o=r.errorCallback,a=r.glslVersion;return new l.GPUProgram(n(n({},e),{gl:i,errorCallback:o,glslVersion:a}))},e.prototype.initDataLayer=function(e){var t=["name","dimensions","type","numComponents","data","filter","wrapS","wrapT","writable","numBuffers"];Object.keys(e).forEach((function(r){if(t.indexOf(r)<0)throw new Error("Invalid key "+r+" passed to WebGLCompute.initDataLayer with name "+e.name+".  Valid keys are "+t.join(", ")+".")}));var r=this,i=r.gl,o=r.errorCallback,s=r.glslVersion;return new a.DataLayer(n(n({},e),{gl:i,glslVersion:s,errorCallback:o}))},e.prototype.initTexture=function(e){var t=["name","url","filter","wrapS","wrapT","format","type","onLoad"];Object.keys(e).forEach((function(r){if(t.indexOf(r)<0)throw new Error("Invalid key "+r+" passed to WebGLCompute.initTexture with name "+e.name+".  Valid keys are "+t.join(", ")+".")}));var r=e.url,n=e.name;if(!p.isString(r))throw new Error("Expected WebGLCompute.initTexture params to have url of type string, got "+r+" of type "+typeof r+".");if(!p.isString(n))throw new Error("Expected WebGLCompute.initTexture params to have name of type string, got "+n+" of type "+typeof n+".");var i=void 0!==e.filter?e.filter:s.NEAREST;if(!p.isValidFilterType(i))throw new Error("Invalid filter: "+i+' for DataLayer "'+n+'", must be '+p.validFilterTypes.join(", ")+".");var o=void 0!==e.wrapS?e.wrapS:s.CLAMP_TO_EDGE;if(!p.isValidWrapType(o))throw new Error("Invalid wrapS: "+o+' for DataLayer "'+n+'", must be '+p.validWrapTypes.join(", ")+".");var a=void 0!==e.wrapT?e.wrapT:s.CLAMP_TO_EDGE;if(!p.isValidWrapType(a))throw new Error("Invalid wrapT: "+a+' for DataLayer "'+n+'", must be '+p.validWrapTypes.join(", ")+".");var l=void 0!==e.format?e.format:s.RGBA;if(!p.isValidTextureFormatType(l))throw new Error("Invalid format: "+l+' for DataLayer "'+n+'", must be '+p.validTextureFormatTypes.join(", ")+".");var u=void 0!==e.type?e.type:s.UNSIGNED_BYTE;if(!p.isValidTextureDataType(u))throw new Error("Invalid type: "+u+' for DataLayer "'+n+'", must be '+p.validTextureDataTypes.join(", ")+".");var c=this.gl,h=this.errorCallback,d=c.createTexture();if(null===d)throw new Error("Unable to init glTexture.");c.bindTexture(c.TEXTURE_2D,d);var _=c.RGBA,g=c[l],m=c[u],v=new Uint8Array([0,0,0,0]);c.texImage2D(c.TEXTURE_2D,0,_,1,1,0,g,m,v);var y=new Image;return y.onload=function(){c.bindTexture(c.TEXTURE_2D,d),c.texImage2D(c.TEXTURE_2D,0,_,g,m,y),f.isPowerOf2(y.width)&&f.isPowerOf2(y.height)||console.warn("Texture "+n+" dimensions ["+y.width+", "+y.height+"] are not power of 2."),c.texParameteri(c.TEXTURE_2D,c.TEXTURE_WRAP_S,c[o]),c.texParameteri(c.TEXTURE_2D,c.TEXTURE_WRAP_T,c[a]),c.texParameteri(c.TEXTURE_2D,c.TEXTURE_MIN_FILTER,c[i]),c.texParameteri(c.TEXTURE_2D,c.TEXTURE_MAG_FILTER,c[i]),e.onLoad&&e.onLoad(d)},y.onerror=function(e){h("Error loading image "+n+": "+e)},y.src=r,d},e.prototype.onResize=function(e){var t=e.clientWidth,r=e.clientHeight;e.width=t,e.height=r,this.width=t,this.height=r},e.prototype.drawSetup=function(e,t,r,n){var i=this.gl;if(e){var o=r.map((function(e){return e.getCurrentStateTexture?e.getCurrentStateTexture():e}));this.setOutputLayer(t,r,n),i.useProgram(e);for(var a=0;a<o.length;a++)i.activeTexture(i.TEXTURE0+a),i.bindTexture(i.TEXTURE_2D,o[a])}},e.prototype.copyProgramForType=function(e){switch(e){case s.HALF_FLOAT:case s.FLOAT:return this.copyFloatProgram;case s.UNSIGNED_BYTE:case s.UNSIGNED_SHORT:case s.UNSIGNED_INT:return this.copyUintProgram;case s.BYTE:case s.SHORT:case s.INT:return this.copyIntProgram;default:throw new Error("Invalid type: "+e+" passed to WebGLCompute.copyProgramForType.")}},e.prototype.passThroughLayerDataFromInputToOutput=function(e){var t=this.copyProgramForType(e.internalType);this.step(t,[e],e)},e.prototype.setOutputLayer=function(e,t,r){var n=this.gl;if(r){if(t.indexOf(r)>-1){if(1===r.numBuffers)throw new Error("\nCannot use same buffer for input and output of a program.\nTry increasing the number of buffers in your output layer to at least 2 so you\ncan render to nextState using currentState as an input.");e?r._bindOutputBufferForWrite(!0):(this.passThroughLayerDataFromInputToOutput(r),r._bindOutputBufferForWrite(!1))}else e||r._usingTextureOverrideForCurrentBuffer()&&this.passThroughLayerDataFromInputToOutput(r),r._bindOutputBufferForWrite(!1);var i=r.getDimensions(),o=i[0],a=i[1];n.viewport(0,0,o,a)}else{n.bindFramebuffer(n.FRAMEBUFFER,null);var s=this.width,l=this.height;n.viewport(0,0,s,l)}},e.prototype.setPositionAttribute=function(e){var t=this.gl,r=t.getAttribLocation(e,"a_internal_position");t.vertexAttribPointer(r,2,t.FLOAT,!1,0,0),t.enableVertexAttribArray(r)},e.prototype.setIndexAttribute=function(e){var t=this.gl,r=t.getAttribLocation(e,"a_internal_index");t.vertexAttribPointer(r,1,t.FLOAT,!1,0,0),t.enableVertexAttribArray(r)},e.prototype.step=function(e,t,r,n){void 0===t&&(t=[]);var i=this,o=i.gl,l=i.errorState,u=i.quadPositionsBuffer;if(!l){var f=e.defaultProgram;t=t.constructor===a.DataLayer?[t]:t,this.drawSetup(e.defaultProgram,!0,t,r),e.setVertexUniform(f,"u_internal_scale",[1,1],s.FLOAT),e.setVertexUniform(f,"u_internal_translation",[0,0],s.FLOAT),o.bindBuffer(o.ARRAY_BUFFER,u),this.setPositionAttribute(e.defaultProgram),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.TRIANGLE_STRIP,0,4),o.disable(o.BLEND)}},e.prototype.stepBoundary=function(e,t,r,n){void 0===t&&(t=[]);var i=this,o=i.gl,l=i.errorState,u=i.boundaryPositionsBuffer;if(!l){var f=e.defaultProgram;t=t.constructor===a.DataLayer?[t]:t,this.drawSetup(f,!1,t,r);var c=r?r.getDimensions():[this.width,this.height],p=[1/c[0],1/c[1]];if(e.setVertexUniform(f,"u_internal_scale",[1-p[0],1-p[1]],s.FLOAT),e.setVertexUniform(f,"u_internal_translation",p,s.FLOAT),o.bindBuffer(o.ARRAY_BUFFER,u),this.setPositionAttribute(f),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),null==n?void 0:n.singleEdge)switch(null==n?void 0:n.singleEdge){case"LEFT":o.drawArrays(o.LINES,3,2);break;case"RIGHT":o.drawArrays(o.LINES,1,2);break;case"TOP":o.drawArrays(o.LINES,2,2);break;case"BOTTOM":o.drawArrays(o.LINES,0,2);break;default:throw new Error("Unknown boundary edge type: "+(null==n?void 0:n.singleEdge)+".")}else o.drawArrays(o.LINE_LOOP,0,4);o.disable(o.BLEND)}},e.prototype.stepNonBoundary=function(e,t,r,n){void 0===t&&(t=[]);var i=this,o=i.gl,l=i.errorState,u=i.quadPositionsBuffer;if(!l){var f=e.defaultProgram;t=t.constructor===a.DataLayer?[t]:t,this.drawSetup(f,!1,t,r);var c=r?r.getDimensions():[this.width,this.height],p=[1/c[0],1/c[1]];e.setVertexUniform(f,"u_internal_scale",[1-2*p[0],1-2*p[1]],s.FLOAT),e.setVertexUniform(f,"u_internal_translation",p,s.FLOAT),o.bindBuffer(o.ARRAY_BUFFER,u),this.setPositionAttribute(f),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.TRIANGLE_STRIP,0,4),o.disable(o.BLEND)}},e.prototype.stepCircle=function(e,t,r,n,i,o){void 0===n&&(n=[]);var l=this.gl,u=this.errorState,f=i?i.getDimensions():[this.width,this.height],c=f[0],p=f[1];if(!u){var h=e.defaultProgram;n=n.constructor===a.DataLayer?[n]:n,this.drawSetup(h,!1,n,i),e.setVertexUniform(h,"u_internal_scale",[2*r/c,2*r/p],s.FLOAT),e.setVertexUniform(h,"u_internal_translation",[2*t[0]/c-1,2*t[1]/p-1],s.FLOAT);var d=(null==o?void 0:o.numSegments)?null==o?void 0:o.numSegments:18;if(d<3)throw new Error("numSegments for WebGLCompute.stepCircle must be greater than 2, got "+d+".");l.bindBuffer(l.ARRAY_BUFFER,this.getCirclePositionsBuffer(d)),this.setPositionAttribute(h),(null==o?void 0:o.shouldBlendAlpha)&&(l.enable(l.BLEND),l.blendFunc(l.SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA)),l.drawArrays(l.TRIANGLE_FAN,0,d+2),l.disable(l.BLEND)}},e.prototype.stepSegment=function(e,t,r,n,i,o,l){void 0===i&&(i=[]);var u=this.gl,f=this.errorState,c=o?o.getDimensions():[this.width,this.height],p=c[0],h=c[1];if(!f){var d=e.segmentProgram;i=i.constructor===a.DataLayer?[i]:i,this.drawSetup(d,!1,i,o),e.setVertexUniform(d,"u_internal_halfThickness",n/2,s.FLOAT),e.setVertexUniform(d,"u_internal_scale",[2/p,2/h],s.FLOAT);var _=t[0]-r[0],g=t[1]-r[1],m=Math.atan2(g,_);e.setVertexUniform(d,"u_internal_rotation",m,s.FLOAT);var v=(t[0]+r[0])/2,y=(t[1]+r[1])/2,b=Math.sqrt(_*_+g*g),T=(null==l?void 0:l.numCapSegments)?2*(null==l?void 0:l.numCapSegments):18;if(null==l?void 0:l.noEndCaps)e.setVertexUniform(d,"u_internal_length",b,s.FLOAT),e.setVertexUniform(d,"u_internal_translation",[2*v/p-1,2*y/h-1],s.FLOAT),u.bindBuffer(u.ARRAY_BUFFER,this.quadPositionsBuffer);else{if(T<6||T%6!=0)throw new Error("numSegments for WebGLCompute.stepSegment must be divisible by 6, got "+T+".");e.setVertexUniform(d,"u_internal_translation",[2*v/p-1,2*y/h-1],s.FLOAT),e.setVertexUniform(d,"u_internal_length",b-2*Math.sin(Math.PI/T),s.FLOAT),u.bindBuffer(u.ARRAY_BUFFER,this.getCirclePositionsBuffer(T))}this.setPositionAttribute(d),(null==l?void 0:l.shouldBlendAlpha)&&(u.enable(u.BLEND),u.blendFunc(u.SRC_ALPHA,u.ONE_MINUS_SRC_ALPHA)),(null==l?void 0:l.noEndCaps)?u.drawArrays(u.TRIANGLE_STRIP,0,4):u.drawArrays(u.TRIANGLE_FAN,0,T+2),u.disable(u.BLEND)}},e.prototype.drawPoints=function(e,t,r,n){var i=this,o=i.gl,l=i.errorState,u=i.pointIndexArray,f=r?r.getDimensions():[this.width,this.height],c=f[0],p=f[1];if(!l){if((e=e.constructor===a.DataLayer?[e]:e).length<1)throw new Error("Invalid inputLayers for drawPoints: must pass a position DataLayer as first element of inputLayers.");var h=e[0];if(2!==h.numComponents&&4!==h.numComponents)throw new Error('WebGLCompute.drawPoints() must be passed a position DataLayer with either 2 or 4 components, got position DataLayer "'+h.name+'" with '+h.numComponents+" components.");var d=h.getLength(),_=(null==t?void 0:t.count)||d;if(_>d)throw new Error("Invalid count "+_+" for position DataLayer of length "+d+".");if(void 0===n){n=this.singleColorProgram;var g=(null==t?void 0:t.color)||[1,0,0];n.setUniform("u_color",g,s.FLOAT)}var m=n.pointsProgram;this.drawSetup(m,!1,e,r),n.setVertexUniform(m,"u_internal_positions",0,s.INT),n.setVertexUniform(m,"u_internal_scale",[1/c,1/p],s.FLOAT),n.setVertexUniform(m,"u_internal_positionWithAccumulation",4===h.numComponents?1:0,s.INT);var v=(null==t?void 0:t.pointSize)||1;n.setVertexUniform(m,"u_internal_pointSize",v,s.FLOAT);var y=h.getDimensions();if(n.setVertexUniform(m,"u_internal_positionsDimensions",y,s.FLOAT),n.setVertexUniform(m,"u_internal_wrapX",(null==t?void 0:t.wrapX)?1:0,s.INT),n.setVertexUniform(m,"u_internal_wrapY",(null==t?void 0:t.wrapY)?1:0,s.INT),void 0===this.pointIndexBuffer||u&&u.length<_){for(var b=new Float32Array(d),T=0;T<d;T++)b[T]=T;this.pointIndexArray=b,this.pointIndexBuffer=this.initVertexBuffer(b)}o.bindBuffer(o.ARRAY_BUFFER,this.pointIndexBuffer),this.setIndexAttribute(m),!1!==(null==t?void 0:t.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.POINTS,0,_),o.disable(o.BLEND)}},e.prototype.drawVectorField=function(e,t,r,n){var i=this,o=i.gl,l=i.errorState,u=i.vectorFieldIndexArray,f=r?r.getDimensions():[this.width,this.height],c=f[0],p=f[1];if(!l){if((e=e.constructor===a.DataLayer?[e]:e).length<1)throw new Error("Invalid inputLayers for drawVectorField: must pass a vector DataLayer as first element of inputLayers.");var h=e[0];if(2!==h.numComponents)throw new Error('WebGLCompute.drawVectorField() must be passed a vector DataLayer with 2 components, got vector DataLayer "'+h.name+'" with '+h.numComponents+" components.");if(void 0===n){n=this.singleColorProgram;var d=(null==t?void 0:t.color)||[1,0,0];n.setUniform("u_color",d,s.FLOAT)}var _=n.vectorFieldProgram;this.drawSetup(_,!1,e,r),n.setVertexUniform(_,"u_internal_vectors",0,s.INT);var g=(null==t?void 0:t.vectorScale)||1;n.setVertexUniform(_,"u_internal_scale",[g/c,g/p],s.FLOAT);var m=(null==t?void 0:t.vectorSpacing)||10,v=[Math.floor(c/m),Math.floor(p/m)];n.setVertexUniform(_,"u_internal_dimensions",v,s.FLOAT);var y=2*v[0]*v[1];if(void 0===this.vectorFieldIndexBuffer||u&&u.length<y){for(var b=new Float32Array(y),T=0;T<y;T++)b[T]=T;this.vectorFieldIndexArray=b,this.vectorFieldIndexBuffer=this.initVertexBuffer(b)}o.bindBuffer(o.ARRAY_BUFFER,this.vectorFieldIndexBuffer),this.setIndexAttribute(_),!1!==(null==t?void 0:t.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.LINES,0,y),o.disable(o.BLEND)}},e.prototype.drawIndexedLines=function(e,t,r,n,i){var o=this.gl,l=this.errorState,u=n?n.getDimensions():[this.width,this.height],f=u[0],c=u[1];if(!l){if((e=e.constructor===a.DataLayer?[e]:e).length<1)throw new Error("Invalid inputLayers for drawIndexedLines: must pass a position DataLayer as first element of inputLayers.");var p=e[0];if(2!==p.numComponents&&4!==p.numComponents)throw new Error('WebGLCompute.drawIndexedLines() must be passed a position DataLayer with either 2 or 4 components, got position DataLayer "'+p.name+'" with '+p.numComponents+" components.");if(void 0===i){i=(null==r?void 0:r.wrapX)||(null==r?void 0:r.wrapY)?this.singleColorWithWrapCheckProgram:this.singleColorProgram;var h=(null==r?void 0:r.color)||[1,0,0];i.setUniform("u_color",h,s.FLOAT)}var d=i.indexedLinesProgram;this.drawSetup(d,!1,e,n);var _=(null==r?void 0:r.count)?r.count:t.length;i.setVertexUniform(d,"u_internal_positions",0,s.INT),i.setVertexUniform(d,"u_internal_scale",[1/f,1/c],s.FLOAT),i.setVertexUniform(d,"u_internal_positionWithAccumulation",4===p.numComponents?1:0,s.INT);var g=p.getDimensions();if(i.setVertexUniform(d,"u_internal_positionsDimensions",g,s.FLOAT),i.setVertexUniform(d,"u_internal_wrapX",(null==r?void 0:r.wrapX)?1:0,s.INT),i.setVertexUniform(d,"u_internal_wrapY",(null==r?void 0:r.wrapY)?1:0,s.INT),void 0===this.indexedLinesIndexBuffer){var m=void 0;if(t.constructor!==Float32Array){m=new Float32Array(t.length);for(var v=0;v<_;v++)m[v]=t[v];console.warn("Converting indices array of type "+t.constructor+" to Float32Array in WebGLCompute.drawIndexedLines for WebGL compatibility, you may want to use a Float32Array to store this information so the conversion is not required.")}else m=t;this.indexedLinesIndexBuffer=this.initVertexBuffer(m)}else o.bindBuffer(o.ARRAY_BUFFER,this.indexedLinesIndexBuffer),o.bufferData(o.ARRAY_BUFFER,t,o.STATIC_DRAW);this.setIndexAttribute(d),!1!==(null==r?void 0:r.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.LINES,0,_),o.disable(o.BLEND)}},e.prototype.getContext=function(){return this.gl},e.prototype.getValues=function(e){var t=this.gl,r=this.glslVersion;e._bindOutputBuffer();var n,i=e.getDimensions(),o=i[0],a=i[1],l=e.glNumChannels,u=e.glType,f=e.glFormat,p=e.internalType;switch(p){case s.HALF_FLOAT:void 0!==t.FLOAT?(l=4,f=t.RGBA,u=t.FLOAT,n=new Float32Array(o*a*l)):n=new Uint16Array(o*a*l);break;case s.FLOAT:l=4,f=t.RGBA,n=new Float32Array(o*a*l);break;case s.UNSIGNED_BYTE:if(r===s.GLSL1){l=4,f=t.RGBA,n=new Uint8Array(o*a*l);break}l=4,f=t.RGBA_INTEGER,u=t.UNSIGNED_INT,n=new Uint32Array(o*a*l);break;case s.UNSIGNED_SHORT:l=4,f=t.RGBA_INTEGER,u=t.UNSIGNED_INT,n=new Uint32Array(o*a*l);break;case s.UNSIGNED_INT:l=4,f=t.RGBA_INTEGER,n=new Uint32Array(o*a*l);break;case s.BYTE:case s.SHORT:l=4,f=t.RGBA_INTEGER,u=t.INT,n=new Int32Array(o*a*l);break;case s.INT:l=4,f=t.RGBA_INTEGER,n=new Int32Array(o*a*l);break;default:throw new Error("Unsupported internalType "+p+" for getValues().")}if(this.readyToRead()){t.readPixels(0,0,o,a,f,u,n);var h=e.numComponents,d=e.type,_=o*a*h,g=p===s.HALF_FLOAT&&n.constructor===Uint16Array,m=g?new DataView(n.buffer):void 0,v=n;if(p!==d)switch(d){case s.HALF_FLOAT:case s.FLOAT:v=new Float32Array(_);break;case s.UNSIGNED_BYTE:v=new Uint8Array(_);break;case s.BYTE:v=new Int8Array(_);break;case s.UNSIGNED_SHORT:v=new Uint16Array(_);break;case s.SHORT:v=new Int16Array(_);break;case s.UNSIGNED_INT:v=new Uint32Array(_);break;case s.INT:v=new Int32Array(_);break;default:throw new Error("Unsupported type "+d+" for getValues().")}if(g||v!==n||h!==l)for(var y=0,b=o*a;y<b;y++)for(var T=y*l,E=y*h,w=0;w<h;w++)v[E+w]=g?c.getFloat16(m,2*(T+w),!0):n[T+w];return v.length!==_&&(v=v.slice(0,_)),v}throw new Error("Unable to read values from Buffer with status: "+t.checkFramebufferStatus(t.FRAMEBUFFER)+".")},e.prototype.readyToRead=function(){var e=this.gl;return e.checkFramebufferStatus(e.FRAMEBUFFER)==e.FRAMEBUFFER_COMPLETE},e.prototype.savePNG=function(e,t,r){void 0===t&&(t=e.name);var n=this.getValues(e),a=e.getDimensions(),l=a[0],u=a[1],f=document.createElement("canvas");f.width=l,f.height=u;for(var c=f.getContext("2d"),p=c.getImageData(0,0,l,u),h=p.data,d=e.type===s.FLOAT||e.type===s.HALF_FLOAT,_=0;_<u;_++)for(var g=0;g<l;g++){for(var m=_*l+g,v=(u-1-_)*l+g,y=0;y<e.numComponents;y++)h[4*v+y]=n[e.numComponents*m+y]*(d?255:1);e.numComponents<4&&(h[4*v+3]=255)}c.putImageData(p,0,0),f.toBlob((function(e){e?r?o.changeDpiBlob(e,r).then((function(e){i.saveAs(e,t+".png")})):i.saveAs(e,t+".png"):console.warn("Problem saving PNG, unable to init blob.")}),"image/png")},e.prototype.reset=function(){throw new Error("WebGLCompute.reset() not implemented.")},e.prototype.attachDataLayerToThreeTexture=function(e,t){if(!this.renderer)throw new Error("WebGLCompute was not inited with a renderer.");if(e.numBuffers>1)throw new Error('DataLayer "'+e.name+'" contains multiple WebGL textures (one for each buffer) that are flip-flopped during compute cycles, please choose a DataLayer with one buffer.');var r=this.renderer.properties.get(t);r.__webglTexture=e.getCurrentStateTexture(),r.__webglInit=!0},e.prototype.resetThreeState=function(){if(!this.renderer)throw new Error("WebGLCompute was not inited with a renderer.");var e=this.gl,t=this.renderer.getViewport(new u.Vector4);e.viewport(t.x,t.y,t.width,t.height),this.renderer.setRenderTarget(null),this.renderer.resetState()},e.prototype.destroy=function(){delete this.renderer},e}();t.WebGLCompute=h},581:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getExtension=t.EXT_COLOR_BUFFER_FLOAT=t.WEBGL_DEPTH_TEXTURE=t.OES_TEXTURE_HAlF_FLOAT_LINEAR=t.OES_TEXTURE_FLOAT_LINEAR=t.OES_TEXTURE_HALF_FLOAT=t.OES_TEXTURE_FLOAT=void 0;var r={};t.OES_TEXTURE_FLOAT="OES_texture_float",t.OES_TEXTURE_HALF_FLOAT="OES_texture_half_float",t.OES_TEXTURE_FLOAT_LINEAR="OES_texture_float_linear",t.OES_TEXTURE_HAlF_FLOAT_LINEAR="OES_texture_half_float_linear",t.WEBGL_DEPTH_TEXTURE="WEBGL_depth_texture",t.EXT_COLOR_BUFFER_FLOAT="EXT_color_buffer_float",t.getExtension=function(e,t,n,i){if(void 0===i&&(i=!1),void 0!==r[t])return r[t];var o;try{o=e.getExtension(t)}catch(e){}return o?(r[t]=o,console.log("Loaded extension: "+t+".")):(r[t]=!1,console.warn("Unsupported "+(i?"optional ":"")+"extension: "+t+".")),o||i||n("Required extension unsupported by this device / browser: "+t+"."),o}},607:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.WebGLCompute=void 0;var o=r(215);Object.defineProperty(t,"WebGLCompute",{enumerable:!0,get:function(){return o.WebGLCompute}}),i(r(738),t)},593:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isPowerOf2=t.isWebGL2=t.compileShader=void 0,t.compileShader=function(e,t,r,n,i){var o=e.createShader(n);return o?(e.shaderSource(o,r),e.compileShader(o),e.getShaderParameter(o,e.COMPILE_STATUS)?o:(t("Could not compile "+(n===e.FRAGMENT_SHADER?"fragment":"vertex")+"\n\t\t\t shader"+(i?' for program "'+i+'"':"")+": "+e.getShaderInfoLog(o)+"."),null)):(t("Unable to init gl shader."),null)},t.isWebGL2=function(e){return"undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&e instanceof WebGL2ComputeRenderingContext},t.isPowerOf2=function(e){return 0==(e&e-1)}},406:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Vector4=void 0;var r=function(){function e(e,t,r,n){void 0===e&&(e=0),void 0===t&&(t=0),void 0===r&&(r=0),void 0===n&&(n=1),this.x=e,this.y=t,this.z=r,this.w=n}return Object.defineProperty(e.prototype,"width",{get:function(){return this.z},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.w},enumerable:!1,configurable:!0}),e.prototype.copy=function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w,this},e}();t.Vector4=r},541:e=>{e.exports="precision highp float;\n\nvarying vec2 v_UV;\n\nuniform sampler2D u_state;\n\nvoid main() {\n\tgl_FragColor = texture2D(u_state, v_UV);\n}"},790:e=>{e.exports="precision highp float;\n\nattribute vec2 a_internal_position;\n\nuniform vec2 u_internal_scale;\nuniform vec2 u_internal_translation;\n\nvarying vec2 v_UV_local;\nvarying vec2 v_UV;\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\t// Apply transformations.\n\tvec2 position = u_internal_scale * a_internal_position + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}"},968:e=>{e.exports="precision highp float;\nprecision highp int;\n\n/**\n * Returns accurate MOD when arguments are approximate integers.\n */\nfloat modI(float a, float b) {\n    float m = a - floor((a + 0.5) / b) * b;\n    return floor(m + 0.5);\n}\n\n// Cannot use int vertex attributes: https://stackoverflow.com/questions/27874983/webgl-how-to-use-integer-attributes-in-glsl\nattribute float a_internal_index; // Index of point.\n\nuniform sampler2D u_internal_positions; // Texture lookup with position data.\nuniform vec2 u_internal_positionsDimensions;\nuniform vec2 u_internal_scale;\nuniform bool u_internal_positionWithAccumulation;\nuniform bool u_internal_wrapX;\nuniform bool u_internal_wrapY;\n\nvarying vec2 v_UV;\nvarying vec2 v_lineWrapping; // Use this to test if line is only half wrapped and should not be rendered.\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\tvec2 particleUV = vec2(\n\t\tmodI(a_internal_index, u_internal_positionsDimensions.x),\n\t\tfloor(floor(a_internal_index + 0.5) / u_internal_positionsDimensions.x)\n\t) / u_internal_positionsDimensions;\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\t// We have packed a 2D displacement with the position.\n\tvec4 positionData = texture2D(u_internal_positions, particleUV);\n\t// position = first two components plus last two components (optional accumulation buffer).\n\tvec2 positionAbsolute = positionData.rg;\n\tif (u_internal_positionWithAccumulation) positionAbsolute += positionData.ba;\n\tv_UV = positionAbsolute * u_internal_scale;\n\n\t// Wrap if needed.\n\tv_lineWrapping = vec2(0.0);\n\tif (u_internal_wrapX) {\n\t\tif (v_UV.x < 0.0) {\n\t\t\tv_UV.x += 1.0;\n\t\t\tv_lineWrapping.x = 1.0;\n\t\t} else if (v_UV.x > 1.0) {\n\t\t\tv_UV.x -= 1.0;\n\t\t\tv_lineWrapping.x = 1.0;\n\t\t}\n\t}\n\tif (u_internal_wrapY) {\n\t\tif (v_UV.y < 0.0) {\n\t\t\tv_UV.y += 1.0;\n\t\t\tv_lineWrapping.y = 1.0;\n\t\t} else if (v_UV.y > 1.0) {\n\t\t\tv_UV.y -= 1.0;\n\t\t\tv_lineWrapping.y = 1.0;\n\t\t}\n\t}\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_UV * 2.0 - 1.0;\n\n\tgl_Position = vec4(position, 0, 1);\n}"},198:e=>{e.exports="precision highp float;\nprecision highp int;\n\n/**\n * Returns accurate MOD when arguments are approximate integers.\n */\nfloat modI(float a, float b) {\n    float m = a - floor((a + 0.5) / b) * b;\n    return floor(m + 0.5);\n}\n\n// Cannot use int vertex attributes: https://stackoverflow.com/questions/27874983/webgl-how-to-use-integer-attributes-in-glsl\nattribute float a_internal_index; // Index of point.\n\nuniform sampler2D u_internal_positions; // Texture lookup with position data.\nuniform vec2 u_internal_positionsDimensions;\nuniform vec2 u_internal_scale;\nuniform float u_internal_pointSize;\nuniform bool u_internal_positionWithAccumulation;\nuniform bool u_internal_wrapX;\nuniform bool u_internal_wrapY;\n\nvarying vec2 v_UV;\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\tvec2 particleUV = vec2(\n\t\tmodI(a_internal_index, u_internal_positionsDimensions.x),\n\t\tfloor(floor(a_internal_index + 0.5) / u_internal_positionsDimensions.x)\n\t) / u_internal_positionsDimensions;\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\t// We have packed a 2D displacement with the position.\n\tvec4 positionData = texture2D(u_internal_positions, particleUV);\n\t// position = first two components plus last two components (optional accumulation buffer).\n\tvec2 positionAbsolute = positionData.rg;\n\tif (u_internal_positionWithAccumulation) positionAbsolute += positionData.ba;\n\tv_UV = positionAbsolute * u_internal_scale;\n\n\t// Wrap if needed.\n\tif (u_internal_wrapX) {\n\t\tif (v_UV.x < 0.0) v_UV.x += 1.0;\n\t\tif (v_UV.x > 1.0) v_UV.x -= 1.0;\n\t}\n\tif (u_internal_wrapY) {\n\t\tif (v_UV.y < 0.0) v_UV.y += 1.0;\n\t\tif (v_UV.y > 1.0) v_UV.y -= 1.0;\n\t}\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_UV * 2.0 - 1.0;\n\n\tgl_PointSize = u_internal_pointSize;\n\tgl_Position = vec4(position, 0, 1);\n}"},852:e=>{e.exports="// Vertex shader for fullscreen quad.\nprecision highp float;\n\nattribute vec2 a_internal_position;\n\nuniform float u_internal_halfThickness;\nuniform vec2 u_internal_scale;\nuniform float u_internal_length;\nuniform float u_internal_rotation;\nuniform vec2 u_internal_translation;\n\nvarying vec2 v_UV_local;\nvarying vec2 v_UV;\n\nmat2 rotate2d(float _angle){\n\treturn mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle));\n}\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\tvec2 position = a_internal_position;\n\n\t// Apply thickness / radius.\n\tposition *= u_internal_halfThickness;\n\n\t// Stretch center of shape to form a round-capped line segment.\n\tif (position.x < 0.0) {\n\t\tposition.x -= u_internal_length / 2.0;\n\t\tv_UV_local.x = 0.0; // Set entire cap UV.x to 0.\n\t} else if (position.x > 0.0) {\n\t\tposition.x += u_internal_length / 2.0;\n\t\tv_UV_local.x = 1.0; // Set entire cap UV.x to 1.\n\t}\n\n\t// Apply transformations.\n\tposition = u_internal_scale * (rotate2d(-u_internal_rotation) * position) + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}"},971:e=>{e.exports="// Fragment shader that draws a single color.\nprecision highp float;\n\nuniform vec3 u_color;\n\nvoid main() {\n\tgl_FragColor = vec4(u_color, 1);\n}"},425:e=>{e.exports="// Fragment shader that draws a single color.\nprecision highp float;\n\nuniform vec3 u_color;\nvarying vec2 v_lineWrapping;\n\nvoid main() {\n\t// check if this line has wrapped.\n\tif ((v_lineWrapping.x != 0.0 && v_lineWrapping.x != 1.0) || (v_lineWrapping.y != 0.0 && v_lineWrapping.y != 1.0)) {\n\t\t// Render nothing.\n\t\tdiscard;\n\t\treturn;\n\t}\n\tgl_FragColor = vec4(u_color, 1);\n}"},502:e=>{e.exports="precision highp float;\nprecision highp int;\n\n/**\n * Returns accurate MOD when arguments are approximate integers.\n */\nfloat modI(float a, float b) {\n    float m = a - floor((a + 0.5) / b) * b;\n    return floor(m + 0.5);\n}\n\n// Cannot use int vertex attributes: https://stackoverflow.com/questions/27874983/webgl-how-to-use-integer-attributes-in-glsl\nattribute float a_internal_index; // Index of point.\n\nuniform sampler2D u_internal_vectors; // Texture lookup with vector data.\nuniform vec2 u_internal_dimensions;\nuniform vec2 u_internal_scale;\n\nvarying vec2 v_UV;\n\nvoid main() {\n\t// Divide index by 2.\n\tfloat index = floor((a_internal_index + 0.5) / 2.0);\n\t// Calculate a uv based on the vertex index attribute.\n\tv_UV = vec2(\n\t\tmodI(index, u_internal_dimensions.x),\n\t\tfloor(floor(index + 0.5) / u_internal_dimensions.x)\n\t) / u_internal_dimensions;\n\n\t// Add vector displacement if needed.\n\tif (modI(a_internal_index, 2.0) > 0.0) {\n\t\t// Lookup vectorData at current UV.\n\t\tvec2 vectorData = texture2D(u_internal_vectors, v_UV).xy;\n\t\tv_UV += vectorData * u_internal_scale;\n\t}\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_UV * 2.0 - 1.0;\n\n\tgl_Position = vec4(position, 0, 1);\n}"},518:e=>{e.exports="#version 300 es\nprecision highp float;\nprecision highp sampler2D;\n\nin vec2 v_UV;\n\nuniform sampler2D u_state;\n\nout vec4 out_fragColor;\n\nvoid main() {\n\tout_fragColor = texture(u_state, v_UV);\n}"},546:e=>{e.exports="#version 300 es\nprecision highp float;\nprecision highp int;\nprecision highp isampler2D;\n\nin vec2 v_UV;\n\nuniform isampler2D u_state;\n\nout ivec4 out_fragColor;\n\nvoid main() {\n\tout_fragColor = texture(u_state, v_UV);\n}"},374:e=>{e.exports="#version 300 es\nprecision highp float;\nprecision highp int;\nprecision highp usampler2D;\n\nin vec2 v_UV;\n\nuniform usampler2D u_state;\n\nout uvec4 out_fragColor;\n\nvoid main() {\n\tout_fragColor = texture(u_state, v_UV);\n}"},435:e=>{e.exports="#version 300 es\nprecision highp float;\n\nin vec2 a_internal_position;\n\nuniform vec2 u_internal_scale;\nuniform vec2 u_internal_translation;\n\nout vec2 v_UV_local;\nout vec2 v_UV;\nout vec2 out_position;\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\t// Apply transformations.\n\tvec2 position = u_internal_scale * a_internal_position + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tout_position = position;\n}"},218:e=>{e.exports="#version 300 es\nprecision highp float;\n\nattribute vec2 a_internal_position;\n\nuniform float u_internal_halfThickness;\nuniform vec2 u_internal_scale;\nuniform float u_internal_length;\nuniform float u_internal_rotation;\nuniform vec2 u_internal_translation;\n\nvarying vec2 v_UV_local;\nvarying vec2 v_UV;\n\nmat2 rotate2d(float _angle){\n\treturn mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle));\n}\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\tvec2 position = a_internal_position;\n\n\t// Apply radius.\n\tposition *= u_internal_radius;\n\n\t// Stretch center of shape to form a round-capped line segment.\n\tif (position.x < 0.0) {\n\t\tposition.x -= u_internal_length / 2.0;\n\t\tv_UV_local.x = 0.0; // Set entire cap UV.x to 0.\n\t} else if (position.x > 0.0) {\n\t\tposition.x += u_internal_length / 2.0;\n\t\tv_UV_local.x = 1.0; // Set entire cap UV.x to 1.\n\t}\n\n\t// Apply transformations.\n\tposition = u_internal_scale * (rotate2d(-u_internal_rotation) * position) + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}"},805:e=>{e.exports="// Fragment shader that draws a single color.\nprecision highp float;\n\nuniform vec3 u_color;\n\nvoid main() {\n\tgl_FragColor = vec4(u_color, 1);\n}"},674:e=>{e.exports="// Fragment shader that draws a single color.\nprecision highp float;\n\nuniform vec3 u_color;\nvarying vec2 v_lineWrapping;\n\nvoid main() {\n\t// check if this line has wrapped.\n\tif ((v_lineWrapping.x != 0.0 && v_lineWrapping.x != 1.0) || (v_lineWrapping.y != 0.0 && v_lineWrapping.y != 1.0)) {\n\t\t// Render nothing.\n\t\tdiscard;\n\t\treturn;\n\t}\n\tgl_FragColor = vec4(u_color, 1);\n}"}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}return r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(607)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,