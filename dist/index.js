!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.WebGLCompute=t():e.WebGLCompute=t()}(self,(function(){return(()=>{var e={501:(e,t,r)=>{"use strict";r.r(t),r.d(t,{Float16Array:()=>de,getFloat16:()=>me,hfround:()=>h,setFloat16:()=>ve});const n=new ArrayBuffer(4),i=new Float32Array(n),o=new Uint32Array(n),a=new Uint32Array(512),s=new Uint32Array(512);for(let e=0;e<256;++e){const t=e-127;t<-27?(a[0|e]=0,a[256|e]=32768,s[0|e]=24,s[256|e]=24):t<-14?(a[0|e]=1024>>-t-14,a[256|e]=1024>>-t-14|32768,s[0|e]=-t-1,s[256|e]=-t-1):t<=15?(a[0|e]=t+15<<10,a[256|e]=t+15<<10|32768,s[0|e]=13,s[256|e]=13):t<128?(a[0|e]=31744,a[256|e]=64512,s[0|e]=24,s[256|e]=24):(a[0|e]=31744,a[256|e]=64512,s[0|e]=13,s[256|e]=13)}function l(e){i[0]=e;const t=o[0],r=t>>23&511;return a[r]+((8388607&t)>>s[r])}const u=new Uint32Array(2048),f=new Uint32Array(64),c=new Uint32Array(64);u[0]=0;for(let e=1;e<1024;++e){let t=e<<13,r=0;for(;0==(8388608&t);)r-=8388608,t<<=1;t&=-8388609,r+=947912704,u[e]=t|r}for(let e=1024;e<2048;++e)u[e]=939524096+(e-1024<<13);f[0]=0;for(let e=1;e<31;++e)f[e]=e<<23;f[31]=1199570944,f[32]=2147483648;for(let e=33;e<63;++e)f[e]=2147483648+(e-32<<23);f[63]=3347054592,c[0]=0;for(let e=1;e<64;++e)c[e]=32===e?0:1024;function p(e){const t=e>>10;return o[0]=u[c[t]+(1023&e)]+f[t],i[0]}function h(e){return e=Number(e),Number.isFinite(e)&&0!==e?p(l(e)):e}var d=r(277),_="object"==typeof self&&self&&self.Object===Object&&self;const g=d.Z||_||Function("return this")(),m=g.Symbol;var v=Object.prototype,y=v.hasOwnProperty,b=v.toString,T=m?m.toStringTag:void 0;var E=Object.prototype.toString;var w=m?m.toStringTag:void 0;const A=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":w&&w in Object(e)?function(e){var t=y.call(e,T),r=e[T];try{e[T]=void 0;var n=!0}catch(e){}var i=b.call(e);return n&&(t?e[T]=r:delete e[T]),i}(e):function(e){return E.call(e)}(e)},L=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)},x=g["__core-js_shared__"];var F,R=(F=/[^.]+$/.exec(x&&x.keys&&x.keys.IE_PROTO||""))?"Symbol(src)_1."+F:"";var U=Function.prototype.toString;var I=/^\[object .+?Constructor\]$/,O=Function.prototype,S=Object.prototype,N=O.toString,D=S.hasOwnProperty,P=RegExp("^"+N.call(D).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");const C=function(e){return!(!L(e)||(t=e,R&&R in t))&&(function(e){if(!L(e))return!1;var t=A(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}(e)?P:I).test(function(e){if(null!=e){try{return U.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e));var t},B=function(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return C(r)?r:void 0},G=B(Object,"create");var V=Object.prototype.hasOwnProperty;var k=Object.prototype.hasOwnProperty;function W(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}W.prototype.clear=function(){this.__data__=G?G(null):{},this.size=0},W.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},W.prototype.get=function(e){var t=this.__data__;if(G){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return V.call(t,e)?t[e]:void 0},W.prototype.has=function(e){var t=this.__data__;return G?void 0!==t[e]:k.call(t,e)},W.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=G&&void 0===t?"__lodash_hash_undefined__":t,this};const M=W,j=function(e,t){for(var r=e.length;r--;)if((n=e[r][0])===(i=t)||n!=n&&i!=i)return r;var n,i;return-1};var H=Array.prototype.splice;function X(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}X.prototype.clear=function(){this.__data__=[],this.size=0},X.prototype.delete=function(e){var t=this.__data__,r=j(t,e);return!(r<0||(r==t.length-1?t.pop():H.call(t,r,1),--this.size,0))},X.prototype.get=function(e){var t=this.__data__,r=j(t,e);return r<0?void 0:t[r][1]},X.prototype.has=function(e){return j(this.__data__,e)>-1},X.prototype.set=function(e,t){var r=this.__data__,n=j(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this};const Y=X,z=B(g,"Map"),q=function(e,t){var r,n,i=e.__data__;return("string"==(n=typeof(r=t))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?i["string"==typeof t?"string":"hash"]:i.map};function Z(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}Z.prototype.clear=function(){this.size=0,this.__data__={hash:new M,map:new(z||Y),string:new M}},Z.prototype.delete=function(e){var t=q(this,e).delete(e);return this.size-=t?1:0,t},Z.prototype.get=function(e){return q(this,e).get(e)},Z.prototype.has=function(e){return q(this,e).has(e)},Z.prototype.set=function(e,t){var r=q(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this};const K=Z;function $(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var n=arguments,i=t?t.apply(this,n):n[0],o=r.cache;if(o.has(i))return o.get(i);var a=e.apply(this,n);return r.cache=o.set(i,a)||o,a};return r.cache=new($.Cache||K),r}$.Cache=K;const J=$,Q=Object.getOwnPropertyDescriptor(new Uint8Array(1),0).writable;function ee(e){let t="number"!=typeof e?Number(e):e;return Number.isNaN(t)&&(t=0),Math.trunc(t)}function te(e,t){const[r,n]=[Number.isNaN(e),Number.isNaN(t)];if(r&&n)return 0;if(r)return 1;if(n)return-1;if(e<t)return-1;if(e>t)return 1;if(0===e&&0===t){const[r,n]=[Object.is(e,0),Object.is(t,0)];if(!r&&n)return-1;if(r&&!n)return 1}return 0}function re(e){return e instanceof DataView}function ne(e){return"string"==typeof e&&e===ee(e)+""}var ie=r(730),oe=ie.Z&&ie.Z.isArrayBuffer;const ae=oe?(se=oe,function(e){return se(e)}):function(e){return function(e){return null!=e&&"object"==typeof e}(e)&&"[object ArrayBuffer]"==A(e)};var se;const le=function(){const e=new WeakMap;return t=>{let r=e.get(t);return r||(r=Object.create(null),e.set(t,r),r)}}();function ue(e){return e instanceof de}function fe(e){if(!ue(e))throw new TypeError("This is not a Float16Array")}function ce(e){const t=e.length,r=new Array(t);for(let n=0;n<t;++n)r[n]=p(e[n]);return r}const pe={apply(e,t,r){return ue(t)&&"function"==typeof(n=e)&&ge.has(n)?Reflect.apply(e,le(t).target,r):Reflect.apply(e,t,r);var n}},he={get(e,t){let r=null;if(Q||(r=e,e=le(r).target),ne(t))return Reflect.has(e,t)?p(Reflect.get(e,t)):void 0;{const n=null!==r&&Reflect.has(r,t)?Reflect.get(r,t):Reflect.get(e,t);if("function"!=typeof n)return n;let i=le(n).proxy;return void 0===i&&(i=le(n).proxy=new Proxy(n,pe)),i}},set(e,t,r){let n=null;return Q||(n=e,e=le(n).target),ne(t)?Reflect.set(e,t,l(r)):null===n||Reflect.has(e,t)&&!Object.isFrozen(n)?Reflect.set(e,t,r):Reflect.set(n,t,r)}};Q||(he.getPrototypeOf=e=>Reflect.getPrototypeOf(le(e).target),he.setPrototypeOf=(e,t)=>Reflect.setPrototypeOf(le(e).target,t),he.defineProperty=(e,t,r)=>{const n=le(e).target;return!Reflect.has(n,t)||Object.isFrozen(e)?Reflect.defineProperty(e,t,r):Reflect.defineProperty(n,t,r)},he.deleteProperty=(e,t)=>{const r=le(e).target;return Reflect.has(e,t)?Reflect.deleteProperty(e,t):Reflect.deleteProperty(r,t)},he.has=(e,t)=>Reflect.has(e,t)||Reflect.has(le(e).target,t),he.isExtensible=e=>Reflect.isExtensible(e),he.preventExtensions=e=>Reflect.preventExtensions(e),he.getOwnPropertyDescriptor=(e,t)=>Reflect.getOwnPropertyDescriptor(e,t),he.ownKeys=e=>Reflect.ownKeys(e));class de extends Uint16Array{constructor(e,t,r){if(ue(e))super(le(e).target);else if(null===e||"object"!=typeof e||ae(e))switch(arguments.length){case 0:super();break;case 1:super(e);break;case 2:super(e,t);break;case 3:super(e,t,r);break;default:super(...arguments)}else{const t=Reflect.has(e,"length")||void 0===e[Symbol.iterator]?e:[...e],r=t.length;super(r);for(let e=0;e<r;++e)this[e]=l(t[e])}let n;if(Q)n=new Proxy(this,he);else{const e=Object.create(null);le(e).target=this,n=new Proxy(e,he)}return le(n).target=this,le(this).proxy=n,n}static from(e,...t){if(0===t.length)return new de(Uint16Array.from(e,l).buffer);const r=t[0],n=t[1];return new de(Uint16Array.from(e,(function(e,...t){return l(r.call(this,e,...t))}),n).buffer)}static of(...e){return new de(e)}*[Symbol.iterator](){for(const e of super[Symbol.iterator]())yield p(e)}keys(){return super.keys()}*values(){for(const e of super.values())yield p(e)}*entries(){for(const[e,t]of super.entries())yield[e,p(t)]}map(e,...t){fe(this);const r=t[0],n=[];for(let t=0,i=this.length;t<i;++t){const i=p(this[t]);n.push(e.call(r,i,t,le(this).proxy))}return new de(n)}filter(e,...t){fe(this);const r=t[0],n=[];for(let t=0,i=this.length;t<i;++t){const i=p(this[t]);e.call(r,i,t,le(this).proxy)&&n.push(i)}return new de(n)}reduce(e,...t){let r,n;fe(this),0===t.length?(r=p(this[0]),n=1):(r=t[0],n=0);for(let t=n,i=this.length;t<i;++t)r=e(r,p(this[t]),t,le(this).proxy);return r}reduceRight(e,...t){let r,n;fe(this);const i=this.length;0===t.length?(r=p(this[i-1]),n=i-1):(r=t[0],n=i);for(let t=n;t--;)r=e(r,p(this[t]),t,le(this).proxy);return r}forEach(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t)e.call(r,p(this[t]),t,le(this).proxy)}find(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t){const n=p(this[t]);if(e.call(r,n,t,le(this).proxy))return n}}findIndex(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t){const n=p(this[t]);if(e.call(r,n,t,le(this).proxy))return t}return-1}every(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t)if(!e.call(r,p(this[t]),t,le(this).proxy))return!1;return!0}some(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t)if(e.call(r,p(this[t]),t,le(this).proxy))return!0;return!1}set(e,...t){fe(this);const r=t[0];let n;if(ue(e))n=le(e).target;else{const t=Reflect.has(e,"length")||void 0===e[Symbol.iterator]?e:[...e],r=t.length;n=new Uint16Array(r);for(let e=0,r=t.length;e<r;++e)n[e]=l(t[e])}super.set(n,r)}reverse(){return fe(this),super.reverse(),le(this).proxy}fill(e,...t){return fe(this),super.fill(l(e),...t),le(this).proxy}copyWithin(e,t,...r){return fe(this),super.copyWithin(e,t,...r),le(this).proxy}sort(...e){fe(this);let t=e[0];void 0===t&&(t=te);const r=J(p);return super.sort(((e,n)=>t(r(e),r(n)))),le(this).proxy}slice(...e){let t;fe(this);try{t=super.slice(...e)}catch(r){if(!(r instanceof TypeError))throw r;t=new Uint16Array(this.buffer,this.byteOffset,this.length).slice(...e)}return new de(t.buffer)}subarray(...e){let t;fe(this);try{t=super.subarray(...e)}catch(r){if(!(r instanceof TypeError))throw r;t=new Uint16Array(this.buffer,this.byteOffset,this.length).subarray(...e)}return new de(t.buffer,t.byteOffset,t.length)}indexOf(e,...t){fe(this);const r=this.length;let n=ee(t[0]);n<0&&(n+=r,n<0&&(n=0));for(let t=n,i=r;t<i;++t)if(p(this[t])===e)return t;return-1}lastIndexOf(e,...t){fe(this);const r=this.length;let n=ee(t[0]);n=0===n?r:n+1,n>=0?n=n<r?n:r:n+=r;for(let t=n;t--;)if(p(this[t])===e)return t;return-1}includes(e,...t){fe(this);const r=this.length;let n=ee(t[0]);n<0&&(n+=r,n<0&&(n=0));const i=Number.isNaN(e);for(let t=n,o=r;t<o;++t){const r=p(this[t]);if(i&&Number.isNaN(r))return!0;if(r===e)return!0}return!1}join(...e){return fe(this),ce(this).join(...e)}toLocaleString(...e){return fe(this),ce(this).toLocaleString(...e)}get[Symbol.toStringTag](){if(ue(this))return"Float16Array"}}const _e=de.prototype,ge=new WeakSet;for(const e of Reflect.ownKeys(_e)){const t=_e[e];"function"==typeof t&&ge.add(t)}function me(e,t,...r){if(!re(e))throw new TypeError("First argument to getFloat16 function must be a DataView");return p(e.getUint16(t,...r))}function ve(e,t,r,...n){if(!re(e))throw new TypeError("First argument to setFloat16 function must be a DataView");e.setUint16(t,l(r),...n)}},809:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.changeDpiBlob=function(e,t){var r=e.slice(0,33);return new Promise((function(n,i){var o=new FileReader;o.onload=function(){var r=new Uint8Array(o.result),i=e.slice(33),a=p(r,t,e.type);n(new Blob([a,i],{type:e.type}))},o.readAsArrayBuffer(r)}))},t.changeDpiDataUrl=function(e,t){var r,l,u=e.split(","),f=u[0],c=u[1],h=void 0,d=void 0,_=!1;if(-1!==f.indexOf(n)){h=n;var g=(-1===(l=(r=c).indexOf(o))&&(l=r.indexOf(a)),-1===l&&(l=r.indexOf(s)),l);g>=0?(d=4*Math.ceil((g+28)/3),_=!0):d=44}-1!==f.indexOf(i)&&(h=i,d=24);for(var m=c.substring(0,d),v=c.substring(d),y=atob(m),b=new Uint8Array(y.length),T=0;T<b.length;T++)b[T]=y.charCodeAt(T);var E=p(b,t,h,_);return[f,",",btoa(String.fromCharCode.apply(String,function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(E))),v].join("")};var r=void 0,n="image/png",i="image/jpeg",o="AAlwSFlz",a="AAAJcEhZ",s="AAAACXBI",l="p".charCodeAt(0),u="H".charCodeAt(0),f="Y".charCodeAt(0),c="s".charCodeAt(0);function p(e,t,o,a){if(o===i)return e[13]=1,e[14]=t>>8,e[15]=255&t,e[16]=t>>8,e[17]=255&t,e;if(o===n){var s=new Uint8Array(13);t*=39.3701,s[0]=l,s[1]=u,s[2]=f,s[3]=c,s[4]=t>>>24,s[5]=t>>>16,s[6]=t>>>8,s[7]=255&t,s[8]=s[4],s[9]=s[5],s[10]=s[6],s[11]=s[7],s[12]=1;var p=function(e){var t=-1;r||(r=function(){for(var e=new Int32Array(256),t=0;t<256;t++){for(var r=t,n=0;n<8;n++)r=1&r?3988292384^r>>>1:r>>>1;e[t]=r}return e}());for(var n=0;n<e.length;n++)t=r[255&(t^e[n])]^t>>>8;return-1^t}(s),h=new Uint8Array(4);if(h[0]=p>>>24,h[1]=p>>>16,h[2]=p>>>8,h[3]=255&p,a){var d=function(e){for(var t=e.length-1;t>=4;t--)if(9===e[t-4]&&e[t-3]===l&&e[t-2]===u&&e[t-1]===f&&e[t]===c)return t-3}(e);return e.set(s,d),e.set(h,d+13),e}var _=new Uint8Array(4);_[0]=0,_[1]=0,_[2]=0,_[3]=9;var g=new Uint8Array(54);return g.set(e,0),g.set(_,33),g.set(s,37),g.set(h,50),g}}},162:function(e,t,r){var n,i;void 0===(i="function"==typeof(n=function(){"use strict";function t(e,t,r){var n=new XMLHttpRequest;n.open("GET",e),n.responseType="blob",n.onload=function(){s(n.response,t,r)},n.onerror=function(){console.error("could not download file")},n.send()}function n(e){var t=new XMLHttpRequest;t.open("HEAD",e,!1);try{t.send()}catch(e){}return 200<=t.status&&299>=t.status}function i(e){try{e.dispatchEvent(new MouseEvent("click"))}catch(r){var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),e.dispatchEvent(t)}}var o="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof r.g&&r.g.global===r.g?r.g:void 0,a=o.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),s=o.saveAs||("object"!=typeof window||window!==o?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(e,r,a){var s=o.URL||o.webkitURL,l=document.createElement("a");r=r||e.name||"download",l.download=r,l.rel="noopener","string"==typeof e?(l.href=e,l.origin===location.origin?i(l):n(l.href)?t(e,r,a):i(l,l.target="_blank")):(l.href=s.createObjectURL(e),setTimeout((function(){s.revokeObjectURL(l.href)}),4e4),setTimeout((function(){i(l)}),0))}:"msSaveOrOpenBlob"in navigator?function(e,r,o){if(r=r||e.name||"download","string"!=typeof e)navigator.msSaveOrOpenBlob(function(e,t){return void 0===t?t={autoBom:!1}:"object"!=typeof t&&(console.warn("Deprecated: Expected third argument to be a object"),t={autoBom:!t}),t.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["\ufeff",e],{type:e.type}):e}(e,o),r);else if(n(e))t(e,r,o);else{var a=document.createElement("a");a.href=e,a.target="_blank",setTimeout((function(){i(a)}))}}:function(e,r,n,i){if((i=i||open("","_blank"))&&(i.document.title=i.document.body.innerText="downloading..."),"string"==typeof e)return t(e,r,n);var s="application/octet-stream"===e.type,l=/constructor/i.test(o.HTMLElement)||o.safari,u=/CriOS\/[\d]+/.test(navigator.userAgent);if((u||s&&l||a)&&"undefined"!=typeof FileReader){var f=new FileReader;f.onloadend=function(){var e=f.result;e=u?e:e.replace(/^data:[^;]*;/,"data:attachment/file;"),i?i.location.href=e:location=e,i=null},f.readAsDataURL(e)}else{var c=o.URL||o.webkitURL,p=c.createObjectURL(e);i?i.location=p:location.href=p,i=null,setTimeout((function(){c.revokeObjectURL(p)}),4e4)}});o.saveAs=s.saveAs=s,e.exports=s})?n.apply(t,[]):n)||(e.exports=i)},277:(e,t,r)=>{"use strict";r.d(t,{Z:()=>n});const n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g},730:(e,t,r)=>{"use strict";r.d(t,{Z:()=>s});var n=r(277);e=r.hmd(e);var i="object"==typeof exports&&exports&&!exports.nodeType&&exports,o=i&&e&&!e.nodeType&&e,a=o&&o.exports===i&&n.Z.process;const s=function(){try{return o&&o.require&&o.require("util").types||a&&a.binding&&a.binding("util")}catch(e){}}()},627:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isArray=t.isString=t.isPositiveInteger=t.isInteger=t.isNumber=t.isValidTextureDataType=t.validTextureDataTypes=t.isValidTextureFormatType=t.validTextureFormatTypes=t.isValidWrapType=t.validWrapTypes=t.isValidFilterType=t.validFilterTypes=t.isValidDataType=t.validDataTypes=void 0;var n=r(738);function i(e){return!isNaN(e)}function o(e){return i(e)&&e%1==0}t.validDataTypes=[n.HALF_FLOAT,n.FLOAT,n.UNSIGNED_BYTE,n.BYTE,n.UNSIGNED_SHORT,n.SHORT,n.UNSIGNED_INT,n.INT],t.isValidDataType=function(e){return t.validDataTypes.indexOf(e)>-1},t.validFilterTypes=[n.LINEAR,n.NEAREST],t.isValidFilterType=function(e){return t.validFilterTypes.indexOf(e)>-1},t.validWrapTypes=[n.CLAMP_TO_EDGE,n.REPEAT],t.isValidWrapType=function(e){return t.validWrapTypes.indexOf(e)>-1},t.validTextureFormatTypes=[n.RGB,n.RGBA],t.isValidTextureFormatType=function(e){return t.validTextureFormatTypes.indexOf(e)>-1},t.validTextureDataTypes=[n.UNSIGNED_BYTE],t.isValidTextureDataType=function(e){return t.validTextureDataTypes.indexOf(e)>-1},t.isNumber=i,t.isInteger=o,t.isPositiveInteger=function(e){return o(e)&&e>0},t.isString=function(e){return"string"==typeof e},t.isArray=function(e){return Array.isArray(e)}},738:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.INT_4D_UNIFORM=t.INT_3D_UNIFORM=t.INT_2D_UNIFORM=t.INT_1D_UNIFORM=t.FLOAT_4D_UNIFORM=t.FLOAT_3D_UNIFORM=t.FLOAT_2D_UNIFORM=t.FLOAT_1D_UNIFORM=t.GLSL1=t.GLSL3=t.RGBA=t.RGB=t.CLAMP_TO_EDGE=t.REPEAT=t.NEAREST=t.LINEAR=t.INT=t.UNSIGNED_INT=t.SHORT=t.UNSIGNED_SHORT=t.BYTE=t.UNSIGNED_BYTE=t.FLOAT=t.HALF_FLOAT=void 0,t.HALF_FLOAT="HALF_FLOAT",t.FLOAT="FLOAT",t.UNSIGNED_BYTE="UNSIGNED_BYTE",t.BYTE="BYTE",t.UNSIGNED_SHORT="UNSIGNED_SHORT",t.SHORT="SHORT",t.UNSIGNED_INT="UNSIGNED_INT",t.INT="INT",t.LINEAR="LINEAR",t.NEAREST="NEAREST",t.REPEAT="REPEAT",t.CLAMP_TO_EDGE="CLAMP_TO_EDGE",t.RGB="RGB",t.RGBA="RGBA",t.GLSL3="300 es",t.GLSL1="100",t.FLOAT_1D_UNIFORM="1f",t.FLOAT_2D_UNIFORM="2f",t.FLOAT_3D_UNIFORM="3f",t.FLOAT_4D_UNIFORM="3f",t.INT_1D_UNIFORM="1i",t.INT_2D_UNIFORM="2i",t.INT_3D_UNIFORM="3i",t.INT_4D_UNIFORM="3i"},930:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DataLayer=void 0;var n=r(501),i=r(627),o=r(738),a=r(581),s=r(593),l=function(){function e(t){this._bufferIndex=0,this.buffers=[];var r=t.gl,n=t.errorCallback,a=t.name,s=t.dimensions,l=t.type,u=t.numComponents,f=t.data,c=t.glslVersion;if(this.name=a,this.gl=r,this.errorCallback=n,!i.isPositiveInteger(u)||u>4)throw new Error("Invalid numComponents "+u+' for DataLayer "'+a+'".');this.numComponents=u;var p=!!t.writable;this.writable=p;var h=e.calcSize(s,a),d=h.length,_=h.width,g=h.height;if(this.length=d,!i.isPositiveInteger(_))throw new Error("Invalid width "+_+' for DataLayer "'+a+'".');if(this.width=_,!i.isPositiveInteger(g))throw new Error("Invalid length "+g+' for DataLayer "'+a+'".');this.height=g;var m=void 0!==t.filter?t.filter:d?o.NEAREST:o.LINEAR;if(!i.isValidFilterType(m))throw new Error("Invalid filter: "+m+' for DataLayer "'+a+'", must be '+i.validFilterTypes.join(", ")+".");this.filter=m;var v=void 0!==t.wrapS?t.wrapS:o.CLAMP_TO_EDGE;if(!i.isValidWrapType(v))throw new Error("Invalid wrapS: "+v+' for DataLayer "'+a+'", must be '+i.validWrapTypes.join(", ")+".");this.wrapS=v;var y=void 0!==t.wrapT?t.wrapT:o.CLAMP_TO_EDGE;if(!i.isValidWrapType(y))throw new Error("Invalid wrapT: "+y+' for DataLayer "'+a+'", must be '+i.validWrapTypes.join(", ")+".");if(this.wrapT=y,!i.isValidDataType(l))throw new Error("Invalid type "+l+' for DataLayer "'+a+'", must be one of '+i.validDataTypes.join(", ")+".");this.type=l;var b=e.getInternalType({gl:r,type:l,glslVersion:c,writable:p,filter:m,name:a,errorCallback:n});this.internalType=b;var T=e.getGLTextureParameters({gl:r,name:a,numComponents:u,writable:p,internalType:b,glslVersion:c,errorCallback:n}),E=T.glFormat,w=T.glInternalFormat,A=T.glType,L=T.glNumChannels;this.glInternalFormat=w,this.glFormat=E,this.glType=A,this.glNumChannels=L,this.internalFilter=e.getInternalFilter({gl:r,filter:m,internalType:b,name:a,errorCallback:n}),this.glFilter=r[this.internalFilter],this.internalWrapS=e.getInternalWrap({gl:r,wrap:v,name:a}),this.glWrapS=r[this.internalWrapS],this.internalWrapT=e.getInternalWrap({gl:r,wrap:y,name:a}),this.glWrapT=r[this.internalWrapT];var x=void 0!==t.numBuffers?t.numBuffers:1;if(!i.isPositiveInteger(x))throw new Error("Invalid numBuffers: "+x+' for DataLayer "'+a+'", must be positive integer.');this.numBuffers=x,this.initBuffers(f)}return e.calcSize=function(e,t){var r,n,o;if(isNaN(e)){if(n=e[0],!i.isPositiveInteger(n))throw new Error("Invalid width "+n+' for DataLayer "'+t+'".');if(o=e[1],!i.isPositiveInteger(o))throw new Error("Invalid height "+o+' for DataLayer "'+t+'".')}else{if(!i.isPositiveInteger(e))throw new Error("Invalid length "+e+' for DataLayer "'+t+'".');for(var a=1,s=r=e;s>2;)a++,s/=2;n=Math.pow(2,Math.floor(a/2)+a%2),o=Math.pow(2,Math.floor(a/2))}return{width:n,height:o,length:r}},e.getInternalWrap=function(e){var t=e.gl,r=e.wrap,n=e.name;return s.isWebGL2(t)||r===o.CLAMP_TO_EDGE||s.isWebGL2(t)?r:(console.warn('Falling back to CLAMP_TO_EDGE wrapping for DataLayer "'+n+'" for WebGL 1.'),o.CLAMP_TO_EDGE)},e.getInternalFilter=function(e){var t=e.gl,r=e.errorCallback,n=e.internalType,i=e.name,s=e.filter;return s===o.NEAREST||(n===o.HALF_FLOAT&&(a.getExtension(t,a.OES_TEXTURE_HAlF_FLOAT_LINEAR,r,!0)||a.getExtension(t,a.OES_TEXTURE_FLOAT_LINEAR,r,!0)||(console.warn('Falling back to NEAREST filter for DataLayer "'+i+'".'),s=o.NEAREST)),n===o.FLOAT&&(a.getExtension(t,a.OES_TEXTURE_FLOAT_LINEAR,r,!0)||(console.warn('Falling back to NEAREST filter for DataLayer "'+i+'".'),s=o.NEAREST))),s},e.getInternalType=function(t){var r=t.gl,n=t.errorCallback,i=t.writable,l=t.name,u=t.glslVersion,f=t.type;return e.shouldCastIntTypeAsFloat(t)&&(f===o.UNSIGNED_BYTE||f===o.BYTE?f=o.HALF_FLOAT:(f===o.INT||o.UNSIGNED_INT,console.warn("Falling back "+f+' type to FLOAT type for glsl1.x support for DataLayer "'+l+'".\nLarge UNSIGNED_INT or INT with absolute value > 16,777,216 are not supported, on mobile UNSIGNED_INT, INT, UNSIGNED_SHORT, and SHORT with absolute value > 2,048 may not be supported.'),f=o.FLOAT)),s.isWebGL2(r)||(f===o.FLOAT&&(a.getExtension(r,a.OES_TEXTURE_FLOAT,n,!0)||(console.warn('FLOAT not supported, falling back to HALF_FLOAT type for DataLayer "'+l+'".'),f=o.HALF_FLOAT),i&&(e.testFramebufferWrite({gl:r,type:f,glslVersion:u})||f===o.HALF_FLOAT||(console.warn('FLOAT not supported for writing operations, falling back to HALF_FLOAT type for DataLayer "'+l+'".'),f=o.HALF_FLOAT))),f===o.HALF_FLOAT&&(a.getExtension(r,a.OES_TEXTURE_HALF_FLOAT,n),i&&(e.testFramebufferWrite({gl:r,type:f,glslVersion:u})||n("This browser does not support rendering to HALF_FLOAT textures.")))),i&&s.isWebGL2(r)&&(f===o.HALF_FLOAT||f===o.FLOAT)&&a.getExtension(r,a.EXT_COLOR_BUFFER_FLOAT,n),f},e.shouldCastIntTypeAsFloat=function(e){var t=e.gl,r=e.type,n=e.filter;return(e.glslVersion!==o.GLSL3||!s.isWebGL2(t))&&(r===o.UNSIGNED_BYTE&&n===o.LINEAR||r===o.BYTE||r===o.SHORT||r===o.INT||r===o.UNSIGNED_SHORT||r===o.UNSIGNED_INT)},e.getGLTextureParameters=function(e){var t,r,n,i,l=e.gl,u=e.errorCallback,f=e.name,c=e.numComponents,p=e.internalType,h=e.writable,d=e.glslVersion;if(s.isWebGL2(l)){if(i=c,3===c&&h&&(i=4),p===o.FLOAT||p===o.HALF_FLOAT)switch(i){case 1:r=l.RED;break;case 2:r=l.RG;break;case 3:r=l.RGB;break;case 4:r=l.RGBA;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}else if(d===o.GLSL1&&p===o.UNSIGNED_BYTE)switch(i){case 1:if(!h){r=l.ALPHA;break}case 2:if(!h){r=l.LUMINANCE_ALPHA;break}case 3:r=l.RGB,i=3;break;case 4:r=l.RGBA,i=4;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}else switch(i){case 1:r=l.RED_INTEGER;break;case 2:r=l.RG_INTEGER;break;case 3:r=l.RGB_INTEGER;break;case 4:r=l.RGBA_INTEGER;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}switch(p){case o.HALF_FLOAT:switch(t=l.HALF_FLOAT,i){case 1:n=l.R16F;break;case 2:n=l.RG16F;break;case 3:n=l.RGB16F;break;case 4:n=l.RGBA16F;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case o.FLOAT:switch(t=l.FLOAT,i){case 1:n=l.R32F;break;case 2:n=l.RG32F;break;case 3:n=l.RGB32F;break;case 4:n=l.RGBA32F;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case o.UNSIGNED_BYTE:if(t=l.UNSIGNED_BYTE,d===o.GLSL1&&p===o.UNSIGNED_BYTE)n=r;else switch(i){case 1:n=l.R8UI;break;case 2:n=l.RG8UI;break;case 3:n=l.RGB8UI;break;case 4:n=l.RGBA8UI;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case o.BYTE:switch(t=l.BYTE,i){case 1:n=l.R8I;break;case 2:n=l.RG8I;break;case 3:n=l.RGB8I;break;case 4:n=l.RGBA8I;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case o.SHORT:switch(t=l.SHORT,i){case 1:n=l.R16I;break;case 2:n=l.RG16I;break;case 3:n=l.RGB16I;break;case 4:n=l.RGBA16I;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case o.UNSIGNED_SHORT:switch(t=l.UNSIGNED_SHORT,i){case 1:n=l.R16UI;break;case 2:n=l.RG16UI;break;case 3:n=l.RGB16UI;break;case 4:n=l.RGBA16UI;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case o.INT:switch(t=l.INT,i){case 1:n=l.R32I;break;case 2:n=l.RG32I;break;case 3:n=l.RGB32I;break;case 4:n=l.RGBA32I;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case o.UNSIGNED_INT:switch(t=l.UNSIGNED_INT,i){case 1:n=l.R32UI;break;case 2:n=l.RG32UI;break;case 3:n=l.RGB32UI;break;case 4:n=l.RGBA32UI;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;default:throw new Error("Unsupported type "+p+' for DataLayer "'+f+'".')}}else{switch(c){case 1:if(!h){r=l.ALPHA;break}case 2:if(!h){r=l.LUMINANCE_ALPHA;break}case 3:r=l.RGB,n=l.RGB,i=3;break;case 4:r=l.RGBA,n=l.RGBA,i=4;break;default:throw new Error("Unsupported numComponents "+c+' for DataLayer "'+f+'".')}switch(p){case o.FLOAT:t=l.FLOAT;break;case o.HALF_FLOAT:t=l.HALF_FLOAT||a.getExtension(l,a.OES_TEXTURE_HALF_FLOAT,u).HALF_FLOAT_OES;break;case o.UNSIGNED_BYTE:t=l.UNSIGNED_BYTE;break;default:throw new Error("Unsupported type "+p+' in WebGL 1.0 for DataLayer "'+f+'".')}}if(void 0===t||void 0===r||void 0===n){var _=[];throw void 0===t&&_.push("glType"),void 0===r&&_.push("glFormat"),void 0===n&&_.push("glInternalFormat"),new Error("Invalid type: "+p+" for numComponents "+c+", unable to init parameter"+(_.length>1?"s":"")+" "+_.join(", ")+' for DataLayer "'+f+'".')}if(void 0===i||c<1||c>4||i<c)throw new Error("Invalid numChannels "+i+" for numComponents "+c+' for DataLayer "'+f+'".');return{glFormat:r,glInternalFormat:n,glType:t,glNumChannels:i}},e.testFramebufferWrite=function(t){var r=t.gl,n=t.type,i=t.glslVersion,a=r.createTexture();if(!a)return!1;r.bindTexture(r.TEXTURE_2D,a);var s=r[o.CLAMP_TO_EDGE],l=r[o.CLAMP_TO_EDGE],u=r[o.NEAREST];r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,s),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,l),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,u),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,u);var f=e.getGLTextureParameters({gl:r,name:"testFramebufferWrite",numComponents:1,writable:!0,internalType:n,glslVersion:i,errorCallback:function(){}}),c=f.glInternalFormat,p=f.glFormat,h=f.glType;r.texImage2D(r.TEXTURE_2D,0,c,100,100,0,p,h,null);var d=r.createFramebuffer();if(!d)return r.deleteTexture(a),!1;r.bindFramebuffer(r.FRAMEBUFFER,d),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,a,0);var _=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.deleteTexture(a),r.deleteFramebuffer(d),_},Object.defineProperty(e.prototype,"bufferIndex",{get:function(){return this._bufferIndex},enumerable:!1,configurable:!0}),e.prototype.saveCurrentStateToDataLayer=function(e){if(this.numBuffers<2)throw new Error("Can't call DataLayer.saveCurrentStateToDataLayer on DataLayer "+this.name+" with less than 2 buffers.");if(!this.writable)throw new Error("Can't call DataLayer.saveCurrentStateToDataLayer on read-only DataLayer "+this.name+".");if(e.writable)throw new Error("Can't call DataLayer.saveCurrentStateToDataLayer on DataLayer "+this.name+" using writable DataLayer "+e.name+".");if(e.glWrapS!==this.glWrapS||e.glWrapT!==this.glWrapT||e.wrapS!==this.wrapS||e.wrapT!==this.wrapT||e.width!==this.width||e.height!==this.height||e.glFilter!==this.glFilter||e.filter!==this.filter||e.glNumChannels!==this.glNumChannels||e.numComponents!==this.numComponents||e.glType!==this.glType||e.type!==this.type||e.glFormat!==this.glFormat||e.glInternalFormat!==this.glInternalFormat)throw new Error("Incompatible texture params between DataLayers "+e.name+" and "+this.name+".");if(!this.textureOverrides){this.textureOverrides=[];for(var t=0;t<this.numBuffers;t++)this.textureOverrides.push(void 0)}if(this.textureOverrides[this._bufferIndex])throw new Error("Can't call DataLayer.saveCurrentStateToDataLayer on DataLayer "+this.name+", this DataLayer has not written new state since last call to DataLayer.saveCurrentStateToDataLayer.");var r=this.getCurrentStateTexture();this.textureOverrides[this._bufferIndex]=r,this.buffers[this._bufferIndex].texture=e.getCurrentStateTexture(),e._setCurrentStateTexture(r);var n=this.gl,i=this.buffers[this._bufferIndex],o=i.framebuffer,a=i.texture;if(!o)throw new Error("No framebuffer for writable DataLayer "+this.name+".");n.bindFramebuffer(n.FRAMEBUFFER,o),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,a,0),n.bindFramebuffer(n.FRAMEBUFFER,null)},e.prototype._setCurrentStateTexture=function(e){if(this.writable)throw new Error("Can't call DataLayer._setCurrentStateTexture on writable texture "+this.name+".");this.buffers[this._bufferIndex].texture=e},e.prototype.validateDataArray=function(e){if(e){var t=this,r=t.width,i=t.height,a=t.length,s=t.numComponents,l=t.glNumChannels,u=t.type,f=t.internalType,c=t.name;if(a&&e.length!==a*s||!a&&e.length!==r*i*s)throw new Error("Invalid data length "+e.length+' for DataLayer "'+c+'" of size '+(a||r+"x"+i)+"x"+s+".");var p=!1;switch(u){case o.HALF_FLOAT:case o.FLOAT:p=p||e.constructor!==Float32Array;break;case o.UNSIGNED_BYTE:p=p||e.constructor!==Uint8Array;break;case o.BYTE:p=p||e.constructor!==Int8Array;break;case o.UNSIGNED_SHORT:p=p||e.constructor!==Uint16Array;break;case o.SHORT:p=p||e.constructor!==Int16Array;break;case o.UNSIGNED_INT:p=p||e.constructor!==Uint32Array;break;case o.INT:p=p||e.constructor!==Int32Array;break;default:throw new Error('Error initing DataLayer "'+c+'".  Unsupported type "'+u+'" for WebGLCompute.initDataLayer.')}if(p)throw new Error("Invalid TypedArray of type "+e.constructor.name+' supplied to DataLayer "'+c+'" of type "'+u+'".');var h=e,d=r*i*l,_=h.length!==d,g=f===o.HALF_FLOAT;if(u!==f||_||g){switch(f){case o.HALF_FLOAT:h=new Uint16Array(d);break;case o.FLOAT:h=new Float32Array(d);break;case o.UNSIGNED_BYTE:h=new Uint8Array(d);break;case o.BYTE:h=new Int8Array(d);break;case o.UNSIGNED_SHORT:h=new Uint16Array(d);break;case o.SHORT:h=new Int16Array(d);break;case o.UNSIGNED_INT:h=new Uint32Array(d);break;case o.INT:h=new Int32Array(d);break;default:throw new Error("Error initing "+c+".  Unsupported internalType "+f+" for WebGLCompute.initDataLayer.")}for(var m=g?new DataView(h.buffer):null,v=0,y=e.length/s;v<y;v++)for(var b=0;b<s;b++){var T=e[v*s+b],E=v*l+b;g?n.setFloat16(m,2*E,T,!0):h[E]=T}}return h}},e.prototype.initBuffers=function(e){for(var t=this,r=t.name,n=t.numBuffers,i=t.gl,o=t.width,a=t.height,s=t.glInternalFormat,l=t.glFormat,u=t.glType,f=t.glFilter,c=t.glWrapS,p=t.glWrapT,h=t.writable,d=t.errorCallback,_=this.validateDataArray(e),g=0;g<n;g++){var m=i.createTexture();if(!m)return void d('Could not init texture for DataLayer "'+r+'": '+i.getError()+".");i.bindTexture(i.TEXTURE_2D,m),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_S,c),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_T,p),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,f),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,f),i.texImage2D(i.TEXTURE_2D,0,s,o,a,0,l,u,_||null);var v={texture:m};if(h){var y=i.createFramebuffer();if(!y)return void d('Could not init framebuffer for DataLayer "'+r+'": '+i.getError()+".");i.bindFramebuffer(i.FRAMEBUFFER,y),i.framebufferTexture2D(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,m,0);var b=i.checkFramebufferStatus(i.FRAMEBUFFER);b!=i.FRAMEBUFFER_COMPLETE&&d('Invalid status for framebuffer for DataLayer "'+r+'": '+b+"."),v.framebuffer=y}this.buffers.push(v)}i.bindFramebuffer(i.FRAMEBUFFER,null)},e.prototype.getCurrentStateTexture=function(){return this.textureOverrides&&this.textureOverrides[this._bufferIndex]?this.textureOverrides[this._bufferIndex]:this.buffers[this._bufferIndex].texture},e.prototype.getPreviousStateTexture=function(e){if(void 0===e&&(e=-1),1===this.numBuffers)throw new Error('Cannot call getPreviousStateTexture on DataLayer "'+this.name+'" with only one buffer.');var t=this._bufferIndex+e+this.numBuffers;if(t<0||t>=this.numBuffers)throw new Error("Invalid index "+e+" passed to getPreviousStateTexture on DataLayer "+this.name+" with "+this.numBuffers+" buffers.");return this.textureOverrides&&this.textureOverrides[t]?this.textureOverrides[t]:this.buffers[t].texture},e.prototype._usingTextureOverrideForCurrentBuffer=function(){return this.textureOverrides&&this.textureOverrides[this.bufferIndex]},e.prototype._bindOutputBufferForWrite=function(e){this.gl,e&&(this._bufferIndex=(this._bufferIndex+1)%this.numBuffers),this._bindOutputBuffer(),this.textureOverrides&&(this.textureOverrides[this._bufferIndex]=void 0)},e.prototype._bindOutputBuffer=function(){var e=this.gl,t=this.buffers[this._bufferIndex].framebuffer;if(!t)throw new Error('DataLayer "'+this.name+'" is not writable.');e.bindFramebuffer(e.FRAMEBUFFER,t)},e.prototype.setData=function(e){this.destroyBuffers(),this.initBuffers(e)},e.prototype.resize=function(t,r){var n=e.calcSize(t,this.name),i=n.length,o=n.width,a=n.height;this.length=i,this.width=o,this.height=a,this.destroyBuffers(),this.initBuffers(r)},e.prototype.clear=function(){this.destroyBuffers(),this.initBuffers()},e.prototype.getDimensions=function(){return[this.width,this.height]},e.prototype.getLength=function(){if(!this.length)throw new Error('Cannot call getLength() on 2D DataLayer "'+this.name+'".');return this.length},e.prototype.destroyBuffers=function(){var e=this.gl,t=this.buffers;t.forEach((function(t){var r=t.framebuffer,n=t.texture;e.deleteTexture(n),r&&e.deleteFramebuffer(r),delete t.texture,delete t.framebuffer})),t.length=0,delete this.textureOverrides},e.prototype.destroy=function(){this.destroyBuffers(),delete this.gl,delete this.errorCallback},e}();t.DataLayer=l},664:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GPUProgram=void 0;var n=r(627),i=r(738),o=r(593),a="DEFAULT",s="SEGMENT",l="POINTS",u="VECTOR_FIELD",f="INDEXED_LINES",c=function(){function e(e){var t=this;this.uniforms={};var r=e.gl,i=e.errorCallback,a=e.name,s=e.fragmentShader,l=e.glslVersion,u=e.uniforms,f=e.defines;if(this.gl=r,this.errorCallback=i,this.name=a,this.glslVersion=l,"string"==typeof s||"string"==typeof s[0]){var c="string"==typeof s?s:s.join("\n");f&&(c=Object.keys(f).map((function(e){if(!n.isString(e)||!n.isString(f[e]))throw new Error("GPUProgram defines must be passed in as key value pairs that are both strings, got key value pair of type "+typeof e+" : "+typeof f[e]+".");return"#define "+e+" "+f[e]+"\n"})).join("\n")+c);var p=o.compileShader(r,i,c,r.FRAGMENT_SHADER,a);if(!p)return void i('Unable to compile fragment shader for program "'+a+'".');this.fragmentShader=p}else if(f)throw new Error('Unable to attach defines to program "'+a+'" because fragment shader is already compiled.');null==u||u.forEach((function(e){var r=e.name,n=e.value,i=e.dataType;t.setUniform(r,n,i)}))}return e.prototype.initProgram=function(e,t){var r=this,n=r.gl,i=r.fragmentShader,o=r.errorCallback,a=r.uniforms,s=n.createProgram();if(s){if(n.attachShader(s,i),n.attachShader(s,e),n.linkProgram(s),n.getProgramParameter(s,n.LINK_STATUS)){for(var l=Object.keys(a),u=0;u<l.length;u++){var f=l[u],c=a[f],p=c.value,h=c.type;this.setProgramUniform(s,t,f,p,h)}return s}o('Program "'+name+'" failed to link: '+n.getProgramInfoLog(s))}else o("Unable to init gl program: "+name+".")},Object.defineProperty(e.prototype,"defaultProgram",{get:function(){if(this._defaultProgram)return this._defaultProgram;if(void 0===e.defaultVertexShader){var t=this,n=t.gl,s=t.name,l=t.errorCallback,u=t.glslVersion===i.GLSL3?r(435):r(790),f=o.compileShader(n,l,u,n.VERTEX_SHADER,s);if(!f)return void l('Unable to compile default vertex shader for program "'+s+'".');e.defaultVertexShader=f}var c=this.initProgram(e.defaultVertexShader,a);return this._defaultProgram=c,this._defaultProgram},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"segmentProgram",{get:function(){if(this._segmentProgram)return this._segmentProgram;if(void 0===e.segmentVertexShader){var t=this,n=t.gl,a=t.name,l=t.errorCallback,u=t.glslVersion===i.GLSL3?r(218):r(852),f=o.compileShader(n,l,u,n.VERTEX_SHADER,a);if(!f)return void l('Unable to compile segment vertex shader for program "'+a+'".');e.segmentVertexShader=f}var c=this.initProgram(e.segmentVertexShader,s);return this._segmentProgram=c,this._segmentProgram},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pointsProgram",{get:function(){if(this._pointsProgram)return this._pointsProgram;if(void 0===e.pointsVertexShader){var t=this,n=t.gl,a=t.name,s=t.errorCallback,u=t.glslVersion===i.GLSL3?pointsVertexShaderSource_glsl3:r(198);if(void 0===u)throw new Error("Need to write glsl3 version of pointsVertexShader.");var f=o.compileShader(n,s,u,n.VERTEX_SHADER,a);if(!f)return void s('Unable to compile points vertex shader for program "'+a+'".');e.pointsVertexShader=f}var c=this.initProgram(e.pointsVertexShader,l);return this._pointsProgram=c,this._pointsProgram},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"vectorFieldProgram",{get:function(){if(this._vectorFieldProgram)return this._vectorFieldProgram;if(void 0===e.vectorFieldVertexShader){var t=this,n=t.gl,a=t.name,s=t.errorCallback,l=t.glslVersion===i.GLSL3?vectorFieldVertexShaderSource_glsl3:r(502);if(void 0===l)throw new Error("Need to write glsl3 version of vectorFieldVertexShader.");var f=o.compileShader(n,s,l,n.VERTEX_SHADER,a);if(!f)return void s('Unable to compile vector field vertex shader for program "'+a+'".');e.vectorFieldVertexShader=f}var c=this.initProgram(e.vectorFieldVertexShader,u);return this._vectorFieldProgram=c,this._vectorFieldProgram},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"indexedLinesProgram",{get:function(){if(this._indexedLinesProgram)return this._indexedLinesProgram;if(void 0===e.indexedLinesVertexShader){var t=this,n=t.gl,a=t.name,s=t.errorCallback,l=t.glslVersion===i.GLSL3?indexedLinesVertexShaderSource_glsl3:r(968);if(void 0===l)throw new Error("Need to write glsl3 version of indexedLinesVertexShader.");var u=o.compileShader(n,s,l,n.VERTEX_SHADER,a);if(!u)return void s('Unable to compile vector field vertex shader for program "'+a+'".');e.indexedLinesVertexShader=u}var c=this.initProgram(e.indexedLinesVertexShader,f);return this._indexedLinesProgram=c,this._indexedLinesProgram},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activePrograms",{get:function(){var e=[];return this._defaultProgram&&e.push({program:this._defaultProgram,programName:a}),this._segmentProgram&&e.push({program:this._segmentProgram,programName:s}),this._pointsProgram&&e.push({program:this._pointsProgram,programName:l}),this._vectorFieldProgram&&e.push({program:this._vectorFieldProgram,programName:u}),this._indexedLinesProgram&&e.push({program:this._indexedLinesProgram,programName:f}),e},enumerable:!1,configurable:!0}),e.prototype.uniformTypeForValue=function(e,t){var r=this;if(t===i.FLOAT){if(n.isArray(e))e.forEach((function(t){if(!n.isNumber(t))throw new Error("Invalid uniform value: "+e+' for program "'+r.name+'", expected float or float[] of length 1-4.')}));else if(!n.isNumber(e))throw new Error("Invalid uniform value: "+e+' for program "'+this.name+'", expected float or float[] of length 1-4.');if(!n.isArray(e)||1===e.length)return i.FLOAT_1D_UNIFORM;if(2===e.length)return i.FLOAT_2D_UNIFORM;if(3===e.length)return i.FLOAT_3D_UNIFORM;if(4===e.length)return i.FLOAT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e+' for program "'+this.name+'", expected float or float[] of length 1-4.')}if(t===i.INT){if(n.isArray(e))e.forEach((function(t){if(!n.isInteger(t))throw new Error("Invalid uniform value: "+e+' for program "'+r.name+'", expected int or int[] of length 1-4.')}));else if(!n.isInteger(e))throw new Error("Invalid uniform value: "+e+' for program "'+this.name+'", expected int or int[] of length 1-4.');if(!n.isArray(e)||1===e.length)return i.INT_1D_UNIFORM;if(2===e.length)return i.INT_2D_UNIFORM;if(3===e.length)return i.INT_3D_UNIFORM;if(4===e.length)return i.INT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e+' for program "'+this.name+'", expected int or int[] of length 1-4.')}throw new Error("Invalid uniform data type: "+t+' for program "'+this.name+'", expected '+i.FLOAT+" or "+i.INT+".")},e.prototype.setProgramUniform=function(e,t,r,n,o){var a,s=this,l=s.gl,u=s.uniforms,f=s.errorCallback;l.useProgram(e);var c=null===(a=u[r])||void 0===a?void 0:a.location[t];if(void 0===c){var p=l.getUniformLocation(e,r);if(!p)return void f('Could not init uniform "'+r+'" for program "'+this.name+'".\nCheck that uniform is present in shader code, unused uniforms may be removed by compiler.\nAlso check that uniform type in shader code matches type '+o+".\nError code: "+l.getError()+".");c=p,u[r]&&(u[r].location[t]=c)}switch(o){case i.FLOAT_1D_UNIFORM:l.uniform1f(c,n);break;case i.FLOAT_2D_UNIFORM:l.uniform2fv(c,n);break;case i.FLOAT_3D_UNIFORM:l.uniform3fv(c,n);break;case i.FLOAT_4D_UNIFORM:l.uniform4fv(c,n);break;case i.INT_1D_UNIFORM:l.uniform1i(c,n);break;case i.INT_2D_UNIFORM:l.uniform2iv(c,n);break;case i.INT_3D_UNIFORM:l.uniform3iv(c,n);break;case i.INT_4D_UNIFORM:l.uniform4iv(c,n);break;default:throw new Error("Unknown uniform type "+o+' for GPUProgram "'+this.name+'".')}},e.prototype.setUniform=function(e,t,r){var n,i=this.activePrograms,o=this.uniforms,a=null===(n=o[e])||void 0===n?void 0:n.type;if(r){var s=this.uniformTypeForValue(t,r);if(void 0===a)a=s;else if(a!==s)throw new Error('Uniform "'+e+'" for GPUProgram "'+this.name+'" cannot change from type '+a+" to type "+s+".")}if(void 0===a)throw new Error('Unknown type for uniform "'+e+'", please pass in dataType to GPUProgram.setUniform when initing a new uniform.');o[e]?o[e].value=t:o[e]={type:a,location:{},value:t};for(var l=0;l<i.length;l++){var u=i[l],f=u.program,c=u.programName;this.setProgramUniform(f,c,e,t,a)}},e.prototype.setVertexUniform=function(e,t,r,n){var i,o=this.uniformTypeForValue(r,n);if(void 0===e)throw new Error("Must pass in valid WebGLProgram to setVertexUniform, got undefined.");if(e===this._defaultProgram?i=a:e===this._segmentProgram?i=s:e===this._pointsProgram?i=l:e===this._vectorFieldProgram?i=u:e===this._indexedLinesProgram&&(i=f),void 0===i)throw new Error("Could not find valid programName for WebGLProgram.");this.setProgramUniform(e,i,t,r,o)},e.prototype.destroy=function(){var e=this,t=e.gl,r=e.fragmentShader;e.activePrograms.forEach((function(e){var r=e.program;t.deleteProgram(r)})),t.deleteShader(r),delete this._defaultProgram,delete this._segmentProgram,delete this._pointsProgram,delete this._vectorFieldProgram,delete this._indexedLinesProgram,delete this.fragmentShader,delete this.gl,delete this.errorCallback,delete this.program},e}();t.GPUProgram=c},215:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.WebGLCompute=void 0;var i=r(162),o=r(809),a=r(930),s=r(738),l=r(664),u=r(406),f=r(593),c=r(501),p=r(627),h=function(){function e(e,t,n){void 0===t&&(t=function(e){throw new Error(e)}),this.errorState=!1,this._circlePositionsBuffer={};var i=["canvas","context","antialias","glslVersion"];Object.keys(e).forEach((function(e){if(i.indexOf(e)<0)throw new Error("Invalid key "+e+" passed to WebGLCompute.constructor.  Valid keys are "+i.join(", ")+".")}));var o=this;this.errorCallback=function(e){o.errorState||(o.errorState=!0,t(e))};var a=e.canvas,l=e.context;if(!l){var u={};if(void 0!==e.antialias&&(u.antialias=e.antialias),null===(l=a.getContext("webgl2",u)||a.getContext("webgl",u)||a.getContext("experimental-webgl",u)))return void this.errorCallback("Unable to initialize WebGL context.")}f.isWebGL2(l)?console.log("Using WebGL 2.0 context."):console.log("Using WebGL 1.0 context."),this.gl=l,this.renderer=n;var c=void 0===e.glslVersion?s.GLSL1:e.glslVersion;this.glslVersion=c,f.isWebGL2(l)||c!==s.GLSL3||console.warn("GLSL3.x is incompatible with WebGL1.0 contexts."),l.disable(l.DEPTH_TEST),l.pixelStorei(l.UNPACK_ALIGNMENT,1),this.copyFloatProgram=this.initProgram({name:"copyFloat",fragmentShader:c===s.GLSL3?r(518):r(541),uniforms:[{name:"u_state",value:0,dataType:s.INT}]}),c===s.GLSL3?(this.copyIntProgram=this.initProgram({name:"copyInt",fragmentShader:r(546),uniforms:[{name:"u_state",value:0,dataType:s.INT}]}),this.copyUintProgram=this.initProgram({name:"copyUint",fragmentShader:r(374),uniforms:[{name:"u_state",value:0,dataType:s.INT}]})):(this.copyIntProgram=this.copyFloatProgram,this.copyUintProgram=this.copyFloatProgram),l.bindBuffer(l.ARRAY_BUFFER,null),this.onResize(a),this.maxNumTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),console.log(this.maxNumTextures+" textures max.")}return e.initWithThreeRenderer=function(t,r,i){return new e(n({canvas:t.domElement,context:t.getContext()},r),i,t)},Object.defineProperty(e.prototype,"singleColorProgram",{get:function(){if(void 0===this._singleColorProgram){var e=this.initProgram({name:"singleColor",fragmentShader:this.glslVersion===s.GLSL3?r(805):r(971)});this._singleColorProgram=e}return this._singleColorProgram},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"singleColorWithWrapCheckProgram",{get:function(){if(void 0===this._singleColorWithWrapCheckProgram){var e=this.initProgram({name:"singleColorWithWrapCheck",fragmentShader:this.glslVersion===s.GLSL3?r(674):r(425)});this._singleColorWithWrapCheckProgram=e}return this._singleColorWithWrapCheckProgram},enumerable:!1,configurable:!0}),e.prototype.isWebGL2=function(){return f.isWebGL2(this.gl)},Object.defineProperty(e.prototype,"quadPositionsBuffer",{get:function(){if(void 0===this._quadPositionsBuffer){var e=new Float32Array([-1,-1,1,-1,-1,1,1,1]);this._quadPositionsBuffer=this.initVertexBuffer(e)}return this._quadPositionsBuffer},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"boundaryPositionsBuffer",{get:function(){if(void 0===this._boundaryPositionsBuffer){var e=new Float32Array([-1,-1,1,-1,1,1,-1,1,-1,-1]);this._boundaryPositionsBuffer=this.initVertexBuffer(e)}return this._boundaryPositionsBuffer},enumerable:!1,configurable:!0}),e.prototype.getCirclePositionsBuffer=function(e){if(null==this._circlePositionsBuffer[e]){for(var t=[0,0],r=0;r<=e;r++)t.push(Math.cos(2*Math.PI*r/e),Math.sin(2*Math.PI*r/e));var n=new Float32Array(t),i=this.initVertexBuffer(n);this._circlePositionsBuffer[e]=i}return this._circlePositionsBuffer[e]},e.prototype.initVertexBuffer=function(e){var t=this.errorCallback,r=this.gl,n=r.createBuffer();if(n)return r.bindBuffer(r.ARRAY_BUFFER,n),r.bufferData(r.ARRAY_BUFFER,e,r.STATIC_DRAW),n;t("Unable to allocate gl buffer.")},e.prototype.initProgram=function(e){var t=["name","fragmentShader","uniforms","defines"];Object.keys(e).forEach((function(r){if(t.indexOf(r)<0)throw new Error("Invalid key "+r+" passed to WebGLCompute.initProgram with name "+e.name+".  Valid keys are "+t.join(", ")+".")}));var r=this,i=r.gl,o=r.errorCallback,a=r.glslVersion;return new l.GPUProgram(n(n({},e),{gl:i,errorCallback:o,glslVersion:a}))},e.prototype.initDataLayer=function(e){var t=["name","dimensions","type","numComponents","data","filter","wrapS","wrapT","writable","numBuffers"];Object.keys(e).forEach((function(r){if(t.indexOf(r)<0)throw new Error("Invalid key "+r+" passed to WebGLCompute.initDataLayer with name "+e.name+".  Valid keys are "+t.join(", ")+".")}));var r=this,i=r.gl,o=r.errorCallback,s=r.glslVersion;return new a.DataLayer(n(n({},e),{gl:i,glslVersion:s,errorCallback:o}))},e.prototype.initTexture=function(e){var t=["name","url","filter","wrapS","wrapT","format","type","onLoad"];Object.keys(e).forEach((function(r){if(t.indexOf(r)<0)throw new Error("Invalid key "+r+" passed to WebGLCompute.initTexture with name "+e.name+".  Valid keys are "+t.join(", ")+".")}));var r=e.url,n=e.name;if(!p.isString(r))throw new Error("Expected WebGLCompute.initTexture params to have url of type string, got "+r+" of type "+typeof r+".");if(!p.isString(n))throw new Error("Expected WebGLCompute.initTexture params to have name of type string, got "+n+" of type "+typeof n+".");var i=void 0!==e.filter?e.filter:s.NEAREST;if(!p.isValidFilterType(i))throw new Error("Invalid filter: "+i+' for DataLayer "'+n+'", must be '+p.validFilterTypes.join(", ")+".");var o=void 0!==e.wrapS?e.wrapS:s.CLAMP_TO_EDGE;if(!p.isValidWrapType(o))throw new Error("Invalid wrapS: "+o+' for DataLayer "'+n+'", must be '+p.validWrapTypes.join(", ")+".");var a=void 0!==e.wrapT?e.wrapT:s.CLAMP_TO_EDGE;if(!p.isValidWrapType(a))throw new Error("Invalid wrapT: "+a+' for DataLayer "'+n+'", must be '+p.validWrapTypes.join(", ")+".");var l=void 0!==e.format?e.format:s.RGBA;if(!p.isValidTextureFormatType(l))throw new Error("Invalid format: "+l+' for DataLayer "'+n+'", must be '+p.validTextureFormatTypes.join(", ")+".");var u=void 0!==e.type?e.type:s.UNSIGNED_BYTE;if(!p.isValidTextureDataType(u))throw new Error("Invalid type: "+u+' for DataLayer "'+n+'", must be '+p.validTextureDataTypes.join(", ")+".");var c=this.gl,h=this.errorCallback,d=c.createTexture();if(null===d)throw new Error("Unable to init glTexture.");c.bindTexture(c.TEXTURE_2D,d);var _=c.RGBA,g=c[l],m=c[u],v=new Uint8Array([0,0,0,0]);c.texImage2D(c.TEXTURE_2D,0,_,1,1,0,g,m,v);var y=new Image;return y.onload=function(){c.bindTexture(c.TEXTURE_2D,d),c.texImage2D(c.TEXTURE_2D,0,_,g,m,y),f.isPowerOf2(y.width)&&f.isPowerOf2(y.height)||console.warn("Texture "+n+" dimensions ["+y.width+", "+y.height+"] are not power of 2."),c.texParameteri(c.TEXTURE_2D,c.TEXTURE_WRAP_S,c[o]),c.texParameteri(c.TEXTURE_2D,c.TEXTURE_WRAP_T,c[a]),c.texParameteri(c.TEXTURE_2D,c.TEXTURE_MIN_FILTER,c[i]),c.texParameteri(c.TEXTURE_2D,c.TEXTURE_MAG_FILTER,c[i]),e.onLoad&&e.onLoad(d)},y.onerror=function(e){h("Error loading image "+n+": "+e)},y.src=r,d},e.prototype.onResize=function(e){var t=e.clientWidth,r=e.clientHeight;e.width=t,e.height=r,this.width=t,this.height=r},e.prototype.drawSetup=function(e,t,r,n){var i=this.gl;if(e){var o=r.map((function(e){return e.getCurrentStateTexture?e.getCurrentStateTexture():e}));this.setOutputLayer(t,r,n),i.useProgram(e);for(var a=0;a<o.length;a++)i.activeTexture(i.TEXTURE0+a),i.bindTexture(i.TEXTURE_2D,o[a])}},e.prototype.copyProgramForType=function(e){switch(e){case s.HALF_FLOAT:case s.FLOAT:return this.copyFloatProgram;case s.UNSIGNED_BYTE:case s.UNSIGNED_SHORT:case s.UNSIGNED_INT:return this.copyUintProgram;case s.BYTE:case s.SHORT:case s.INT:return this.copyIntProgram;default:throw new Error("Invalid type: "+e+" passed to WebGLCompute.copyProgramForType.")}},e.prototype.passThroughLayerDataFromInputToOutput=function(e){var t=this.copyProgramForType(e.internalType);this.step(t,[e],e)},e.prototype.setOutputLayer=function(e,t,r){var n=this.gl;if(r){if(t.indexOf(r)>-1){if(1===r.numBuffers)throw new Error("\nCannot use same buffer for input and output of a program.\nTry increasing the number of buffers in your output layer to at least 2 so you\ncan render to nextState using currentState as an input.");e?r._bindOutputBufferForWrite(!0):(this.passThroughLayerDataFromInputToOutput(r),r._bindOutputBufferForWrite(!1))}else e||r._usingTextureOverrideForCurrentBuffer()&&this.passThroughLayerDataFromInputToOutput(r),r._bindOutputBufferForWrite(!1);var i=r.getDimensions(),o=i[0],a=i[1];n.viewport(0,0,o,a)}else{n.bindFramebuffer(n.FRAMEBUFFER,null);var s=this.width,l=this.height;n.viewport(0,0,s,l)}},e.prototype.setPositionAttribute=function(e){var t=this.gl,r=t.getAttribLocation(e,"a_internal_position");t.vertexAttribPointer(r,2,t.FLOAT,!1,0,0),t.enableVertexAttribArray(r)},e.prototype.setIndexAttribute=function(e){var t=this.gl,r=t.getAttribLocation(e,"a_internal_index");t.vertexAttribPointer(r,1,t.FLOAT,!1,0,0),t.enableVertexAttribArray(r)},e.prototype.step=function(e,t,r,n){void 0===t&&(t=[]);var i=this,o=i.gl,l=i.errorState,u=i.quadPositionsBuffer;if(!l){var f=e.defaultProgram;t=t.constructor===a.DataLayer?[t]:t,this.drawSetup(e.defaultProgram,!0,t,r),e.setVertexUniform(f,"u_internal_scale",[1,1],s.FLOAT),e.setVertexUniform(f,"u_internal_translation",[0,0],s.FLOAT),o.bindBuffer(o.ARRAY_BUFFER,u),this.setPositionAttribute(e.defaultProgram),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.TRIANGLE_STRIP,0,4),o.disable(o.BLEND)}},e.prototype.stepBoundary=function(e,t,r,n){void 0===t&&(t=[]);var i=this,o=i.gl,l=i.errorState,u=i.boundaryPositionsBuffer;if(!l){var f=e.defaultProgram;t=t.constructor===a.DataLayer?[t]:t,this.drawSetup(f,!1,t,r);var c=r?r.getDimensions():[this.width,this.height],p=[1/c[0],1/c[1]];if(e.setVertexUniform(f,"u_internal_scale",[1-p[0],1-p[1]],s.FLOAT),e.setVertexUniform(f,"u_internal_translation",p,s.FLOAT),o.bindBuffer(o.ARRAY_BUFFER,u),this.setPositionAttribute(f),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),null==n?void 0:n.singleEdge)switch(null==n?void 0:n.singleEdge){case"LEFT":o.drawArrays(o.LINES,3,2);break;case"RIGHT":o.drawArrays(o.LINES,1,2);break;case"TOP":o.drawArrays(o.LINES,2,2);break;case"BOTTOM":o.drawArrays(o.LINES,0,2);break;default:throw new Error("Unknown boundary edge type: "+(null==n?void 0:n.singleEdge)+".")}else o.drawArrays(o.LINE_LOOP,0,4);o.disable(o.BLEND)}},e.prototype.stepNonBoundary=function(e,t,r,n){void 0===t&&(t=[]);var i=this,o=i.gl,l=i.errorState,u=i.quadPositionsBuffer;if(!l){var f=e.defaultProgram;t=t.constructor===a.DataLayer?[t]:t,this.drawSetup(f,!1,t,r);var c=r?r.getDimensions():[this.width,this.height],p=[1/c[0],1/c[1]];e.setVertexUniform(f,"u_internal_scale",[1-2*p[0],1-2*p[1]],s.FLOAT),e.setVertexUniform(f,"u_internal_translation",p,s.FLOAT),o.bindBuffer(o.ARRAY_BUFFER,u),this.setPositionAttribute(f),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.TRIANGLE_STRIP,0,4),o.disable(o.BLEND)}},e.prototype.stepCircle=function(e,t,r,n,i,o){void 0===n&&(n=[]);var l=this.gl,u=this.errorState,f=i?i.getDimensions():[this.width,this.height],c=f[0],p=f[1];if(!u){var h=e.defaultProgram;n=n.constructor===a.DataLayer?[n]:n,this.drawSetup(h,!1,n,i),e.setVertexUniform(h,"u_internal_scale",[2*r/c,2*r/p],s.FLOAT),e.setVertexUniform(h,"u_internal_translation",[2*t[0]/c-1,2*t[1]/p-1],s.FLOAT);var d=(null==o?void 0:o.numSegments)?null==o?void 0:o.numSegments:18;if(d<3)throw new Error("numSegments for WebGLCompute.stepCircle must be greater than 2, got "+d+".");l.bindBuffer(l.ARRAY_BUFFER,this.getCirclePositionsBuffer(d)),this.setPositionAttribute(h),(null==o?void 0:o.shouldBlendAlpha)&&(l.enable(l.BLEND),l.blendFunc(l.SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA)),l.drawArrays(l.TRIANGLE_FAN,0,d+2),l.disable(l.BLEND)}},e.prototype.stepSegment=function(e,t,r,n,i,o,l){void 0===i&&(i=[]);var u=this.gl,f=this.errorState,c=o?o.getDimensions():[this.width,this.height],p=c[0],h=c[1];if(!f){var d=e.segmentProgram;i=i.constructor===a.DataLayer?[i]:i,this.drawSetup(d,!1,i,o),e.setVertexUniform(d,"u_internal_halfThickness",n/2,s.FLOAT),e.setVertexUniform(d,"u_internal_scale",[2/p,2/h],s.FLOAT);var _=t[0]-r[0],g=t[1]-r[1],m=Math.atan2(g,_);e.setVertexUniform(d,"u_internal_rotation",m,s.FLOAT);var v=(t[0]+r[0])/2,y=(t[1]+r[1])/2;e.setVertexUniform(d,"u_internal_translation",[2*v/p-1,2*y/h-1],s.FLOAT);var b=Math.sqrt(_*_+g*g),T=(null==l?void 0:l.numCapSegments)?2*(null==l?void 0:l.numCapSegments):18;if(null==l?void 0:l.noEndCaps)e.setVertexUniform(d,"u_internal_length",b-2*n,s.FLOAT),u.bindBuffer(u.ARRAY_BUFFER,this.quadPositionsBuffer);else{if(T<6||T%6!=0)throw new Error("numSegments for WebGLCompute.stepSegment must be divisible by 6, got "+T+".");e.setVertexUniform(d,"u_internal_length",b-2*n*Math.sin(Math.PI/T),s.FLOAT),u.bindBuffer(u.ARRAY_BUFFER,this.getCirclePositionsBuffer(T))}this.setPositionAttribute(d),(null==l?void 0:l.shouldBlendAlpha)&&(u.enable(u.BLEND),u.blendFunc(u.SRC_ALPHA,u.ONE_MINUS_SRC_ALPHA)),(null==l?void 0:l.noEndCaps)?u.drawArrays(u.TRIANGLE_STRIP,0,4):u.drawArrays(u.TRIANGLE_FAN,0,T+2),u.disable(u.BLEND)}},e.prototype.drawPoints=function(e,t,r,n){var i=this,o=i.gl,l=i.errorState,u=i.pointIndexArray,f=r?r.getDimensions():[this.width,this.height],c=f[0],p=f[1];if(!l){if((e=e.constructor===a.DataLayer?[e]:e).length<1)throw new Error("Invalid inputLayers for drawPoints: must pass a position DataLayer as first element of inputLayers.");var h=e[0];if(2!==h.numComponents&&4!==h.numComponents)throw new Error('WebGLCompute.drawPoints() must be passed a position DataLayer with either 2 or 4 components, got position DataLayer "'+h.name+'" with '+h.numComponents+" components.");var d=h.getLength(),_=(null==t?void 0:t.count)||d;if(_>d)throw new Error("Invalid count "+_+" for position DataLayer of length "+d+".");if(void 0===n){n=this.singleColorProgram;var g=(null==t?void 0:t.color)||[1,0,0];n.setUniform("u_color",g,s.FLOAT)}var m=n.pointsProgram;this.drawSetup(m,!1,e,r),n.setVertexUniform(m,"u_internal_positions",0,s.INT),n.setVertexUniform(m,"u_internal_scale",[1/c,1/p],s.FLOAT),n.setVertexUniform(m,"u_internal_positionWithAccumulation",4===h.numComponents?1:0,s.INT);var v=(null==t?void 0:t.pointSize)||1;n.setVertexUniform(m,"u_internal_pointSize",v,s.FLOAT);var y=h.getDimensions();if(n.setVertexUniform(m,"u_internal_positionsDimensions",y,s.FLOAT),n.setVertexUniform(m,"u_internal_wrapX",(null==t?void 0:t.wrapX)?1:0,s.INT),n.setVertexUniform(m,"u_internal_wrapY",(null==t?void 0:t.wrapY)?1:0,s.INT),void 0===this.pointIndexBuffer||u&&u.length<_){for(var b=new Float32Array(d),T=0;T<d;T++)b[T]=T;this.pointIndexArray=b,this.pointIndexBuffer=this.initVertexBuffer(b)}o.bindBuffer(o.ARRAY_BUFFER,this.pointIndexBuffer),this.setIndexAttribute(m),!1!==(null==t?void 0:t.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.POINTS,0,_),o.disable(o.BLEND)}},e.prototype.drawVectorField=function(e,t,r,n){var i=this,o=i.gl,l=i.errorState,u=i.vectorFieldIndexArray,f=r?r.getDimensions():[this.width,this.height],c=f[0],p=f[1];if(!l){if((e=e.constructor===a.DataLayer?[e]:e).length<1)throw new Error("Invalid inputLayers for drawVectorField: must pass a vector DataLayer as first element of inputLayers.");var h=e[0];if(2!==h.numComponents)throw new Error('WebGLCompute.drawVectorField() must be passed a vector DataLayer with 2 components, got vector DataLayer "'+h.name+'" with '+h.numComponents+" components.");if(void 0===n){n=this.singleColorProgram;var d=(null==t?void 0:t.color)||[1,0,0];n.setUniform("u_color",d,s.FLOAT)}var _=n.vectorFieldProgram;this.drawSetup(_,!1,e,r),n.setVertexUniform(_,"u_internal_vectors",0,s.INT);var g=(null==t?void 0:t.vectorScale)||1;n.setVertexUniform(_,"u_internal_scale",[g/c,g/p],s.FLOAT);var m=(null==t?void 0:t.vectorSpacing)||10,v=[Math.floor(c/m),Math.floor(p/m)];n.setVertexUniform(_,"u_internal_dimensions",v,s.FLOAT);var y=2*v[0]*v[1];if(void 0===this.vectorFieldIndexBuffer||u&&u.length<y){for(var b=new Float32Array(y),T=0;T<y;T++)b[T]=T;this.vectorFieldIndexArray=b,this.vectorFieldIndexBuffer=this.initVertexBuffer(b)}o.bindBuffer(o.ARRAY_BUFFER,this.vectorFieldIndexBuffer),this.setIndexAttribute(_),!1!==(null==t?void 0:t.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.LINES,0,y),o.disable(o.BLEND)}},e.prototype.drawIndexedLines=function(e,t,r,n,i){var o=this.gl,l=this.errorState,u=n?n.getDimensions():[this.width,this.height],f=u[0],c=u[1];if(!l){if((e=e.constructor===a.DataLayer?[e]:e).length<1)throw new Error("Invalid inputLayers for drawIndexedLines: must pass a position DataLayer as first element of inputLayers.");var p=e[0];if(2!==p.numComponents&&4!==p.numComponents)throw new Error('WebGLCompute.drawIndexedLines() must be passed a position DataLayer with either 2 or 4 components, got position DataLayer "'+p.name+'" with '+p.numComponents+" components.");if(void 0===i){i=(null==r?void 0:r.wrapX)||(null==r?void 0:r.wrapY)?this.singleColorWithWrapCheckProgram:this.singleColorProgram;var h=(null==r?void 0:r.color)||[1,0,0];i.setUniform("u_color",h,s.FLOAT)}var d=i.indexedLinesProgram;this.drawSetup(d,!1,e,n);var _=(null==r?void 0:r.count)?r.count:t.length;i.setVertexUniform(d,"u_internal_positions",0,s.INT),i.setVertexUniform(d,"u_internal_scale",[1/f,1/c],s.FLOAT),i.setVertexUniform(d,"u_internal_positionWithAccumulation",4===p.numComponents?1:0,s.INT);var g=p.getDimensions();if(i.setVertexUniform(d,"u_internal_positionsDimensions",g,s.FLOAT),i.setVertexUniform(d,"u_internal_wrapX",(null==r?void 0:r.wrapX)?1:0,s.INT),i.setVertexUniform(d,"u_internal_wrapY",(null==r?void 0:r.wrapY)?1:0,s.INT),void 0===this.indexedLinesIndexBuffer){var m=void 0;if(t.constructor!==Float32Array){m=new Float32Array(t.length);for(var v=0;v<_;v++)m[v]=t[v];console.warn("Converting indices array of type "+t.constructor+" to Float32Array in WebGLCompute.drawIndexedLines for WebGL compatibility, you may want to use a Float32Array to store this information so the conversion is not required.")}else m=t;this.indexedLinesIndexBuffer=this.initVertexBuffer(m)}else o.bindBuffer(o.ARRAY_BUFFER,this.indexedLinesIndexBuffer),o.bufferData(o.ARRAY_BUFFER,t,o.STATIC_DRAW);this.setIndexAttribute(d),!1!==(null==r?void 0:r.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.LINES,0,_),o.disable(o.BLEND)}},e.prototype.getContext=function(){return this.gl},e.prototype.getValues=function(e){var t=this.gl,r=this.glslVersion;e._bindOutputBuffer();var n,i=e.getDimensions(),o=i[0],a=i[1],l=e.glNumChannels,u=e.glType,f=e.glFormat,p=e.internalType;switch(p){case s.HALF_FLOAT:void 0!==t.FLOAT?(l=4,f=t.RGBA,u=t.FLOAT,n=new Float32Array(o*a*l)):n=new Uint16Array(o*a*l);break;case s.FLOAT:l=4,f=t.RGBA,n=new Float32Array(o*a*l);break;case s.UNSIGNED_BYTE:if(r===s.GLSL1){l=4,f=t.RGBA,n=new Uint8Array(o*a*l);break}l=4,f=t.RGBA_INTEGER,u=t.UNSIGNED_INT,n=new Uint32Array(o*a*l);break;case s.UNSIGNED_SHORT:l=4,f=t.RGBA_INTEGER,u=t.UNSIGNED_INT,n=new Uint32Array(o*a*l);break;case s.UNSIGNED_INT:l=4,f=t.RGBA_INTEGER,n=new Uint32Array(o*a*l);break;case s.BYTE:case s.SHORT:l=4,f=t.RGBA_INTEGER,u=t.INT,n=new Int32Array(o*a*l);break;case s.INT:l=4,f=t.RGBA_INTEGER,n=new Int32Array(o*a*l);break;default:throw new Error("Unsupported internalType "+p+" for getValues().")}if(this.readyToRead()){t.readPixels(0,0,o,a,f,u,n);var h=e.numComponents,d=e.type,_=o*a*h,g=p===s.HALF_FLOAT&&n.constructor===Uint16Array,m=g?new DataView(n.buffer):void 0,v=n;if(p!==d)switch(d){case s.HALF_FLOAT:case s.FLOAT:v=new Float32Array(_);break;case s.UNSIGNED_BYTE:v=new Uint8Array(_);break;case s.BYTE:v=new Int8Array(_);break;case s.UNSIGNED_SHORT:v=new Uint16Array(_);break;case s.SHORT:v=new Int16Array(_);break;case s.UNSIGNED_INT:v=new Uint32Array(_);break;case s.INT:v=new Int32Array(_);break;default:throw new Error("Unsupported type "+d+" for getValues().")}if(g||v!==n||h!==l)for(var y=0,b=o*a;y<b;y++)for(var T=y*l,E=y*h,w=0;w<h;w++)v[E+w]=g?c.getFloat16(m,2*(T+w),!0):n[T+w];return v.length!==_&&(v=v.slice(0,_)),v}throw new Error("Unable to read values from Buffer with status: "+t.checkFramebufferStatus(t.FRAMEBUFFER)+".")},e.prototype.readyToRead=function(){var e=this.gl;return e.checkFramebufferStatus(e.FRAMEBUFFER)==e.FRAMEBUFFER_COMPLETE},e.prototype.savePNG=function(e,t,r){void 0===t&&(t=e.name);var n=this.getValues(e),a=e.getDimensions(),l=a[0],u=a[1],f=document.createElement("canvas");f.width=l,f.height=u;for(var c=f.getContext("2d"),p=c.getImageData(0,0,l,u),h=p.data,d=e.type===s.FLOAT||e.type===s.HALF_FLOAT,_=0;_<u;_++)for(var g=0;g<l;g++){for(var m=_*l+g,v=(u-1-_)*l+g,y=0;y<e.numComponents;y++)h[4*v+y]=n[e.numComponents*m+y]*(d?255:1);e.numComponents<4&&(h[4*v+3]=255)}c.putImageData(p,0,0),f.toBlob((function(e){e?r?o.changeDpiBlob(e,r).then((function(e){i.saveAs(e,t+".png")})):i.saveAs(e,t+".png"):console.warn("Problem saving PNG, unable to init blob.")}),"image/png")},e.prototype.reset=function(){throw new Error("WebGLCompute.reset() not implemented.")},e.prototype.attachDataLayerToThreeTexture=function(e,t){if(!this.renderer)throw new Error("WebGLCompute was not inited with a renderer.");if(e.numBuffers>1)throw new Error('DataLayer "'+e.name+'" contains multiple WebGL textures (one for each buffer) that are flip-flopped during compute cycles, please choose a DataLayer with one buffer.');var r=this.renderer.properties.get(t);r.__webglTexture=e.getCurrentStateTexture(),r.__webglInit=!0},e.prototype.resetThreeState=function(){if(!this.renderer)throw new Error("WebGLCompute was not inited with a renderer.");var e=this.gl,t=this.renderer.getViewport(new u.Vector4);e.viewport(t.x,t.y,t.width,t.height),this.renderer.setRenderTarget(null),this.renderer.resetState()},e.prototype.destroy=function(){delete this.renderer},e}();t.WebGLCompute=h},581:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getExtension=t.EXT_COLOR_BUFFER_FLOAT=t.WEBGL_DEPTH_TEXTURE=t.OES_TEXTURE_HAlF_FLOAT_LINEAR=t.OES_TEXTURE_FLOAT_LINEAR=t.OES_TEXTURE_HALF_FLOAT=t.OES_TEXTURE_FLOAT=void 0;var r={};t.OES_TEXTURE_FLOAT="OES_texture_float",t.OES_TEXTURE_HALF_FLOAT="OES_texture_half_float",t.OES_TEXTURE_FLOAT_LINEAR="OES_texture_float_linear",t.OES_TEXTURE_HAlF_FLOAT_LINEAR="OES_texture_half_float_linear",t.WEBGL_DEPTH_TEXTURE="WEBGL_depth_texture",t.EXT_COLOR_BUFFER_FLOAT="EXT_color_buffer_float",t.getExtension=function(e,t,n,i){if(void 0===i&&(i=!1),void 0!==r[t])return r[t];var o;try{o=e.getExtension(t)}catch(e){}return o?(r[t]=o,console.log("Loaded extension: "+t+".")):(r[t]=!1,console.warn("Unsupported "+(i?"optional ":"")+"extension: "+t+".")),o||i||n("Required extension unsupported by this device / browser: "+t+"."),o}},607:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.WebGLCompute=void 0;var o=r(215);Object.defineProperty(t,"WebGLCompute",{enumerable:!0,get:function(){return o.WebGLCompute}}),i(r(738),t)},593:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isPowerOf2=t.isWebGL2=t.compileShader=void 0,t.compileShader=function(e,t,r,n,i){var o=e.createShader(n);return o?(e.shaderSource(o,r),e.compileShader(o),e.getShaderParameter(o,e.COMPILE_STATUS)?o:(t("Could not compile "+(n===e.FRAGMENT_SHADER?"fragment":"vertex")+"\n\t\t\t shader"+(i?' for program "'+i+'"':"")+": "+e.getShaderInfoLog(o)+"."),null)):(t("Unable to init gl shader."),null)},t.isWebGL2=function(e){return"undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&e instanceof WebGL2ComputeRenderingContext},t.isPowerOf2=function(e){return 0==(e&e-1)}},406:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Vector4=void 0;var r=function(){function e(e,t,r,n){void 0===e&&(e=0),void 0===t&&(t=0),void 0===r&&(r=0),void 0===n&&(n=1),this.x=e,this.y=t,this.z=r,this.w=n}return Object.defineProperty(e.prototype,"width",{get:function(){return this.z},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.w},enumerable:!1,configurable:!0}),e.prototype.copy=function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w,this},e}();t.Vector4=r},541:e=>{e.exports="precision highp float;\n\nvarying vec2 v_UV;\n\nuniform sampler2D u_state;\n\nvoid main() {\n\tgl_FragColor = texture2D(u_state, v_UV);\n}"},790:e=>{e.exports="precision highp float;\n\nattribute vec2 a_internal_position;\n\nuniform vec2 u_internal_scale;\nuniform vec2 u_internal_translation;\n\nvarying vec2 v_UV_local;\nvarying vec2 v_UV;\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\t// Apply transformations.\n\tvec2 position = u_internal_scale * a_internal_position + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}"},968:e=>{e.exports="precision highp float;\nprecision highp int;\n\n/**\n * Returns accurate MOD when arguments are approximate integers.\n */\nfloat modI(float a, float b) {\n    float m = a - floor((a + 0.5) / b) * b;\n    return floor(m + 0.5);\n}\n\n// Cannot use int vertex attributes: https://stackoverflow.com/questions/27874983/webgl-how-to-use-integer-attributes-in-glsl\nattribute float a_internal_index; // Index of point.\n\nuniform sampler2D u_internal_positions; // Texture lookup with position data.\nuniform vec2 u_internal_positionsDimensions;\nuniform vec2 u_internal_scale;\nuniform bool u_internal_positionWithAccumulation;\nuniform bool u_internal_wrapX;\nuniform bool u_internal_wrapY;\n\nvarying vec2 v_UV;\nvarying vec2 v_lineWrapping; // Use this to test if line is only half wrapped and should not be rendered.\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\tvec2 particleUV = vec2(\n\t\tmodI(a_internal_index, u_internal_positionsDimensions.x),\n\t\tfloor(floor(a_internal_index + 0.5) / u_internal_positionsDimensions.x)\n\t) / u_internal_positionsDimensions;\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\t// We have packed a 2D displacement with the position.\n\tvec4 positionData = texture2D(u_internal_positions, particleUV);\n\t// position = first two components plus last two components (optional accumulation buffer).\n\tvec2 positionAbsolute = positionData.rg;\n\tif (u_internal_positionWithAccumulation) positionAbsolute += positionData.ba;\n\tv_UV = positionAbsolute * u_internal_scale;\n\n\t// Wrap if needed.\n\tv_lineWrapping = vec2(0.0);\n\tif (u_internal_wrapX) {\n\t\tif (v_UV.x < 0.0) {\n\t\t\tv_UV.x += 1.0;\n\t\t\tv_lineWrapping.x = 1.0;\n\t\t} else if (v_UV.x > 1.0) {\n\t\t\tv_UV.x -= 1.0;\n\t\t\tv_lineWrapping.x = 1.0;\n\t\t}\n\t}\n\tif (u_internal_wrapY) {\n\t\tif (v_UV.y < 0.0) {\n\t\t\tv_UV.y += 1.0;\n\t\t\tv_lineWrapping.y = 1.0;\n\t\t} else if (v_UV.y > 1.0) {\n\t\t\tv_UV.y -= 1.0;\n\t\t\tv_lineWrapping.y = 1.0;\n\t\t}\n\t}\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_UV * 2.0 - 1.0;\n\n\tgl_Position = vec4(position, 0, 1);\n}"},198:e=>{e.exports="precision highp float;\nprecision highp int;\n\n/**\n * Returns accurate MOD when arguments are approximate integers.\n */\nfloat modI(float a, float b) {\n    float m = a - floor((a + 0.5) / b) * b;\n    return floor(m + 0.5);\n}\n\n// Cannot use int vertex attributes: https://stackoverflow.com/questions/27874983/webgl-how-to-use-integer-attributes-in-glsl\nattribute float a_internal_index; // Index of point.\n\nuniform sampler2D u_internal_positions; // Texture lookup with position data.\nuniform vec2 u_internal_positionsDimensions;\nuniform vec2 u_internal_scale;\nuniform float u_internal_pointSize;\nuniform bool u_internal_positionWithAccumulation;\nuniform bool u_internal_wrapX;\nuniform bool u_internal_wrapY;\n\nvarying vec2 v_UV;\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\tvec2 particleUV = vec2(\n\t\tmodI(a_internal_index, u_internal_positionsDimensions.x),\n\t\tfloor(floor(a_internal_index + 0.5) / u_internal_positionsDimensions.x)\n\t) / u_internal_positionsDimensions;\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\t// We have packed a 2D displacement with the position.\n\tvec4 positionData = texture2D(u_internal_positions, particleUV);\n\t// position = first two components plus last two components (optional accumulation buffer).\n\tvec2 positionAbsolute = positionData.rg;\n\tif (u_internal_positionWithAccumulation) positionAbsolute += positionData.ba;\n\tv_UV = positionAbsolute * u_internal_scale;\n\n\t// Wrap if needed.\n\tif (u_internal_wrapX) {\n\t\tif (v_UV.x < 0.0) v_UV.x += 1.0;\n\t\tif (v_UV.x > 1.0) v_UV.x -= 1.0;\n\t}\n\tif (u_internal_wrapY) {\n\t\tif (v_UV.y < 0.0) v_UV.y += 1.0;\n\t\tif (v_UV.y > 1.0) v_UV.y -= 1.0;\n\t}\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_UV * 2.0 - 1.0;\n\n\tgl_PointSize = u_internal_pointSize;\n\tgl_Position = vec4(position, 0, 1);\n}"},852:e=>{e.exports="// Vertex shader for fullscreen quad.\nprecision highp float;\n\nattribute vec2 a_internal_position;\n\nuniform float u_internal_halfThickness;\nuniform vec2 u_internal_scale;\nuniform float u_internal_length;\nuniform float u_internal_rotation;\nuniform vec2 u_internal_translation;\n\nvarying vec2 v_UV_local;\nvarying vec2 v_UV;\n\nmat2 rotate2d(float _angle){\n\treturn mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle));\n}\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\tvec2 position = a_internal_position;\n\n\t// Apply thickness / radius.\n\tposition *= u_internal_halfThickness;\n\n\t// Stretch center of shape to form a round-capped line segment.\n\tif (position.x < 0.0) {\n\t\tposition.x -= u_internal_length / 2.0;\n\t\tv_UV_local.x = 0.0; // Set entire cap UV.x to 0.\n\t} else if (position.x > 0.0) {\n\t\tposition.x += u_internal_length / 2.0;\n\t\tv_UV_local.x = 1.0; // Set entire cap UV.x to 1.\n\t}\n\n\t// Apply transformations.\n\tposition = u_internal_scale * (rotate2d(-u_internal_rotation) * position) + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}"},971:e=>{e.exports="// Fragment shader that draws a single color.\nprecision highp float;\n\nuniform vec3 u_color;\n\nvoid main() {\n\tgl_FragColor = vec4(u_color, 1);\n}"},425:e=>{e.exports="// Fragment shader that draws a single color.\nprecision highp float;\n\nuniform vec3 u_color;\nvarying vec2 v_lineWrapping;\n\nvoid main() {\n\t// check if this line has wrapped.\n\tif ((v_lineWrapping.x != 0.0 && v_lineWrapping.x != 1.0) || (v_lineWrapping.y != 0.0 && v_lineWrapping.y != 1.0)) {\n\t\t// Render nothing.\n\t\tdiscard;\n\t\treturn;\n\t}\n\tgl_FragColor = vec4(u_color, 1);\n}"},502:e=>{e.exports="precision highp float;\nprecision highp int;\n\n/**\n * Returns accurate MOD when arguments are approximate integers.\n */\nfloat modI(float a, float b) {\n    float m = a - floor((a + 0.5) / b) * b;\n    return floor(m + 0.5);\n}\n\n// Cannot use int vertex attributes: https://stackoverflow.com/questions/27874983/webgl-how-to-use-integer-attributes-in-glsl\nattribute float a_internal_index; // Index of point.\n\nuniform sampler2D u_internal_vectors; // Texture lookup with vector data.\nuniform vec2 u_internal_dimensions;\nuniform vec2 u_internal_scale;\n\nvarying vec2 v_UV;\n\nvoid main() {\n\t// Divide index by 2.\n\tfloat index = floor((a_internal_index + 0.5) / 2.0);\n\t// Calculate a uv based on the vertex index attribute.\n\tv_UV = vec2(\n\t\tmodI(index, u_internal_dimensions.x),\n\t\tfloor(floor(index + 0.5) / u_internal_dimensions.x)\n\t) / u_internal_dimensions;\n\n\t// Add vector displacement if needed.\n\tif (modI(a_internal_index, 2.0) > 0.0) {\n\t\t// Lookup vectorData at current UV.\n\t\tvec2 vectorData = texture2D(u_internal_vectors, v_UV).xy;\n\t\tv_UV += vectorData * u_internal_scale;\n\t}\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_UV * 2.0 - 1.0;\n\n\tgl_Position = vec4(position, 0, 1);\n}"},518:e=>{e.exports="#version 300 es\nprecision highp float;\nprecision highp sampler2D;\n\nin vec2 v_UV;\n\nuniform sampler2D u_state;\n\nout vec4 out_fragColor;\n\nvoid main() {\n\tout_fragColor = texture(u_state, v_UV);\n}"},546:e=>{e.exports="#version 300 es\nprecision highp float;\nprecision highp int;\nprecision highp isampler2D;\n\nin vec2 v_UV;\n\nuniform isampler2D u_state;\n\nout ivec4 out_fragColor;\n\nvoid main() {\n\tout_fragColor = texture(u_state, v_UV);\n}"},374:e=>{e.exports="#version 300 es\nprecision highp float;\nprecision highp int;\nprecision highp usampler2D;\n\nin vec2 v_UV;\n\nuniform usampler2D u_state;\n\nout uvec4 out_fragColor;\n\nvoid main() {\n\tout_fragColor = texture(u_state, v_UV);\n}"},435:e=>{e.exports="#version 300 es\nprecision highp float;\n\nin vec2 a_internal_position;\n\nuniform vec2 u_internal_scale;\nuniform vec2 u_internal_translation;\n\nout vec2 v_UV_local;\nout vec2 v_UV;\nout vec2 out_position;\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\t// Apply transformations.\n\tvec2 position = u_internal_scale * a_internal_position + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tout_position = position;\n}"},218:e=>{e.exports="#version 300 es\nprecision highp float;\n\nattribute vec2 a_internal_position;\n\nuniform float u_internal_halfThickness;\nuniform vec2 u_internal_scale;\nuniform float u_internal_length;\nuniform float u_internal_rotation;\nuniform vec2 u_internal_translation;\n\nvarying vec2 v_UV_local;\nvarying vec2 v_UV;\n\nmat2 rotate2d(float _angle){\n\treturn mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle));\n}\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\tvec2 position = a_internal_position;\n\n\t// Apply radius.\n\tposition *= u_internal_radius;\n\n\t// Stretch center of shape to form a round-capped line segment.\n\tif (position.x < 0.0) {\n\t\tposition.x -= u_internal_length / 2.0;\n\t\tv_UV_local.x = 0.0; // Set entire cap UV.x to 0.\n\t} else if (position.x > 0.0) {\n\t\tposition.x += u_internal_length / 2.0;\n\t\tv_UV_local.x = 1.0; // Set entire cap UV.x to 1.\n\t}\n\n\t// Apply transformations.\n\tposition = u_internal_scale * (rotate2d(-u_internal_rotation) * position) + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}"},805:e=>{e.exports="// Fragment shader that draws a single color.\nprecision highp float;\n\nuniform vec3 u_color;\n\nvoid main() {\n\tgl_FragColor = vec4(u_color, 1);\n}"},674:e=>{e.exports="// Fragment shader that draws a single color.\nprecision highp float;\n\nuniform vec3 u_color;\nvarying vec2 v_lineWrapping;\n\nvoid main() {\n\t// check if this line has wrapped.\n\tif ((v_lineWrapping.x != 0.0 && v_lineWrapping.x != 1.0) || (v_lineWrapping.y != 0.0 && v_lineWrapping.y != 1.0)) {\n\t\t// Render nothing.\n\t\tdiscard;\n\t\treturn;\n\t}\n\tgl_FragColor = vec4(u_color, 1);\n}"}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}return r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(607)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9AcGV0YW1vcmlrZW4vZmxvYXQxNi9zcmMvbGliLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9AcGV0YW1vcmlrZW4vZmxvYXQxNi9zcmMvaGZyb3VuZC5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yb290LmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0LmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNNYXNrZWQuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzTmF0aXZlLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXROYXRpdmUuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlQ3JlYXRlLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaEhhcy5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19IYXNoLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hTZXQuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXNzb2NJbmRleE9mLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvZXEuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0xpc3RDYWNoZS5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlSGFzLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19NYXAuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0TWFwRGF0YS5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fTWFwQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL0BwZXRhbW9yaWtlbi9mbG9hdDE2L3NyYy9idWcuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL0BwZXRhbW9yaWtlbi9mbG9hdDE2L3NyYy9zcGVjLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9AcGV0YW1vcmlrZW4vZmxvYXQxNi9zcmMvaXMuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0FycmF5QnVmZmVyLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VVbmFyeS5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNBcnJheUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvQHBldGFtb3Jpa2VuL2Zsb2F0MTYvc3JjL0Zsb2F0MTZBcnJheS5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvQHBldGFtb3Jpa2VuL2Zsb2F0MTYvc3JjL3ByaXZhdGUuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL0BwZXRhbW9yaWtlbi9mbG9hdDE2L3NyYy9kYXRhVmlldy5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvY2hhbmdlZHBpL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2ZpbGUtc2F2ZXIvZGlzdC9GaWxlU2F2ZXIubWluLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vc3JjL0NoZWNrcy50cyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9zcmMvQ29uc3RhbnRzLnRzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL3NyYy9EYXRhTGF5ZXIudHMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vc3JjL0dQVVByb2dyYW0udHMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vc3JjL1dlYkdMQ29tcHV0ZS50cyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9zcmMvZXh0ZW5zaW9ucy50cyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vc3JjL3V0aWxzLnRzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL3NyYy91dGlscy9WZWN0b3I0LnRzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL3NyYy9nbHNsXzEvQ29weUZyYWdTaGFkZXIuZ2xzbCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9zcmMvZ2xzbF8xL0RlZmF1bHRWZXJ0ZXhTaGFkZXIuZ2xzbCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9zcmMvZ2xzbF8xL0luZGV4ZWRMaW5lc1ZlcnRleFNoYWRlci5nbHNsIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL3NyYy9nbHNsXzEvUG9pbnRzVmVydGV4U2hhZGVyLmdsc2wiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vc3JjL2dsc2xfMS9TZWdtZW50VmVydGV4U2hhZGVyLmdsc2wiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vc3JjL2dsc2xfMS9TaW5nbGVDb2xvckZyYWdTaGFkZXIuZ2xzbCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9zcmMvZ2xzbF8xL1NpbmdsZUNvbG9yV2l0aFdyYXBDaGVja0ZyYWdTaGFkZXIuZ2xzbCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9zcmMvZ2xzbF8xL1ZlY3RvckZpZWxkVmVydGV4U2hhZGVyLmdsc2wiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vc3JjL2dsc2xfMy9Db3B5RmxvYXRGcmFnU2hhZGVyLmdsc2wiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vc3JjL2dsc2xfMy9Db3B5SW50RnJhZ1NoYWRlci5nbHNsIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL3NyYy9nbHNsXzMvQ29weVVpbnRGcmFnU2hhZGVyLmdsc2wiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vc3JjL2dsc2xfMy9EZWZhdWx0VmVydGV4U2hhZGVyLmdsc2wiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vc3JjL2dsc2xfMy9TZWdtZW50VmVydGV4U2hhZGVyLmdsc2wiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vc3JjL2dsc2xfMy9TaW5nbGVDb2xvckZyYWdTaGFkZXIuZ2xzbCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9zcmMvZ2xzbF8zL1NpbmdsZUNvbG9yV2l0aFdyYXBDaGVja0ZyYWdTaGFkZXIuZ2xzbCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvd2VicGFjay9ydW50aW1lL2hhcm1vbnkgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJidWZmZXIiLCJBcnJheUJ1ZmZlciIsImZsb2F0VmlldyIsIkZsb2F0MzJBcnJheSIsInVpbnQzMlZpZXciLCJVaW50MzJBcnJheSIsImJhc2VUYWJsZSIsInNoaWZ0VGFibGUiLCJpIiwiZSIsInJvdW5kVG9GbG9hdDE2Qml0cyIsIm51bSIsImYiLCJtYW50aXNzYVRhYmxlIiwiZXhwb25lbnRUYWJsZSIsIm9mZnNldFRhYmxlIiwibSIsImNvbnZlcnRUb051bWJlciIsImZsb2F0MTZiaXRzIiwiaGZyb3VuZCIsIk51bWJlciIsImlzRmluaXRlIiwiZnJlZVNlbGYiLCJPYmplY3QiLCJGdW5jdGlvbiIsIm9iamVjdFByb3RvIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsInRvU3RyaW5nIiwic3ltVG9TdHJpbmdUYWciLCJ1bmRlZmluZWQiLCJ2YWx1ZSIsImlzT3duIiwiY2FsbCIsInRhZyIsInVubWFza2VkIiwicmVzdWx0IiwidHlwZSIsInVpZCIsIm1hc2tTcmNLZXkiLCJleGVjIiwiZnVuY1RvU3RyaW5nIiwicmVJc0hvc3RDdG9yIiwicmVJc05hdGl2ZSIsIlJlZ0V4cCIsInJlcGxhY2UiLCJmdW5jIiwidGVzdCIsIm9iamVjdCIsImtleSIsIkhhc2giLCJlbnRyaWVzIiwiaW5kZXgiLCJsZW5ndGgiLCJ0aGlzIiwiY2xlYXIiLCJlbnRyeSIsInNldCIsIl9fZGF0YV9fIiwic2l6ZSIsImhhcyIsImdldCIsImRhdGEiLCJhcnJheSIsIm90aGVyIiwic3BsaWNlIiwiQXJyYXkiLCJMaXN0Q2FjaGUiLCJwb3AiLCJwdXNoIiwibWFwIiwiTWFwQ2FjaGUiLCJtZW1vaXplIiwicmVzb2x2ZXIiLCJUeXBlRXJyb3IiLCJtZW1vaXplZCIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsImNhY2hlIiwiQ2FjaGUiLCJpc1R5cGVkQXJyYXlJbmRleGVkUHJvcGVydHlXcml0YWJsZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlVpbnQ4QXJyYXkiLCJ3cml0YWJsZSIsIlRvSW50ZWdlciIsInRhcmdldCIsIm51bWJlciIsImlzTmFOIiwiTWF0aCIsInRydW5jIiwiZGVmYXVsdENvbXBhcmVGdW5jdGlvbiIsIngiLCJ5IiwiaXNOYU5feCIsImlzTmFOX3kiLCJpc1BsdXNaZXJvX3giLCJpc1BsdXNaZXJvX3kiLCJpcyIsImlzRGF0YVZpZXciLCJ2aWV3IiwiRGF0YVZpZXciLCJpc1N0cmluZ051bWJlcktleSIsIm5vZGVJc0FycmF5QnVmZmVyIiwiXyIsIndtIiwiV2Vha01hcCIsIm9iaiIsImNyZWF0ZSIsImNyZWF0ZVByaXZhdGVTdG9yYWdlIiwiaXNGbG9hdDE2QXJyYXkiLCJGbG9hdDE2QXJyYXkiLCJhc3NlcnRGbG9hdDE2QXJyYXkiLCJjb3B5VG9BcnJheSIsImFwcGx5SGFuZGxlciIsInRoaXNBcmciLCJkZWZhdWx0RmxvYXQxNkFycmF5TWV0aG9kcyIsIlJlZmxlY3QiLCJoYW5kbGVyIiwid3JhcHBlciIsInJldCIsInByb3h5IiwiUHJveHkiLCJpc0Zyb3plbiIsImdldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJkZWZpbmVQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJkZWxldGVQcm9wZXJ0eSIsImlzRXh0ZW5zaWJsZSIsInByZXZlbnRFeHRlbnNpb25zIiwib3duS2V5cyIsIlVpbnQxNkFycmF5IiwiaW5wdXQiLCJieXRlT2Zmc2V0Iiwic3VwZXIiLCJhcnJheUxpa2UiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNyYyIsIm9wdHMiLCJmcm9tIiwibWFwRnVuYyIsInZhbCIsImtleXMiLCJ2YWx1ZXMiLCJjYWxsYmFjayIsImwiLCJzdGFydCIsIm9mZnNldCIsInJldmVyc2UiLCJmaWxsIiwiY29weVdpdGhpbiIsImNvbXBhcmVGdW5jdGlvbiIsIl9jb252ZXJ0VG9OdW1iZXIiLCJzb3J0Iiwic2xpY2UiLCJzdWJhcnJheSIsImVsZW1lbnQiLCJqb2luIiwidG9Mb2NhbGVTdHJpbmciLCJ0b1N0cmluZ1RhZyIsIkZsb2F0MTZBcnJheSRwcm90b3R5cGUiLCJXZWFrU2V0IiwiYWRkIiwiZ2V0RmxvYXQxNiIsImRhdGFWaWV3IiwiZ2V0VWludDE2Iiwic2V0RmxvYXQxNiIsInNldFVpbnQxNiIsImNoYW5nZURwaUJsb2IiLCJibG9iIiwiZHBpIiwiaGVhZGVyQ2h1bmsiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZpbGVSZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwiZGF0YUFycmF5IiwidGFpbCIsImNoYW5nZWRBcnJheSIsImNoYW5nZURwaU9uQXJyYXkiLCJCbG9iIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJjaGFuZ2VEcGlEYXRhVXJsIiwiYmFzZTY0SW1hZ2UiLCJiNjRpbmRleCIsImRhdGFTcGxpdHRlZCIsInNwbGl0IiwiZm9ybWF0IiwiYm9keSIsImhlYWRlckxlbmd0aCIsIm92ZXJ3cml0ZXBIWXMiLCJpbmRleE9mIiwiUE5HIiwiYjY0SW5kZXgiLCJiNjRQaHlzU2lnbmF0dXJlMSIsImI2NFBoeXNTaWduYXR1cmUyIiwiYjY0UGh5c1NpZ25hdHVyZTMiLCJjZWlsIiwiSlBFRyIsInN0cmluZ0hlYWRlciIsInN1YnN0cmluZyIsInJlc3RPZkRhdGEiLCJoZWFkZXJCeXRlcyIsImF0b2IiLCJjaGFyQ29kZUF0IiwiZmluYWxBcnJheSIsImJ0b2EiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJhcnIiLCJpc0FycmF5IiwiYXJyMiIsIl90b0NvbnN1bWFibGVBcnJheSIsInBuZ0RhdGFUYWJsZSIsIl9QIiwiX0giLCJfWSIsIl9TIiwicGh5c0NodW5rIiwiY3JjIiwiYnVmIiwiYyIsImNyY1RhYmxlIiwiSW50MzJBcnJheSIsIm4iLCJrIiwiY3JlYXRlUG5nRGF0YVRhYmxlIiwiY2FsY0NyYyIsImNyY0NodW5rIiwic3RhcnRpbmdJbmRleCIsInNlYXJjaFN0YXJ0T2ZQaHlzIiwiY2h1bmtMZW5ndGgiLCJmaW5hbEhlYWRlciIsImEiLCJiIiwiZCIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInJlc3BvbnNlVHlwZSIsImciLCJyZXNwb25zZSIsIm9uZXJyb3IiLCJjb25zb2xlIiwiZXJyb3IiLCJzZW5kIiwic3RhdHVzIiwiZGlzcGF0Y2hFdmVudCIsIk1vdXNlRXZlbnQiLCJkb2N1bWVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJ3aW5kb3ciLCJnbG9iYWwiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJzYXZlQXMiLCJIVE1MQW5jaG9yRWxlbWVudCIsImgiLCJVUkwiLCJ3ZWJraXRVUkwiLCJqIiwiY3JlYXRlRWxlbWVudCIsIm5hbWUiLCJkb3dubG9hZCIsInJlbCIsImhyZWYiLCJvcmlnaW4iLCJsb2NhdGlvbiIsImNyZWF0ZU9iamVjdFVSTCIsInNldFRpbWVvdXQiLCJyZXZva2VPYmplY3RVUkwiLCJtc1NhdmVPck9wZW5CbG9iIiwiYXV0b0JvbSIsIndhcm4iLCJ0aXRsZSIsImlubmVyVGV4dCIsIkhUTUxFbGVtZW50Iiwic2FmYXJpIiwib25sb2FkZW5kIiwicmVhZEFzRGF0YVVSTCIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwiZnJlZVByb2Nlc3MiLCJyZXF1aXJlIiwidHlwZXMiLCJiaW5kaW5nIiwiaXNOdW1iZXIiLCJpc0ludGVnZXIiLCJ2YWxpZERhdGFUeXBlcyIsIkhBTEZfRkxPQVQiLCJGTE9BVCIsIlVOU0lHTkVEX0JZVEUiLCJCWVRFIiwiVU5TSUdORURfU0hPUlQiLCJTSE9SVCIsIlVOU0lHTkVEX0lOVCIsIklOVCIsInZhbGlkRmlsdGVyVHlwZXMiLCJMSU5FQVIiLCJORUFSRVNUIiwidmFsaWRXcmFwVHlwZXMiLCJDTEFNUF9UT19FREdFIiwiUkVQRUFUIiwidmFsaWRUZXh0dXJlRm9ybWF0VHlwZXMiLCJSR0IiLCJSR0JBIiwidmFsaWRUZXh0dXJlRGF0YVR5cGVzIiwiR0xTTDMiLCJHTFNMMSIsIkZMT0FUXzFEX1VOSUZPUk0iLCJGTE9BVF8yRF9VTklGT1JNIiwiRkxPQVRfM0RfVU5JRk9STSIsIkZMT0FUXzREX1VOSUZPUk0iLCJJTlRfMURfVU5JRk9STSIsIklOVF8yRF9VTklGT1JNIiwiSU5UXzNEX1VOSUZPUk0iLCJJTlRfNERfVU5JRk9STSIsInBhcmFtcyIsIl9idWZmZXJJbmRleCIsImJ1ZmZlcnMiLCJnbCIsImVycm9yQ2FsbGJhY2siLCJkaW1lbnNpb25zIiwibnVtQ29tcG9uZW50cyIsImdsc2xWZXJzaW9uIiwiaXNQb3NpdGl2ZUludGVnZXIiLCJFcnJvciIsIkRhdGFMYXllciIsImNhbGNTaXplIiwid2lkdGgiLCJoZWlnaHQiLCJmaWx0ZXIiLCJpc1ZhbGlkRmlsdGVyVHlwZSIsIndyYXBTIiwiaXNWYWxpZFdyYXBUeXBlIiwid3JhcFQiLCJpc1ZhbGlkRGF0YVR5cGUiLCJpbnRlcm5hbFR5cGUiLCJnZXRJbnRlcm5hbFR5cGUiLCJnZXRHTFRleHR1cmVQYXJhbWV0ZXJzIiwiZ2xGb3JtYXQiLCJnbEludGVybmFsRm9ybWF0IiwiZ2xUeXBlIiwiZ2xOdW1DaGFubmVscyIsImludGVybmFsRmlsdGVyIiwiZ2V0SW50ZXJuYWxGaWx0ZXIiLCJnbEZpbHRlciIsImludGVybmFsV3JhcFMiLCJnZXRJbnRlcm5hbFdyYXAiLCJ3cmFwIiwiZ2xXcmFwUyIsImludGVybmFsV3JhcFQiLCJnbFdyYXBUIiwibnVtQnVmZmVycyIsImluaXRCdWZmZXJzIiwiZXhwIiwicmVtYWluZGVyIiwicG93IiwiZmxvb3IiLCJpc1dlYkdMMiIsImdldEV4dGVuc2lvbiIsIk9FU19URVhUVVJFX0hBbEZfRkxPQVRfTElORUFSIiwiT0VTX1RFWFRVUkVfRkxPQVRfTElORUFSIiwic2hvdWxkQ2FzdEludFR5cGVBc0Zsb2F0IiwiT0VTX1RFWFRVUkVfRkxPQVQiLCJ0ZXN0RnJhbWVidWZmZXJXcml0ZSIsIk9FU19URVhUVVJFX0hBTEZfRkxPQVQiLCJFWFRfQ09MT1JfQlVGRkVSX0ZMT0FUIiwiUkVEIiwiUkciLCJBTFBIQSIsIkxVTUlOQU5DRV9BTFBIQSIsIlJFRF9JTlRFR0VSIiwiUkdfSU5URUdFUiIsIlJHQl9JTlRFR0VSIiwiUkdCQV9JTlRFR0VSIiwiUjE2RiIsIlJHMTZGIiwiUkdCMTZGIiwiUkdCQTE2RiIsIlIzMkYiLCJSRzMyRiIsIlJHQjMyRiIsIlJHQkEzMkYiLCJSOFVJIiwiUkc4VUkiLCJSR0I4VUkiLCJSR0JBOFVJIiwiUjhJIiwiUkc4SSIsIlJHQjhJIiwiUkdCQThJIiwiUjE2SSIsIlJHMTZJIiwiUkdCMTZJIiwiUkdCQTE2SSIsIlIxNlVJIiwiUkcxNlVJIiwiUkdCMTZVSSIsIlJHQkExNlVJIiwiUjMySSIsIlJHMzJJIiwiUkdCMzJJIiwiUkdCQTMySSIsIlIzMlVJIiwiUkczMlVJIiwiUkdCMzJVSSIsIlJHQkEzMlVJIiwiSEFMRl9GTE9BVF9PRVMiLCJtaXNzaW5nUGFyYW1zIiwidGV4dHVyZSIsImNyZWF0ZVRleHR1cmUiLCJiaW5kVGV4dHVyZSIsIlRFWFRVUkVfMkQiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9XUkFQX1MiLCJURVhUVVJFX1dSQVBfVCIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsInRleEltYWdlMkQiLCJmcmFtZWJ1ZmZlciIsImNyZWF0ZUZyYW1lYnVmZmVyIiwiZGVsZXRlVGV4dHVyZSIsImJpbmRGcmFtZWJ1ZmZlciIsIkZSQU1FQlVGRkVSIiwiZnJhbWVidWZmZXJUZXh0dXJlMkQiLCJDT0xPUl9BVFRBQ0hNRU5UMCIsInZhbGlkU3RhdHVzIiwiY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyIsIkZSQU1FQlVGRkVSX0NPTVBMRVRFIiwiZGVsZXRlRnJhbWVidWZmZXIiLCJzYXZlQ3VycmVudFN0YXRlVG9EYXRhTGF5ZXIiLCJsYXllciIsInRleHR1cmVPdmVycmlkZXMiLCJjdXJyZW50U3RhdGUiLCJnZXRDdXJyZW50U3RhdGVUZXh0dXJlIiwiX3NldEN1cnJlbnRTdGF0ZVRleHR1cmUiLCJ2YWxpZGF0ZURhdGFBcnJheSIsIl9kYXRhIiwiaW52YWxpZFR5cGVGb3VuZCIsImNvbnN0cnVjdG9yIiwiSW50OEFycmF5IiwiSW50MTZBcnJheSIsImltYWdlU2l6ZSIsImluY29ycmVjdFNpemUiLCJoYW5kbGVGbG9hdDE2IiwiX2xlbiIsImdldEVycm9yIiwiZ2V0UHJldmlvdXNTdGF0ZVRleHR1cmUiLCJwcmV2aW91c0luZGV4IiwiX3VzaW5nVGV4dHVyZU92ZXJyaWRlRm9yQ3VycmVudEJ1ZmZlciIsImJ1ZmZlckluZGV4IiwiX2JpbmRPdXRwdXRCdWZmZXJGb3JXcml0ZSIsImluY3JlbWVudEJ1ZmZlckluZGV4IiwiX2JpbmRPdXRwdXRCdWZmZXIiLCJzZXREYXRhIiwiZGVzdHJveUJ1ZmZlcnMiLCJyZXNpemUiLCJnZXREaW1lbnNpb25zIiwiZ2V0TGVuZ3RoIiwiZm9yRWFjaCIsImRlc3Ryb3kiLCJERUZBVUxUX1BST0dSQU1fTkFNRSIsIlNFR01FTlRfUFJPR1JBTV9OQU1FIiwiUE9JTlRTX1BST0dSQU1fTkFNRSIsIlZFQ1RPUl9GSUVMRF9QUk9HUkFNX05BTUUiLCJJTkRFWEVEX0xJTkVTX1BST0dSQU1fTkFNRSIsInVuaWZvcm1zIiwiZnJhZ21lbnRTaGFkZXIiLCJkZWZpbmVzIiwic291cmNlU3RyaW5nIiwiaXNTdHJpbmciLCJzaGFkZXIiLCJjb21waWxlU2hhZGVyIiwiRlJBR01FTlRfU0hBREVSIiwidW5pZm9ybSIsImRhdGFUeXBlIiwic2V0VW5pZm9ybSIsImluaXRQcm9ncmFtIiwidmVydGV4U2hhZGVyIiwicHJvZ3JhbU5hbWUiLCJwcm9ncmFtIiwiY3JlYXRlUHJvZ3JhbSIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwidW5pZm9ybU5hbWVzIiwidW5pZm9ybU5hbWUiLCJzZXRQcm9ncmFtVW5pZm9ybSIsImdldFByb2dyYW1JbmZvTG9nIiwiX2RlZmF1bHRQcm9ncmFtIiwiR1BVUHJvZ3JhbSIsImRlZmF1bHRWZXJ0ZXhTaGFkZXIiLCJ2ZXJ0ZXhTaGFkZXJTb3VyY2UiLCJWRVJURVhfU0hBREVSIiwiX3NlZ21lbnRQcm9ncmFtIiwic2VnbWVudFZlcnRleFNoYWRlciIsIl9wb2ludHNQcm9ncmFtIiwicG9pbnRzVmVydGV4U2hhZGVyIiwicG9pbnRzVmVydGV4U2hhZGVyU291cmNlX2dsc2wzIiwiX3ZlY3RvckZpZWxkUHJvZ3JhbSIsInZlY3RvckZpZWxkVmVydGV4U2hhZGVyIiwidmVjdG9yRmllbGRWZXJ0ZXhTaGFkZXJTb3VyY2VfZ2xzbDMiLCJfaW5kZXhlZExpbmVzUHJvZ3JhbSIsImluZGV4ZWRMaW5lc1ZlcnRleFNoYWRlciIsImluZGV4ZWRMaW5lc1ZlcnRleFNoYWRlclNvdXJjZV9nbHNsMyIsInByb2dyYW1zIiwidW5pZm9ybVR5cGVGb3JWYWx1ZSIsInVzZVByb2dyYW0iLCJfbG9jYXRpb24iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJ1bmlmb3JtMWYiLCJ1bmlmb3JtMmZ2IiwidW5pZm9ybTNmdiIsInVuaWZvcm00ZnYiLCJ1bmlmb3JtMWkiLCJ1bmlmb3JtMml2IiwidW5pZm9ybTNpdiIsInVuaWZvcm00aXYiLCJhY3RpdmVQcm9ncmFtcyIsInR5cGVQYXJhbSIsInNldFZlcnRleFVuaWZvcm0iLCJkZWxldGVQcm9ncmFtIiwiZGVsZXRlU2hhZGVyIiwicmVuZGVyZXIiLCJtZXNzYWdlIiwiZXJyb3JTdGF0ZSIsIl9jaXJjbGVQb3NpdGlvbnNCdWZmZXIiLCJ2YWxpZEtleXMiLCJjYW52YXMiLCJjb250ZXh0Iiwib3B0aW9ucyIsImFudGlhbGlhcyIsImdldENvbnRleHQiLCJsb2ciLCJkaXNhYmxlIiwiREVQVEhfVEVTVCIsInBpeGVsU3RvcmVpIiwiVU5QQUNLX0FMSUdOTUVOVCIsImNvcHlGbG9hdFByb2dyYW0iLCJjb3B5SW50UHJvZ3JhbSIsImNvcHlVaW50UHJvZ3JhbSIsImJpbmRCdWZmZXIiLCJBUlJBWV9CVUZGRVIiLCJvblJlc2l6ZSIsIm1heE51bVRleHR1cmVzIiwiZ2V0UGFyYW1ldGVyIiwiTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMiLCJpbml0V2l0aFRocmVlUmVuZGVyZXIiLCJXZWJHTENvbXB1dGUiLCJkb21FbGVtZW50IiwiX3NpbmdsZUNvbG9yUHJvZ3JhbSIsIl9zaW5nbGVDb2xvcldpdGhXcmFwQ2hlY2tQcm9ncmFtIiwiX3F1YWRQb3NpdGlvbnNCdWZmZXIiLCJmc1F1YWRQb3NpdGlvbnMiLCJpbml0VmVydGV4QnVmZmVyIiwiX2JvdW5kYXJ5UG9zaXRpb25zQnVmZmVyIiwiYm91bmRhcnlQb3NpdGlvbnMiLCJnZXRDaXJjbGVQb3NpdGlvbnNCdWZmZXIiLCJudW1TZWdtZW50cyIsInVuaXRDaXJjbGVQb2ludHMiLCJjb3MiLCJQSSIsInNpbiIsImNpcmNsZVBvc2l0aW9ucyIsImNyZWF0ZUJ1ZmZlciIsImJ1ZmZlckRhdGEiLCJTVEFUSUNfRFJBVyIsImluaXREYXRhTGF5ZXIiLCJpbml0VGV4dHVyZSIsInVybCIsImlzVmFsaWRUZXh0dXJlRm9ybWF0VHlwZSIsImlzVmFsaWRUZXh0dXJlRGF0YVR5cGUiLCJpbnRlcm5hbEZvcm1hdCIsInNyY0Zvcm1hdCIsInNyY1R5cGUiLCJwaXhlbCIsImltYWdlIiwiSW1hZ2UiLCJpc1Bvd2VyT2YyIiwib25Mb2FkIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJkcmF3U2V0dXAiLCJmdWxsc2NyZWVuUmVuZGVyIiwiaW5wdXRMYXllcnMiLCJvdXRwdXRMYXllciIsImlucHV0VGV4dHVyZXMiLCJzZXRPdXRwdXRMYXllciIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsImNvcHlQcm9ncmFtRm9yVHlwZSIsInBhc3NUaHJvdWdoTGF5ZXJEYXRhRnJvbUlucHV0VG9PdXRwdXQiLCJzdGF0ZSIsImNvcHlQcm9ncmFtIiwic3RlcCIsInZpZXdwb3J0Iiwic2V0UG9zaXRpb25BdHRyaWJ1dGUiLCJnZXRBdHRyaWJMb2NhdGlvbiIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInNldEluZGV4QXR0cmlidXRlIiwicXVhZFBvc2l0aW9uc0J1ZmZlciIsImdsUHJvZ3JhbSIsImRlZmF1bHRQcm9ncmFtIiwic2hvdWxkQmxlbmRBbHBoYSIsImVuYWJsZSIsIkJMRU5EIiwiYmxlbmRGdW5jIiwiU1JDX0FMUEhBIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsImRyYXdBcnJheXMiLCJUUklBTkdMRV9TVFJJUCIsInN0ZXBCb3VuZGFyeSIsImJvdW5kYXJ5UG9zaXRpb25zQnVmZmVyIiwib25lUHgiLCJzaW5nbGVFZGdlIiwiTElORVMiLCJMSU5FX0xPT1AiLCJzdGVwTm9uQm91bmRhcnkiLCJzdGVwQ2lyY2xlIiwicG9zaXRpb24iLCJyYWRpdXMiLCJUUklBTkdMRV9GQU4iLCJzdGVwU2VnbWVudCIsInBvc2l0aW9uMSIsInBvc2l0aW9uMiIsInRoaWNrbmVzcyIsInNlZ21lbnRQcm9ncmFtIiwiZGlmZlgiLCJkaWZmWSIsImFuZ2xlIiwiYXRhbjIiLCJjZW50ZXJYIiwiY2VudGVyWSIsInNxcnQiLCJudW1DYXBTZWdtZW50cyIsIm5vRW5kQ2FwcyIsImRyYXdQb2ludHMiLCJwb2ludEluZGV4QXJyYXkiLCJwb3NpdGlvbkxheWVyIiwiY291bnQiLCJzaW5nbGVDb2xvclByb2dyYW0iLCJjb2xvciIsInBvaW50c1Byb2dyYW0iLCJwb2ludFNpemUiLCJwb3NpdGlvbkxheWVyRGltZW5zaW9ucyIsIndyYXBYIiwid3JhcFkiLCJwb2ludEluZGV4QnVmZmVyIiwiaW5kaWNlcyIsIlBPSU5UUyIsImRyYXdWZWN0b3JGaWVsZCIsInZlY3RvckZpZWxkSW5kZXhBcnJheSIsInZlY3RvckxheWVyIiwidmVjdG9yRmllbGRQcm9ncmFtIiwidmVjdG9yU2NhbGUiLCJ2ZWN0b3JTcGFjaW5nIiwic3BhY2VkRGltZW5zaW9ucyIsInZlY3RvckZpZWxkSW5kZXhCdWZmZXIiLCJkcmF3SW5kZXhlZExpbmVzIiwic2luZ2xlQ29sb3JXaXRoV3JhcENoZWNrUHJvZ3JhbSIsImluZGV4ZWRMaW5lc1Byb2dyYW0iLCJpbmRleGVkTGluZXNJbmRleEJ1ZmZlciIsImZsb2F0QXJyYXkiLCJnZXRWYWx1ZXMiLCJkYXRhTGF5ZXIiLCJyZWFkeVRvUmVhZCIsInJlYWRQaXhlbHMiLCJPVVRQVVRfTEVOR1RIIiwiaGFuZGxlRmxvYXQxNkNvbnZlcnNpb24iLCJvdXRwdXQiLCJpbmRleDEiLCJpbmRleDIiLCJzYXZlUE5HIiwiZmlsZW5hbWUiLCJpbWFnZURhdGEiLCJnZXRJbWFnZURhdGEiLCJpc0Zsb2F0IiwiaW5kZXhGbGlwcGVkIiwicHV0SW1hZ2VEYXRhIiwidG9CbG9iIiwidGhlbiIsInJlc2V0IiwiYXR0YWNoRGF0YUxheWVyVG9UaHJlZVRleHR1cmUiLCJvZmZzZXRUZXh0dXJlUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCJfX3dlYmdsVGV4dHVyZSIsIl9fd2ViZ2xJbml0IiwicmVzZXRUaHJlZVN0YXRlIiwiZ2V0Vmlld3BvcnQiLCJ1dGlscyIsIlZlY3RvcjQiLCJzZXRSZW5kZXJUYXJnZXQiLCJyZXNldFN0YXRlIiwiZXh0ZW5zaW9ucyIsIldFQkdMX0RFUFRIX1RFWFRVUkUiLCJleHRlbnNpb25OYW1lIiwib3B0aW9uYWwiLCJleHRlbnNpb24iLCJzaGFkZXJTb3VyY2UiLCJzaGFkZXJUeXBlIiwiY3JlYXRlU2hhZGVyIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJnZXRTaGFkZXJJbmZvTG9nIiwiV2ViR0wyUmVuZGVyaW5nQ29udGV4dCIsIldlYkdMMkNvbXB1dGVSZW5kZXJpbmdDb250ZXh0IiwieiIsInciLCJjb3B5IiwidiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImlkIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJvIiwiZW51bWVyYWJsZSIsImdsb2JhbFRoaXMiLCJobWQiLCJjaGlsZHJlbiIsInByb3AiLCJy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QSxRQUxqQixHQ0F4QmdkLEVBQW9CVSxJQUFPOXRCLEtBQzFCQSxFQUFTMkIsT0FBT3NGLE9BQU9qSCxJQUNYK3RCLFdBQVUvdEIsRUFBTyt0QixTQUFXLElBQ3hDcHNCLE9BQU93RyxlQUFlbkksRUFBUSxVQUFXLENBQ3hDNHRCLFlBQVksRUFDWjlwQixJQUFLLEtBQ0osTUFBTSxJQUFJa1IsTUFBTSwwRkFBNEZoVixFQUFPdXRCLE9BRzlHdnRCLEdDVFJvdEIsRUFBb0JPLEVBQUksQ0FBQzNtQixFQUFLZ25CLElBQVVyc0IsT0FBT0csVUFBVUMsZUFBZU8sS0FBSzBFLEVBQUtnbkIsR0NDbEZaLEVBQW9CYSxFQUFLbHVCLElBQ0gsb0JBQVgrSSxRQUEwQkEsT0FBT3dCLGFBQzFDM0ksT0FBT3dHLGVBQWVwSSxFQUFTK0ksT0FBT3dCLFlBQWEsQ0FBRWxJLE1BQU8sV0FFN0RULE9BQU93RyxlQUFlcEksRUFBUyxhQUFjLENBQUVxQyxPQUFPLEtDRjdCZ3JCLEVBQW9CLE0iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJXZWJHTENvbXB1dGVcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiV2ViR0xDb21wdXRlXCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiLy8gYWxnb3JpdGhtOiBmdHA6Ly9mdHAuZm94LXRvb2xraXQub3JnL3B1Yi9mYXN0aGFsZmZsb2F0Y29udmVyc2lvbi5wZGZcblxuY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDQpO1xuY29uc3QgZmxvYXRWaWV3ID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIpO1xuY29uc3QgdWludDMyVmlldyA9IG5ldyBVaW50MzJBcnJheShidWZmZXIpO1xuXG5cbmNvbnN0IGJhc2VUYWJsZSA9IG5ldyBVaW50MzJBcnJheSg1MTIpO1xuY29uc3Qgc2hpZnRUYWJsZSA9IG5ldyBVaW50MzJBcnJheSg1MTIpO1xuXG5mb3IobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICBjb25zdCBlID0gaSAtIDEyNztcblxuICAgIC8vIHZlcnkgc21hbGwgbnVtYmVyICgwLCAtMClcbiAgICBpZiAoZSA8IC0yNykge1xuICAgICAgICBiYXNlVGFibGVbaSB8IDB4MDAwXSA9IDB4MDAwMDtcbiAgICAgICAgYmFzZVRhYmxlW2kgfCAweDEwMF0gPSAweDgwMDA7XG4gICAgICAgIHNoaWZ0VGFibGVbaSB8IDB4MDAwXSA9IDI0O1xuICAgICAgICBzaGlmdFRhYmxlW2kgfCAweDEwMF0gPSAyNDtcblxuICAgIC8vIHNtYWxsIG51bWJlciAoZGVub3JtKVxuICAgIH0gZWxzZSBpZiAoZSA8IC0xNCkge1xuICAgICAgICBiYXNlVGFibGVbaSB8IDB4MDAwXSA9ICAweDA0MDAgPj4gKC1lIC0gMTQpO1xuICAgICAgICBiYXNlVGFibGVbaSB8IDB4MTAwXSA9ICgweDA0MDAgPj4gKC1lIC0gMTQpKSB8IDB4ODAwMDtcbiAgICAgICAgc2hpZnRUYWJsZVtpIHwgMHgwMDBdID0gLWUgLSAxO1xuICAgICAgICBzaGlmdFRhYmxlW2kgfCAweDEwMF0gPSAtZSAtIDE7XG5cbiAgICAvLyBub3JtYWwgbnVtYmVyXG4gICAgfSBlbHNlIGlmIChlIDw9IDE1KSB7XG4gICAgICAgIGJhc2VUYWJsZVtpIHwgMHgwMDBdID0gIChlICsgMTUpIDw8IDEwO1xuICAgICAgICBiYXNlVGFibGVbaSB8IDB4MTAwXSA9ICgoZSArIDE1KSA8PCAxMCkgfCAweDgwMDA7XG4gICAgICAgIHNoaWZ0VGFibGVbaSB8IDB4MDAwXSA9IDEzO1xuICAgICAgICBzaGlmdFRhYmxlW2kgfCAweDEwMF0gPSAxMztcblxuICAgIC8vIGxhcmdlIG51bWJlciAoSW5maW5pdHksIC1JbmZpbml0eSlcbiAgICB9IGVsc2UgaWYgKGUgPCAxMjgpIHtcbiAgICAgICAgYmFzZVRhYmxlW2kgfCAweDAwMF0gPSAweDdjMDA7XG4gICAgICAgIGJhc2VUYWJsZVtpIHwgMHgxMDBdID0gMHhmYzAwO1xuICAgICAgICBzaGlmdFRhYmxlW2kgfCAweDAwMF0gPSAyNDtcbiAgICAgICAgc2hpZnRUYWJsZVtpIHwgMHgxMDBdID0gMjQ7XG5cbiAgICAvLyBzdGF5IChOYU4sIEluZmluaXR5LCAtSW5maW5pdHkpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZVRhYmxlW2kgfCAweDAwMF0gPSAweDdjMDA7XG4gICAgICAgIGJhc2VUYWJsZVtpIHwgMHgxMDBdID0gMHhmYzAwO1xuICAgICAgICBzaGlmdFRhYmxlW2kgfCAweDAwMF0gPSAxMztcbiAgICAgICAgc2hpZnRUYWJsZVtpIHwgMHgxMDBdID0gMTM7XG4gICAgfVxufVxuXG4vKipcbiAqIHJvdW5kIGEgbnVtYmVyIHRvIGEgaGFsZiBmbG9hdCBudW1iZXIgYml0cy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gLSBkb3VibGUgZmxvYXRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGhhbGYgZmxvYXQgbnVtYmVyIGJpdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kVG9GbG9hdDE2Qml0cyhudW0pIHtcbiAgICBmbG9hdFZpZXdbMF0gPSBudW07XG5cbiAgICBjb25zdCBmID0gdWludDMyVmlld1swXTtcbiAgICBjb25zdCBlID0gKGYgPj4gMjMpICYgMHgxZmY7XG4gICAgcmV0dXJuIGJhc2VUYWJsZVtlXSArICgoZiAmIDB4MDA3ZmZmZmYpID4+IHNoaWZ0VGFibGVbZV0pO1xufVxuXG5cbmNvbnN0IG1hbnRpc3NhVGFibGUgPSBuZXcgVWludDMyQXJyYXkoMjA0OCk7XG5jb25zdCBleHBvbmVudFRhYmxlID0gbmV3IFVpbnQzMkFycmF5KDY0KTtcbmNvbnN0IG9mZnNldFRhYmxlID0gbmV3IFVpbnQzMkFycmF5KDY0KTtcblxubWFudGlzc2FUYWJsZVswXSA9IDA7XG5mb3IobGV0IGkgPSAxOyBpIDwgMTAyNDsgKytpKSB7XG4gICAgbGV0IG0gPSBpIDw8IDEzOyAgICAvLyB6ZXJvIHBhZCBtYW50aXNzYSBiaXRzXG4gICAgbGV0IGUgPSAwOyAgICAgICAgICAvLyB6ZXJvIGV4cG9uZW50XG5cbiAgICAvLyBub3JtYWxpemVkXG4gICAgd2hpbGUoKG0gJiAweDAwODAwMDAwKSA9PT0gMCkge1xuICAgICAgICBlIC09IDB4MDA4MDAwMDA7ICAgIC8vIGRlY3JlbWVudCBleHBvbmVudFxuICAgICAgICBtIDw8PSAxO1xuICAgIH1cblxuICAgIG0gJj0gfjB4MDA4MDAwMDA7ICAgLy8gY2xlYXIgbGVhZGluZyAxIGJpdFxuICAgIGUgKz0gMHgzODgwMDAwMDsgICAgLy8gYWRqdXN0IGJpYXNcblxuICAgIG1hbnRpc3NhVGFibGVbaV0gPSBtIHwgZTtcbn1cbmZvcihsZXQgaSA9IDEwMjQ7IGkgPCAyMDQ4OyArK2kpIHtcbiAgICBtYW50aXNzYVRhYmxlW2ldID0gMHgzODAwMDAwMCArICgoaSAtIDEwMjQpIDw8IDEzKTtcbn1cblxuZXhwb25lbnRUYWJsZVswXSA9IDA7XG5mb3IobGV0IGkgPSAxOyBpIDwgMzE7ICsraSkge1xuICAgIGV4cG9uZW50VGFibGVbaV0gPSBpIDw8IDIzO1xufVxuZXhwb25lbnRUYWJsZVszMV0gPSAweDQ3ODAwMDAwO1xuZXhwb25lbnRUYWJsZVszMl0gPSAweDgwMDAwMDAwO1xuZm9yKGxldCBpID0gMzM7IGkgPCA2MzsgKytpKSB7XG4gICAgZXhwb25lbnRUYWJsZVtpXSA9IDB4ODAwMDAwMDAgKyAoKGkgLSAzMikgPDwgMjMpO1xufVxuZXhwb25lbnRUYWJsZVs2M10gPSAweGM3ODAwMDAwO1xuXG5vZmZzZXRUYWJsZVswXSA9IDA7XG5mb3IobGV0IGkgPSAxOyBpIDwgNjQ7ICsraSkge1xuICAgIGlmIChpID09PSAzMikge1xuICAgICAgICBvZmZzZXRUYWJsZVtpXSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb2Zmc2V0VGFibGVbaV0gPSAxMDI0O1xuICAgIH1cbn1cblxuLyoqXG4gKiBjb252ZXJ0IGEgaGFsZiBmbG9hdCBudW1iZXIgYml0cyB0byBhIG51bWJlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmbG9hdDE2Yml0cyAtIGhhbGYgZmxvYXQgbnVtYmVyIGJpdHNcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGRvdWJsZSBmbG9hdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvTnVtYmVyKGZsb2F0MTZiaXRzKSB7XG4gICAgY29uc3QgbSA9IGZsb2F0MTZiaXRzID4+IDEwO1xuICAgIHVpbnQzMlZpZXdbMF0gPSBtYW50aXNzYVRhYmxlW29mZnNldFRhYmxlW21dICsgKGZsb2F0MTZiaXRzICYgMHgzZmYpXSArIGV4cG9uZW50VGFibGVbbV07XG4gICAgcmV0dXJuIGZsb2F0Vmlld1swXTtcbn1cbiIsImltcG9ydCB7IGNvbnZlcnRUb051bWJlciwgcm91bmRUb0Zsb2F0MTZCaXRzIH0gZnJvbSBcIi4vbGliXCI7XG5cbi8qKlxuICogcmV0dXJucyB0aGUgbmVhcmVzdCBoYWxmIHByZWNpc2lvbiBmbG9hdCByZXByZXNlbnRhdGlvbiBvZiBhIG51bWJlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhmcm91bmQobnVtKSB7XG4gICAgbnVtID0gTnVtYmVyKG51bSk7XG5cbiAgICAvLyBmb3Igb3B0aW1pemF0aW9uXG4gICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUobnVtKSB8fCBudW0gPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG5cbiAgICBjb25zdCB4MTYgPSByb3VuZFRvRmxvYXQxNkJpdHMobnVtKTtcbiAgICByZXR1cm4gY29udmVydFRvTnVtYmVyKHgxNik7XG59XG4iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5leHBvcnQgZGVmYXVsdCByb290O1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5leHBvcnQgZGVmYXVsdCBTeW1ib2w7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdFRvU3RyaW5nO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGdldFJhd1RhZyBmcm9tICcuL19nZXRSYXdUYWcuanMnO1xuaW1wb3J0IG9iamVjdFRvU3RyaW5nIGZyb20gJy4vX29iamVjdFRvU3RyaW5nLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRUYWc7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3Q7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuZXhwb3J0IGRlZmF1bHQgY29yZUpzRGF0YTtcbiIsImltcG9ydCBjb3JlSnNEYXRhIGZyb20gJy4vX2NvcmVKc0RhdGEuanMnO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc01hc2tlZDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9Tb3VyY2U7XG4iLCJpbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24uanMnO1xuaW1wb3J0IGlzTWFza2VkIGZyb20gJy4vX2lzTWFza2VkLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCB0b1NvdXJjZSBmcm9tICcuL190b1NvdXJjZS5qcyc7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc05hdGl2ZTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0Z1bmN0aW9uO1xuIiwiaW1wb3J0IGJhc2VJc05hdGl2ZSBmcm9tICcuL19iYXNlSXNOYXRpdmUuanMnO1xuaW1wb3J0IGdldFZhbHVlIGZyb20gJy4vX2dldFZhbHVlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0TmF0aXZlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFZhbHVlO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVDcmVhdGU7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaEdldDtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoSGFzO1xuIiwiaW1wb3J0IGhhc2hDbGVhciBmcm9tICcuL19oYXNoQ2xlYXIuanMnO1xuaW1wb3J0IGhhc2hEZWxldGUgZnJvbSAnLi9faGFzaERlbGV0ZS5qcyc7XG5pbXBvcnQgaGFzaEdldCBmcm9tICcuL19oYXNoR2V0LmpzJztcbmltcG9ydCBoYXNoSGFzIGZyb20gJy4vX2hhc2hIYXMuanMnO1xuaW1wb3J0IGhhc2hTZXQgZnJvbSAnLi9faGFzaFNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBIYXNoO1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaENsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaERlbGV0ZTtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hTZXQ7XG4iLCJpbXBvcnQgZXEgZnJvbSAnLi9lcS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzc29jSW5kZXhPZjtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcTtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVEZWxldGU7XG4iLCJpbXBvcnQgbGlzdENhY2hlQ2xlYXIgZnJvbSAnLi9fbGlzdENhY2hlQ2xlYXIuanMnO1xuaW1wb3J0IGxpc3RDYWNoZURlbGV0ZSBmcm9tICcuL19saXN0Q2FjaGVEZWxldGUuanMnO1xuaW1wb3J0IGxpc3RDYWNoZUdldCBmcm9tICcuL19saXN0Q2FjaGVHZXQuanMnO1xuaW1wb3J0IGxpc3RDYWNoZUhhcyBmcm9tICcuL19saXN0Q2FjaGVIYXMuanMnO1xuaW1wb3J0IGxpc3RDYWNoZVNldCBmcm9tICcuL19saXN0Q2FjaGVTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IExpc3RDYWNoZTtcbiIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlQ2xlYXI7XG4iLCJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUdldDtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUhhcztcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVTZXQ7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbmV4cG9ydCBkZWZhdWx0IE1hcDtcbiIsImltcG9ydCBpc0tleWFibGUgZnJvbSAnLi9faXNLZXlhYmxlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRNYXBEYXRhO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0tleWFibGU7XG4iLCJpbXBvcnQgbWFwQ2FjaGVDbGVhciBmcm9tICcuL19tYXBDYWNoZUNsZWFyLmpzJztcbmltcG9ydCBtYXBDYWNoZURlbGV0ZSBmcm9tICcuL19tYXBDYWNoZURlbGV0ZS5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVHZXQgZnJvbSAnLi9fbWFwQ2FjaGVHZXQuanMnO1xuaW1wb3J0IG1hcENhY2hlSGFzIGZyb20gJy4vX21hcENhY2hlSGFzLmpzJztcbmltcG9ydCBtYXBDYWNoZVNldCBmcm9tICcuL19tYXBDYWNoZVNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBNYXBDYWNoZTtcbiIsImltcG9ydCBIYXNoIGZyb20gJy4vX0hhc2guanMnO1xuaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlQ2xlYXI7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlRGVsZXRlO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVHZXQ7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVIYXM7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZVNldDtcbiIsImltcG9ydCBNYXBDYWNoZSBmcm9tICcuL19NYXBDYWNoZS5qcyc7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsIi8qKlxuICogSmF2YVNjcmlwdENvcmUgPD0gMTIgYnVnXG4gKiBAc2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNzE2MDZcbiAqL1xuZXhwb3J0IGNvbnN0IGlzVHlwZWRBcnJheUluZGV4ZWRQcm9wZXJ0eVdyaXRhYmxlID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXcgVWludDhBcnJheSgxKSwgMCkud3JpdGFibGU7XG4iLCIvKipcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGFyZ2V0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gVG9JbnRlZ2VyKHRhcmdldCkge1xuICAgIGxldCBudW1iZXIgPSB0eXBlb2YgdGFyZ2V0ICE9PSBcIm51bWJlclwiID8gTnVtYmVyKHRhcmdldCkgOiB0YXJnZXQ7XG4gICAgaWYgKE51bWJlci5pc05hTihudW1iZXIpKSB7XG4gICAgICAgIG51bWJlciA9IDA7XG4gICAgfVxuICAgIHJldHVybiBNYXRoLnRydW5jKG51bWJlcik7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHhcbiAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gKiBAcmV0dXJucyB7LTEgfCAwIHwgMX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlRnVuY3Rpb24oeCwgeSkge1xuICAgIGNvbnN0IFtpc05hTl94LCBpc05hTl95XSA9IFtOdW1iZXIuaXNOYU4oeCksIE51bWJlci5pc05hTih5KV07XG5cbiAgICBpZiAoaXNOYU5feCAmJiBpc05hTl95KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGlmIChpc05hTl94KSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIGlmIChpc05hTl95KSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBpZiAoeCA8IHkpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIGlmICh4ID4geSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICBpZiAoeCA9PT0gMCAmJiB5ID09PSAwKSB7XG4gICAgICAgIGNvbnN0IFtpc1BsdXNaZXJvX3gsIGlzUGx1c1plcm9feV0gPSBbT2JqZWN0LmlzKHgsIDApLCBPYmplY3QuaXMoeSwgMCldO1xuXG4gICAgICAgIGlmICghaXNQbHVzWmVyb194ICYmIGlzUGx1c1plcm9feSkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzUGx1c1plcm9feCAmJiAhaXNQbHVzWmVyb195KSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAwO1xufVxuIiwiaW1wb3J0IHsgVG9JbnRlZ2VyIH0gZnJvbSBcIi4vc3BlY1wiO1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzQXJyYXlCdWZmZXIgfSBmcm9tIFwibG9kYXNoLWVzL2lzQXJyYXlCdWZmZXJcIjtcblxuLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IHZpZXdcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEYXRhVmlldyh2aWV3KSB7XG4gICAgcmV0dXJuIHZpZXcgaW5zdGFuY2VvZiBEYXRhVmlldztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IGtleVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZ051bWJlcktleShrZXkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiAmJiBrZXkgPT09IFRvSW50ZWdlcihrZXkpICsgXCJcIjtcbn1cbiIsImltcG9ydCBiYXNlSXNBcnJheUJ1ZmZlciBmcm9tICcuL19iYXNlSXNBcnJheUJ1ZmZlci5qcyc7XG5pbXBvcnQgYmFzZVVuYXJ5IGZyb20gJy4vX2Jhc2VVbmFyeS5qcyc7XG5pbXBvcnQgbm9kZVV0aWwgZnJvbSAnLi9fbm9kZVV0aWwuanMnO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcjtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheUJ1ZmZlcmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXlCdWZmZXI7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VVbmFyeTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFycmF5QnVmZmVyVGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNBcnJheUJ1ZmZlcjtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgbWVtb2l6ZSBmcm9tIFwibG9kYXNoLWVzL21lbW9pemVcIjtcbmltcG9ydCB7IGlzVHlwZWRBcnJheUluZGV4ZWRQcm9wZXJ0eVdyaXRhYmxlIH0gZnJvbSBcIi4vYnVnXCI7XG5pbXBvcnQgeyBpc0FycmF5QnVmZmVyLCBpc1N0cmluZ051bWJlcktleSB9IGZyb20gXCIuL2lzXCI7XG5pbXBvcnQgeyBjb252ZXJ0VG9OdW1iZXIsIHJvdW5kVG9GbG9hdDE2Qml0cyB9IGZyb20gXCIuL2xpYlwiO1xuaW1wb3J0IHsgY3JlYXRlUHJpdmF0ZVN0b3JhZ2UgfSBmcm9tIFwiLi9wcml2YXRlXCI7XG5pbXBvcnQgeyBUb0ludGVnZXIsIGRlZmF1bHRDb21wYXJlRnVuY3Rpb24gfSBmcm9tIFwiLi9zcGVjXCI7XG5cbmNvbnN0IF8gPSBjcmVhdGVQcml2YXRlU3RvcmFnZSgpO1xuXG4vKipcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGFyZ2V0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGbG9hdDE2QXJyYXkodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRhcmdldCBpbnN0YW5jZW9mIEZsb2F0MTZBcnJheTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IHRhcmdldFxuICogQHRocm93cyB7VHlwZUVycm9yfVxuICovXG5mdW5jdGlvbiBhc3NlcnRGbG9hdDE2QXJyYXkodGFyZ2V0KSB7XG4gICAgaWYgKCFpc0Zsb2F0MTZBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGlzIGlzIG5vdCBhIEZsb2F0MTZBcnJheVwiKTtcbiAgICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHt1bmtub3dufSB0YXJnZXRcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0RlZmF1bHRGbG9hdDE2QXJyYXlNZXRob2RzKHRhcmdldCkge1xuICAgIHJldHVybiB0eXBlb2YgdGFyZ2V0ID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmYXVsdEZsb2F0MTZBcnJheU1ldGhvZHMuaGFzKHRhcmdldCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtGbG9hdDE2QXJyYXl9IGZsb2F0MTZiaXRzXG4gKiBAcmV0dXJuIHtudW1iZXJbXX1cbiAqL1xuZnVuY3Rpb24gY29weVRvQXJyYXkoZmxvYXQxNmJpdHMpIHtcbiAgICBjb25zdCBsZW5ndGggPSBmbG9hdDE2Yml0cy5sZW5ndGg7XG5cbiAgICBjb25zdCBhcnJheSA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBhcnJheVtpXSA9IGNvbnZlcnRUb051bWJlcihmbG9hdDE2Yml0c1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xufVxuXG4vKiogQHR5cGUge1Byb3h5SGFuZGxlcjxGdW5jdGlvbj59ICovXG5jb25zdCBhcHBseUhhbmRsZXIgPSB7XG4gICAgYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgICAgICAvLyBwZWVsIG9mZiBwcm94eVxuICAgICAgICBpZiAoaXNGbG9hdDE2QXJyYXkodGhpc0FyZykgJiYgaXNEZWZhdWx0RmxvYXQxNkFycmF5TWV0aG9kcyhmdW5jKSkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkoZnVuYywgXyh0aGlzQXJnKS50YXJnZXQgLGFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncyk7XG4gICAgfSxcbn07XG5cbi8qKiBAdHlwZSB7UHJveHlIYW5kbGVyPEZsb2F0MTZBcnJheT59ICovXG5jb25zdCBoYW5kbGVyID0ge1xuICAgIGdldCh0YXJnZXQsIGtleSkge1xuICAgICAgICBsZXQgd3JhcHBlciA9IG51bGw7XG4gICAgICAgIGlmICghaXNUeXBlZEFycmF5SW5kZXhlZFByb3BlcnR5V3JpdGFibGUpIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0YXJnZXQgPSBfKHdyYXBwZXIpLnRhcmdldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1N0cmluZ051bWJlcktleShrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpID8gY29udmVydFRvTnVtYmVyKFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5KSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCByZXQgPSB3cmFwcGVyICE9PSBudWxsICYmIFJlZmxlY3QuaGFzKHdyYXBwZXIsIGtleSkgPyBSZWZsZWN0LmdldCh3cmFwcGVyLCBrZXkpIDogUmVmbGVjdC5nZXQodGFyZ2V0LCBrZXkpO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJldCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVHlwZWRBcnJheSBtZXRob2RzIGNhbid0IGJlIGNhbGxlZCBieSBQcm94eSBPYmplY3RcbiAgICAgICAgICAgIGxldCBwcm94eSA9IF8ocmV0KS5wcm94eTtcblxuICAgICAgICAgICAgaWYgKHByb3h5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwcm94eSA9IF8ocmV0KS5wcm94eSA9IG5ldyBQcm94eShyZXQsIGFwcGx5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBwcm94eTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXQodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGxldCB3cmFwcGVyID0gbnVsbDtcbiAgICAgICAgaWYgKCFpc1R5cGVkQXJyYXlJbmRleGVkUHJvcGVydHlXcml0YWJsZSkge1xuICAgICAgICAgICAgd3JhcHBlciA9IHRhcmdldDtcbiAgICAgICAgICAgIHRhcmdldCA9IF8od3JhcHBlcikudGFyZ2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzU3RyaW5nTnVtYmVyS2V5KGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgcm91bmRUb0Zsb2F0MTZCaXRzKHZhbHVlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBmcm96ZW4gb2JqZWN0IGNhbid0IGNoYW5nZSBwcm90b3R5cGUgcHJvcGVydHlcbiAgICAgICAgICAgIGlmICh3cmFwcGVyICE9PSBudWxsICYmICghUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpIHx8IE9iamVjdC5pc0Zyb3plbih3cmFwcGVyKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5zZXQod3JhcHBlciwga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbn07XG5cbmlmICghaXNUeXBlZEFycmF5SW5kZXhlZFByb3BlcnR5V3JpdGFibGUpIHtcbiAgICBoYW5kbGVyLmdldFByb3RvdHlwZU9mID0gKHdyYXBwZXIpID0+IHsgcmV0dXJuIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YoXyh3cmFwcGVyKS50YXJnZXQpOyB9O1xuICAgIGhhbmRsZXIuc2V0UHJvdG90eXBlT2YgPSAod3JhcHBlciwgcHJvdG90eXBlKSA9PiB7IHJldHVybiBSZWZsZWN0LnNldFByb3RvdHlwZU9mKF8od3JhcHBlcikudGFyZ2V0LCBwcm90b3R5cGUpOyB9O1xuXG4gICAgaGFuZGxlci5kZWZpbmVQcm9wZXJ0eSA9ICh3cmFwcGVyLCBrZXksIGRlc2NyaXB0b3IpID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gXyh3cmFwcGVyKS50YXJnZXQ7XG4gICAgICAgIHJldHVybiAhUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpIHx8IE9iamVjdC5pc0Zyb3plbih3cmFwcGVyKSA/IFJlZmxlY3QuZGVmaW5lUHJvcGVydHkod3JhcHBlciwga2V5LCBkZXNjcmlwdG9yKSA6IFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgIH07XG4gICAgaGFuZGxlci5kZWxldGVQcm9wZXJ0eSA9ICh3cmFwcGVyLCBrZXkpID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gXyh3cmFwcGVyKS50YXJnZXQ7XG4gICAgICAgIHJldHVybiBSZWZsZWN0Lmhhcyh3cmFwcGVyLCBrZXkpID8gUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh3cmFwcGVyLCBrZXkpIDogUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSk7XG4gICAgfTtcblxuICAgIGhhbmRsZXIuaGFzID0gKHdyYXBwZXIsIGtleSkgPT4geyByZXR1cm4gUmVmbGVjdC5oYXMod3JhcHBlciwga2V5KSB8fCBSZWZsZWN0LmhhcyhfKHdyYXBwZXIpLnRhcmdldCwga2V5KTsgfTtcblxuICAgIGhhbmRsZXIuaXNFeHRlbnNpYmxlID0gKHdyYXBwZXIpID0+IHsgcmV0dXJuIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHdyYXBwZXIpOyB9O1xuICAgIGhhbmRsZXIucHJldmVudEV4dGVuc2lvbnMgPSAod3JhcHBlcikgPT4geyByZXR1cm4gUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh3cmFwcGVyKTsgfTtcblxuICAgIGhhbmRsZXIuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gKHdyYXBwZXIsIGtleSkgPT4geyByZXR1cm4gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod3JhcHBlciwga2V5KTsgfTtcbiAgICBoYW5kbGVyLm93bktleXMgPSAod3JhcHBlcikgPT4geyByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHdyYXBwZXIpOyB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGbG9hdDE2QXJyYXkgZXh0ZW5kcyBVaW50MTZBcnJheSB7XG5cbiAgICBjb25zdHJ1Y3RvcihpbnB1dCwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICAgIC8vIGlucHV0IEZsb2F0MTZBcnJheVxuICAgICAgICBpZiAoaXNGbG9hdDE2QXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICBzdXBlcihfKGlucHV0KS50YXJnZXQpO1xuXG4gICAgICAgIC8vIDIyLjIuMS4zLCAyMi4yLjEuNCBUeXBlZEFycmF5LCBBcnJheSwgQXJyYXlMaWtlLCBJdGVyYWJsZVxuICAgICAgICB9IGVsc2UgaWYgKGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gXCJvYmplY3RcIiAmJiAhaXNBcnJheUJ1ZmZlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIC8vIGlmIGlucHV0IGlzIG5vdCBBcnJheUxpa2UgYW5kIEl0ZXJhYmxlLCBnZXQgQXJyYXlcbiAgICAgICAgICAgIGNvbnN0IGFycmF5TGlrZSA9ICFSZWZsZWN0LmhhcyhpbnB1dCwgXCJsZW5ndGhcIikgJiYgaW5wdXRbU3ltYm9sLml0ZXJhdG9yXSAhPT0gdW5kZWZpbmVkID8gWy4uLmlucHV0XSA6IGlucHV0O1xuXG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBhcnJheUxpa2UubGVuZ3RoO1xuICAgICAgICAgICAgc3VwZXIobGVuZ3RoKTtcblxuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgLy8gc3VwZXIgKFVpbnQxNkFycmF5KVxuICAgICAgICAgICAgICAgIHRoaXNbaV0gPSByb3VuZFRvRmxvYXQxNkJpdHMoYXJyYXlMaWtlW2ldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAvLyAyMi4yLjEuMiwgMjIuMi4xLjUgcHJpbWl0aXZlLCBBcnJheUJ1ZmZlclxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBzdXBlcihpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBzdXBlcihpbnB1dCwgYnl0ZU9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBzdXBlcihpbnB1dCwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcHJveHk7XG5cbiAgICAgICAgaWYgKGlzVHlwZWRBcnJheUluZGV4ZWRQcm9wZXJ0eVdyaXRhYmxlKSB7XG4gICAgICAgICAgICBwcm94eSA9IG5ldyBQcm94eSh0aGlzLCBoYW5kbGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHdyYXBwZXIgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgXyh3cmFwcGVyKS50YXJnZXQgPSB0aGlzO1xuICAgICAgICAgICAgcHJveHkgPSBuZXcgUHJveHkod3JhcHBlciwgaGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBwcm94eSBwcml2YXRlIHN0b3JhZ2VcbiAgICAgICAgXyhwcm94eSkudGFyZ2V0ID0gdGhpcztcblxuICAgICAgICAvLyB0aGlzIHByaXZhdGUgc3RvcmFnZVxuICAgICAgICBfKHRoaXMpLnByb3h5ID0gcHJveHk7XG5cbiAgICAgICAgcmV0dXJuIHByb3h5O1xuICAgIH1cblxuICAgIC8vIHN0YXRpYyBtZXRob2RzXG4gICAgc3RhdGljIGZyb20oc3JjLCAuLi5vcHRzKSB7XG4gICAgICAgIGlmIChvcHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDE2QXJyYXkoVWludDE2QXJyYXkuZnJvbShzcmMsIHJvdW5kVG9GbG9hdDE2Qml0cykuYnVmZmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1hcEZ1bmMgPSBvcHRzWzBdO1xuICAgICAgICBjb25zdCB0aGlzQXJnID0gb3B0c1sxXTtcblxuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MTZBcnJheShVaW50MTZBcnJheS5mcm9tKHNyYywgZnVuY3Rpb24gKHZhbCwgLi4uYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIHJvdW5kVG9GbG9hdDE2Qml0cyhtYXBGdW5jLmNhbGwodGhpcywgdmFsLCAuLi5hcmdzKSk7XG4gICAgICAgIH0sIHRoaXNBcmcpLmJ1ZmZlcik7XG4gICAgfVxuXG4gICAgc3RhdGljIG9mKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDE2QXJyYXkoYXJncyk7XG4gICAgfVxuXG4gICAgLy8gaXRlcmF0ZSBtZXRob2RzXG4gICAgKiBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgZm9yKGNvbnN0IHZhbCBvZiBzdXBlcltTeW1ib2wuaXRlcmF0b3JdKCkpIHtcbiAgICAgICAgICAgIHlpZWxkIGNvbnZlcnRUb051bWJlcih2YWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAga2V5cygpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmtleXMoKTtcbiAgICB9XG5cbiAgICAqIHZhbHVlcygpIHtcbiAgICAgICAgZm9yKGNvbnN0IHZhbCBvZiBzdXBlci52YWx1ZXMoKSkge1xuICAgICAgICAgICAgeWllbGQgY29udmVydFRvTnVtYmVyKHZhbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQHR5cGUgeygpID0+IEl0ZXJhYmxlSXRlcmF0b3I8W251bWJlciwgbnVtYmVyXT59ICovXG4gICAgKiBlbnRyaWVzKCkge1xuICAgICAgICBmb3IoY29uc3QgW2ksIHZhbF0gb2Ygc3VwZXIuZW50cmllcygpKSB7XG4gICAgICAgICAgICB5aWVsZCBbaSwgY29udmVydFRvTnVtYmVyKHZhbCldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZnVuY3Rpb25hbCBtZXRob2RzXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG1hcChjYWxsYmFjaywgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgY29uc3QgdGhpc0FyZyA9IG9wdHNbMF07XG5cbiAgICAgICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBjb252ZXJ0VG9OdW1iZXIodGhpc1tpXSk7XG4gICAgICAgICAgICBhcnJheS5wdXNoKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsLCBpLCBfKHRoaXMpLnByb3h5KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MTZBcnJheShhcnJheSk7XG4gICAgfVxuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGZpbHRlcihjYWxsYmFjaywgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgY29uc3QgdGhpc0FyZyA9IG9wdHNbMF07XG5cbiAgICAgICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBjb252ZXJ0VG9OdW1iZXIodGhpc1tpXSk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWwsIGksIF8odGhpcykucHJveHkpKSB7XG4gICAgICAgICAgICAgICAgYXJyYXkucHVzaCh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDE2QXJyYXkoYXJyYXkpO1xuICAgIH1cblxuICAgIHJlZHVjZShjYWxsYmFjaywgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgbGV0IHZhbCwgc3RhcnQ7XG5cbiAgICAgICAgaWYgKG9wdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB2YWwgPSBjb252ZXJ0VG9OdW1iZXIodGhpc1swXSk7XG4gICAgICAgICAgICBzdGFydCA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWwgPSBvcHRzWzBdO1xuICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgdmFsID0gY2FsbGJhY2sodmFsLCBjb252ZXJ0VG9OdW1iZXIodGhpc1tpXSksIGksIF8odGhpcykucHJveHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICByZWR1Y2VSaWdodChjYWxsYmFjaywgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgbGV0IHZhbCwgc3RhcnQ7XG5cbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgICAgIGlmIChvcHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdmFsID0gY29udmVydFRvTnVtYmVyKHRoaXNbbGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgc3RhcnQgPSBsZW5ndGggLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsID0gb3B0c1swXTtcbiAgICAgICAgICAgIHN0YXJ0ID0gbGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQ7IGktLTspIHtcbiAgICAgICAgICAgIHZhbCA9IGNhbGxiYWNrKHZhbCwgY29udmVydFRvTnVtYmVyKHRoaXNbaV0pLCBpLCBfKHRoaXMpLnByb3h5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgZm9yRWFjaChjYWxsYmFjaywgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgY29uc3QgdGhpc0FyZyA9IG9wdHNbMF07XG5cbiAgICAgICAgZm9yKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIGNvbnZlcnRUb051bWJlcih0aGlzW2ldKSwgaSwgXyh0aGlzKS5wcm94eSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaW5kKGNhbGxiYWNrLCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCB0aGlzQXJnID0gb3B0c1swXTtcblxuICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29udmVydFRvTnVtYmVyKHRoaXNbaV0pO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsdWUsIGksIF8odGhpcykucHJveHkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluZEluZGV4KGNhbGxiYWNrLCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCB0aGlzQXJnID0gb3B0c1swXTtcblxuICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29udmVydFRvTnVtYmVyKHRoaXNbaV0pO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsdWUsIGksIF8odGhpcykucHJveHkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgZXZlcnkoY2FsbGJhY2ssIC4uLm9wdHMpIHtcbiAgICAgICAgYXNzZXJ0RmxvYXQxNkFycmF5KHRoaXMpO1xuXG4gICAgICAgIGNvbnN0IHRoaXNBcmcgPSBvcHRzWzBdO1xuXG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgaWYgKCFjYWxsYmFjay5jYWxsKHRoaXNBcmcsIGNvbnZlcnRUb051bWJlcih0aGlzW2ldKSwgaSwgXyh0aGlzKS5wcm94eSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBzb21lKGNhbGxiYWNrLCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCB0aGlzQXJnID0gb3B0c1swXTtcblxuICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjay5jYWxsKHRoaXNBcmcsIGNvbnZlcnRUb051bWJlcih0aGlzW2ldKSwgaSwgXyh0aGlzKS5wcm94eSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBjaGFuZ2UgZWxlbWVudCBtZXRob2RzXG4gICAgc2V0KGlucHV0LCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCBvZmZzZXQgPSBvcHRzWzBdO1xuXG4gICAgICAgIGxldCBmbG9hdDE2Yml0cztcblxuICAgICAgICAvLyBpbnB1dCBGbG9hdDE2QXJyYXlcbiAgICAgICAgaWYgKGlzRmxvYXQxNkFycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgZmxvYXQxNmJpdHMgPSBfKGlucHV0KS50YXJnZXQ7XG5cbiAgICAgICAgLy8gaW5wdXQgb3RoZXJzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBhcnJheUxpa2UgPSAhUmVmbGVjdC5oYXMoaW5wdXQsIFwibGVuZ3RoXCIpICYmIGlucHV0W1N5bWJvbC5pdGVyYXRvcl0gIT09IHVuZGVmaW5lZCA/IFsuLi5pbnB1dF0gOiBpbnB1dDtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5TGlrZS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZsb2F0MTZiaXRzID0gbmV3IFVpbnQxNkFycmF5KGxlbmd0aCk7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gYXJyYXlMaWtlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgICAgIGZsb2F0MTZiaXRzW2ldID0gcm91bmRUb0Zsb2F0MTZCaXRzKGFycmF5TGlrZVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlci5zZXQoZmxvYXQxNmJpdHMsIG9mZnNldCk7XG4gICAgfVxuXG4gICAgcmV2ZXJzZSgpIHtcbiAgICAgICAgYXNzZXJ0RmxvYXQxNkFycmF5KHRoaXMpO1xuXG4gICAgICAgIHN1cGVyLnJldmVyc2UoKTtcblxuICAgICAgICByZXR1cm4gXyh0aGlzKS5wcm94eTtcbiAgICB9XG5cbiAgICBmaWxsKHZhbHVlLCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBzdXBlci5maWxsKHJvdW5kVG9GbG9hdDE2Qml0cyh2YWx1ZSksIC4uLm9wdHMpO1xuXG4gICAgICAgIHJldHVybiBfKHRoaXMpLnByb3h5O1xuICAgIH1cblxuICAgIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgc3VwZXIuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCAuLi5vcHRzKTtcblxuICAgICAgICByZXR1cm4gXyh0aGlzKS5wcm94eTtcbiAgICB9XG5cbiAgICBzb3J0KC4uLm9wdHMpIHtcbiAgICAgICAgYXNzZXJ0RmxvYXQxNkFycmF5KHRoaXMpO1xuXG4gICAgICAgIGxldCBjb21wYXJlRnVuY3Rpb24gPSBvcHRzWzBdO1xuXG4gICAgICAgIGlmIChjb21wYXJlRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29tcGFyZUZ1bmN0aW9uID0gZGVmYXVsdENvbXBhcmVGdW5jdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IF9jb252ZXJ0VG9OdW1iZXIgPSBtZW1vaXplKGNvbnZlcnRUb051bWJlcik7XG5cbiAgICAgICAgc3VwZXIuc29ydCgoeCwgeSkgPT4geyByZXR1cm4gY29tcGFyZUZ1bmN0aW9uKF9jb252ZXJ0VG9OdW1iZXIoeCksIF9jb252ZXJ0VG9OdW1iZXIoeSkpOyB9KTtcblxuICAgICAgICByZXR1cm4gXyh0aGlzKS5wcm94eTtcbiAgICB9XG5cbiAgICAvLyBjb3B5IGVsZW1lbnQgbWV0aG9kc1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBzbGljZSguLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBsZXQgZmxvYXQxNmJpdHM7XG5cbiAgICAgICAgLy8gVjgsIFNwaWRlck1vbmtleSwgSmF2YVNjcmlwdENvcmUsIENoYWtyYSB0aHJvdyBUeXBlRXJyb3JcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZsb2F0MTZiaXRzID0gc3VwZXIuc2xpY2UoLi4ub3B0cyk7XG4gICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBUeXBlRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1aW50MTYgPSBuZXcgVWludDE2QXJyYXkodGhpcy5idWZmZXIsIHRoaXMuYnl0ZU9mZnNldCwgdGhpcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGZsb2F0MTZiaXRzID0gdWludDE2LnNsaWNlKC4uLm9wdHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDE2QXJyYXkoZmxvYXQxNmJpdHMuYnVmZmVyKTtcbiAgICB9XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgc3ViYXJyYXkoLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgbGV0IGZsb2F0MTZiaXRzO1xuXG4gICAgICAgIC8vIFY4LCBTcGlkZXJNb25rZXksIEphdmFTY3JpcHRDb3JlLCBDaGFrcmEgdGhyb3cgVHlwZUVycm9yXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmbG9hdDE2Yml0cyA9IHN1cGVyLnN1YmFycmF5KC4uLm9wdHMpO1xuICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgVHlwZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdWludDE2ID0gbmV3IFVpbnQxNkFycmF5KHRoaXMuYnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHRoaXMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBmbG9hdDE2Yml0cyA9IHVpbnQxNi5zdWJhcnJheSguLi5vcHRzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQxNkFycmF5KGZsb2F0MTZiaXRzLmJ1ZmZlciwgZmxvYXQxNmJpdHMuYnl0ZU9mZnNldCwgZmxvYXQxNmJpdHMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvLyBjb250YWlucyBtZXRob2RzXG4gICAgaW5kZXhPZihlbGVtZW50LCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aDtcblxuICAgICAgICBsZXQgZnJvbSA9IFRvSW50ZWdlcihvcHRzWzBdKTtcblxuICAgICAgICBpZiAoZnJvbSA8IDApIHtcbiAgICAgICAgICAgIGZyb20gKz0gbGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGZyb20gPCAwKSB7XG4gICAgICAgICAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IobGV0IGkgPSBmcm9tLCBsID0gbGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoY29udmVydFRvTnVtYmVyKHRoaXNbaV0pID09PSBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgbGFzdEluZGV4T2YoZWxlbWVudCwgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG5cbiAgICAgICAgbGV0IGZyb20gPSBUb0ludGVnZXIob3B0c1swXSk7XG5cbiAgICAgICAgZnJvbSA9IGZyb20gPT09IDAgPyBsZW5ndGggOiBmcm9tICsgMTtcblxuICAgICAgICBpZiAoZnJvbSA+PSAwKSB7XG4gICAgICAgICAgICBmcm9tID0gZnJvbSA8IGxlbmd0aCA/IGZyb20gOiBsZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcm9tICs9IGxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihsZXQgaSA9IGZyb207IGktLTspIHtcbiAgICAgICAgICAgIGlmIChjb252ZXJ0VG9OdW1iZXIodGhpc1tpXSkgPT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBpbmNsdWRlcyhlbGVtZW50LCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aDtcblxuICAgICAgICBsZXQgZnJvbSA9IFRvSW50ZWdlcihvcHRzWzBdKTtcblxuICAgICAgICBpZiAoZnJvbSA8IDApIHtcbiAgICAgICAgICAgIGZyb20gKz0gbGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGZyb20gPCAwKSB7XG4gICAgICAgICAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpc05hTiA9IE51bWJlci5pc05hTihlbGVtZW50KTtcbiAgICAgICAgZm9yKGxldCBpID0gZnJvbSwgbCA9IGxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjb252ZXJ0VG9OdW1iZXIodGhpc1tpXSk7XG5cbiAgICAgICAgICAgIGlmIChpc05hTiAmJiBOdW1iZXIuaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHN0cmluZyBtZXRob2RzXG4gICAgam9pbiguLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCBhcnJheSA9IGNvcHlUb0FycmF5KHRoaXMpO1xuXG4gICAgICAgIHJldHVybiBhcnJheS5qb2luKC4uLm9wdHMpO1xuICAgIH1cblxuICAgIHRvTG9jYWxlU3RyaW5nKC4uLm9wdHMpIHtcbiAgICAgICAgYXNzZXJ0RmxvYXQxNkFycmF5KHRoaXMpO1xuXG4gICAgICAgIGNvbnN0IGFycmF5ID0gY29weVRvQXJyYXkodGhpcyk7XG5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gYXJyYXkudG9Mb2NhbGVTdHJpbmcoLi4ub3B0cyk7XG4gICAgfVxuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICAgICAgaWYgKGlzRmxvYXQxNkFycmF5KHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJGbG9hdDE2QXJyYXlcIjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgRmxvYXQxNkFycmF5JHByb3RvdHlwZSA9IEZsb2F0MTZBcnJheS5wcm90b3R5cGU7XG5cbmNvbnN0IGRlZmF1bHRGbG9hdDE2QXJyYXlNZXRob2RzID0gbmV3IFdlYWtTZXQoKTtcbmZvcihjb25zdCBrZXkgb2YgUmVmbGVjdC5vd25LZXlzKEZsb2F0MTZBcnJheSRwcm90b3R5cGUpKSB7XG4gICAgY29uc3QgdmFsID0gRmxvYXQxNkFycmF5JHByb3RvdHlwZVtrZXldO1xuICAgIGlmICh0eXBlb2YgdmFsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZGVmYXVsdEZsb2F0MTZBcnJheU1ldGhvZHMuYWRkKHZhbCk7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBAcmV0dXJucyB7KHNlbGY6b2JqZWN0KSA9PiBvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcml2YXRlU3RvcmFnZSgpIHtcblx0Y29uc3Qgd20gPSBuZXcgV2Vha01hcCgpO1xuXHRyZXR1cm4gKHNlbGYpID0+IHtcblx0XHRsZXQgb2JqID0gd20uZ2V0KHNlbGYpO1xuXHRcdGlmIChvYmopIHtcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdFx0XHR3bS5zZXQoc2VsZiwgb2JqKTtcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fVxuXHR9O1xufVxuIiwiaW1wb3J0IHsgaXNEYXRhVmlldyB9IGZyb20gXCIuL2lzXCI7XG5pbXBvcnQgeyBjb252ZXJ0VG9OdW1iZXIsIHJvdW5kVG9GbG9hdDE2Qml0cyB9IGZyb20gXCIuL2xpYlwiO1xuXG4vKipcbiAqIHJldHVybnMgYW4gdW5zaWduZWQgMTYtYml0IGZsb2F0IGF0IHRoZSBzcGVjaWZpZWQgYnl0ZSBvZmZzZXQgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIERhdGFWaWV3LlxuICogQHBhcmFtIHtEYXRhVmlld30gZGF0YVZpZXdcbiAqIEBwYXJhbSB7bnVtYmVyfSBieXRlT2Zmc2V0XG4gKiBAcGFyYW0ge1tib29sZWFuXX0gb3B0c1xuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZsb2F0MTYoZGF0YVZpZXcsIGJ5dGVPZmZzZXQsIC4uLm9wdHMpIHtcbiAgICBpZiAoIWlzRGF0YVZpZXcoZGF0YVZpZXcpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGaXJzdCBhcmd1bWVudCB0byBnZXRGbG9hdDE2IGZ1bmN0aW9uIG11c3QgYmUgYSBEYXRhVmlld1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udmVydFRvTnVtYmVyKCBkYXRhVmlldy5nZXRVaW50MTYoYnl0ZU9mZnNldCwgLi4ub3B0cykgKTtcbn1cblxuLyoqXG4gKiBzdG9yZXMgYW4gdW5zaWduZWQgMTYtYml0IGZsb2F0IHZhbHVlIGF0IHRoZSBzcGVjaWZpZWQgYnl0ZSBvZmZzZXQgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIERhdGFWaWV3LlxuICogQHBhcmFtIHtEYXRhVmlld30gZGF0YVZpZXdcbiAqIEBwYXJhbSB7bnVtYmVyfSBieXRlT2Zmc2V0XG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7W2Jvb2xlYW5dfSBvcHRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRGbG9hdDE2KGRhdGFWaWV3LCBieXRlT2Zmc2V0LCB2YWx1ZSwgLi4ub3B0cykge1xuICAgIGlmICghaXNEYXRhVmlldyhkYXRhVmlldykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZpcnN0IGFyZ3VtZW50IHRvIHNldEZsb2F0MTYgZnVuY3Rpb24gbXVzdCBiZSBhIERhdGFWaWV3XCIpO1xuICAgIH1cblxuICAgIGRhdGFWaWV3LnNldFVpbnQxNihieXRlT2Zmc2V0LCByb3VuZFRvRmxvYXQxNkJpdHModmFsdWUpLCAuLi5vcHRzKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2hhbmdlRHBpQmxvYiA9IGNoYW5nZURwaUJsb2I7XG5leHBvcnRzLmNoYW5nZURwaURhdGFVcmwgPSBjaGFuZ2VEcGlEYXRhVXJsO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxuZnVuY3Rpb24gY3JlYXRlUG5nRGF0YVRhYmxlKCkge1xuICAvKiBUYWJsZSBvZiBDUkNzIG9mIGFsbCA4LWJpdCBtZXNzYWdlcy4gKi9cbiAgdmFyIGNyY1RhYmxlID0gbmV3IEludDMyQXJyYXkoMjU2KTtcbiAgZm9yICh2YXIgbiA9IDA7IG4gPCAyNTY7IG4rKykge1xuICAgIHZhciBjID0gbjtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IDg7IGsrKykge1xuICAgICAgYyA9IGMgJiAxID8gMHhlZGI4ODMyMCBeIGMgPj4+IDEgOiBjID4+PiAxO1xuICAgIH1cbiAgICBjcmNUYWJsZVtuXSA9IGM7XG4gIH1cbiAgcmV0dXJuIGNyY1RhYmxlO1xufVxuXG5mdW5jdGlvbiBjYWxjQ3JjKGJ1Zikge1xuICB2YXIgYyA9IC0xO1xuICBpZiAoIXBuZ0RhdGFUYWJsZSkgcG5nRGF0YVRhYmxlID0gY3JlYXRlUG5nRGF0YVRhYmxlKCk7XG4gIGZvciAodmFyIG4gPSAwOyBuIDwgYnVmLmxlbmd0aDsgbisrKSB7XG4gICAgYyA9IHBuZ0RhdGFUYWJsZVsoYyBeIGJ1ZltuXSkgJiAweEZGXSBeIGMgPj4+IDg7XG4gIH1cbiAgcmV0dXJuIGMgXiAtMTtcbn1cblxudmFyIHBuZ0RhdGFUYWJsZSA9IHZvaWQgMDtcblxudmFyIFBORyA9ICdpbWFnZS9wbmcnO1xudmFyIEpQRUcgPSAnaW1hZ2UvanBlZyc7XG5cbi8vIHRob3NlIGFyZSAzIHBvc3NpYmxlIHNpZ25hdHVyZSBvZiB0aGUgcGh5c0Jsb2NrIGluIGJhc2U2NC5cbi8vIHRoZSBwSFlzIHNpZ25hdHVyZSBibG9jayBpcyBwcmVjZWVkIGJ5IHRoZSA0IGJ5dGVzIG9mIGxlbmdodC4gVGhlIGxlbmd0aCBvZlxuLy8gdGhlIGJsb2NrIGlzIGFsd2F5cyA5IGJ5dGVzLiBTbyBhIHBoeXMgYmxvY2sgaGFzIGFsd2F5cyB0aGlzIHNpZ25hdHVyZTpcbi8vIDAgMCAwIDkgcCBIIFkgcy5cbi8vIEhvd2V2ZXIgdGhlIGRhdGE2NCBlbmNvZGluZyBhbGlnbnMgd2Ugd2lsbCBhbHdheXMgZmluZCBvbmUgb2YgdGhvc2UgMyBzdHJpbmdzLlxuLy8gdGhpcyBhbGxvdyB1cyB0byBmaW5kIHRoaXMgcGFydGljdWxhciBvY2N1cmVuY2Ugb2YgdGhlIHBIWXMgYmxvY2sgd2l0aG91dFxuLy8gY29udmVydGluZyBmcm9tIGI2NCBiYWNrIHRvIHN0cmluZ1xudmFyIGI2NFBoeXNTaWduYXR1cmUxID0gJ0FBbHdTRmx6JztcbnZhciBiNjRQaHlzU2lnbmF0dXJlMiA9ICdBQUFKY0VoWic7XG52YXIgYjY0UGh5c1NpZ25hdHVyZTMgPSAnQUFBQUNYQkknO1xuXG52YXIgX1AgPSAncCcuY2hhckNvZGVBdCgwKTtcbnZhciBfSCA9ICdIJy5jaGFyQ29kZUF0KDApO1xudmFyIF9ZID0gJ1knLmNoYXJDb2RlQXQoMCk7XG52YXIgX1MgPSAncycuY2hhckNvZGVBdCgwKTtcblxuZnVuY3Rpb24gY2hhbmdlRHBpQmxvYihibG9iLCBkcGkpIHtcbiAgLy8gMzMgYnl0ZXMgYXJlIG9rIGZvciBwbmdzIGFuZCBqcGVnc1xuICAvLyB0byBjb250YWluIHRoZSBpbmZvcm1hdGlvbi5cbiAgdmFyIGhlYWRlckNodW5rID0gYmxvYi5zbGljZSgwLCAzMyk7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGRhdGFBcnJheSA9IG5ldyBVaW50OEFycmF5KGZpbGVSZWFkZXIucmVzdWx0KTtcbiAgICAgIHZhciB0YWlsID0gYmxvYi5zbGljZSgzMyk7XG4gICAgICB2YXIgY2hhbmdlZEFycmF5ID0gY2hhbmdlRHBpT25BcnJheShkYXRhQXJyYXksIGRwaSwgYmxvYi50eXBlKTtcbiAgICAgIHJlc29sdmUobmV3IEJsb2IoW2NoYW5nZWRBcnJheSwgdGFpbF0sIHsgdHlwZTogYmxvYi50eXBlIH0pKTtcbiAgICB9O1xuICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoaGVhZGVyQ2h1bmspO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY2hhbmdlRHBpRGF0YVVybChiYXNlNjRJbWFnZSwgZHBpKSB7XG4gIHZhciBkYXRhU3BsaXR0ZWQgPSBiYXNlNjRJbWFnZS5zcGxpdCgnLCcpO1xuICB2YXIgZm9ybWF0ID0gZGF0YVNwbGl0dGVkWzBdO1xuICB2YXIgYm9keSA9IGRhdGFTcGxpdHRlZFsxXTtcbiAgdmFyIHR5cGUgPSB2b2lkIDA7XG4gIHZhciBoZWFkZXJMZW5ndGggPSB2b2lkIDA7XG4gIHZhciBvdmVyd3JpdGVwSFlzID0gZmFsc2U7XG4gIGlmIChmb3JtYXQuaW5kZXhPZihQTkcpICE9PSAtMSkge1xuICAgIHR5cGUgPSBQTkc7XG4gICAgdmFyIGI2NEluZGV4ID0gZGV0ZWN0UGh5c0NodW5rRnJvbURhdGFVcmwoYm9keSk7XG4gICAgLy8gMjggYnl0ZXMgaW4gZGF0YVVybCBhcmUgMjFieXRlcywgbGVuZ3RoIG9mIHBoeXMgY2h1bmsgd2l0aCBldmVyeXRoaW5nIGluc2lkZS5cbiAgICBpZiAoYjY0SW5kZXggPj0gMCkge1xuICAgICAgaGVhZGVyTGVuZ3RoID0gTWF0aC5jZWlsKChiNjRJbmRleCArIDI4KSAvIDMpICogNDtcbiAgICAgIG92ZXJ3cml0ZXBIWXMgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkZXJMZW5ndGggPSAzMyAvIDMgKiA0O1xuICAgIH1cbiAgfVxuICBpZiAoZm9ybWF0LmluZGV4T2YoSlBFRykgIT09IC0xKSB7XG4gICAgdHlwZSA9IEpQRUc7XG4gICAgaGVhZGVyTGVuZ3RoID0gMTggLyAzICogNDtcbiAgfVxuICAvLyAzMyBieXRlcyBhcmUgb2sgZm9yIHBuZ3MgYW5kIGpwZWdzXG4gIC8vIHRvIGNvbnRhaW4gdGhlIGluZm9ybWF0aW9uLlxuICB2YXIgc3RyaW5nSGVhZGVyID0gYm9keS5zdWJzdHJpbmcoMCwgaGVhZGVyTGVuZ3RoKTtcbiAgdmFyIHJlc3RPZkRhdGEgPSBib2R5LnN1YnN0cmluZyhoZWFkZXJMZW5ndGgpO1xuICB2YXIgaGVhZGVyQnl0ZXMgPSBhdG9iKHN0cmluZ0hlYWRlcik7XG4gIHZhciBkYXRhQXJyYXkgPSBuZXcgVWludDhBcnJheShoZWFkZXJCeXRlcy5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGFBcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGRhdGFBcnJheVtpXSA9IGhlYWRlckJ5dGVzLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgdmFyIGZpbmFsQXJyYXkgPSBjaGFuZ2VEcGlPbkFycmF5KGRhdGFBcnJheSwgZHBpLCB0eXBlLCBvdmVyd3JpdGVwSFlzKTtcbiAgdmFyIGJhc2U2NEhlYWRlciA9IGJ0b2EoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIF90b0NvbnN1bWFibGVBcnJheShmaW5hbEFycmF5KSkpO1xuICByZXR1cm4gW2Zvcm1hdCwgJywnLCBiYXNlNjRIZWFkZXIsIHJlc3RPZkRhdGFdLmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiBkZXRlY3RQaHlzQ2h1bmtGcm9tRGF0YVVybChkYXRhKSB7XG4gIHZhciBiNjRpbmRleCA9IGRhdGEuaW5kZXhPZihiNjRQaHlzU2lnbmF0dXJlMSk7XG4gIGlmIChiNjRpbmRleCA9PT0gLTEpIHtcbiAgICBiNjRpbmRleCA9IGRhdGEuaW5kZXhPZihiNjRQaHlzU2lnbmF0dXJlMik7XG4gIH1cbiAgaWYgKGI2NGluZGV4ID09PSAtMSkge1xuICAgIGI2NGluZGV4ID0gZGF0YS5pbmRleE9mKGI2NFBoeXNTaWduYXR1cmUzKTtcbiAgfVxuICAvLyBpZiBiNjRpbmRleCA9PT0gLTEgY2h1bmsgaXMgbm90IGZvdW5kXG4gIHJldHVybiBiNjRpbmRleDtcbn1cblxuZnVuY3Rpb24gc2VhcmNoU3RhcnRPZlBoeXMoZGF0YSkge1xuICB2YXIgbGVuZ3RoID0gZGF0YS5sZW5ndGggLSAxO1xuICAvLyB3ZSBjaGVjayBmcm9tIHRoZSBlbmQgc2luY2Ugd2UgY3V0IHRoZSBzdHJpbmcgaW4gcHJveGltaXR5IG9mIHRoZSBoZWFkZXJcbiAgLy8gdGhlIGhlYWRlciBpcyB3aXRoaW4gMjEgYnl0ZXMgZnJvbSB0aGUgZW5kLlxuICBmb3IgKHZhciBpID0gbGVuZ3RoOyBpID49IDQ7IGktLSkge1xuICAgIGlmIChkYXRhW2kgLSA0XSA9PT0gOSAmJiBkYXRhW2kgLSAzXSA9PT0gX1AgJiYgZGF0YVtpIC0gMl0gPT09IF9IICYmIGRhdGFbaSAtIDFdID09PSBfWSAmJiBkYXRhW2ldID09PSBfUykge1xuICAgICAgcmV0dXJuIGkgLSAzO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjaGFuZ2VEcGlPbkFycmF5KGRhdGFBcnJheSwgZHBpLCBmb3JtYXQsIG92ZXJ3cml0ZXBIWXMpIHtcbiAgaWYgKGZvcm1hdCA9PT0gSlBFRykge1xuICAgIGRhdGFBcnJheVsxM10gPSAxOyAvLyAxIHBpeGVsIHBlciBpbmNoIG9yIDIgcGl4ZWwgcGVyIGNtXG4gICAgZGF0YUFycmF5WzE0XSA9IGRwaSA+PiA4OyAvLyBkcGlYIGhpZ2ggYnl0ZVxuICAgIGRhdGFBcnJheVsxNV0gPSBkcGkgJiAweGZmOyAvLyBkcGlYIGxvdyBieXRlXG4gICAgZGF0YUFycmF5WzE2XSA9IGRwaSA+PiA4OyAvLyBkcGlZIGhpZ2ggYnl0ZVxuICAgIGRhdGFBcnJheVsxN10gPSBkcGkgJiAweGZmOyAvLyBkcGlZIGxvdyBieXRlXG4gICAgcmV0dXJuIGRhdGFBcnJheTtcbiAgfVxuICBpZiAoZm9ybWF0ID09PSBQTkcpIHtcbiAgICB2YXIgcGh5c0NodW5rID0gbmV3IFVpbnQ4QXJyYXkoMTMpO1xuICAgIC8vIGNodW5rIGhlYWRlciBwSFlzXG4gICAgLy8gOSBieXRlcyBvZiBkYXRhXG4gICAgLy8gNCBieXRlcyBvZiBjcmNcbiAgICAvLyB0aGlzIG11bHRpcGxpY2F0aW9uIGlzIGJlY2F1c2UgdGhlIHN0YW5kYXJkIGlzIGRwaSBwZXIgbWV0ZXIuXG4gICAgZHBpICo9IDM5LjM3MDE7XG4gICAgcGh5c0NodW5rWzBdID0gX1A7XG4gICAgcGh5c0NodW5rWzFdID0gX0g7XG4gICAgcGh5c0NodW5rWzJdID0gX1k7XG4gICAgcGh5c0NodW5rWzNdID0gX1M7XG4gICAgcGh5c0NodW5rWzRdID0gZHBpID4+PiAyNDsgLy8gZHBpWCBoaWdoZXN0IGJ5dGVcbiAgICBwaHlzQ2h1bmtbNV0gPSBkcGkgPj4+IDE2OyAvLyBkcGlYIHZlcnloaWdoIGJ5dGVcbiAgICBwaHlzQ2h1bmtbNl0gPSBkcGkgPj4+IDg7IC8vIGRwaVggaGlnaCBieXRlXG4gICAgcGh5c0NodW5rWzddID0gZHBpICYgMHhmZjsgLy8gZHBpWCBsb3cgYnl0ZVxuICAgIHBoeXNDaHVua1s4XSA9IHBoeXNDaHVua1s0XTsgLy8gZHBpWSBoaWdoZXN0IGJ5dGVcbiAgICBwaHlzQ2h1bmtbOV0gPSBwaHlzQ2h1bmtbNV07IC8vIGRwaVkgdmVyeWhpZ2ggYnl0ZVxuICAgIHBoeXNDaHVua1sxMF0gPSBwaHlzQ2h1bmtbNl07IC8vIGRwaVkgaGlnaCBieXRlXG4gICAgcGh5c0NodW5rWzExXSA9IHBoeXNDaHVua1s3XTsgLy8gZHBpWSBsb3cgYnl0ZVxuICAgIHBoeXNDaHVua1sxMl0gPSAxOyAvLyBkb3QgcGVyIG1ldGVyLi4uLlxuXG4gICAgdmFyIGNyYyA9IGNhbGNDcmMocGh5c0NodW5rKTtcblxuICAgIHZhciBjcmNDaHVuayA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgIGNyY0NodW5rWzBdID0gY3JjID4+PiAyNDtcbiAgICBjcmNDaHVua1sxXSA9IGNyYyA+Pj4gMTY7XG4gICAgY3JjQ2h1bmtbMl0gPSBjcmMgPj4+IDg7XG4gICAgY3JjQ2h1bmtbM10gPSBjcmMgJiAweGZmO1xuXG4gICAgaWYgKG92ZXJ3cml0ZXBIWXMpIHtcbiAgICAgIHZhciBzdGFydGluZ0luZGV4ID0gc2VhcmNoU3RhcnRPZlBoeXMoZGF0YUFycmF5KTtcbiAgICAgIGRhdGFBcnJheS5zZXQocGh5c0NodW5rLCBzdGFydGluZ0luZGV4KTtcbiAgICAgIGRhdGFBcnJheS5zZXQoY3JjQ2h1bmssIHN0YXJ0aW5nSW5kZXggKyAxMyk7XG4gICAgICByZXR1cm4gZGF0YUFycmF5O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpIG5lZWQgdG8gZ2l2ZSBiYWNrIGFuIGFycmF5IG9mIGRhdGEgdGhhdCBpcyBkaXZpc2libGUgYnkgMyBzbyB0aGF0XG4gICAgICAvLyBkYXRhdXJsIGVuY29kaW5nIGdpdmVzIG1lIGludGVnZXJzLCBmb3IgbHVjayB0aGlzIGNodW5rIGlzIDE3ICsgNCA9IDIxXG4gICAgICAvLyBpZiBpdCB3YXMgd2UgY291bGQgYWRkIGEgdGV4dCBjaHVuayBjb250YW5pbmcgc29tZSBpbmZvLCB1bnRpbGwgZGVzaXJlZFxuICAgICAgLy8gbGVuZ3RoIGlzIG1ldC5cblxuICAgICAgLy8gY2h1bmsgc3RydWN0dXIgNCBieXRlcyBmb3IgbGVuZ3RoIGlzIDlcbiAgICAgIHZhciBjaHVua0xlbmd0aCA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgICAgY2h1bmtMZW5ndGhbMF0gPSAwO1xuICAgICAgY2h1bmtMZW5ndGhbMV0gPSAwO1xuICAgICAgY2h1bmtMZW5ndGhbMl0gPSAwO1xuICAgICAgY2h1bmtMZW5ndGhbM10gPSA5O1xuXG4gICAgICB2YXIgZmluYWxIZWFkZXIgPSBuZXcgVWludDhBcnJheSg1NCk7XG4gICAgICBmaW5hbEhlYWRlci5zZXQoZGF0YUFycmF5LCAwKTtcbiAgICAgIGZpbmFsSGVhZGVyLnNldChjaHVua0xlbmd0aCwgMzMpO1xuICAgICAgZmluYWxIZWFkZXIuc2V0KHBoeXNDaHVuaywgMzcpO1xuICAgICAgZmluYWxIZWFkZXIuc2V0KGNyY0NodW5rLCA1MCk7XG4gICAgICByZXR1cm4gZmluYWxIZWFkZXI7XG4gICAgfVxuICB9XG59IiwiKGZ1bmN0aW9uKGEsYil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSxiKTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzKWIoKTtlbHNle2IoKSxhLkZpbGVTYXZlcj17ZXhwb3J0czp7fX0uZXhwb3J0c319KSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihhLGIpe3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBiP2I9e2F1dG9Cb206ITF9Olwib2JqZWN0XCIhPXR5cGVvZiBiJiYoY29uc29sZS53YXJuKFwiRGVwcmVjYXRlZDogRXhwZWN0ZWQgdGhpcmQgYXJndW1lbnQgdG8gYmUgYSBvYmplY3RcIiksYj17YXV0b0JvbTohYn0pLGIuYXV0b0JvbSYmL15cXHMqKD86dGV4dFxcL1xcUyp8YXBwbGljYXRpb25cXC94bWx8XFxTKlxcL1xcUypcXCt4bWwpXFxzKjsuKmNoYXJzZXRcXHMqPVxccyp1dGYtOC9pLnRlc3QoYS50eXBlKT9uZXcgQmxvYihbXCJcXHVGRUZGXCIsYV0se3R5cGU6YS50eXBlfSk6YX1mdW5jdGlvbiBjKGEsYixjKXt2YXIgZD1uZXcgWE1MSHR0cFJlcXVlc3Q7ZC5vcGVuKFwiR0VUXCIsYSksZC5yZXNwb25zZVR5cGU9XCJibG9iXCIsZC5vbmxvYWQ9ZnVuY3Rpb24oKXtnKGQucmVzcG9uc2UsYixjKX0sZC5vbmVycm9yPWZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcImNvdWxkIG5vdCBkb3dubG9hZCBmaWxlXCIpfSxkLnNlbmQoKX1mdW5jdGlvbiBkKGEpe3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJIRUFEXCIsYSwhMSk7dHJ5e2Iuc2VuZCgpfWNhdGNoKGEpe31yZXR1cm4gMjAwPD1iLnN0YXR1cyYmMjk5Pj1iLnN0YXR1c31mdW5jdGlvbiBlKGEpe3RyeXthLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiKSl9Y2F0Y2goYyl7dmFyIGI9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtiLmluaXRNb3VzZUV2ZW50KFwiY2xpY2tcIiwhMCwhMCx3aW5kb3csMCwwLDAsODAsMjAsITEsITEsITEsITEsMCxudWxsKSxhLmRpc3BhdGNoRXZlbnQoYil9fXZhciBmPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy53aW5kb3c9PT13aW5kb3c/d2luZG93Olwib2JqZWN0XCI9PXR5cGVvZiBzZWxmJiZzZWxmLnNlbGY9PT1zZWxmP3NlbGY6XCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbCYmZ2xvYmFsLmdsb2JhbD09PWdsb2JhbD9nbG9iYWw6dm9pZCAwLGE9Zi5uYXZpZ2F0b3ImJi9NYWNpbnRvc2gvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJi9BcHBsZVdlYktpdC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmIS9TYWZhcmkvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksZz1mLnNhdmVBc3x8KFwib2JqZWN0XCIhPXR5cGVvZiB3aW5kb3d8fHdpbmRvdyE9PWY/ZnVuY3Rpb24oKXt9OlwiZG93bmxvYWRcImluIEhUTUxBbmNob3JFbGVtZW50LnByb3RvdHlwZSYmIWE/ZnVuY3Rpb24oYixnLGgpe3ZhciBpPWYuVVJMfHxmLndlYmtpdFVSTCxqPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO2c9Z3x8Yi5uYW1lfHxcImRvd25sb2FkXCIsai5kb3dubG9hZD1nLGoucmVsPVwibm9vcGVuZXJcIixcInN0cmluZ1wiPT10eXBlb2YgYj8oai5ocmVmPWIsai5vcmlnaW49PT1sb2NhdGlvbi5vcmlnaW4/ZShqKTpkKGouaHJlZik/YyhiLGcsaCk6ZShqLGoudGFyZ2V0PVwiX2JsYW5rXCIpKTooai5ocmVmPWkuY3JlYXRlT2JqZWN0VVJMKGIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpLnJldm9rZU9iamVjdFVSTChqLmhyZWYpfSw0RTQpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKGopfSwwKSl9OlwibXNTYXZlT3JPcGVuQmxvYlwiaW4gbmF2aWdhdG9yP2Z1bmN0aW9uKGYsZyxoKXtpZihnPWd8fGYubmFtZXx8XCJkb3dubG9hZFwiLFwic3RyaW5nXCIhPXR5cGVvZiBmKW5hdmlnYXRvci5tc1NhdmVPck9wZW5CbG9iKGIoZixoKSxnKTtlbHNlIGlmKGQoZikpYyhmLGcsaCk7ZWxzZXt2YXIgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtpLmhyZWY9ZixpLnRhcmdldD1cIl9ibGFua1wiLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKGkpfSl9fTpmdW5jdGlvbihiLGQsZSxnKXtpZihnPWd8fG9wZW4oXCJcIixcIl9ibGFua1wiKSxnJiYoZy5kb2N1bWVudC50aXRsZT1nLmRvY3VtZW50LmJvZHkuaW5uZXJUZXh0PVwiZG93bmxvYWRpbmcuLi5cIiksXCJzdHJpbmdcIj09dHlwZW9mIGIpcmV0dXJuIGMoYixkLGUpO3ZhciBoPVwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCI9PT1iLnR5cGUsaT0vY29uc3RydWN0b3IvaS50ZXN0KGYuSFRNTEVsZW1lbnQpfHxmLnNhZmFyaSxqPS9DcmlPU1xcL1tcXGRdKy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtpZigoanx8aCYmaXx8YSkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBGaWxlUmVhZGVyKXt2YXIgaz1uZXcgRmlsZVJlYWRlcjtrLm9ubG9hZGVuZD1mdW5jdGlvbigpe3ZhciBhPWsucmVzdWx0O2E9aj9hOmEucmVwbGFjZSgvXmRhdGE6W147XSo7LyxcImRhdGE6YXR0YWNobWVudC9maWxlO1wiKSxnP2cubG9jYXRpb24uaHJlZj1hOmxvY2F0aW9uPWEsZz1udWxsfSxrLnJlYWRBc0RhdGFVUkwoYil9ZWxzZXt2YXIgbD1mLlVSTHx8Zi53ZWJraXRVUkwsbT1sLmNyZWF0ZU9iamVjdFVSTChiKTtnP2cubG9jYXRpb249bTpsb2NhdGlvbi5ocmVmPW0sZz1udWxsLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtsLnJldm9rZU9iamVjdFVSTChtKX0sNEU0KX19KTtmLnNhdmVBcz1nLnNhdmVBcz1nLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJihtb2R1bGUuZXhwb3J0cz1nKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1GaWxlU2F2ZXIubWluLmpzLm1hcCIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbmV4cG9ydCBkZWZhdWx0IGZyZWVHbG9iYWw7XG4iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgbm9kZVV0aWw7XG4iLCJpbXBvcnQge1xuXHRIQUxGX0ZMT0FULCBGTE9BVCwgVU5TSUdORURfQllURSwgQllURSwgVU5TSUdORURfU0hPUlQsIFNIT1JULCBVTlNJR05FRF9JTlQsIElOVCxcblx0TElORUFSLCBORUFSRVNULFxuXHRSRVBFQVQsIENMQU1QX1RPX0VER0UsIFJHQiwgUkdCQSxcbn0gZnJvbSAnLi9Db25zdGFudHMnO1xuXG5leHBvcnQgY29uc3QgdmFsaWREYXRhVHlwZXMgPSBbSEFMRl9GTE9BVCwgRkxPQVQsIFVOU0lHTkVEX0JZVEUsIEJZVEUsIFVOU0lHTkVEX1NIT1JULCBTSE9SVCwgVU5TSUdORURfSU5ULCBJTlRdO1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWREYXRhVHlwZSh0eXBlOiBzdHJpbmcpIHtcblx0cmV0dXJuIHZhbGlkRGF0YVR5cGVzLmluZGV4T2YodHlwZSkgPiAtMTtcbn1cblxuZXhwb3J0IGNvbnN0IHZhbGlkRmlsdGVyVHlwZXMgPSBbTElORUFSLCBORUFSRVNUXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRmlsdGVyVHlwZSh0eXBlOiBzdHJpbmcpIHtcblx0cmV0dXJuIHZhbGlkRmlsdGVyVHlwZXMuaW5kZXhPZih0eXBlKSA+IC0xO1xufVxuXG5leHBvcnQgY29uc3QgdmFsaWRXcmFwVHlwZXMgPSBbQ0xBTVBfVE9fRURHRSwgUkVQRUFUXTsgLy8gTUlSUk9SRURfUkVQRUFUXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFdyYXBUeXBlKHR5cGU6IHN0cmluZykge1xuXHRyZXR1cm4gdmFsaWRXcmFwVHlwZXMuaW5kZXhPZih0eXBlKSA+IC0xO1xufVxuXG5leHBvcnQgY29uc3QgdmFsaWRUZXh0dXJlRm9ybWF0VHlwZXMgPSBbUkdCLCBSR0JBXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkVGV4dHVyZUZvcm1hdFR5cGUodHlwZTogc3RyaW5nKSB7XG5cdHJldHVybiB2YWxpZFRleHR1cmVGb3JtYXRUeXBlcy5pbmRleE9mKHR5cGUpID4gLTE7XG59XG5cbmV4cG9ydCBjb25zdCB2YWxpZFRleHR1cmVEYXRhVHlwZXMgPSBbVU5TSUdORURfQllURV07XG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFRleHR1cmVEYXRhVHlwZSh0eXBlOiBzdHJpbmcpIHtcblx0cmV0dXJuIHZhbGlkVGV4dHVyZURhdGFUeXBlcy5pbmRleE9mKHR5cGUpID4gLTE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlcih2YWx1ZTogYW55KSB7XG5cdHJldHVybiAhaXNOYU4odmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlOiBhbnkpIHtcblx0cmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiAodmFsdWUgJSAxID09PSAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUG9zaXRpdmVJbnRlZ2VyKHZhbHVlOiBhbnkpIHtcblx0cmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgIHZhbHVlID4gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlOiBhbnkpe1xuXHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXkodmFsdWU6IGFueSkge1xuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59IiwiZXhwb3J0IGNvbnN0IEhBTEZfRkxPQVQgPSAnSEFMRl9GTE9BVCc7XG5leHBvcnQgY29uc3QgRkxPQVQgPSAnRkxPQVQnO1xuZXhwb3J0IGNvbnN0IFVOU0lHTkVEX0JZVEUgPSAnVU5TSUdORURfQllURSc7XG5leHBvcnQgY29uc3QgQllURSA9ICdCWVRFJztcbmV4cG9ydCBjb25zdCBVTlNJR05FRF9TSE9SVCA9ICdVTlNJR05FRF9TSE9SVCc7XG5leHBvcnQgY29uc3QgU0hPUlQgPSAnU0hPUlQnO1xuZXhwb3J0IGNvbnN0IFVOU0lHTkVEX0lOVCA9ICdVTlNJR05FRF9JTlQnO1xuZXhwb3J0IGNvbnN0IElOVCA9ICdJTlQnO1xuXG5leHBvcnQgY29uc3QgTElORUFSID0gJ0xJTkVBUic7XG5leHBvcnQgY29uc3QgTkVBUkVTVCA9ICdORUFSRVNUJztcblxuZXhwb3J0IGNvbnN0IFJFUEVBVCA9ICdSRVBFQVQnO1xuZXhwb3J0IGNvbnN0IENMQU1QX1RPX0VER0UgPSAnQ0xBTVBfVE9fRURHRSc7XG4vLyBleHBvcnQgY29uc3QgTUlSUk9SRURfUkVQRUFUID0gJ01JUlJPUkVEX1JFUEVBVCc7XG5cbmV4cG9ydCBjb25zdCBSR0IgPSAnUkdCJztcbmV4cG9ydCBjb25zdCBSR0JBID0gJ1JHQkEnO1xuXG5leHBvcnQgdHlwZSBEYXRhTGF5ZXJBcnJheVR5cGUgPSAgRmxvYXQzMkFycmF5IHwgVWludDhBcnJheSB8IEludDhBcnJheSB8IFVpbnQxNkFycmF5IHwgSW50MTZBcnJheSB8IFVpbnQzMkFycmF5IHwgSW50MzJBcnJheTtcbmV4cG9ydCB0eXBlIERhdGFMYXllclR5cGUgPSB0eXBlb2YgSEFMRl9GTE9BVCB8IHR5cGVvZiBGTE9BVCB8IHR5cGVvZiBVTlNJR05FRF9CWVRFIHwgdHlwZW9mIEJZVEUgfCB0eXBlb2YgVU5TSUdORURfU0hPUlQgfCB0eXBlb2YgU0hPUlQgfCB0eXBlb2YgVU5TSUdORURfSU5UIHwgdHlwZW9mIElOVDtcbmV4cG9ydCB0eXBlIERhdGFMYXllck51bUNvbXBvbmVudHMgPSAxIHwgMiB8IDMgfCA0O1xuZXhwb3J0IHR5cGUgRGF0YUxheWVyRmlsdGVyVHlwZSA9IHR5cGVvZiBMSU5FQVIgfCB0eXBlb2YgTkVBUkVTVDtcbmV4cG9ydCB0eXBlIERhdGFMYXllcldyYXBUeXBlID0gdHlwZW9mIFJFUEVBVCB8IHR5cGVvZiBDTEFNUF9UT19FREdFOy8vIHwgdHlwZW9mIE1JUlJPUkVEX1JFUEVBVDtcblxuZXhwb3J0IHR5cGUgVGV4dHVyZUZvcm1hdFR5cGUgPSB0eXBlb2YgUkdCIHwgdHlwZW9mIFJHQkE7XG5leHBvcnQgdHlwZSBUZXh0dXJlRGF0YVR5cGUgPSB0eXBlb2YgVU5TSUdORURfQllURTtcblxuZXhwb3J0IGNvbnN0IEdMU0wzID0gJzMwMCBlcyc7XG5leHBvcnQgY29uc3QgR0xTTDEgPSAnMTAwJztcbmV4cG9ydCB0eXBlIEdMU0xWZXJzaW9uID0gdHlwZW9mIEdMU0wxIHwgdHlwZW9mIEdMU0wzO1xuXG4vLyBVbmlmb3JtIHR5cGVzLlxuZXhwb3J0IGNvbnN0IEZMT0FUXzFEX1VOSUZPUk0gPSAnMWYnO1xuZXhwb3J0IGNvbnN0IEZMT0FUXzJEX1VOSUZPUk0gPSAnMmYnO1xuZXhwb3J0IGNvbnN0IEZMT0FUXzNEX1VOSUZPUk0gPSAnM2YnO1xuZXhwb3J0IGNvbnN0IEZMT0FUXzREX1VOSUZPUk0gPSAnM2YnO1xuZXhwb3J0IGNvbnN0IElOVF8xRF9VTklGT1JNID0gJzFpJztcbmV4cG9ydCBjb25zdCBJTlRfMkRfVU5JRk9STSA9ICcyaSc7XG5leHBvcnQgY29uc3QgSU5UXzNEX1VOSUZPUk0gPSAnM2knO1xuZXhwb3J0IGNvbnN0IElOVF80RF9VTklGT1JNID0gJzNpJztcblxuZXhwb3J0IHR5cGUgVW5pZm9ybURhdGFUeXBlID0gdHlwZW9mIEZMT0FUIHwgdHlwZW9mIElOVDtcbmV4cG9ydCB0eXBlIFVuaWZvcm1WYWx1ZVR5cGUgPSBcblx0bnVtYmVyIHxcblx0W251bWJlcl0gfFxuXHRbbnVtYmVyLCBudW1iZXJdIHxcblx0W251bWJlciwgbnVtYmVyLCBudW1iZXJdIHxcblx0W251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG5leHBvcnQgdHlwZSBVbmlmb3JtVHlwZSA9IFxuXHR0eXBlb2YgRkxPQVRfMURfVU5JRk9STSB8XG5cdHR5cGVvZiBGTE9BVF8yRF9VTklGT1JNIHxcblx0dHlwZW9mIEZMT0FUXzNEX1VOSUZPUk0gfFxuXHR0eXBlb2YgRkxPQVRfNERfVU5JRk9STSB8XG5cdHR5cGVvZiBJTlRfMURfVU5JRk9STSB8XG5cdHR5cGVvZiBJTlRfMkRfVU5JRk9STSB8XG5cdHR5cGVvZiBJTlRfM0RfVU5JRk9STSB8XG5cdHR5cGVvZiBJTlRfNERfVU5JRk9STTtcbmV4cG9ydCB0eXBlIFVuaWZvcm0gPSB7IFxuXHRsb2NhdGlvbjogeyBba2V5OiBzdHJpbmddOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbiB9LFxuXHR0eXBlOiBVbmlmb3JtVHlwZSxcblx0dmFsdWU6IFVuaWZvcm1WYWx1ZVR5cGUsXG59O1xuXG4iLCJpbXBvcnQgeyBzZXRGbG9hdDE2IH0gZnJvbSAnQHBldGFtb3Jpa2VuL2Zsb2F0MTYnO1xuaW1wb3J0IHsgaXNQb3NpdGl2ZUludGVnZXIsIGlzVmFsaWREYXRhVHlwZSwgaXNWYWxpZEZpbHRlclR5cGUsIGlzVmFsaWRXcmFwVHlwZSwgdmFsaWREYXRhVHlwZXMsIHZhbGlkRmlsdGVyVHlwZXMsIHZhbGlkV3JhcFR5cGVzIH0gZnJvbSAnLi9DaGVja3MnO1xuaW1wb3J0IHtcblx0SEFMRl9GTE9BVCwgRkxPQVQsIFVOU0lHTkVEX0JZVEUsIEJZVEUsIFVOU0lHTkVEX1NIT1JULCBTSE9SVCwgVU5TSUdORURfSU5ULCBJTlQsXG5cdE5FQVJFU1QsIExJTkVBUiwgQ0xBTVBfVE9fRURHRSxcblx0RGF0YUxheWVyQXJyYXlUeXBlLCBEYXRhTGF5ZXJGaWx0ZXJUeXBlLCBEYXRhTGF5ZXJOdW1Db21wb25lbnRzLCBEYXRhTGF5ZXJUeXBlLCBEYXRhTGF5ZXJXcmFwVHlwZSwgR0xTTFZlcnNpb24sIEdMU0wzLCBHTFNMMSxcbiB9IGZyb20gJy4vQ29uc3RhbnRzJztcbmltcG9ydCB7XG5cdGdldEV4dGVuc2lvbixcblx0RVhUX0NPTE9SX0JVRkZFUl9GTE9BVCxcblx0T0VTX1RFWFRVUkVfRkxPQVQsXG5cdE9FU19URVhUVVJFX0ZMT0FUX0xJTkVBUixcblx0T0VTX1RFWFRVUkVfSEFMRl9GTE9BVCxcblx0T0VTX1RFWFRVUkVfSEFsRl9GTE9BVF9MSU5FQVIsXG59IGZyb20gJy4vZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyBpc1dlYkdMMiB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBEYXRhTGF5ZXJCdWZmZXIgPSB7XG5cdHRleHR1cmU6IFdlYkdMVGV4dHVyZSxcblx0ZnJhbWVidWZmZXI/OiBXZWJHTEZyYW1lYnVmZmVyLFxufVxuXG50eXBlIEVycm9yQ2FsbGJhY2sgPSAobWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkO1xuXG5leHBvcnQgY2xhc3MgRGF0YUxheWVyIHtcblx0cmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXHRwcml2YXRlIHJlYWRvbmx5IGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0O1xuXHRwcml2YXRlIHJlYWRvbmx5IGVycm9yQ2FsbGJhY2s6IEVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gRWFjaCBEYXRhTGF5ZXIgbWF5IGNvbnRhaW4gYSBudW1iZXIgb2YgYnVmZmVycyB0byBzdG9yZSBkaWZmZXJlbnQgaW5zdGFuY2VzIG9mIHRoZSBzdGF0ZS5cblx0cHJpdmF0ZSBfYnVmZmVySW5kZXggPSAwO1xuXHRyZWFkb25seSBudW1CdWZmZXJzO1xuXHRwcml2YXRlIHJlYWRvbmx5IGJ1ZmZlcnM6IERhdGFMYXllckJ1ZmZlcltdID0gW107XG5cblx0Ly8gVGV4dHVyZSBzaXplcy5cblx0cHJpdmF0ZSBsZW5ndGg/OiBudW1iZXI7IC8vIFRoaXMgaXMgb25seSB1c2VkIGZvciAxRCBkYXRhIGxheWVycy5cblx0cHJpdmF0ZSB3aWR0aDogbnVtYmVyO1xuXHRwcml2YXRlIGhlaWdodDogbnVtYmVyO1xuXG5cdC8vIERhdGFMYXllciBzZXR0aW5ncy5cblx0cmVhZG9ubHkgdHlwZTogRGF0YUxheWVyVHlwZTsgLy8gSW5wdXQgdHlwZSBwYXNzZWQgaW4gZHVyaW5nIHNldHVwLlxuXHRyZWFkb25seSBpbnRlcm5hbFR5cGU6IERhdGFMYXllclR5cGU7IC8vIFR5cGUgdGhhdCBjb3JyZXNwb25kcyB0byBnbFR5cGUsIG1heSBiZSBkaWZmZXJlbnQgZnJvbSB0eXBlLlxuXHRyZWFkb25seSB3cmFwUzogRGF0YUxheWVyV3JhcFR5cGU7IC8vIElucHV0IHdyYXAgdHlwZSBwYXNzZWQgaW4gZHVyaW5nIHNldHVwLlxuXHRyZWFkb25seSB3cmFwVDogRGF0YUxheWVyV3JhcFR5cGU7IC8vIElucHV0IHdyYXAgdHlwZSBwYXNzZWQgaW4gZHVyaW5nIHNldHVwLlxuXHRyZWFkb25seSBpbnRlcm5hbFdyYXBTOiBEYXRhTGF5ZXJXcmFwVHlwZTsgLy8gV3JhcCB0eXBlIHRoYXQgY29ycmVzcG9uZHMgdG8gZ2xXcmFwUywgbWF5IGJlIGRpZmZlcmVudCBmcm9tIHdyYXBTLlxuXHRyZWFkb25seSBpbnRlcm5hbFdyYXBUOiBEYXRhTGF5ZXJXcmFwVHlwZTsgLy8gV3JhcCB0eXBlIHRoYXQgY29ycmVzcG9uZHMgdG8gZ2xXcmFwVCwgbWF5IGJlIGRpZmZlcmVudCBmcm9tIHdyYXBULlxuXHRyZWFkb25seSBudW1Db21wb25lbnRzOiBEYXRhTGF5ZXJOdW1Db21wb25lbnRzOyAvLyBOdW1iZXIgb2YgUkdCQSBjaGFubmVscyB0byB1c2UgZm9yIHRoaXMgRGF0YUxheWVyLlxuXHRyZWFkb25seSBmaWx0ZXI6IERhdGFMYXllckZpbHRlclR5cGU7IC8vIEludGVycG9sYXRpb24gZmlsdGVyIHR5cGUgb2YgZGF0YS5cblx0cmVhZG9ubHkgaW50ZXJuYWxGaWx0ZXI6IERhdGFMYXllckZpbHRlclR5cGU7IC8vIEZpbHRlciB0eXBlIHRoYXQgY29ycmVzcG9uZHMgdG8gZ2xGaWx0ZXIsIG1heSBiZSBkaWZmZXJlbnQgZnJvbSBmaWx0ZXIuXG5cdHJlYWRvbmx5IHdyaXRhYmxlOiBib29sZWFuO1xuXG5cdC8vIE9wdGltaXphdGlvbnMgc28gdGhhdCBcImNvcHlpbmdcIiBjYW4gaGFwcGVuIHdpdGhvdXQgZHJhdyBjYWxscy5cblx0cHJpdmF0ZSB0ZXh0dXJlT3ZlcnJpZGVzPzogKFdlYkdMVGV4dHVyZSB8IHVuZGVmaW5lZClbXTtcblxuXHQvLyBHTCB2YXJpYWJsZXMgKHRoZXNlIG1heSBiZSBkaWZmZXJlbnQgZnJvbSB0aGVpciBjb3JyZXNwb25kaW5nIG5vbi1nbCBwYXJhbWV0ZXJzKS5cblx0cmVhZG9ubHkgZ2xJbnRlcm5hbEZvcm1hdDogbnVtYmVyO1xuXHRyZWFkb25seSBnbEZvcm1hdDogbnVtYmVyO1xuXHRyZWFkb25seSBnbFR5cGU6IG51bWJlcjtcblx0cmVhZG9ubHkgZ2xOdW1DaGFubmVsczogbnVtYmVyO1xuXHRyZWFkb25seSBnbFdyYXBTOiBudW1iZXI7XG5cdHJlYWRvbmx5IGdsV3JhcFQ6IG51bWJlcjtcblx0cmVhZG9ubHkgZ2xGaWx0ZXI6IG51bWJlcjtcblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRwYXJhbXM6IHtcblx0XHRcdGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxuXHRcdFx0bmFtZTogc3RyaW5nLFxuXHRcdFx0ZGltZW5zaW9uczogbnVtYmVyIHwgW251bWJlciwgbnVtYmVyXSxcblx0XHRcdHR5cGU6IERhdGFMYXllclR5cGUsXG5cdFx0XHRudW1Db21wb25lbnRzOiBEYXRhTGF5ZXJOdW1Db21wb25lbnRzLFxuXHRcdFx0Z2xzbFZlcnNpb246IEdMU0xWZXJzaW9uLFxuXHRcdFx0ZGF0YT86IERhdGFMYXllckFycmF5VHlwZSxcblx0XHRcdGZpbHRlcj86IERhdGFMYXllckZpbHRlclR5cGUsXG5cdFx0XHR3cmFwUz86IERhdGFMYXllcldyYXBUeXBlLFxuXHRcdFx0d3JhcFQ/OiBEYXRhTGF5ZXJXcmFwVHlwZSxcblx0XHRcdHdyaXRhYmxlPzogYm9vbGVhbixcblx0XHRcdG51bUJ1ZmZlcnM/OiBudW1iZXIsXG5cdFx0XHRlcnJvckNhbGxiYWNrOiBFcnJvckNhbGxiYWNrLFxuXHRcdH0sXG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wsIGVycm9yQ2FsbGJhY2ssIG5hbWUsIGRpbWVuc2lvbnMsIHR5cGUsIG51bUNvbXBvbmVudHMsIGRhdGEsIGdsc2xWZXJzaW9uIH0gPSBwYXJhbXM7XG5cblx0XHQvLyBTYXZlIHBhcmFtcy5cblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXHRcdHRoaXMuZ2wgPSBnbDtcblx0XHR0aGlzLmVycm9yQ2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrO1xuXG5cdFx0Ly8gbnVtQ29tcG9uZW50cyBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNC5cblx0XHRpZiAoIWlzUG9zaXRpdmVJbnRlZ2VyKG51bUNvbXBvbmVudHMpIHx8IG51bUNvbXBvbmVudHMgPiA0KSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbnVtQ29tcG9uZW50cyAke251bUNvbXBvbmVudHN9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuYCk7XG5cdFx0fVxuXHRcdHRoaXMubnVtQ29tcG9uZW50cyA9IG51bUNvbXBvbmVudHM7XG5cblx0XHQvLyB3cml0YWJsZSBkZWZhdWx0cyB0byBmYWxzZS5cblx0XHRjb25zdCB3cml0YWJsZSA9ICEhcGFyYW1zLndyaXRhYmxlO1xuXHRcdHRoaXMud3JpdGFibGUgPSB3cml0YWJsZTtcblxuXHRcdC8vIFNldCBkaW1lbnNpb25zLCBtYXkgYmUgMUQgb3IgMkQuXG5cdFx0Y29uc3QgeyBsZW5ndGgsIHdpZHRoLCBoZWlnaHQgfSA9IERhdGFMYXllci5jYWxjU2l6ZShkaW1lbnNpb25zLCBuYW1lKTtcblx0XHR0aGlzLmxlbmd0aCA9IGxlbmd0aDtcblx0XHRpZiAoIWlzUG9zaXRpdmVJbnRlZ2VyKHdpZHRoKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHdpZHRoICR7d2lkdGh9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuYCk7XG5cdFx0fVxuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHRpZiAoIWlzUG9zaXRpdmVJbnRlZ2VyKGhlaWdodCkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBsZW5ndGggJHtoZWlnaHR9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuYCk7XG5cdFx0fVxuXHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0Ly8gU2V0IGZpbHRlcmluZyAtIGlmIHdlIGFyZSBwcm9jZXNzaW5nIGEgMUQgYXJyYXksIGRlZmF1bHQgdG8gTkVBUkVTVCBmaWx0ZXJpbmcuXG5cdFx0Ly8gRWxzZSBkZWZhdWx0IHRvIExJTkVBUiAoaW50ZXJwb2xhdGlvbikgZmlsdGVyaW5nLlxuXHRcdGNvbnN0IGZpbHRlciA9IHBhcmFtcy5maWx0ZXIgIT09IHVuZGVmaW5lZCA/IHBhcmFtcy5maWx0ZXIgOiAobGVuZ3RoID8gTkVBUkVTVCA6IExJTkVBUik7XG5cdFx0aWYgKCFpc1ZhbGlkRmlsdGVyVHlwZShmaWx0ZXIpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZmlsdGVyOiAke2ZpbHRlcn0gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIiwgbXVzdCBiZSAke3ZhbGlkRmlsdGVyVHlwZXMuam9pbignLCAnKX0uYCk7XG5cdFx0fVxuXHRcdHRoaXMuZmlsdGVyID0gZmlsdGVyO1xuXG5cdFx0Ly8gR2V0IHdyYXAgdHlwZXMsIGRlZmF1bHQgdG8gY2xhbXAgdG8gZWRnZS5cblx0XHRjb25zdCB3cmFwUyA9IHBhcmFtcy53cmFwUyAhPT0gdW5kZWZpbmVkID8gcGFyYW1zLndyYXBTIDogQ0xBTVBfVE9fRURHRTtcblx0XHRpZiAoIWlzVmFsaWRXcmFwVHlwZSh3cmFwUykpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB3cmFwUzogJHt3cmFwU30gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIiwgbXVzdCBiZSAke3ZhbGlkV3JhcFR5cGVzLmpvaW4oJywgJyl9LmApO1xuXHRcdH1cblx0XHR0aGlzLndyYXBTID0gd3JhcFM7XG5cdFx0Y29uc3Qgd3JhcFQgPSBwYXJhbXMud3JhcFQgIT09IHVuZGVmaW5lZCA/IHBhcmFtcy53cmFwVCA6IENMQU1QX1RPX0VER0U7XG5cdFx0aWYgKCFpc1ZhbGlkV3JhcFR5cGUod3JhcFQpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgd3JhcFQ6ICR7d3JhcFR9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIsIG11c3QgYmUgJHt2YWxpZFdyYXBUeXBlcy5qb2luKCcsICcpfS5gKTtcblx0XHR9XG5cdFx0dGhpcy53cmFwVCA9IHdyYXBUO1xuXG5cdFx0Ly8gU2V0IGRhdGEgdHlwZS5cblx0XHRpZiAoIWlzVmFsaWREYXRhVHlwZSh0eXBlKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHR5cGUgJHt0eXBlfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLCBtdXN0IGJlIG9uZSBvZiAke3ZhbGlkRGF0YVR5cGVzLmpvaW4oJywgJyl9LmApO1xuXHRcdH1cblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdGNvbnN0IGludGVybmFsVHlwZSA9IERhdGFMYXllci5nZXRJbnRlcm5hbFR5cGUoe1xuXHRcdFx0Z2wsXG5cdFx0XHR0eXBlLFxuXHRcdFx0Z2xzbFZlcnNpb24sXG5cdFx0XHR3cml0YWJsZSxcblx0XHRcdGZpbHRlcixcblx0XHRcdG5hbWUsXG5cdFx0XHRlcnJvckNhbGxiYWNrLFxuXHRcdH0pO1xuXHRcdHRoaXMuaW50ZXJuYWxUeXBlID0gaW50ZXJuYWxUeXBlO1xuXHRcdC8vIFNldCBnbCB0ZXh0dXJlIHBhcmFtZXRlcnMuXG5cdFx0Y29uc3Qge1xuXHRcdFx0Z2xGb3JtYXQsXG5cdFx0XHRnbEludGVybmFsRm9ybWF0LFxuXHRcdFx0Z2xUeXBlLFxuXHRcdFx0Z2xOdW1DaGFubmVscyxcblx0XHR9ID0gRGF0YUxheWVyLmdldEdMVGV4dHVyZVBhcmFtZXRlcnMoe1xuXHRcdFx0Z2wsXG5cdFx0XHRuYW1lLFxuXHRcdFx0bnVtQ29tcG9uZW50cyxcblx0XHRcdHdyaXRhYmxlLFxuXHRcdFx0aW50ZXJuYWxUeXBlLFxuXHRcdFx0Z2xzbFZlcnNpb24sXG5cdFx0XHRlcnJvckNhbGxiYWNrLFxuXHRcdH0pO1xuXHRcdHRoaXMuZ2xJbnRlcm5hbEZvcm1hdCA9IGdsSW50ZXJuYWxGb3JtYXQ7XG5cdFx0dGhpcy5nbEZvcm1hdCA9IGdsRm9ybWF0O1xuXHRcdHRoaXMuZ2xUeXBlID0gZ2xUeXBlO1xuXHRcdHRoaXMuZ2xOdW1DaGFubmVscyA9IGdsTnVtQ2hhbm5lbHM7XG5cblx0XHQvLyBTZXQgaW50ZXJuYWwgZmlsdGVyaW5nL3dyYXAgdHlwZXMuXG5cdFx0dGhpcy5pbnRlcm5hbEZpbHRlciA9IERhdGFMYXllci5nZXRJbnRlcm5hbEZpbHRlcih7IGdsLCBmaWx0ZXIsIGludGVybmFsVHlwZSwgbmFtZSwgZXJyb3JDYWxsYmFjayB9KTtcblx0XHR0aGlzLmdsRmlsdGVyID0gZ2xbdGhpcy5pbnRlcm5hbEZpbHRlcl07XG5cdFx0dGhpcy5pbnRlcm5hbFdyYXBTID0gRGF0YUxheWVyLmdldEludGVybmFsV3JhcCh7IGdsLCB3cmFwOiB3cmFwUywgbmFtZSB9KTtcblx0XHR0aGlzLmdsV3JhcFMgPSBnbFt0aGlzLmludGVybmFsV3JhcFNdO1xuXHRcdHRoaXMuaW50ZXJuYWxXcmFwVCA9IERhdGFMYXllci5nZXRJbnRlcm5hbFdyYXAoeyBnbCwgd3JhcDogd3JhcFQsIG5hbWUgfSk7XG5cdFx0dGhpcy5nbFdyYXBUID0gZ2xbdGhpcy5pbnRlcm5hbFdyYXBUXTtcblxuXHRcdC8vIE51bSBidWZmZXJzIGlzIHRoZSBudW1iZXIgb2Ygc3RhdGVzIHRvIHN0b3JlIGZvciB0aGlzIGRhdGEuXG5cdFx0Y29uc3QgbnVtQnVmZmVycyA9IHBhcmFtcy5udW1CdWZmZXJzICE9PSB1bmRlZmluZWQgPyBwYXJhbXMubnVtQnVmZmVycyA6IDE7XG5cdFx0aWYgKCFpc1Bvc2l0aXZlSW50ZWdlcihudW1CdWZmZXJzKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG51bUJ1ZmZlcnM6ICR7bnVtQnVmZmVyc30gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIiwgbXVzdCBiZSBwb3NpdGl2ZSBpbnRlZ2VyLmApO1xuXHRcdH1cblx0XHR0aGlzLm51bUJ1ZmZlcnMgPSBudW1CdWZmZXJzO1xuXG5cdFx0dGhpcy5pbml0QnVmZmVycyhkYXRhKTtcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIGNhbGNTaXplKGRpbWVuc2lvbnM6IG51bWJlciB8IFtudW1iZXIsIG51bWJlcl0sIG5hbWU6IHN0cmluZykge1xuXHRcdGxldCBsZW5ndGgsIHdpZHRoLCBoZWlnaHQ7XG5cdFx0aWYgKCFpc05hTihkaW1lbnNpb25zIGFzIG51bWJlcikpIHtcblx0XHRcdGlmICghaXNQb3NpdGl2ZUludGVnZXIoZGltZW5zaW9ucykpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGxlbmd0aCAke2RpbWVuc2lvbnN9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuYCk7XG5cdFx0XHR9XG5cdFx0XHRsZW5ndGggPSBkaW1lbnNpb25zIGFzIG51bWJlcjtcblx0XHRcdC8vIENhbGMgcG93ZXIgb2YgdHdvIHdpZHRoIGFuZCBoZWlnaHQgZm9yIGxlbmd0aC5cblx0XHRcdGxldCBleHAgPSAxO1xuXHRcdFx0bGV0IHJlbWFpbmRlciA9IGxlbmd0aDtcblx0XHRcdHdoaWxlIChyZW1haW5kZXIgPiAyKSB7XG5cdFx0XHRcdGV4cCsrO1xuXHRcdFx0XHRyZW1haW5kZXIgLz0gMjtcblx0XHRcdH1cblx0XHRcdHdpZHRoID0gTWF0aC5wb3coMiwgTWF0aC5mbG9vcihleHAgLyAyKSArIGV4cCAlIDIpO1xuXHRcdFx0aGVpZ2h0ID0gTWF0aC5wb3coMiwgTWF0aC5mbG9vcihleHAvMikpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aWR0aCA9IChkaW1lbnNpb25zIGFzIFtudW1iZXIsIG51bWJlcl0pWzBdO1xuXHRcdFx0aWYgKCFpc1Bvc2l0aXZlSW50ZWdlcih3aWR0aCkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHdpZHRoICR7d2lkdGh9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuYCk7XG5cdFx0XHR9XG5cdFx0XHRoZWlnaHQgPSAoZGltZW5zaW9ucyBhcyBbbnVtYmVyLCBudW1iZXJdKVsxXTtcblx0XHRcdGlmICghaXNQb3NpdGl2ZUludGVnZXIoaGVpZ2h0KSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaGVpZ2h0ICR7aGVpZ2h0fSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4geyB3aWR0aCwgaGVpZ2h0LCBsZW5ndGggfTtcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIGdldEludGVybmFsV3JhcChcblx0XHRwYXJhbXM6IHtcblx0XHRcdGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxuXHRcdFx0d3JhcDogRGF0YUxheWVyV3JhcFR5cGUsXG5cdFx0XHRuYW1lOiBzdHJpbmcsXG5cdFx0fSxcblx0KSB7XG5cdFx0Y29uc3QgeyBnbCwgd3JhcCwgbmFtZSB9ID0gcGFyYW1zO1xuXHRcdC8vIFdlYmdsMi4wIHN1cHBvcnRzIGFsbCBjb21iaW5hdGlvbnMgb2YgdHlwZXMgYW5kIGZpbHRlcmluZy5cblx0XHRpZiAoaXNXZWJHTDIoZ2wpKSB7XG5cdFx0XHRyZXR1cm4gd3JhcDtcblx0XHR9XG5cdFx0Ly8gQ0xBTVBfVE9fRURHRSBpcyBhbHdheXMgc3VwcG9ydGVkLlxuXHRcdGlmICh3cmFwID09PSBDTEFNUF9UT19FREdFKSB7XG5cdFx0XHRyZXR1cm4gd3JhcDtcblx0XHR9XG5cdFx0aWYgKCFpc1dlYkdMMihnbCkpIHtcblx0XHRcdC8vIFRPRE86IHdlIG1heSB3YW50IHRvIGhhbmRsZSB0aGlzIGluIHRoZSBmcmFnIHNoYWRlci5cblx0XHRcdC8vIFJFUEVBVCBhbmQgTUlSUk9SX1JFUEVBVCB3cmFwIG5vdCBzdXBwb3J0ZWQgZm9yIG5vbi1wb3dlciBvZiAyIHRleHR1cmVzIGluIHNhZmFyaS5cblx0XHRcdC8vIEkndmUgdGVzdGVkIHRoaXMgYW5kIGl0IHNlZW1zIHRoYXQgc29tZSBwb3dlciBvZiAyIHRleHR1cmVzIHdpbGwgd29yayAoNTEyIHggNTEyKSxcblx0XHRcdC8vIGJ1dCBub3Qgb3RoZXJzICgxMDI0eDEwMjQpLCBzbyBsZXQncyBqdXN0IGNoYW5nZSBhbGwgV2ViR0wgMS4wIHRvIENMQU1QLlxuXHRcdFx0Ly8gV2l0aG91dCB0aGlzLCB3ZSBjdXJyZW50bHkgZ2V0IGFuIGVycm9yIGF0IGRyYXdBcnJheXMoKTpcblx0XHRcdC8vIFwiV2ViR0w6IGRyYXdBcnJheXM6IHRleHR1cmUgYm91bmQgdG8gdGV4dHVyZSB1bml0IDAgaXMgbm90IHJlbmRlcmFibGUuXG5cdFx0XHQvLyBJdCBtYXliZSBub24tcG93ZXItb2YtMiBhbmQgaGF2ZSBpbmNvbXBhdGlibGUgdGV4dHVyZSBmaWx0ZXJpbmcgb3IgaXMgbm90XG5cdFx0XHQvLyAndGV4dHVyZSBjb21wbGV0ZScsIG9yIGl0IGlzIGEgZmxvYXQvaGFsZi1mbG9hdCB0eXBlIHdpdGggbGluZWFyIGZpbHRlcmluZyBhbmRcblx0XHRcdC8vIHdpdGhvdXQgdGhlIHJlbGV2YW50IGZsb2F0L2hhbGYtZmxvYXQgbGluZWFyIGV4dGVuc2lvbiBlbmFibGVkLlwiXG5cdFx0XHRjb25zb2xlLndhcm4oYEZhbGxpbmcgYmFjayB0byBDTEFNUF9UT19FREdFIHdyYXBwaW5nIGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIgZm9yIFdlYkdMIDEuYCk7XG5cdFx0XHRyZXR1cm4gQ0xBTVBfVE9fRURHRTtcblx0XHR9XG5cdFx0cmV0dXJuIHdyYXA7XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyBnZXRJbnRlcm5hbEZpbHRlcihcblx0XHRwYXJhbXM6IHtcblx0XHRcdGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxuXHRcdFx0ZmlsdGVyOiBEYXRhTGF5ZXJGaWx0ZXJUeXBlLFxuXHRcdFx0aW50ZXJuYWxUeXBlOiBEYXRhTGF5ZXJUeXBlLFxuXHRcdFx0bmFtZTogc3RyaW5nLFxuXHRcdFx0ZXJyb3JDYWxsYmFjazogRXJyb3JDYWxsYmFjayxcblx0XHR9LFxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCBlcnJvckNhbGxiYWNrLCBpbnRlcm5hbFR5cGUsIG5hbWUgfSA9IHBhcmFtcztcblx0XHRsZXQgeyBmaWx0ZXIgfSA9IHBhcmFtcztcblx0XHRpZiAoZmlsdGVyID09PSBORUFSRVNUKSB7XG5cdFx0XHQvLyBORUFSRVNUIGZpbHRlcmluZyBpcyBhbHdheXMgc3VwcG9ydGVkLlxuXHRcdFx0cmV0dXJuIGZpbHRlcjtcblx0XHR9XG5cblx0XHRpZiAoaW50ZXJuYWxUeXBlID09PSBIQUxGX0ZMT0FUKSB7XG5cdFx0XHQvLyBUT0RPOiB0ZXN0IGlmIGZsb2F0IGxpbmVhciBleHRlbnNpb24gaXMgYWN0dWFsbHkgd29ya2luZy5cblx0XHRcdGNvbnN0IGV4dGVuc2lvbiA9IGdldEV4dGVuc2lvbihnbCwgT0VTX1RFWFRVUkVfSEFsRl9GTE9BVF9MSU5FQVIsIGVycm9yQ2FsbGJhY2ssIHRydWUpXG5cdFx0XHRcdHx8IGdldEV4dGVuc2lvbihnbCwgT0VTX1RFWFRVUkVfRkxPQVRfTElORUFSLCBlcnJvckNhbGxiYWNrLCB0cnVlKTtcblx0XHRcdGlmICghZXh0ZW5zaW9uKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihgRmFsbGluZyBiYWNrIHRvIE5FQVJFU1QgZmlsdGVyIGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuYCk7XG5cdFx0XHRcdC8vVE9ETzogYWRkIGEgZmFsbGJhY2sgdGhhdCBkb2VzIHRoaXMgZmlsdGVyaW5nIGluIHRoZSBmcmFnIHNoYWRlcj8uXG5cdFx0XHRcdGZpbHRlciA9IE5FQVJFU1Q7XG5cdFx0XHR9XG5cdFx0fSBpZiAoaW50ZXJuYWxUeXBlID09PSBGTE9BVCkge1xuXHRcdFx0Y29uc3QgZXh0ZW5zaW9uID0gZ2V0RXh0ZW5zaW9uKGdsLCBPRVNfVEVYVFVSRV9GTE9BVF9MSU5FQVIsIGVycm9yQ2FsbGJhY2ssIHRydWUpO1xuXHRcdFx0aWYgKCFleHRlbnNpb24pIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKGBGYWxsaW5nIGJhY2sgdG8gTkVBUkVTVCBmaWx0ZXIgZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdFx0Ly9UT0RPOiBhZGQgYSBmYWxsYmFjayB0aGF0IGRvZXMgdGhpcyBmaWx0ZXJpbmcgaW4gdGhlIGZyYWcgc2hhZGVyPy5cblx0XHRcdFx0ZmlsdGVyID0gTkVBUkVTVDtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGZpbHRlcjtcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIGdldEludGVybmFsVHlwZShcblx0XHRwYXJhbXM6IHtcblx0XHRcdGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxuXHRcdFx0dHlwZTogRGF0YUxheWVyVHlwZSxcblx0XHRcdGdsc2xWZXJzaW9uOiBHTFNMVmVyc2lvbixcblx0XHRcdHdyaXRhYmxlOiBib29sZWFuLFxuXHRcdFx0ZmlsdGVyOiBEYXRhTGF5ZXJGaWx0ZXJUeXBlLFxuXHRcdFx0bmFtZTogc3RyaW5nLFxuXHRcdFx0ZXJyb3JDYWxsYmFjazogRXJyb3JDYWxsYmFjayxcblx0XHR9LFxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCBlcnJvckNhbGxiYWNrLCB3cml0YWJsZSwgbmFtZSwgZ2xzbFZlcnNpb24gfSA9IHBhcmFtcztcblx0XHRjb25zdCB7IHR5cGUgfSA9IHBhcmFtcztcblx0XHRsZXQgaW50ZXJuYWxUeXBlID0gdHlwZTtcblx0XHQvLyBDaGVjayBpZiBpbnQgdHlwZXMgYXJlIHN1cHBvcnRlZC5cblx0XHRjb25zdCBpbnRDYXN0ID0gRGF0YUxheWVyLnNob3VsZENhc3RJbnRUeXBlQXNGbG9hdChwYXJhbXMpO1xuXHRcdGlmIChpbnRDYXN0KSB7XG5cdFx0XHRpZiAoaW50ZXJuYWxUeXBlID09PSBVTlNJR05FRF9CWVRFIHx8IGludGVybmFsVHlwZSA9PT0gQllURSkge1xuXHRcdFx0XHQvLyBJbnRlZ2VycyBiZXR3ZWVuIDAgYW5kIDIwNDggY2FuIGJlIGV4YWN0bHkgcmVwcmVzZW50ZWQgYnkgaGFsZiBmbG9hdCAoYW5kIGFsc28gYmV0d2VlbiDiiJIyMDQ4IGFuZCAwKVxuXHRcdFx0XHRpbnRlcm5hbFR5cGUgPSBIQUxGX0ZMT0FUO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gSW50ZWdlcnMgYmV0d2VlbiAwIGFuZCAxNjc3NzIxNiBjYW4gYmUgZXhhY3RseSByZXByZXNlbnRlZCBieSBmbG9hdDMyIChhbHNvIGFwcGxpZXMgZm9yIG5lZ2F0aXZlIGludGVnZXJzIGJldHdlZW4g4oiSMTY3NzcyMTYgYW5kIDApXG5cdFx0XHRcdC8vIFRoaXMgaXMgc3VmZmljaWVudCBmb3IgVU5TSUdORURfU0hPUlQgYW5kIFNIT1JUIHR5cGVzLlxuXHRcdFx0XHQvLyBMYXJnZSBVTlNJR05FRF9JTlQgYW5kIElOVCBjYW5ub3QgYmUgcmVwcmVzZW50ZWQgYnkgRkxPQVQgdHlwZS5cblx0XHRcdFx0aWYgKGludGVybmFsVHlwZSA9PT0gSU5UIHx8IGludGVybmFsVHlwZSA9PT0gVU5TSUdORURfSU5UKSB7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc29sZS53YXJuKGBGYWxsaW5nIGJhY2sgJHtpbnRlcm5hbFR5cGV9IHR5cGUgdG8gRkxPQVQgdHlwZSBmb3IgZ2xzbDEueCBzdXBwb3J0IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuXG5MYXJnZSBVTlNJR05FRF9JTlQgb3IgSU5UIHdpdGggYWJzb2x1dGUgdmFsdWUgPiAxNiw3NzcsMjE2IGFyZSBub3Qgc3VwcG9ydGVkLCBvbiBtb2JpbGUgVU5TSUdORURfSU5ULCBJTlQsIFVOU0lHTkVEX1NIT1JULCBhbmQgU0hPUlQgd2l0aCBhYnNvbHV0ZSB2YWx1ZSA+IDIsMDQ4IG1heSBub3QgYmUgc3VwcG9ydGVkLmApO1xuXHRcdFx0XHRpbnRlcm5hbFR5cGUgPSBGTE9BVDtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gQ2hlY2sgaWYgZmxvYXQzMiBzdXBwb3J0ZWQuXG5cdFx0aWYgKCFpc1dlYkdMMihnbCkpIHtcblx0XHRcdGlmIChpbnRlcm5hbFR5cGUgPT09IEZMT0FUKSB7XG5cdFx0XHRcdGNvbnN0IGV4dGVuc2lvbiA9IGdldEV4dGVuc2lvbihnbCwgT0VTX1RFWFRVUkVfRkxPQVQsIGVycm9yQ2FsbGJhY2ssIHRydWUpO1xuXHRcdFx0XHRpZiAoIWV4dGVuc2lvbikge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihgRkxPQVQgbm90IHN1cHBvcnRlZCwgZmFsbGluZyBiYWNrIHRvIEhBTEZfRkxPQVQgdHlwZSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0XHRcdGludGVybmFsVHlwZSA9IEhBTEZfRkxPQVQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTc0NzY2MzIvd2ViZ2wtZXh0ZW5zaW9uLXN1cHBvcnQtYWNyb3NzLWJyb3dzZXJzXG5cdFx0XHRcdC8vIFJlbmRlcmluZyB0byBhIGZsb2F0aW5nLXBvaW50IHRleHR1cmUgbWF5IG5vdCBiZSBzdXBwb3J0ZWQsXG5cdFx0XHRcdC8vIGV2ZW4gaWYgdGhlIE9FU190ZXh0dXJlX2Zsb2F0IGV4dGVuc2lvbiBpcyBzdXBwb3J0ZWQuXG5cdFx0XHRcdC8vIFR5cGljYWxseSwgdGhpcyBmYWlscyBvbiBjdXJyZW50IG1vYmlsZSBoYXJkd2FyZS5cblx0XHRcdFx0Ly8gVG8gY2hlY2sgaWYgdGhpcyBpcyBzdXBwb3J0ZWQsIHlvdSBoYXZlIHRvIGNhbGwgdGhlIFdlYkdMXG5cdFx0XHRcdC8vIGNoZWNrRnJhbWVidWZmZXJTdGF0dXMoKSBmdW5jdGlvbi5cblx0XHRcdFx0aWYgKHdyaXRhYmxlKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsaWQgPSBEYXRhTGF5ZXIudGVzdEZyYW1lYnVmZmVyV3JpdGUoeyBnbCwgdHlwZTogaW50ZXJuYWxUeXBlLCBnbHNsVmVyc2lvbiB9KTtcblx0XHRcdFx0XHRpZiAoIXZhbGlkICYmIGludGVybmFsVHlwZSAhPT0gSEFMRl9GTE9BVCkge1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKGBGTE9BVCBub3Qgc3VwcG9ydGVkIGZvciB3cml0aW5nIG9wZXJhdGlvbnMsIGZhbGxpbmcgYmFjayB0byBIQUxGX0ZMT0FUIHR5cGUgZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdFx0XHRcdGludGVybmFsVHlwZSA9IEhBTEZfRkxPQVQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyBNdXN0IHN1cHBvcnQgYXQgbGVhc3QgaGFsZiBmbG9hdCBpZiB1c2luZyBhIGZsb2F0IHR5cGUuXG5cdFx0XHRpZiAoaW50ZXJuYWxUeXBlID09PSBIQUxGX0ZMT0FUKSB7XG5cdFx0XHRcdGdldEV4dGVuc2lvbihnbCwgT0VTX1RFWFRVUkVfSEFMRl9GTE9BVCwgZXJyb3JDYWxsYmFjayk7XG5cdFx0XHRcdC8vIFRPRE86IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU0MjQ4NjMzL2Nhbm5vdC1jcmVhdGUtaGFsZi1mbG9hdC1vZXMtdGV4dHVyZS1mcm9tLXVpbnQxNmFycmF5LW9uLWlwYWRcblx0XHRcdFx0aWYgKHdyaXRhYmxlKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsaWQgPSBEYXRhTGF5ZXIudGVzdEZyYW1lYnVmZmVyV3JpdGUoeyBnbCwgdHlwZTogaW50ZXJuYWxUeXBlLCBnbHNsVmVyc2lvbiB9KTtcblx0XHRcdFx0XHRpZiAoIXZhbGlkKSB7XG5cdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKGBUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCByZW5kZXJpbmcgdG8gSEFMRl9GTE9BVCB0ZXh0dXJlcy5gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0Ly8gTG9hZCBhZGRpdGlvbmFsIGV4dGVuc2lvbnMgaWYgbmVlZGVkLlxuXHRcdGlmICh3cml0YWJsZSAmJiBpc1dlYkdMMihnbCkgJiYgKGludGVybmFsVHlwZSA9PT0gSEFMRl9GTE9BVCB8fCBpbnRlcm5hbFR5cGUgPT09IEZMT0FUKSkge1xuXHRcdFx0Z2V0RXh0ZW5zaW9uKGdsLCBFWFRfQ09MT1JfQlVGRkVSX0ZMT0FULCBlcnJvckNhbGxiYWNrKTtcblx0XHR9XG5cdFx0cmV0dXJuIGludGVybmFsVHlwZTtcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIHNob3VsZENhc3RJbnRUeXBlQXNGbG9hdChcblx0XHRwYXJhbXM6IHtcblx0XHRcdGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxuXHRcdFx0dHlwZTogRGF0YUxheWVyVHlwZSxcblx0XHRcdGZpbHRlcjogRGF0YUxheWVyRmlsdGVyVHlwZSxcblx0XHRcdGdsc2xWZXJzaW9uOiBHTFNMVmVyc2lvbixcblx0XHR9XG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wsIHR5cGUsIGZpbHRlciwgZ2xzbFZlcnNpb24gfSA9IHBhcmFtcztcblx0XHRpZiAoZ2xzbFZlcnNpb24gPT09IEdMU0wzICYmIGlzV2ViR0wyKGdsKSkgcmV0dXJuIGZhbHNlO1xuXHRcdC8vIFVOU0lHTkVEX0JZVEUgYW5kIExJTkVBUiBmaWx0ZXJpbmcgaXMgbm90IHN1cHBvcnRlZCwgY2FzdCBhcyBmbG9hdC5cblx0XHRpZiAodHlwZSA9PT0gVU5TSUdORURfQllURSAmJiBmaWx0ZXIgPT09IExJTkVBUikge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdC8vIEludCB0ZXh0dXJlcyAob3RoZXIgdGhhbiBVTlNJR05FRF9CWVRFKSBhcmUgbm90IHN1cHBvcnRlZCBieSBXZWJHTDEuMCBvciBnbHNsMS54LlxuXHRcdC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU1ODAzMDE3L2hvdy10by1zZWxlY3Qtd2ViZ2wtZ2xzbC1zYW1wbGVyLXR5cGUtZnJvbS10ZXh0dXJlLWZvcm1hdC1wcm9wZXJ0aWVzXG5cdFx0Ly8gVXNlIEhBTEZfRkxPQVQvRkxPQVQgaW5zdGVhZC5cblx0XHRyZXR1cm4gdHlwZSA9PT0gQllURSB8fCB0eXBlID09PSBTSE9SVCB8fCB0eXBlID09PSBJTlQgfHwgdHlwZSA9PT0gVU5TSUdORURfU0hPUlQgfHwgdHlwZSA9PT0gVU5TSUdORURfSU5UO1xuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgZ2V0R0xUZXh0dXJlUGFyYW1ldGVycyhcblx0XHRwYXJhbXM6IHtcblx0XHRcdGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxuXHRcdFx0bmFtZTogc3RyaW5nLFxuXHRcdFx0bnVtQ29tcG9uZW50czogRGF0YUxheWVyTnVtQ29tcG9uZW50cyxcblx0XHRcdGludGVybmFsVHlwZTogRGF0YUxheWVyVHlwZSxcblx0XHRcdHdyaXRhYmxlOiBib29sZWFuLFxuXHRcdFx0Z2xzbFZlcnNpb246IEdMU0xWZXJzaW9uLFxuXHRcdFx0ZXJyb3JDYWxsYmFjazogRXJyb3JDYWxsYmFjayxcblx0XHR9XG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wsIGVycm9yQ2FsbGJhY2ssIG5hbWUsIG51bUNvbXBvbmVudHMsIGludGVybmFsVHlwZSwgd3JpdGFibGUsIGdsc2xWZXJzaW9uIH0gPSBwYXJhbXM7XG5cdFx0Ly8gaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvd2ViZ2wvc3BlY3MvbGF0ZXN0LzIuMC8jVEVYVFVSRV9UWVBFU19GT1JNQVRTX0ZST01fRE9NX0VMRU1FTlRTX1RBQkxFXG5cdFx0bGV0IGdsVHlwZTogbnVtYmVyIHwgdW5kZWZpbmVkLFxuXHRcdFx0Z2xGb3JtYXQ6IG51bWJlciB8IHVuZGVmaW5lZCxcblx0XHRcdGdsSW50ZXJuYWxGb3JtYXQ6IG51bWJlciB8IHVuZGVmaW5lZCxcblx0XHRcdGdsTnVtQ2hhbm5lbHM6IG51bWJlciB8IHVuZGVmaW5lZDtcblxuXHRcdGlmIChpc1dlYkdMMihnbCkpIHtcblx0XHRcdGdsTnVtQ2hhbm5lbHMgPSBudW1Db21wb25lbnRzO1xuXHRcdFx0Ly8gaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvd2ViZ2wvZXh0ZW5zaW9ucy9FWFRfY29sb3JfYnVmZmVyX2Zsb2F0L1xuXHRcdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYkdMUmVuZGVyaW5nQ29udGV4dC90ZXhJbWFnZTJEXG5cdFx0XHQvLyBUaGUgc2l6ZWQgaW50ZXJuYWwgZm9ybWF0IFJHQnh4eCBhcmUgbm90IGNvbG9yLXJlbmRlcmFibGUgZm9yIHNvbWUgcmVhc29uLlxuXHRcdFx0Ly8gSWYgbnVtQ29tcG9uZW50cyA9PSAzIGZvciBhIHdyaXRhYmxlIHRleHR1cmUsIHVzZSBSR0JBIGluc3RlYWQuXG5cdFx0XHQvLyBQYWdlIDUgb2YgaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvZmlsZXMvd2ViZ2wyMC1yZWZlcmVuY2UtZ3VpZGUucGRmXG5cdFx0XHRpZiAobnVtQ29tcG9uZW50cyA9PT0gMyAmJiB3cml0YWJsZSkge1xuXHRcdFx0XHRnbE51bUNoYW5uZWxzID0gNDtcblx0XHRcdH1cblx0XHRcdGlmIChpbnRlcm5hbFR5cGUgPT09IEZMT0FUIHx8IGludGVybmFsVHlwZSA9PT0gSEFMRl9GTE9BVCkge1xuXHRcdFx0XHRzd2l0Y2ggKGdsTnVtQ2hhbm5lbHMpIHtcblx0XHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0XHRnbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SRUQ7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRnbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SRztcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRcdGdsRm9ybWF0ID0gZ2wuUkdCO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRcdFx0Z2xGb3JtYXQgPSBnbC5SR0JBO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZ2xOdW1DaGFubmVscyAke2dsTnVtQ2hhbm5lbHN9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuYCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoZ2xzbFZlcnNpb24gPT09IEdMU0wxICYmIGludGVybmFsVHlwZSA9PT0gVU5TSUdORURfQllURSkge1xuXHRcdFx0XHRzd2l0Y2ggKGdsTnVtQ2hhbm5lbHMpIHtcblx0XHRcdFx0XHQvLyBGb3IgcmVhZCBvbmx5IHRleHR1cmVzIGluIFdlYkdMIDEuMCwgdXNlIGdsLkFMUEhBIGFuZCBnbC5MVU1JTkFOQ0VfQUxQSEEuXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSBSR0IvUkdCQS5cblx0XHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0XHRpZiAoIXdyaXRhYmxlKSB7XG5cdFx0XHRcdFx0XHRcdGdsRm9ybWF0ID0gZ2wuQUxQSEE7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdGlmICghd3JpdGFibGUpIHtcblx0XHRcdFx0XHRcdFx0Z2xGb3JtYXQgPSBnbC5MVU1JTkFOQ0VfQUxQSEE7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRcdGdsRm9ybWF0ID0gZ2wuUkdCO1xuXHRcdFx0XHRcdFx0Z2xOdW1DaGFubmVscyA9IDM7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdFx0XHRnbEZvcm1hdCA9IGdsLlJHQkE7XG5cdFx0XHRcdFx0XHRnbE51bUNoYW5uZWxzID0gNDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGdsTnVtQ2hhbm5lbHMgJHtnbE51bUNoYW5uZWxzfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzd2l0Y2ggKGdsTnVtQ2hhbm5lbHMpIHtcblx0XHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0XHRnbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SRURfSU5URUdFUjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdGdsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHX0lOVEVHRVI7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0XHRnbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0JfSU5URUdFUjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgNDpcblx0XHRcdFx0XHRcdGdsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQkFfSU5URUdFUjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGdsTnVtQ2hhbm5lbHMgJHtnbE51bUNoYW5uZWxzfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRzd2l0Y2ggKGludGVybmFsVHlwZSkge1xuXHRcdFx0XHRjYXNlIEhBTEZfRkxPQVQ6XG5cdFx0XHRcdFx0Z2xUeXBlID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLkhBTEZfRkxPQVQ7XG5cdFx0XHRcdFx0c3dpdGNoIChnbE51bUNoYW5uZWxzKSB7XG5cdFx0XHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUjE2Rjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkcxNkY7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQjE2Rjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCQTE2Rjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGdsTnVtQ2hhbm5lbHMgJHtnbE51bUNoYW5uZWxzfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBGTE9BVDpcblx0XHRcdFx0XHRnbFR5cGUgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuRkxPQVQ7XG5cdFx0XHRcdFx0c3dpdGNoIChnbE51bUNoYW5uZWxzKSB7XG5cdFx0XHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUjMyRjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkczMkY7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQjMyRjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCQTMyRjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGdsTnVtQ2hhbm5lbHMgJHtnbE51bUNoYW5uZWxzfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBVTlNJR05FRF9CWVRFOlxuXHRcdFx0XHRcdGdsVHlwZSA9IGdsLlVOU0lHTkVEX0JZVEU7XG5cdFx0XHRcdFx0aWYgKGdsc2xWZXJzaW9uID09PSBHTFNMMSAmJiBpbnRlcm5hbFR5cGUgPT09IFVOU0lHTkVEX0JZVEUpIHtcblx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSBnbEZvcm1hdDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c3dpdGNoIChnbE51bUNoYW5uZWxzKSB7XG5cdFx0XHRcdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlI4VUk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHOFVJO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0I4VUk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgNDpcblx0XHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQkE4VUk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBnbE51bUNoYW5uZWxzICR7Z2xOdW1DaGFubmVsc30gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgQllURTpcblx0XHRcdFx0XHRnbFR5cGUgPSBnbC5CWVRFO1xuXHRcdFx0XHRcdHN3aXRjaCAoZ2xOdW1DaGFubmVscykge1xuXHRcdFx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlI4STtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkc4STtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCOEk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQkE4STtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGdsTnVtQ2hhbm5lbHMgJHtnbE51bUNoYW5uZWxzfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBTSE9SVDpcblx0XHRcdFx0XHRnbFR5cGUgPSBnbC5TSE9SVDtcblx0XHRcdFx0XHRzd2l0Y2ggKGdsTnVtQ2hhbm5lbHMpIHtcblx0XHRcdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SMTZJO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SRzE2STtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCMTZJO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgNDpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0JBMTZJO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZ2xOdW1DaGFubmVscyAke2dsTnVtQ2hhbm5lbHN9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuYCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFVOU0lHTkVEX1NIT1JUOlxuXHRcdFx0XHRcdGdsVHlwZSA9IGdsLlVOU0lHTkVEX1NIT1JUO1xuXHRcdFx0XHRcdHN3aXRjaCAoZ2xOdW1DaGFubmVscykge1xuXHRcdFx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlIxNlVJO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SRzE2VUk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQjE2VUk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQkExNlVJO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZ2xOdW1DaGFubmVscyAke2dsTnVtQ2hhbm5lbHN9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuYCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIElOVDpcblx0XHRcdFx0XHRnbFR5cGUgPSBnbC5JTlQ7XG5cdFx0XHRcdFx0c3dpdGNoIChnbE51bUNoYW5uZWxzKSB7XG5cdFx0XHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUjMySTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkczMkk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQjMySTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCQTMySTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGdsTnVtQ2hhbm5lbHMgJHtnbE51bUNoYW5uZWxzfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBVTlNJR05FRF9JTlQ6XG5cdFx0XHRcdFx0Z2xUeXBlID0gZ2wuVU5TSUdORURfSU5UO1xuXHRcdFx0XHRcdHN3aXRjaCAoZ2xOdW1DaGFubmVscykge1xuXHRcdFx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlIzMlVJO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SRzMyVUk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQjMyVUk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQkEzMlVJO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZ2xOdW1DaGFubmVscyAke2dsTnVtQ2hhbm5lbHN9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuYCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgdHlwZSAke2ludGVybmFsVHlwZX0gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3dpdGNoIChudW1Db21wb25lbnRzKSB7XG5cdFx0XHRcdC8vIFRPRE86IGZvciByZWFkIG9ubHkgdGV4dHVyZXMgaW4gV2ViR0wgMS4wLCB3ZSBjb3VsZCB1c2UgZ2wuQUxQSEEgYW5kIGdsLkxVTUlOQU5DRV9BTFBIQSBoZXJlLlxuXHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0aWYgKCF3cml0YWJsZSkge1xuXHRcdFx0XHRcdFx0Z2xGb3JtYXQgPSBnbC5BTFBIQTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdGlmICghd3JpdGFibGUpIHtcblx0XHRcdFx0XHRcdGdsRm9ybWF0ID0gZ2wuTFVNSU5BTkNFX0FMUEhBO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0Z2xGb3JtYXQgPSBnbC5SR0I7XG5cdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IGdsLlJHQjtcblx0XHRcdFx0XHRnbE51bUNoYW5uZWxzID0gMztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRcdGdsRm9ybWF0ID0gZ2wuUkdCQTtcblx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gZ2wuUkdCQTtcblx0XHRcdFx0XHRnbE51bUNoYW5uZWxzID0gNDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIG51bUNvbXBvbmVudHMgJHtudW1Db21wb25lbnRzfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0fVxuXHRcdFx0c3dpdGNoIChpbnRlcm5hbFR5cGUpIHtcblx0XHRcdFx0Y2FzZSBGTE9BVDpcblx0XHRcdFx0XHRnbFR5cGUgPSBnbC5GTE9BVDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBIQUxGX0ZMT0FUOlxuXHRcdFx0XHRcdGdsVHlwZSA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5IQUxGX0ZMT0FUIHx8IGdldEV4dGVuc2lvbihnbCwgT0VTX1RFWFRVUkVfSEFMRl9GTE9BVCwgZXJyb3JDYWxsYmFjaykuSEFMRl9GTE9BVF9PRVMgYXMgbnVtYmVyO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFVOU0lHTkVEX0JZVEU6XG5cdFx0XHRcdFx0Z2xUeXBlID0gZ2wuVU5TSUdORURfQllURTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Ly8gTm8gb3RoZXIgdHlwZXMgYXJlIHN1cHBvcnRlZCBpbiBnbHNsMS54XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCB0eXBlICR7aW50ZXJuYWxUeXBlfSBpbiBXZWJHTCAxLjAgZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDaGVjayBmb3IgbWlzc2luZyBwYXJhbXMuXG5cdFx0aWYgKGdsVHlwZSA9PT0gdW5kZWZpbmVkIHx8IGdsRm9ybWF0ID09PSB1bmRlZmluZWQgfHwgZ2xJbnRlcm5hbEZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRjb25zdCBtaXNzaW5nUGFyYW1zID0gW107XG5cdFx0XHRpZiAoZ2xUeXBlID09PSB1bmRlZmluZWQpIG1pc3NpbmdQYXJhbXMucHVzaCgnZ2xUeXBlJyk7XG5cdFx0XHRpZiAoZ2xGb3JtYXQgPT09IHVuZGVmaW5lZCkgbWlzc2luZ1BhcmFtcy5wdXNoKCdnbEZvcm1hdCcpO1xuXHRcdFx0aWYgKGdsSW50ZXJuYWxGb3JtYXQgPT09IHVuZGVmaW5lZCkgbWlzc2luZ1BhcmFtcy5wdXNoKCdnbEludGVybmFsRm9ybWF0Jyk7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdHlwZTogJHtpbnRlcm5hbFR5cGV9IGZvciBudW1Db21wb25lbnRzICR7bnVtQ29tcG9uZW50c30sIHVuYWJsZSB0byBpbml0IHBhcmFtZXRlciR7bWlzc2luZ1BhcmFtcy5sZW5ndGggPiAxID8gJ3MnIDogJyd9ICR7bWlzc2luZ1BhcmFtcy5qb2luKCcsICcpfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdH1cblx0XHRpZiAoZ2xOdW1DaGFubmVscyA9PT0gdW5kZWZpbmVkIHx8IG51bUNvbXBvbmVudHMgPCAxIHx8IG51bUNvbXBvbmVudHMgPiA0IHx8IGdsTnVtQ2hhbm5lbHMgPCBudW1Db21wb25lbnRzKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbnVtQ2hhbm5lbHMgJHtnbE51bUNoYW5uZWxzfSBmb3IgbnVtQ29tcG9uZW50cyAke251bUNvbXBvbmVudHN9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuYCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGdsRm9ybWF0LFxuXHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCxcblx0XHRcdGdsVHlwZSxcblx0XHRcdGdsTnVtQ2hhbm5lbHMsXG5cdFx0fTtcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIHRlc3RGcmFtZWJ1ZmZlcldyaXRlKFxuXHRcdHBhcmFtczoge1xuXHRcdFx0Z2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQsXG5cdFx0XHR0eXBlOiBEYXRhTGF5ZXJUeXBlLFxuXHRcdFx0Z2xzbFZlcnNpb246IEdMU0xWZXJzaW9uLFxuXHRcdH0sXG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wsIHR5cGUsIGdsc2xWZXJzaW9uIH0gPSBwYXJhbXM7XG5cdFx0Y29uc3QgdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblx0XHRpZiAoIXRleHR1cmUpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XG5cblx0XHQvLyBEZWZhdWx0IHRvIG1vc3Qgd2lkZWx5IHN1cHBvcnRlZCBzZXR0aW5ncy5cblx0XHRjb25zdCB3cmFwUyA9IGdsW0NMQU1QX1RPX0VER0VdO1xuXHRcdGNvbnN0IHdyYXBUID0gZ2xbQ0xBTVBfVE9fRURHRV07XG5cdFx0Y29uc3QgZmlsdGVyID0gZ2xbTkVBUkVTVF07XG5cdFx0Ly8gVXNlIG5vbi1wb3dlciBvZiB0d28gZGltZW5zaW9ucyB0byBjaGVjayBmb3IgbW9yZSB1bml2ZXJzYWwgc3VwcG9ydC5cblx0XHQvLyAoSW4gY2FzZSBzaXplIG9mIERhdGFMYXllciBpcyBjaGFuZ2VkIGF0IGEgbGF0ZXIgcG9pbnQpLlxuXHRcdGNvbnN0IHdpZHRoID0gMTAwO1xuXHRcdGNvbnN0IGhlaWdodCA9IDEwMDtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCB3cmFwUyk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgd3JhcFQpO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBmaWx0ZXIpO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBmaWx0ZXIpO1xuXG5cdFx0Y29uc3QgeyBnbEludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlIH0gPSBEYXRhTGF5ZXIuZ2V0R0xUZXh0dXJlUGFyYW1ldGVycyh7XG5cdFx0XHRnbCxcblx0XHRcdG5hbWU6ICd0ZXN0RnJhbWVidWZmZXJXcml0ZScsXG5cdFx0XHRudW1Db21wb25lbnRzOiAxLFxuXHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRpbnRlcm5hbFR5cGU6IHR5cGUsXG5cdFx0XHRnbHNsVmVyc2lvbixcblx0XHRcdGVycm9yQ2FsbGJhY2s6ICgpID0+IHt9LFxuXHRcdH0pO1xuXHRcdGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgd2lkdGgsIGhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbnVsbCk7XG5cblx0XHQvLyBJbml0IGEgZnJhbWVidWZmZXIgZm9yIHRoaXMgdGV4dHVyZSBzbyB3ZSBjYW4gd3JpdGUgdG8gaXQuXG5cdFx0Y29uc3QgZnJhbWVidWZmZXIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXHRcdGlmICghZnJhbWVidWZmZXIpIHtcblx0XHRcdC8vIENsZWFyIG91dCBhbGxvY2F0ZWQgbWVtb3J5LlxuXHRcdFx0Z2wuZGVsZXRlVGV4dHVyZSh0ZXh0dXJlKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlcik7XG5cdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYkdMUmVuZGVyaW5nQ29udGV4dC9mcmFtZWJ1ZmZlclRleHR1cmUyRFxuXHRcdGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCwgZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSwgMCk7XG5cblx0XHRjb25zdCBzdGF0dXMgPSBnbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKGdsLkZSQU1FQlVGRkVSKTtcblx0XHRjb25zdCB2YWxpZFN0YXR1cyA9IHN0YXR1cyA9PT0gZ2wuRlJBTUVCVUZGRVJfQ09NUExFVEU7XG5cblx0XHQvLyBDbGVhciBvdXQgYWxsb2NhdGVkIG1lbW9yeS5cblx0XHRnbC5kZWxldGVUZXh0dXJlKHRleHR1cmUpO1xuXHRcdGdsLmRlbGV0ZUZyYW1lYnVmZmVyKGZyYW1lYnVmZmVyKTtcblxuXHRcdHJldHVybiB2YWxpZFN0YXR1cztcblx0fVxuXG5cdGdldCBidWZmZXJJbmRleCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fYnVmZmVySW5kZXg7XG5cdH1cblxuXHRzYXZlQ3VycmVudFN0YXRlVG9EYXRhTGF5ZXIobGF5ZXI6IERhdGFMYXllcikge1xuXHRcdC8vIEEgbWV0aG9kIGZvciBzYXZpbmcgYSBjb3B5IG9mIHRoZSBjdXJyZW50IHN0YXRlIHdpdGhvdXQgYSBkcmF3IGNhbGwuXG5cdFx0Ly8gRHJhdyBjYWxscyBhcmUgZXhwZW5zaXZlLCB0aGlzIG9wdGltaXphdGlvbiBoZWxwcy5cblx0XHRpZiAodGhpcy5udW1CdWZmZXJzIDwgMikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBDYW4ndCBjYWxsIERhdGFMYXllci5zYXZlQ3VycmVudFN0YXRlVG9EYXRhTGF5ZXIgb24gRGF0YUxheWVyICR7dGhpcy5uYW1lfSB3aXRoIGxlc3MgdGhhbiAyIGJ1ZmZlcnMuYCk7XG5cdFx0fVxuXHRcdGlmICghdGhpcy53cml0YWJsZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBDYW4ndCBjYWxsIERhdGFMYXllci5zYXZlQ3VycmVudFN0YXRlVG9EYXRhTGF5ZXIgb24gcmVhZC1vbmx5IERhdGFMYXllciAke3RoaXMubmFtZX0uYCk7XG5cdFx0fVxuXHRcdGlmIChsYXllci53cml0YWJsZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBDYW4ndCBjYWxsIERhdGFMYXllci5zYXZlQ3VycmVudFN0YXRlVG9EYXRhTGF5ZXIgb24gRGF0YUxheWVyICR7dGhpcy5uYW1lfSB1c2luZyB3cml0YWJsZSBEYXRhTGF5ZXIgJHtsYXllci5uYW1lfS5gKVxuXHRcdH1cblx0XHQvLyBDaGVjayB0aGF0IHRleHR1cmUgcGFyYW1zIGFyZSB0aGUgc2FtZS5cblx0XHRpZiAobGF5ZXIuZ2xXcmFwUyAhPT0gdGhpcy5nbFdyYXBTIHx8IGxheWVyLmdsV3JhcFQgIT09IHRoaXMuZ2xXcmFwVCB8fFxuXHRcdFx0bGF5ZXIud3JhcFMgIT09IHRoaXMud3JhcFMgfHwgbGF5ZXIud3JhcFQgIT09IHRoaXMud3JhcFQgfHxcblx0XHRcdGxheWVyLndpZHRoICE9PSB0aGlzLndpZHRoIHx8IGxheWVyLmhlaWdodCAhPT0gdGhpcy5oZWlnaHQgfHxcblx0XHRcdGxheWVyLmdsRmlsdGVyICE9PSB0aGlzLmdsRmlsdGVyIHx8IGxheWVyLmZpbHRlciAhPT0gdGhpcy5maWx0ZXIgfHxcblx0XHRcdGxheWVyLmdsTnVtQ2hhbm5lbHMgIT09IHRoaXMuZ2xOdW1DaGFubmVscyB8fCBsYXllci5udW1Db21wb25lbnRzICE9PSB0aGlzLm51bUNvbXBvbmVudHMgfHxcblx0XHRcdGxheWVyLmdsVHlwZSAhPT0gdGhpcy5nbFR5cGUgfHwgbGF5ZXIudHlwZSAhPT0gdGhpcy50eXBlIHx8XG5cdFx0XHRsYXllci5nbEZvcm1hdCAhPT0gdGhpcy5nbEZvcm1hdCB8fCBsYXllci5nbEludGVybmFsRm9ybWF0ICE9PSB0aGlzLmdsSW50ZXJuYWxGb3JtYXQpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbmNvbXBhdGlibGUgdGV4dHVyZSBwYXJhbXMgYmV0d2VlbiBEYXRhTGF5ZXJzICR7bGF5ZXIubmFtZX0gYW5kICR7dGhpcy5uYW1lfS5gKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBoYXZlIG5vdCBhbHJlYWR5IGluaXRlZCBvdmVycmlkZXMgYXJyYXksIGRvIHNvIG5vdy5cblx0XHRpZiAoIXRoaXMudGV4dHVyZU92ZXJyaWRlcykge1xuXHRcdFx0dGhpcy50ZXh0dXJlT3ZlcnJpZGVzID0gW107XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtQnVmZmVyczsgaSsrKSB7XG5cdFx0XHRcdHRoaXMudGV4dHVyZU92ZXJyaWRlcy5wdXNoKHVuZGVmaW5lZCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlIGFuIG92ZXJyaWRlIGluIHBsYWNlLlxuXHRcdGlmICh0aGlzLnRleHR1cmVPdmVycmlkZXNbdGhpcy5fYnVmZmVySW5kZXhdKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYENhbid0IGNhbGwgRGF0YUxheWVyLnNhdmVDdXJyZW50U3RhdGVUb0RhdGFMYXllciBvbiBEYXRhTGF5ZXIgJHt0aGlzLm5hbWV9LCB0aGlzIERhdGFMYXllciBoYXMgbm90IHdyaXR0ZW4gbmV3IHN0YXRlIHNpbmNlIGxhc3QgY2FsbCB0byBEYXRhTGF5ZXIuc2F2ZUN1cnJlbnRTdGF0ZVRvRGF0YUxheWVyLmApO1xuXHRcdH1cblx0XHRjb25zdCBjdXJyZW50U3RhdGUgPSB0aGlzLmdldEN1cnJlbnRTdGF0ZVRleHR1cmUoKTtcblx0XHR0aGlzLnRleHR1cmVPdmVycmlkZXNbdGhpcy5fYnVmZmVySW5kZXhdID0gY3VycmVudFN0YXRlO1xuXHRcdC8vIFN3YXAgdGV4dHVyZXMuXG5cdFx0dGhpcy5idWZmZXJzW3RoaXMuX2J1ZmZlckluZGV4XS50ZXh0dXJlID0gbGF5ZXIuZ2V0Q3VycmVudFN0YXRlVGV4dHVyZSgpO1xuXHRcdGxheWVyLl9zZXRDdXJyZW50U3RhdGVUZXh0dXJlKGN1cnJlbnRTdGF0ZSk7XG5cblx0XHQvLyBCaW5kIHN3YXBwZWQgdGV4dHVyZSB0byBmcmFtZWJ1ZmZlci5cblx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXHRcdGNvbnN0IHsgZnJhbWVidWZmZXIsIHRleHR1cmUgfSA9IHRoaXMuYnVmZmVyc1t0aGlzLl9idWZmZXJJbmRleF07XG5cdFx0aWYgKCFmcmFtZWJ1ZmZlcikgdGhyb3cgbmV3IEVycm9yKGBObyBmcmFtZWJ1ZmZlciBmb3Igd3JpdGFibGUgRGF0YUxheWVyICR7dGhpcy5uYW1lfS5gKTtcblx0XHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGZyYW1lYnVmZmVyKTtcblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2ViR0xSZW5kZXJpbmdDb250ZXh0L2ZyYW1lYnVmZmVyVGV4dHVyZTJEXG5cdFx0Z2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELCB0ZXh0dXJlLCAwKTtcblx0XHQvLyBVbmJpbmQuXG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcblx0fVxuXG5cdF9zZXRDdXJyZW50U3RhdGVUZXh0dXJlKHRleHR1cmU6IFdlYkdMVGV4dHVyZSkge1xuXHRcdGlmICh0aGlzLndyaXRhYmxlKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYENhbid0IGNhbGwgRGF0YUxheWVyLl9zZXRDdXJyZW50U3RhdGVUZXh0dXJlIG9uIHdyaXRhYmxlIHRleHR1cmUgJHt0aGlzLm5hbWV9LmApO1xuXHRcdH1cblx0XHR0aGlzLmJ1ZmZlcnNbdGhpcy5fYnVmZmVySW5kZXhdLnRleHR1cmUgPSB0ZXh0dXJlO1xuXHR9XG5cblx0cHJpdmF0ZSB2YWxpZGF0ZURhdGFBcnJheShcblx0XHRfZGF0YT86IERhdGFMYXllckFycmF5VHlwZSxcblx0KSB7XG5cdFx0aWYgKCFfZGF0YSl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgbGVuZ3RoLCBudW1Db21wb25lbnRzLCBnbE51bUNoYW5uZWxzLCB0eXBlLCBpbnRlcm5hbFR5cGUsIG5hbWUgfSA9IHRoaXM7XG5cblx0XHQvLyBDaGVjayB0aGF0IGRhdGEgaXMgY29ycmVjdCBsZW5ndGggKHVzZXIgZXJyb3IpLlxuXHRcdGlmICgobGVuZ3RoICYmIF9kYXRhLmxlbmd0aCAhPT0gbGVuZ3RoICogbnVtQ29tcG9uZW50cykgfHwgKCFsZW5ndGggJiYgX2RhdGEubGVuZ3RoICE9PSB3aWR0aCAqIGhlaWdodCAqIG51bUNvbXBvbmVudHMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZGF0YSBsZW5ndGggJHtfZGF0YS5sZW5ndGh9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIgb2Ygc2l6ZSAke2xlbmd0aCA/IGxlbmd0aCA6IGAke3dpZHRofXgke2hlaWdodH1gfXgke251bUNvbXBvbmVudHN9LmApO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIHRoYXQgZGF0YSBpcyBjb3JyZWN0IHR5cGUgKHVzZXIgZXJyb3IpLlxuXHRcdGxldCBpbnZhbGlkVHlwZUZvdW5kID0gZmFsc2U7XG5cdFx0c3dpdGNoICh0eXBlKSB7XG5cdFx0XHRjYXNlIEhBTEZfRkxPQVQ6XG5cdFx0XHRcdC8vIFNpbmNlIHRoZXJlIGlzIG5vIEZsb2F0MTZBcnJheSwgd2UgbXVzdCB1c2UgRmxvYXQzMkFycmF5cyB0byBpbml0IHRleHR1cmUuXG5cdFx0XHRcdC8vIENvbnRpbnVlIHRvIG5leHQgY2FzZS5cblx0XHRcdGNhc2UgRkxPQVQ6XG5cdFx0XHRcdGludmFsaWRUeXBlRm91bmQgPSBpbnZhbGlkVHlwZUZvdW5kIHx8IF9kYXRhLmNvbnN0cnVjdG9yICE9PSBGbG9hdDMyQXJyYXk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBVTlNJR05FRF9CWVRFOlxuXHRcdFx0XHRpbnZhbGlkVHlwZUZvdW5kID0gaW52YWxpZFR5cGVGb3VuZCB8fCBfZGF0YS5jb25zdHJ1Y3RvciAhPT0gVWludDhBcnJheTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIEJZVEU6XG5cdFx0XHRcdGludmFsaWRUeXBlRm91bmQgPSBpbnZhbGlkVHlwZUZvdW5kIHx8IF9kYXRhLmNvbnN0cnVjdG9yICE9PSBJbnQ4QXJyYXk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBVTlNJR05FRF9TSE9SVDpcblx0XHRcdFx0aW52YWxpZFR5cGVGb3VuZCA9IGludmFsaWRUeXBlRm91bmQgfHwgX2RhdGEuY29uc3RydWN0b3IgIT09IFVpbnQxNkFycmF5O1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgU0hPUlQ6XG5cdFx0XHRcdGludmFsaWRUeXBlRm91bmQgPSBpbnZhbGlkVHlwZUZvdW5kIHx8IF9kYXRhLmNvbnN0cnVjdG9yICE9PSBJbnQxNkFycmF5O1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgVU5TSUdORURfSU5UOlxuXHRcdFx0XHRpbnZhbGlkVHlwZUZvdW5kID0gaW52YWxpZFR5cGVGb3VuZCB8fCBfZGF0YS5jb25zdHJ1Y3RvciAhPT0gVWludDMyQXJyYXk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBJTlQ6XG5cdFx0XHRcdGludmFsaWRUeXBlRm91bmQgPSBpbnZhbGlkVHlwZUZvdW5kIHx8IF9kYXRhLmNvbnN0cnVjdG9yICE9PSBJbnQzMkFycmF5O1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgRXJyb3IgaW5pdGluZyBEYXRhTGF5ZXIgXCIke25hbWV9XCIuICBVbnN1cHBvcnRlZCB0eXBlIFwiJHt0eXBlfVwiIGZvciBXZWJHTENvbXB1dGUuaW5pdERhdGFMYXllci5gKTtcblx0XHR9XG5cdFx0aWYgKGludmFsaWRUeXBlRm91bmQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBUeXBlZEFycmF5IG9mIHR5cGUgJHsoX2RhdGEuY29uc3RydWN0b3IgYXMgYW55KS5uYW1lfSBzdXBwbGllZCB0byBEYXRhTGF5ZXIgXCIke25hbWV9XCIgb2YgdHlwZSBcIiR7dHlwZX1cIi5gKTtcblx0XHR9XG5cblx0XHRsZXQgZGF0YSA9IF9kYXRhO1xuXHRcdGNvbnN0IGltYWdlU2l6ZSA9IHdpZHRoICogaGVpZ2h0ICogZ2xOdW1DaGFubmVscztcblx0XHQvLyBUaGVuIGNoZWNrIGlmIGFycmF5IG5lZWRzIHRvIGJlIGxlbmd0aGVuZWQuXG5cdFx0Ly8gVGhpcyBjb3VsZCBiZSBiZWNhdXNlIGdsTnVtQ2hhbm5lbHMgIT09IG51bUNvbXBvbmVudHMuXG5cdFx0Ly8gT3IgYmVjYXVzZSBsZW5ndGggIT09IHdpZHRoICogaGVpZ2h0LlxuXHRcdGNvbnN0IGluY29ycmVjdFNpemUgPSBkYXRhLmxlbmd0aCAhPT0gaW1hZ2VTaXplO1xuXHRcdC8vIFdlIGhhdmUgdG8gaGFuZGxlIHRoZSBjYXNlIG9mIEZsb2F0MTYgc3BlY2lhbGx5IGJ5IGNvbnZlcnRpbmcgZGF0YSB0byBVaW50MTZBcnJheS5cblx0XHRjb25zdCBoYW5kbGVGbG9hdDE2ID0gaW50ZXJuYWxUeXBlID09PSBIQUxGX0ZMT0FUO1xuXHRcdC8vIEZvciB3ZWJnbDEuMCB3ZSBtYXkgbmVlZCB0byBjYXN0IGFuIGludCB0eXBlIHRvIGEgRkxPQVQgb3IgSEFMRl9GTE9BVC5cblx0XHRjb25zdCBzaG91bGRUeXBlQ2FzdCA9IHR5cGUgIT09IGludGVybmFsVHlwZTtcblxuXHRcdGlmIChzaG91bGRUeXBlQ2FzdCB8fCBpbmNvcnJlY3RTaXplIHx8IGhhbmRsZUZsb2F0MTYpIHtcblx0XHRcdHN3aXRjaCAoaW50ZXJuYWxUeXBlKSB7XG5cdFx0XHRcdGNhc2UgSEFMRl9GTE9BVDpcblx0XHRcdFx0XHRkYXRhID0gbmV3IFVpbnQxNkFycmF5KGltYWdlU2l6ZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgRkxPQVQ6XG5cdFx0XHRcdFx0ZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoaW1hZ2VTaXplKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBVTlNJR05FRF9CWVRFOlxuXHRcdFx0XHRcdGRhdGEgPSBuZXcgVWludDhBcnJheShpbWFnZVNpemUpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIEJZVEU6XG5cdFx0XHRcdFx0ZGF0YSA9IG5ldyBJbnQ4QXJyYXkoaW1hZ2VTaXplKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBVTlNJR05FRF9TSE9SVDpcblx0XHRcdFx0XHRkYXRhID0gbmV3IFVpbnQxNkFycmF5KGltYWdlU2l6ZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgU0hPUlQ6XG5cdFx0XHRcdFx0ZGF0YSA9IG5ldyBJbnQxNkFycmF5KGltYWdlU2l6ZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgVU5TSUdORURfSU5UOlxuXHRcdFx0XHRcdGRhdGEgPSBuZXcgVWludDMyQXJyYXkoaW1hZ2VTaXplKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBJTlQ6XG5cdFx0XHRcdFx0ZGF0YSA9IG5ldyBJbnQzMkFycmF5KGltYWdlU2l6ZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgRXJyb3IgaW5pdGluZyAke25hbWV9LiAgVW5zdXBwb3J0ZWQgaW50ZXJuYWxUeXBlICR7aW50ZXJuYWxUeXBlfSBmb3IgV2ViR0xDb21wdXRlLmluaXREYXRhTGF5ZXIuYCk7XG5cdFx0XHR9XG5cdFx0XHQvLyBGaWxsIG5ldyBkYXRhIGFycmF5IHdpdGggb2xkIGRhdGEuXG5cdFx0XHRjb25zdCB2aWV3ID0gaGFuZGxlRmxvYXQxNiA/IG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlcikgOiBudWxsO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDAsIF9sZW4gPSBfZGF0YS5sZW5ndGggLyBudW1Db21wb25lbnRzOyBpIDwgX2xlbjsgaSsrKSB7XG5cdFx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgbnVtQ29tcG9uZW50czsgaisrKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSBfZGF0YVtpICogbnVtQ29tcG9uZW50cyArIGpdO1xuXHRcdFx0XHRcdGNvbnN0IGluZGV4ID0gaSAqIGdsTnVtQ2hhbm5lbHMgKyBqO1xuXHRcdFx0XHRcdGlmIChoYW5kbGVGbG9hdDE2KSB7XG5cdFx0XHRcdFx0XHRzZXRGbG9hdDE2KHZpZXchLCAyICogaW5kZXgsIHZhbHVlLCB0cnVlKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZGF0YVtpbmRleF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXG5cdHByaXZhdGUgaW5pdEJ1ZmZlcnMoXG5cdFx0X2RhdGE/OiBEYXRhTGF5ZXJBcnJheVR5cGUsXG5cdCkge1xuXHRcdGNvbnN0IHtcblx0XHRcdG5hbWUsXG5cdFx0XHRudW1CdWZmZXJzLFxuXHRcdFx0Z2wsXG5cdFx0XHR3aWR0aCxcblx0XHRcdGhlaWdodCxcblx0XHRcdGdsSW50ZXJuYWxGb3JtYXQsXG5cdFx0XHRnbEZvcm1hdCxcblx0XHRcdGdsVHlwZSxcblx0XHRcdGdsRmlsdGVyLFxuXHRcdFx0Z2xXcmFwUyxcblx0XHRcdGdsV3JhcFQsXG5cdFx0XHR3cml0YWJsZSxcblx0XHRcdGVycm9yQ2FsbGJhY2ssXG5cdFx0fSA9IHRoaXM7XG5cblx0XHRjb25zdCBkYXRhID0gdGhpcy52YWxpZGF0ZURhdGFBcnJheShfZGF0YSk7XG5cblx0XHQvLyBJbml0IGEgdGV4dHVyZSBmb3IgZWFjaCBidWZmZXIuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBudW1CdWZmZXJzOyBpKyspIHtcblx0XHRcdGNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cdFx0XHRpZiAoIXRleHR1cmUpIHtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayhgQ291bGQgbm90IGluaXQgdGV4dHVyZSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiOiAke2dsLmdldEVycm9yKCl9LmApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcblxuXHRcdFx0Ly8gVE9ETzogYXJlIHRoZXJlIG90aGVyIHBhcmFtcyB0byBsb29rIGludG86XG5cdFx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2ViR0xSZW5kZXJpbmdDb250ZXh0L3RleFBhcmFtZXRlclxuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2xXcmFwUyk7XG5cdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbFdyYXBUKTtcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbEZpbHRlcik7XG5cdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2xGaWx0ZXIpO1xuXG5cdFx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIHdpZHRoLCBoZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGRhdGEgPyBkYXRhIDogbnVsbCk7XG5cdFx0XHRcblx0XHRcdGNvbnN0IGJ1ZmZlcjogRGF0YUxheWVyQnVmZmVyID0ge1xuXHRcdFx0XHR0ZXh0dXJlLFxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKHdyaXRhYmxlKSB7XG5cdFx0XHRcdC8vIEluaXQgYSBmcmFtZWJ1ZmZlciBmb3IgdGhpcyB0ZXh0dXJlIHNvIHdlIGNhbiB3cml0ZSB0byBpdC5cblx0XHRcdFx0Y29uc3QgZnJhbWVidWZmZXIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXHRcdFx0XHRpZiAoIWZyYW1lYnVmZmVyKSB7XG5cdFx0XHRcdFx0ZXJyb3JDYWxsYmFjayhgQ291bGQgbm90IGluaXQgZnJhbWVidWZmZXIgZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIjogJHtnbC5nZXRFcnJvcigpfS5gKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlcik7XG5cdFx0XHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJHTFJlbmRlcmluZ0NvbnRleHQvZnJhbWVidWZmZXJUZXh0dXJlMkRcblx0XHRcdFx0Z2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELCB0ZXh0dXJlLCAwKTtcblxuXHRcdFx0XHRjb25zdCBzdGF0dXMgPSBnbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKGdsLkZSQU1FQlVGRkVSKTtcblx0XHRcdFx0aWYoc3RhdHVzICE9IGdsLkZSQU1FQlVGRkVSX0NPTVBMRVRFKXtcblx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKGBJbnZhbGlkIHN0YXR1cyBmb3IgZnJhbWVidWZmZXIgZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIjogJHtzdGF0dXN9LmApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIGZyYW1lYnVmZmVyLlxuXHRcdFx0XHRidWZmZXIuZnJhbWVidWZmZXIgPSBmcmFtZWJ1ZmZlcjtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly8gU2F2ZSB0aGlzIGJ1ZmZlciB0byB0aGUgbGlzdC5cblx0XHRcdHRoaXMuYnVmZmVycy5wdXNoKGJ1ZmZlcik7XG5cdFx0fVxuXHRcdC8vIFVuYmluZC5cblx0XHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuXHR9XG5cblx0Z2V0Q3VycmVudFN0YXRlVGV4dHVyZSgpIHtcblx0XHRpZiAodGhpcy50ZXh0dXJlT3ZlcnJpZGVzICYmIHRoaXMudGV4dHVyZU92ZXJyaWRlc1t0aGlzLl9idWZmZXJJbmRleF0pIHJldHVybiB0aGlzLnRleHR1cmVPdmVycmlkZXNbdGhpcy5fYnVmZmVySW5kZXhdITtcblx0XHRyZXR1cm4gdGhpcy5idWZmZXJzW3RoaXMuX2J1ZmZlckluZGV4XS50ZXh0dXJlO1xuXHR9XG5cblx0Z2V0UHJldmlvdXNTdGF0ZVRleHR1cmUoaW5kZXggPSAtMSkge1xuXHRcdGlmICh0aGlzLm51bUJ1ZmZlcnMgPT09IDEpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGNhbGwgZ2V0UHJldmlvdXNTdGF0ZVRleHR1cmUgb24gRGF0YUxheWVyIFwiJHt0aGlzLm5hbWV9XCIgd2l0aCBvbmx5IG9uZSBidWZmZXIuYCk7XG5cdFx0fVxuXHRcdGNvbnN0IHByZXZpb3VzSW5kZXggPSB0aGlzLl9idWZmZXJJbmRleCArIGluZGV4ICsgdGhpcy5udW1CdWZmZXJzO1xuXHRcdGlmIChwcmV2aW91c0luZGV4IDwgMCB8fCBwcmV2aW91c0luZGV4ID49IHRoaXMubnVtQnVmZmVycykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGluZGV4ICR7aW5kZXh9IHBhc3NlZCB0byBnZXRQcmV2aW91c1N0YXRlVGV4dHVyZSBvbiBEYXRhTGF5ZXIgJHt0aGlzLm5hbWV9IHdpdGggJHt0aGlzLm51bUJ1ZmZlcnN9IGJ1ZmZlcnMuYCk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnRleHR1cmVPdmVycmlkZXMgJiYgdGhpcy50ZXh0dXJlT3ZlcnJpZGVzW3ByZXZpb3VzSW5kZXhdKSByZXR1cm4gdGhpcy50ZXh0dXJlT3ZlcnJpZGVzW3ByZXZpb3VzSW5kZXhdITtcblx0XHRyZXR1cm4gdGhpcy5idWZmZXJzW3ByZXZpb3VzSW5kZXhdLnRleHR1cmU7XG5cdH1cblxuXHRfdXNpbmdUZXh0dXJlT3ZlcnJpZGVGb3JDdXJyZW50QnVmZmVyKCkge1xuXHRcdHJldHVybiB0aGlzLnRleHR1cmVPdmVycmlkZXMgJiYgdGhpcy50ZXh0dXJlT3ZlcnJpZGVzW3RoaXMuYnVmZmVySW5kZXhdO1xuXHR9XG5cblx0X2JpbmRPdXRwdXRCdWZmZXJGb3JXcml0ZShcblx0XHRpbmNyZW1lbnRCdWZmZXJJbmRleDogYm9vbGVhbixcblx0KSB7XG5cdFx0Y29uc3QgeyBnbCB9ID0gdGhpcztcblx0XHRpZiAoaW5jcmVtZW50QnVmZmVySW5kZXgpIHtcblx0XHRcdC8vIEluY3JlbWVudCBidWZmZXJJbmRleC5cblx0XHRcdHRoaXMuX2J1ZmZlckluZGV4ID0gKHRoaXMuX2J1ZmZlckluZGV4ICsgMSkgJSB0aGlzLm51bUJ1ZmZlcnM7XG5cdFx0fVxuXHRcdHRoaXMuX2JpbmRPdXRwdXRCdWZmZXIoKTtcblxuXHRcdC8vIFdlIGFyZSBnb2luZyB0byBkbyBhIGRhdGEgd3JpdGUsIGlmIHdlIGhhdmUgb3ZlcnJpZGVzIGVuYWJsZWQsIHdlIGNhbiByZW1vdmUgdGhlbS5cblx0XHRpZiAodGhpcy50ZXh0dXJlT3ZlcnJpZGVzKSB7XG5cdFx0XHR0aGlzLnRleHR1cmVPdmVycmlkZXNbdGhpcy5fYnVmZmVySW5kZXhdID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXG5cdF9iaW5kT3V0cHV0QnVmZmVyKCkge1xuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cdFx0Y29uc3QgeyBmcmFtZWJ1ZmZlciB9ID0gdGhpcy5idWZmZXJzW3RoaXMuX2J1ZmZlckluZGV4XTtcblx0XHRpZiAoIWZyYW1lYnVmZmVyKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYERhdGFMYXllciBcIiR7dGhpcy5uYW1lfVwiIGlzIG5vdCB3cml0YWJsZS5gKTtcblx0XHR9XG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlcik7XG5cdH1cblxuXHRzZXREYXRhKGRhdGE6IERhdGFMYXllckFycmF5VHlwZSkge1xuXHRcdC8vIFRPRE86IFJhdGhlciB0aGFuIGRlc3Ryb3lpbmcgYnVmZmVycywgd2UgY291bGQgd3JpdGUgdG8gY2VydGFpbiB3aW5kb3cuXG5cdFx0dGhpcy5kZXN0cm95QnVmZmVycygpO1xuXHRcdHRoaXMuaW5pdEJ1ZmZlcnMoZGF0YSk7XG5cdH1cblxuXHRyZXNpemUoXG5cdFx0ZGltZW5zaW9uczogbnVtYmVyIHwgW251bWJlciwgbnVtYmVyXSxcblx0XHRkYXRhPzogRGF0YUxheWVyQXJyYXlUeXBlLFxuXHQpIHtcblx0XHRjb25zdCB7IGxlbmd0aCwgd2lkdGgsIGhlaWdodCB9ID0gRGF0YUxheWVyLmNhbGNTaXplKGRpbWVuc2lvbnMsIHRoaXMubmFtZSk7XG5cdFx0dGhpcy5sZW5ndGggPSBsZW5ndGg7XG5cdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdHRoaXMuZGVzdHJveUJ1ZmZlcnMoKTtcblx0XHR0aGlzLmluaXRCdWZmZXJzKGRhdGEpO1xuXHR9XG5cblx0Y2xlYXIoKSB7XG5cdFx0Ly8gUmVzZXQgZXZlcnl0aGluZyB0byB6ZXJvLlxuXHRcdC8vIFRPRE86IFRoaXMgaXMgbm90IHRoZSBtb3N0IGVmZmljaWVudCB3YXkgdG8gZG8gdGhpcyAocmVhbGxvY2F0aW5nIGFsbCB0ZXh0dXJlcyBhbmQgZnJhbWVidWZmZXJzKSwgYnV0IG9rIGZvciBub3cuXG5cdFx0dGhpcy5kZXN0cm95QnVmZmVycygpO1xuXHRcdHRoaXMuaW5pdEJ1ZmZlcnMoKTtcblx0fVxuXG5cdGdldERpbWVuc2lvbnMoKSB7XG5cdFx0cmV0dXJuIFtcblx0XHRcdHRoaXMud2lkdGgsXG5cdFx0XHR0aGlzLmhlaWdodCxcblx0XHRdIGFzIFtudW1iZXIsIG51bWJlcl07XG5cdH1cblxuXHRnZXRMZW5ndGgoKSB7XG5cdFx0aWYgKCF0aGlzLmxlbmd0aCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY2FsbCBnZXRMZW5ndGgoKSBvbiAyRCBEYXRhTGF5ZXIgXCIke3RoaXMubmFtZX1cIi5gKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMubGVuZ3RoO1xuXHR9XG5cblx0cHJpdmF0ZSBkZXN0cm95QnVmZmVycygpIHtcblx0XHRjb25zdCB7IGdsLCBidWZmZXJzIH0gPSB0aGlzO1xuXHRcdGJ1ZmZlcnMuZm9yRWFjaChidWZmZXIgPT4ge1xuXHRcdFx0Y29uc3QgeyBmcmFtZWJ1ZmZlciwgdGV4dHVyZSB9ID0gYnVmZmVyO1xuXHRcdFx0Z2wuZGVsZXRlVGV4dHVyZSh0ZXh0dXJlKTtcblx0XHRcdGlmIChmcmFtZWJ1ZmZlcikge1xuXHRcdFx0XHRnbC5kZWxldGVGcmFtZWJ1ZmZlcihmcmFtZWJ1ZmZlcik7XG5cdFx0XHR9XG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRkZWxldGUgYnVmZmVyLnRleHR1cmU7XG5cdFx0XHRkZWxldGUgYnVmZmVyLmZyYW1lYnVmZmVyO1xuXHRcdH0pO1xuXHRcdGJ1ZmZlcnMubGVuZ3RoID0gMDtcblxuXHRcdC8vIFRoZXNlIGFyZSB0ZWNobmljYWxseSBvd25lZCBieSBhbm90aGVyIERhdGFMYXllcixcblx0XHQvLyBzbyB3ZSBhcmUgbm90IHJlc3BvbnNpYmxlIGZvciBkZWxldGluZyB0aGVtIGZyb20gZ2wgY29udGV4dC5cblx0XHRkZWxldGUgdGhpcy50ZXh0dXJlT3ZlcnJpZGVzO1xuXHR9XG5cblx0ZGVzdHJveSgpIHtcblx0XHR0aGlzLmRlc3Ryb3lCdWZmZXJzKCk7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGRlbGV0ZSB0aGlzLmdsO1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRkZWxldGUgdGhpcy5lcnJvckNhbGxiYWNrO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBpc0FycmF5LCBpc0ludGVnZXIsIGlzTnVtYmVyLCBpc1N0cmluZyB9IGZyb20gJy4vQ2hlY2tzJztcbmltcG9ydCB7XG5cdEZMT0FULFxuXHRGTE9BVF8xRF9VTklGT1JNLCBGTE9BVF8yRF9VTklGT1JNLCBGTE9BVF8zRF9VTklGT1JNLCBGTE9BVF80RF9VTklGT1JNLFxuXHRHTFNMMyxcblx0R0xTTFZlcnNpb24sXG5cdElOVCxcblx0SU5UXzFEX1VOSUZPUk0sIElOVF8yRF9VTklGT1JNLCBJTlRfM0RfVU5JRk9STSwgSU5UXzREX1VOSUZPUk0sXG5cdFVuaWZvcm0sIFVuaWZvcm1EYXRhVHlwZSwgVW5pZm9ybVR5cGUsIFVuaWZvcm1WYWx1ZVR5cGUsXG59IGZyb20gJy4vQ29uc3RhbnRzJztcbmltcG9ydCB7IGNvbXBpbGVTaGFkZXIgfSBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgREVGQVVMVF9QUk9HUkFNX05BTUUgPSAnREVGQVVMVCc7XG5jb25zdCBTRUdNRU5UX1BST0dSQU1fTkFNRSA9ICdTRUdNRU5UJztcbmNvbnN0IFBPSU5UU19QUk9HUkFNX05BTUUgPSAnUE9JTlRTJztcbmNvbnN0IFZFQ1RPUl9GSUVMRF9QUk9HUkFNX05BTUUgPSAnVkVDVE9SX0ZJRUxEJztcbmNvbnN0IElOREVYRURfTElORVNfUFJPR1JBTV9OQU1FID0gJ0lOREVYRURfTElORVMnO1xuY29uc3QgZ2xQcm9ncmFtTmFtZXMgPSBbXG5cdERFRkFVTFRfUFJPR1JBTV9OQU1FLFxuXHRTRUdNRU5UX1BST0dSQU1fTkFNRSxcblx0UE9JTlRTX1BST0dSQU1fTkFNRSxcblx0VkVDVE9SX0ZJRUxEX1BST0dSQU1fTkFNRSxcblx0SU5ERVhFRF9MSU5FU19QUk9HUkFNX05BTUUsXG5dO1xuXG5leHBvcnQgY2xhc3MgR1BVUHJvZ3JhbSB7XG5cdHJlYWRvbmx5IG5hbWU6IHN0cmluZztcblx0cHJpdmF0ZSByZWFkb25seSBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dDtcblx0cHJpdmF0ZSByZWFkb25seSBlcnJvckNhbGxiYWNrOiAobWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkO1xuXHRwcml2YXRlIHJlYWRvbmx5IGdsc2xWZXJzaW9uOiBHTFNMVmVyc2lvbjtcblx0cHJpdmF0ZSByZWFkb25seSB1bmlmb3JtczogeyBbIGtleTogc3RyaW5nXTogVW5pZm9ybSB9ID0ge307XG5cdHByaXZhdGUgcmVhZG9ubHkgZnJhZ21lbnRTaGFkZXIhOiBXZWJHTFNoYWRlcjtcblx0Ly8gU3RvcmUgZ2wgcHJvZ3JhbXMuXG5cdHByaXZhdGUgX2RlZmF1bHRQcm9ncmFtPzogV2ViR0xQcm9ncmFtO1xuXHRwcml2YXRlIF9zZWdtZW50UHJvZ3JhbT86IFdlYkdMUHJvZ3JhbTtcblx0cHJpdmF0ZSBfcG9pbnRzUHJvZ3JhbT86IFdlYkdMUHJvZ3JhbTtcblx0cHJpdmF0ZSBfdmVjdG9yRmllbGRQcm9ncmFtPzogV2ViR0xQcm9ncmFtO1xuXHRwcml2YXRlIF9pbmRleGVkTGluZXNQcm9ncmFtPzogV2ViR0xQcm9ncmFtO1xuXHQvLyBTdG9yZSB2ZXJ0ZXhTaGFkZXJzIGFzIGNsYXNzIHByb3BlcnRpZXMgKGZvciBzaGFyaW5nKS5cblx0cHJpdmF0ZSBzdGF0aWMgZGVmYXVsdFZlcnRleFNoYWRlcj86IFdlYkdMU2hhZGVyO1xuXHRwcml2YXRlIHN0YXRpYyBzZWdtZW50VmVydGV4U2hhZGVyPzogV2ViR0xTaGFkZXI7XG5cdHByaXZhdGUgc3RhdGljIHBvaW50c1ZlcnRleFNoYWRlcj86IFdlYkdMU2hhZGVyO1xuXHRwcml2YXRlIHN0YXRpYyB2ZWN0b3JGaWVsZFZlcnRleFNoYWRlcj86IFdlYkdMU2hhZGVyO1xuXHRwcml2YXRlIHN0YXRpYyBpbmRleGVkTGluZXNWZXJ0ZXhTaGFkZXI/OiBXZWJHTFNoYWRlcjtcblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRwYXJhbXM6IHtcblx0XHRcdGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxuXHRcdFx0bmFtZTogc3RyaW5nLFxuXHRcdFx0ZnJhZ21lbnRTaGFkZXI6IHN0cmluZyB8IHN0cmluZ1tdIHwgV2ViR0xTaGFkZXIsLy8gV2UgbWF5IHdhbnQgdG8gcGFzcyBpbiBhbiBhcnJheSBvZiBzaGFkZXIgc3RyaW5nIHNvdXJjZXMsIGlmIHNwbGl0IGFjcm9zcyBzZXZlcmFsIGZpbGVzLlxuXHRcdFx0ZXJyb3JDYWxsYmFjazogKG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZCxcblx0XHRcdGdsc2xWZXJzaW9uOiBHTFNMVmVyc2lvbixcblx0XHRcdHVuaWZvcm1zPzoge1xuXHRcdFx0XHRuYW1lOiBzdHJpbmcsXG5cdFx0XHRcdHZhbHVlOiBVbmlmb3JtVmFsdWVUeXBlLFxuXHRcdFx0XHRkYXRhVHlwZTogVW5pZm9ybURhdGFUeXBlLFxuXHRcdFx0fVtdLFxuXHRcdFx0ZGVmaW5lcz86IHsvLyBXZSdsbCBhbGxvdyBzb21lIHZhcmlhYmxlcyB0byBiZSBwYXNzZWQgaW4gYXMgI2RlZmluZSB0byB0aGUgcHJlcHJvY2Vzc29yIGZvciB0aGUgZnJhZ21lbnQgc2hhZGVyLlxuXHRcdFx0XHRba2V5OiBzdHJpbmddOiBzdHJpbmcsIC8vIFdlJ2xsIGRvIHRoZXNlIGFzIHN0cmluZ3MgdG8gbWFrZSBpdCBlYXNpZXIgdG8gY29udHJvbCBmbG9hdCB2cyBpbnQuXG5cdFx0XHR9LFxuXHRcdH0sXG5cdFx0XG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wsIGVycm9yQ2FsbGJhY2ssIG5hbWUsIGZyYWdtZW50U2hhZGVyLCBnbHNsVmVyc2lvbiwgdW5pZm9ybXMsIGRlZmluZXMgfSA9IHBhcmFtcztcblxuXHRcdC8vIFNhdmUgYXJndW1lbnRzLlxuXHRcdHRoaXMuZ2wgPSBnbDtcblx0XHR0aGlzLmVycm9yQ2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrO1xuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cdFx0dGhpcy5nbHNsVmVyc2lvbiA9IGdsc2xWZXJzaW9uO1xuXG5cdFx0Ly8gQ29tcGlsZSBmcmFnbWVudCBzaGFkZXIuXG5cdFx0aWYgKHR5cGVvZihmcmFnbWVudFNoYWRlcikgPT09ICdzdHJpbmcnIHx8IHR5cGVvZigoZnJhZ21lbnRTaGFkZXIgYXMgc3RyaW5nW10pWzBdKSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdGxldCBzb3VyY2VTdHJpbmcgPSB0eXBlb2YoZnJhZ21lbnRTaGFkZXIpID09PSAnc3RyaW5nJyA/XG5cdFx0XHRcdGZyYWdtZW50U2hhZGVyIDpcblx0XHRcdFx0KGZyYWdtZW50U2hhZGVyIGFzIHN0cmluZ1tdKS5qb2luKCdcXG4nKTtcblx0XHRcdGlmIChkZWZpbmVzKSB7XG5cdFx0XHRcdC8vIEZpcnN0IGNvbnZlcnQgZGVmaW5lcyB0byBhIHN0cmluZy5cblx0XHRcdFx0Y29uc3QgZGVmaW5lc1NvdXJjZSA9IE9iamVjdC5rZXlzKGRlZmluZXMpLm1hcChrZXkgPT4ge1xuXHRcdFx0XHRcdC8vIENoZWNrIHRoYXQgZGVmaW5lIGlzIHBhc3NlZCBpbiBhcyBhIHN0cmluZy5cblx0XHRcdFx0XHRpZiAoIWlzU3RyaW5nKGtleSkgfHwgIWlzU3RyaW5nKGRlZmluZXNba2V5XSkpIHtcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgR1BVUHJvZ3JhbSBkZWZpbmVzIG11c3QgYmUgcGFzc2VkIGluIGFzIGtleSB2YWx1ZSBwYWlycyB0aGF0IGFyZSBib3RoIHN0cmluZ3MsIGdvdCBrZXkgdmFsdWUgcGFpciBvZiB0eXBlICR7dHlwZW9mIGtleX0gOiAke3R5cGVvZiBkZWZpbmVzW2tleV19LmApXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBgI2RlZmluZSAke2tleX0gJHtkZWZpbmVzW2tleV19XFxuYDtcblx0XHRcdFx0fSkuam9pbignXFxuJyk7XG5cdFx0XHRcdHNvdXJjZVN0cmluZyA9IGRlZmluZXNTb3VyY2UgKyBzb3VyY2VTdHJpbmc7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBzaGFkZXIgPSBjb21waWxlU2hhZGVyKGdsLCBlcnJvckNhbGxiYWNrLCBzb3VyY2VTdHJpbmcsIGdsLkZSQUdNRU5UX1NIQURFUiwgbmFtZSk7XG5cdFx0XHRpZiAoIXNoYWRlcikge1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrKGBVbmFibGUgdG8gY29tcGlsZSBmcmFnbWVudCBzaGFkZXIgZm9yIHByb2dyYW0gXCIke25hbWV9XCIuYCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHRoaXMuZnJhZ21lbnRTaGFkZXIgPSBzaGFkZXI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChkZWZpbmVzKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGF0dGFjaCBkZWZpbmVzIHRvIHByb2dyYW0gXCIke25hbWV9XCIgYmVjYXVzZSBmcmFnbWVudCBzaGFkZXIgaXMgYWxyZWFkeSBjb21waWxlZC5gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR1bmlmb3Jtcz8uZm9yRWFjaCh1bmlmb3JtID0+IHtcblx0XHRcdGNvbnN0IHsgbmFtZSwgdmFsdWUsIGRhdGFUeXBlIH0gPSB1bmlmb3JtO1xuXHRcdFx0dGhpcy5zZXRVbmlmb3JtKG5hbWUsIHZhbHVlLCBkYXRhVHlwZSk7XG5cdFx0fSk7XG5cdH1cblxuXHRwcml2YXRlIGluaXRQcm9ncmFtKHZlcnRleFNoYWRlcjogV2ViR0xTaGFkZXIsIHByb2dyYW1OYW1lOiBzdHJpbmcpIHtcblx0XHRjb25zdCB7IGdsLCBmcmFnbWVudFNoYWRlciwgZXJyb3JDYWxsYmFjaywgdW5pZm9ybXMgfSA9IHRoaXM7XG5cdFx0Ly8gQ3JlYXRlIGEgcHJvZ3JhbS5cblx0XHRjb25zdCBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuXHRcdGlmICghcHJvZ3JhbSkge1xuXHRcdFx0ZXJyb3JDYWxsYmFjayhgVW5hYmxlIHRvIGluaXQgZ2wgcHJvZ3JhbTogJHtuYW1lfS5gKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Ly8gVE9ETzogY2hlY2sgdGhhdCBhdHRhY2hTaGFkZXIgd29ya2VkLlxuXHRcdGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XG5cdFx0Z2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleFNoYWRlcik7XG5cdFx0Ly8gTGluayB0aGUgcHJvZ3JhbS5cblx0XHRnbC5saW5rUHJvZ3JhbShwcm9ncmFtKTtcblx0XHQvLyBDaGVjayBpZiBpdCBsaW5rZWQuXG5cdFx0Y29uc3Qgc3VjY2VzcyA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMpO1xuXHRcdGlmICghc3VjY2Vzcykge1xuXHRcdFx0Ly8gU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2l0aCB0aGUgbGluay5cblx0XHRcdGVycm9yQ2FsbGJhY2soYFByb2dyYW0gXCIke25hbWV9XCIgZmFpbGVkIHRvIGxpbms6ICR7Z2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSl9YCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC8vIElmIHdlIGhhdmUgYW55IHVuaWZvcm1zIHNldCBmb3IgdGhpcyBHUFVQcm9ncmFtLCBhZGQgdGhvc2UgdG8gV2ViR0xQcm9ncmFtIHdlIGp1c3QgaW5pdGVkLlxuXHRcdGNvbnN0IHVuaWZvcm1OYW1lcyA9IE9iamVjdC5rZXlzKHVuaWZvcm1zKTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHVuaWZvcm1OYW1lcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgdW5pZm9ybU5hbWUgPSB1bmlmb3JtTmFtZXNbaV07XG5cdFx0XHRjb25zdCB1bmlmb3JtID0gdW5pZm9ybXNbdW5pZm9ybU5hbWVdO1xuXHRcdFx0Y29uc3QgeyB2YWx1ZSwgdHlwZSB9ID0gdW5pZm9ybTtcblx0XHRcdHRoaXMuc2V0UHJvZ3JhbVVuaWZvcm0ocHJvZ3JhbSwgcHJvZ3JhbU5hbWUsIHVuaWZvcm1OYW1lLCB2YWx1ZSwgdHlwZSk7XG5cdFx0fVxuXHRcdHJldHVybiBwcm9ncmFtO1xuXHR9XG5cblx0Z2V0IGRlZmF1bHRQcm9ncmFtKCkge1xuXHRcdGlmICh0aGlzLl9kZWZhdWx0UHJvZ3JhbSkgcmV0dXJuIHRoaXMuX2RlZmF1bHRQcm9ncmFtO1xuXHRcdGlmIChHUFVQcm9ncmFtLmRlZmF1bHRWZXJ0ZXhTaGFkZXIgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29uc3QgeyBnbCwgbmFtZSwgZXJyb3JDYWxsYmFjaywgZ2xzbFZlcnNpb24gfSA9IHRoaXM7XG5cdFx0XHQvLyBJbml0IGEgZGVmYXVsdCB2ZXJ0ZXggc2hhZGVyIHRoYXQganVzdCBwYXNzZXMgdGhyb3VnaCBzY3JlZW4gY29vcmRzLlxuXHRcdFx0Y29uc3QgdmVydGV4U2hhZGVyU291cmNlID0gZ2xzbFZlcnNpb24gPT09IEdMU0wzID8gcmVxdWlyZSgnLi9nbHNsXzMvRGVmYXVsdFZlcnRleFNoYWRlci5nbHNsJykgOiByZXF1aXJlKCcuL2dsc2xfMS9EZWZhdWx0VmVydGV4U2hhZGVyLmdsc2wnKTtcblx0XHRcdGNvbnN0IHNoYWRlciA9IGNvbXBpbGVTaGFkZXIoZ2wsIGVycm9yQ2FsbGJhY2ssIHZlcnRleFNoYWRlclNvdXJjZSwgZ2wuVkVSVEVYX1NIQURFUiwgbmFtZSk7XG5cdFx0XHRpZiAoIXNoYWRlcikge1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrKGBVbmFibGUgdG8gY29tcGlsZSBkZWZhdWx0IHZlcnRleCBzaGFkZXIgZm9yIHByb2dyYW0gXCIke25hbWV9XCIuYCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdEdQVVByb2dyYW0uZGVmYXVsdFZlcnRleFNoYWRlciA9IHNoYWRlcjtcblx0XHR9XG5cdFx0Y29uc3QgcHJvZ3JhbSA9IHRoaXMuaW5pdFByb2dyYW0oR1BVUHJvZ3JhbS5kZWZhdWx0VmVydGV4U2hhZGVyLCBERUZBVUxUX1BST0dSQU1fTkFNRSk7XG5cdFx0dGhpcy5fZGVmYXVsdFByb2dyYW0gPSBwcm9ncmFtO1xuXHRcdHJldHVybiB0aGlzLl9kZWZhdWx0UHJvZ3JhbTtcblx0fVxuXG5cdGdldCBzZWdtZW50UHJvZ3JhbSgpIHtcblx0XHRpZiAodGhpcy5fc2VnbWVudFByb2dyYW0pIHJldHVybiB0aGlzLl9zZWdtZW50UHJvZ3JhbTtcblx0XHRpZiAoR1BVUHJvZ3JhbS5zZWdtZW50VmVydGV4U2hhZGVyID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnN0IHsgZ2wsIG5hbWUsIGVycm9yQ2FsbGJhY2ssIGdsc2xWZXJzaW9uIH0gPSB0aGlzO1xuXHRcdFx0Y29uc3QgdmVydGV4U2hhZGVyU291cmNlID0gZ2xzbFZlcnNpb24gPT09IEdMU0wzID8gcmVxdWlyZSgnLi9nbHNsXzMvU2VnbWVudFZlcnRleFNoYWRlci5nbHNsJykgOiByZXF1aXJlKCcuL2dsc2xfMS9TZWdtZW50VmVydGV4U2hhZGVyLmdsc2wnKTtcblx0XHRcdGNvbnN0IHNoYWRlciA9IGNvbXBpbGVTaGFkZXIoZ2wsIGVycm9yQ2FsbGJhY2ssIHZlcnRleFNoYWRlclNvdXJjZSwgZ2wuVkVSVEVYX1NIQURFUiwgbmFtZSk7XG5cdFx0XHRpZiAoIXNoYWRlcikge1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrKGBVbmFibGUgdG8gY29tcGlsZSBzZWdtZW50IHZlcnRleCBzaGFkZXIgZm9yIHByb2dyYW0gXCIke25hbWV9XCIuYCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdEdQVVByb2dyYW0uc2VnbWVudFZlcnRleFNoYWRlciA9IHNoYWRlcjtcblx0XHR9XG5cdFx0Y29uc3QgcHJvZ3JhbSA9IHRoaXMuaW5pdFByb2dyYW0oR1BVUHJvZ3JhbS5zZWdtZW50VmVydGV4U2hhZGVyLCBTRUdNRU5UX1BST0dSQU1fTkFNRSk7XG5cdFx0dGhpcy5fc2VnbWVudFByb2dyYW0gPSBwcm9ncmFtO1xuXHRcdHJldHVybiB0aGlzLl9zZWdtZW50UHJvZ3JhbTtcblx0fVxuXG5cdGdldCBwb2ludHNQcm9ncmFtKCkge1xuXHRcdGlmICh0aGlzLl9wb2ludHNQcm9ncmFtKSByZXR1cm4gdGhpcy5fcG9pbnRzUHJvZ3JhbTtcblx0XHRpZiAoR1BVUHJvZ3JhbS5wb2ludHNWZXJ0ZXhTaGFkZXIgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29uc3QgeyBnbCwgbmFtZSwgZXJyb3JDYWxsYmFjaywgZ2xzbFZlcnNpb24gfSA9IHRoaXM7XG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRjb25zdCB2ZXJ0ZXhTaGFkZXJTb3VyY2UgPSBnbHNsVmVyc2lvbiA9PT0gR0xTTDMgPyBwb2ludHNWZXJ0ZXhTaGFkZXJTb3VyY2VfZ2xzbDMgOiByZXF1aXJlKCcuL2dsc2xfMS9Qb2ludHNWZXJ0ZXhTaGFkZXIuZ2xzbCcpO1xuXHRcdFx0aWYgKHZlcnRleFNoYWRlclNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignTmVlZCB0byB3cml0ZSBnbHNsMyB2ZXJzaW9uIG9mIHBvaW50c1ZlcnRleFNoYWRlci4nKTtcblx0XHRcdH1cblx0XHRcdGNvbnN0IHNoYWRlciA9IGNvbXBpbGVTaGFkZXIoZ2wsIGVycm9yQ2FsbGJhY2ssIHZlcnRleFNoYWRlclNvdXJjZSwgZ2wuVkVSVEVYX1NIQURFUiwgbmFtZSk7XG5cdFx0XHRpZiAoIXNoYWRlcikge1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrKGBVbmFibGUgdG8gY29tcGlsZSBwb2ludHMgdmVydGV4IHNoYWRlciBmb3IgcHJvZ3JhbSBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0R1BVUHJvZ3JhbS5wb2ludHNWZXJ0ZXhTaGFkZXIgPSBzaGFkZXI7XG5cdFx0fVxuXHRcdGNvbnN0IHByb2dyYW0gPSB0aGlzLmluaXRQcm9ncmFtKEdQVVByb2dyYW0ucG9pbnRzVmVydGV4U2hhZGVyLCBQT0lOVFNfUFJPR1JBTV9OQU1FKTtcblx0XHR0aGlzLl9wb2ludHNQcm9ncmFtID0gcHJvZ3JhbTtcblx0XHRyZXR1cm4gdGhpcy5fcG9pbnRzUHJvZ3JhbTtcblx0fVxuXG5cdGdldCB2ZWN0b3JGaWVsZFByb2dyYW0oKSB7XG5cdFx0aWYgKHRoaXMuX3ZlY3RvckZpZWxkUHJvZ3JhbSkgcmV0dXJuIHRoaXMuX3ZlY3RvckZpZWxkUHJvZ3JhbTtcblx0XHRpZiAoR1BVUHJvZ3JhbS52ZWN0b3JGaWVsZFZlcnRleFNoYWRlciA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRjb25zdCB7IGdsLCBuYW1lLCBlcnJvckNhbGxiYWNrLCBnbHNsVmVyc2lvbiB9ID0gdGhpcztcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGNvbnN0IHZlcnRleFNoYWRlclNvdXJjZSA9IGdsc2xWZXJzaW9uID09PSBHTFNMMyA/IHZlY3RvckZpZWxkVmVydGV4U2hhZGVyU291cmNlX2dsc2wzIDogcmVxdWlyZSgnLi9nbHNsXzEvVmVjdG9yRmllbGRWZXJ0ZXhTaGFkZXIuZ2xzbCcpO1xuXHRcdFx0aWYgKHZlcnRleFNoYWRlclNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignTmVlZCB0byB3cml0ZSBnbHNsMyB2ZXJzaW9uIG9mIHZlY3RvckZpZWxkVmVydGV4U2hhZGVyLicpO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3Qgc2hhZGVyID0gY29tcGlsZVNoYWRlcihnbCwgZXJyb3JDYWxsYmFjaywgdmVydGV4U2hhZGVyU291cmNlLCBnbC5WRVJURVhfU0hBREVSLCBuYW1lKTtcblx0XHRcdGlmICghc2hhZGVyKSB7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2soYFVuYWJsZSB0byBjb21waWxlIHZlY3RvciBmaWVsZCB2ZXJ0ZXggc2hhZGVyIGZvciBwcm9ncmFtIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRHUFVQcm9ncmFtLnZlY3RvckZpZWxkVmVydGV4U2hhZGVyID0gc2hhZGVyO1xuXHRcdH1cblx0XHRjb25zdCBwcm9ncmFtID0gdGhpcy5pbml0UHJvZ3JhbShHUFVQcm9ncmFtLnZlY3RvckZpZWxkVmVydGV4U2hhZGVyLCBWRUNUT1JfRklFTERfUFJPR1JBTV9OQU1FKTtcblx0XHR0aGlzLl92ZWN0b3JGaWVsZFByb2dyYW0gPSBwcm9ncmFtO1xuXHRcdHJldHVybiB0aGlzLl92ZWN0b3JGaWVsZFByb2dyYW07XG5cdH1cblxuXHRnZXQgaW5kZXhlZExpbmVzUHJvZ3JhbSgpIHtcblx0XHRpZiAodGhpcy5faW5kZXhlZExpbmVzUHJvZ3JhbSkgcmV0dXJuIHRoaXMuX2luZGV4ZWRMaW5lc1Byb2dyYW07XG5cdFx0aWYgKEdQVVByb2dyYW0uaW5kZXhlZExpbmVzVmVydGV4U2hhZGVyID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnN0IHsgZ2wsIG5hbWUsIGVycm9yQ2FsbGJhY2ssIGdsc2xWZXJzaW9uIH0gPSB0aGlzO1xuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0Y29uc3QgdmVydGV4U2hhZGVyU291cmNlID0gZ2xzbFZlcnNpb24gPT09IEdMU0wzID8gaW5kZXhlZExpbmVzVmVydGV4U2hhZGVyU291cmNlX2dsc2wzIDogcmVxdWlyZSgnLi9nbHNsXzEvSW5kZXhlZExpbmVzVmVydGV4U2hhZGVyLmdsc2wnKTtcblx0XHRcdGlmICh2ZXJ0ZXhTaGFkZXJTb3VyY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ05lZWQgdG8gd3JpdGUgZ2xzbDMgdmVyc2lvbiBvZiBpbmRleGVkTGluZXNWZXJ0ZXhTaGFkZXIuJyk7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBzaGFkZXIgPSBjb21waWxlU2hhZGVyKGdsLCBlcnJvckNhbGxiYWNrLCB2ZXJ0ZXhTaGFkZXJTb3VyY2UsIGdsLlZFUlRFWF9TSEFERVIsIG5hbWUpO1xuXHRcdFx0aWYgKCFzaGFkZXIpIHtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayhgVW5hYmxlIHRvIGNvbXBpbGUgdmVjdG9yIGZpZWxkIHZlcnRleCBzaGFkZXIgZm9yIHByb2dyYW0gXCIke25hbWV9XCIuYCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdEdQVVByb2dyYW0uaW5kZXhlZExpbmVzVmVydGV4U2hhZGVyID0gc2hhZGVyO1xuXHRcdH1cblx0XHRjb25zdCBwcm9ncmFtID0gdGhpcy5pbml0UHJvZ3JhbShHUFVQcm9ncmFtLmluZGV4ZWRMaW5lc1ZlcnRleFNoYWRlciwgSU5ERVhFRF9MSU5FU19QUk9HUkFNX05BTUUpO1xuXHRcdHRoaXMuX2luZGV4ZWRMaW5lc1Byb2dyYW0gPSBwcm9ncmFtO1xuXHRcdHJldHVybiB0aGlzLl9pbmRleGVkTGluZXNQcm9ncmFtO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXQgYWN0aXZlUHJvZ3JhbXMoKSB7XG5cdFx0Y29uc3QgcHJvZ3JhbXMgPSBbXTtcblx0XHRpZiAodGhpcy5fZGVmYXVsdFByb2dyYW0pIHByb2dyYW1zLnB1c2goe1xuXHRcdFx0cHJvZ3JhbTogdGhpcy5fZGVmYXVsdFByb2dyYW0sXG5cdFx0XHRwcm9ncmFtTmFtZTogREVGQVVMVF9QUk9HUkFNX05BTUUsXG5cdFx0fSk7XG5cdFx0aWYgKHRoaXMuX3NlZ21lbnRQcm9ncmFtKSBwcm9ncmFtcy5wdXNoKHtcblx0XHRcdHByb2dyYW06IHRoaXMuX3NlZ21lbnRQcm9ncmFtLFxuXHRcdFx0cHJvZ3JhbU5hbWU6IFNFR01FTlRfUFJPR1JBTV9OQU1FLFxuXHRcdH0pO1xuXHRcdGlmICh0aGlzLl9wb2ludHNQcm9ncmFtKSBwcm9ncmFtcy5wdXNoKHtcblx0XHRcdHByb2dyYW06IHRoaXMuX3BvaW50c1Byb2dyYW0sXG5cdFx0XHRwcm9ncmFtTmFtZTogUE9JTlRTX1BST0dSQU1fTkFNRSxcblx0XHR9KTtcblx0XHRpZiAodGhpcy5fdmVjdG9yRmllbGRQcm9ncmFtKSBwcm9ncmFtcy5wdXNoKHtcblx0XHRcdHByb2dyYW06IHRoaXMuX3ZlY3RvckZpZWxkUHJvZ3JhbSxcblx0XHRcdHByb2dyYW1OYW1lOiBWRUNUT1JfRklFTERfUFJPR1JBTV9OQU1FLFxuXHRcdH0pO1xuXHRcdGlmICh0aGlzLl9pbmRleGVkTGluZXNQcm9ncmFtKSBwcm9ncmFtcy5wdXNoKHtcblx0XHRcdHByb2dyYW06IHRoaXMuX2luZGV4ZWRMaW5lc1Byb2dyYW0sXG5cdFx0XHRwcm9ncmFtTmFtZTogSU5ERVhFRF9MSU5FU19QUk9HUkFNX05BTUUsXG5cdFx0fSk7XG5cdFx0cmV0dXJuIHByb2dyYW1zO1xuXHR9XG5cblx0cHJpdmF0ZSB1bmlmb3JtVHlwZUZvclZhbHVlKFxuXHRcdHZhbHVlOiBudW1iZXIgfCBudW1iZXJbXSxcblx0XHRkYXRhVHlwZTogVW5pZm9ybURhdGFUeXBlLFxuXHQpIHtcblx0XHRpZiAoZGF0YVR5cGUgPT09IEZMT0FUKSB7XG5cdFx0XHQvLyBDaGVjayB0aGF0IHdlIGFyZSBkZWFsaW5nIHdpdGggYSBudW1iZXIuXG5cdFx0XHRpZiAoaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdFx0KHZhbHVlIGFzIG51bWJlcltdKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuXHRcdFx0XHRcdGlmICghaXNOdW1iZXIoZWxlbWVudCkpIHtcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB1bmlmb3JtIHZhbHVlOiAke3ZhbHVlfSBmb3IgcHJvZ3JhbSBcIiR7dGhpcy5uYW1lfVwiLCBleHBlY3RlZCBmbG9hdCBvciBmbG9hdFtdIG9mIGxlbmd0aCAxLTQuYCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICghaXNOdW1iZXIodmFsdWUpKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHVuaWZvcm0gdmFsdWU6ICR7dmFsdWV9IGZvciBwcm9ncmFtIFwiJHt0aGlzLm5hbWV9XCIsIGV4cGVjdGVkIGZsb2F0IG9yIGZsb2F0W10gb2YgbGVuZ3RoIDEtNC5gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCFpc0FycmF5KHZhbHVlKSB8fCAodmFsdWUgYXMgbnVtYmVyW10pLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0XHRyZXR1cm4gRkxPQVRfMURfVU5JRk9STTtcblx0XHRcdH1cblx0XHRcdGlmICgodmFsdWUgYXMgbnVtYmVyW10pLmxlbmd0aCA9PT0gMikge1xuXHRcdFx0XHRyZXR1cm4gRkxPQVRfMkRfVU5JRk9STTtcblx0XHRcdH1cblx0XHRcdGlmICgodmFsdWUgYXMgbnVtYmVyW10pLmxlbmd0aCA9PT0gMykge1xuXHRcdFx0XHRyZXR1cm4gRkxPQVRfM0RfVU5JRk9STTtcblx0XHRcdH1cblx0XHRcdGlmICgodmFsdWUgYXMgbnVtYmVyW10pLmxlbmd0aCA9PT0gNCkge1xuXHRcdFx0XHRyZXR1cm4gRkxPQVRfNERfVU5JRk9STTtcblx0XHRcdH1cblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB1bmlmb3JtIHZhbHVlOiAke3ZhbHVlfSBmb3IgcHJvZ3JhbSBcIiR7dGhpcy5uYW1lfVwiLCBleHBlY3RlZCBmbG9hdCBvciBmbG9hdFtdIG9mIGxlbmd0aCAxLTQuYCk7XG5cdFx0fSBlbHNlIGlmIChkYXRhVHlwZSA9PT0gSU5UKSB7XG5cdFx0XHQvLyBDaGVjayB0aGF0IHdlIGFyZSBkZWFsaW5nIHdpdGggYW4gaW50LlxuXHRcdFx0aWYgKGlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRcdCh2YWx1ZSBhcyBudW1iZXJbXSkuZm9yRWFjaChlbGVtZW50ID0+IHtcblx0XHRcdFx0XHRpZiAoIWlzSW50ZWdlcihlbGVtZW50KSkge1xuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHVuaWZvcm0gdmFsdWU6ICR7dmFsdWV9IGZvciBwcm9ncmFtIFwiJHt0aGlzLm5hbWV9XCIsIGV4cGVjdGVkIGludCBvciBpbnRbXSBvZiBsZW5ndGggMS00LmApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoIWlzSW50ZWdlcih2YWx1ZSkpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdW5pZm9ybSB2YWx1ZTogJHt2YWx1ZX0gZm9yIHByb2dyYW0gXCIke3RoaXMubmFtZX1cIiwgZXhwZWN0ZWQgaW50IG9yIGludFtdIG9mIGxlbmd0aCAxLTQuYCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICghaXNBcnJheSh2YWx1ZSkgfHwgKHZhbHVlIGFzIG51bWJlcltdKS5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0cmV0dXJuIElOVF8xRF9VTklGT1JNO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCh2YWx1ZSBhcyBudW1iZXJbXSkubGVuZ3RoID09PSAyKSB7XG5cdFx0XHRcdHJldHVybiBJTlRfMkRfVU5JRk9STTtcblx0XHRcdH1cblx0XHRcdGlmICgodmFsdWUgYXMgbnVtYmVyW10pLmxlbmd0aCA9PT0gMykge1xuXHRcdFx0XHRyZXR1cm4gSU5UXzNEX1VOSUZPUk07XG5cdFx0XHR9XG5cdFx0XHRpZiAoKHZhbHVlIGFzIG51bWJlcltdKS5sZW5ndGggPT09IDQpIHtcblx0XHRcdFx0cmV0dXJuIElOVF80RF9VTklGT1JNO1xuXHRcdFx0fVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHVuaWZvcm0gdmFsdWU6ICR7dmFsdWV9IGZvciBwcm9ncmFtIFwiJHt0aGlzLm5hbWV9XCIsIGV4cGVjdGVkIGludCBvciBpbnRbXSBvZiBsZW5ndGggMS00LmApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdW5pZm9ybSBkYXRhIHR5cGU6ICR7ZGF0YVR5cGV9IGZvciBwcm9ncmFtIFwiJHt0aGlzLm5hbWV9XCIsIGV4cGVjdGVkICR7RkxPQVR9IG9yICR7SU5UfS5gKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIHNldFByb2dyYW1Vbmlmb3JtKFxuXHRcdHByb2dyYW06IFdlYkdMUHJvZ3JhbSxcblx0XHRwcm9ncmFtTmFtZTogc3RyaW5nLFxuXHRcdHVuaWZvcm1OYW1lOiBzdHJpbmcsXG5cdFx0dmFsdWU6IFVuaWZvcm1WYWx1ZVR5cGUsXG5cdFx0dHlwZTogVW5pZm9ybVR5cGUsXG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wsIHVuaWZvcm1zLCBlcnJvckNhbGxiYWNrIH0gPSB0aGlzO1xuXHRcdC8vIFNldCBhY3RpdmUgcHJvZ3JhbS5cblx0XHRnbC51c2VQcm9ncmFtKHByb2dyYW0pO1xuXG5cdFx0bGV0IGxvY2F0aW9uID0gdW5pZm9ybXNbdW5pZm9ybU5hbWVdPy5sb2NhdGlvbltwcm9ncmFtTmFtZV07XG5cdFx0Ly8gSW5pdCBhIGxvY2F0aW9uIGZvciBXZWJHTFByb2dyYW0gaWYgbmVlZGVkLlxuXHRcdGlmIChsb2NhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRjb25zdCBfbG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgdW5pZm9ybU5hbWUpO1xuXHRcdFx0aWYgKCFfbG9jYXRpb24pIHtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayhgQ291bGQgbm90IGluaXQgdW5pZm9ybSBcIiR7dW5pZm9ybU5hbWV9XCIgZm9yIHByb2dyYW0gXCIke3RoaXMubmFtZX1cIi5cbkNoZWNrIHRoYXQgdW5pZm9ybSBpcyBwcmVzZW50IGluIHNoYWRlciBjb2RlLCB1bnVzZWQgdW5pZm9ybXMgbWF5IGJlIHJlbW92ZWQgYnkgY29tcGlsZXIuXG5BbHNvIGNoZWNrIHRoYXQgdW5pZm9ybSB0eXBlIGluIHNoYWRlciBjb2RlIG1hdGNoZXMgdHlwZSAke3R5cGV9LlxuRXJyb3IgY29kZTogJHtnbC5nZXRFcnJvcigpfS5gKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0bG9jYXRpb24gPSBfbG9jYXRpb247XG5cdFx0XHQvLyBTYXZlIGxvY2F0aW9uIGZvciBmdXR1cmUgdXNlLlxuXHRcdFx0aWYgKHVuaWZvcm1zW3VuaWZvcm1OYW1lXSkge1xuXHRcdFx0XHR1bmlmb3Jtc1t1bmlmb3JtTmFtZV0ubG9jYXRpb25bcHJvZ3JhbU5hbWVdID0gbG9jYXRpb247XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHVuaWZvcm0uXG5cdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYkdMUmVuZGVyaW5nQ29udGV4dC91bmlmb3JtXG5cdFx0c3dpdGNoICh0eXBlKSB7XG5cdFx0XHRjYXNlIEZMT0FUXzFEX1VOSUZPUk06XG5cdFx0XHRcdGdsLnVuaWZvcm0xZihsb2NhdGlvbiwgdmFsdWUgYXMgbnVtYmVyKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIEZMT0FUXzJEX1VOSUZPUk06XG5cdFx0XHRcdGdsLnVuaWZvcm0yZnYobG9jYXRpb24sIHZhbHVlIGFzIG51bWJlcltdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIEZMT0FUXzNEX1VOSUZPUk06XG5cdFx0XHRcdGdsLnVuaWZvcm0zZnYobG9jYXRpb24sIHZhbHVlIGFzIG51bWJlcltdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIEZMT0FUXzREX1VOSUZPUk06XG5cdFx0XHRcdGdsLnVuaWZvcm00ZnYobG9jYXRpb24sIHZhbHVlIGFzIG51bWJlcltdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIElOVF8xRF9VTklGT1JNOlxuXHRcdFx0XHRnbC51bmlmb3JtMWkobG9jYXRpb24sIHZhbHVlIGFzIG51bWJlcik7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBJTlRfMkRfVU5JRk9STTpcblx0XHRcdFx0Z2wudW5pZm9ybTJpdihsb2NhdGlvbiwgdmFsdWUgYXMgbnVtYmVyW10pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgSU5UXzNEX1VOSUZPUk06XG5cdFx0XHRcdGdsLnVuaWZvcm0zaXYobG9jYXRpb24sIHZhbHVlIGFzIG51bWJlcltdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIElOVF80RF9VTklGT1JNOlxuXHRcdFx0XHRnbC51bmlmb3JtNGl2KGxvY2F0aW9uLCB2YWx1ZSBhcyBudW1iZXJbXSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHVuaWZvcm0gdHlwZSAke3R5cGV9IGZvciBHUFVQcm9ncmFtIFwiJHt0aGlzLm5hbWV9XCIuYCk7XG5cdFx0fVxuXHR9XG5cblx0c2V0VW5pZm9ybShcblx0XHR1bmlmb3JtTmFtZTogc3RyaW5nLFxuXHRcdHZhbHVlOiBVbmlmb3JtVmFsdWVUeXBlLFxuXHRcdGRhdGFUeXBlPzogVW5pZm9ybURhdGFUeXBlLFxuXHQpIHtcblx0XHRjb25zdCB7IGFjdGl2ZVByb2dyYW1zLCB1bmlmb3JtcyB9ID0gdGhpcztcblxuXHRcdGxldCB0eXBlID0gdW5pZm9ybXNbdW5pZm9ybU5hbWVdPy50eXBlO1xuXHRcdGlmIChkYXRhVHlwZSkge1xuXHRcdFx0Y29uc3QgdHlwZVBhcmFtID0gdGhpcy51bmlmb3JtVHlwZUZvclZhbHVlKHZhbHVlLCBkYXRhVHlwZSk7XG5cdFx0XHRpZiAodHlwZSA9PT0gdW5kZWZpbmVkKSB0eXBlID0gdHlwZVBhcmFtO1xuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdC8vIGNvbnNvbGUud2FybihgRG9uJ3QgbmVlZCB0byBwYXNzIGluIGRhdGFUeXBlIHRvIEdQVVByb2dyYW0uc2V0VW5pZm9ybSBmb3IgcHJldmlvdXNseSBpbml0ZWQgdW5pZm9ybSBcIiR7dW5pZm9ybU5hbWV9XCJgKTtcblx0XHRcdFx0Ly8gQ2hlY2sgdGhhdCB0eXBlcyBtYXRjaCBwcmV2aW91c2x5IHNldCB1bmlmb3JtLlxuXHRcdFx0XHRpZiAodHlwZSAhPT0gdHlwZVBhcmFtKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmlmb3JtIFwiJHt1bmlmb3JtTmFtZX1cIiBmb3IgR1BVUHJvZ3JhbSBcIiR7dGhpcy5uYW1lfVwiIGNhbm5vdCBjaGFuZ2UgZnJvbSB0eXBlICR7dHlwZX0gdG8gdHlwZSAke3R5cGVQYXJhbX0uYCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHR5cGUgZm9yIHVuaWZvcm0gXCIke3VuaWZvcm1OYW1lfVwiLCBwbGVhc2UgcGFzcyBpbiBkYXRhVHlwZSB0byBHUFVQcm9ncmFtLnNldFVuaWZvcm0gd2hlbiBpbml0aW5nIGEgbmV3IHVuaWZvcm0uYCk7XG5cdFx0fVxuXG5cdFx0aWYgKCF1bmlmb3Jtc1t1bmlmb3JtTmFtZV0pIHtcblx0XHRcdC8vIEluaXQgdW5pZm9ybSBpZiBuZWVkZWQuXG5cdFx0XHR1bmlmb3Jtc1t1bmlmb3JtTmFtZV0gPSB7IHR5cGUsIGxvY2F0aW9uOiB7fSwgdmFsdWUgfTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVXBkYXRlIHZhbHVlLlxuXHRcdFx0dW5pZm9ybXNbdW5pZm9ybU5hbWVdLnZhbHVlID0gdmFsdWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXBkYXRlIGFueSBhY3RpdmUgcHJvZ3JhbXMuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhY3RpdmVQcm9ncmFtcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgeyBwcm9ncmFtLCBwcm9ncmFtTmFtZSB9ID0gYWN0aXZlUHJvZ3JhbXNbaV07XG5cdFx0XHR0aGlzLnNldFByb2dyYW1Vbmlmb3JtKHByb2dyYW0sIHByb2dyYW1OYW1lLCB1bmlmb3JtTmFtZSwgdmFsdWUsIHR5cGUpO1xuXHRcdH1cblx0fTtcblxuXHRzZXRWZXJ0ZXhVbmlmb3JtKFxuXHRcdHByb2dyYW06IFdlYkdMUHJvZ3JhbSxcblx0XHR1bmlmb3JtTmFtZTogc3RyaW5nLFxuXHRcdHZhbHVlOiBVbmlmb3JtVmFsdWVUeXBlLFxuXHRcdGRhdGFUeXBlOiBVbmlmb3JtRGF0YVR5cGUsXG5cdCkge1xuXHRcdGNvbnN0IHR5cGUgPSB0aGlzLnVuaWZvcm1UeXBlRm9yVmFsdWUodmFsdWUsIGRhdGFUeXBlKTtcblx0XHRpZiAocHJvZ3JhbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ011c3QgcGFzcyBpbiB2YWxpZCBXZWJHTFByb2dyYW0gdG8gc2V0VmVydGV4VW5pZm9ybSwgZ290IHVuZGVmaW5lZC4nKTtcblx0XHR9XG5cdFx0bGV0IHByb2dyYW1OYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cdFx0aWYgKHByb2dyYW0gPT09IHRoaXMuX2RlZmF1bHRQcm9ncmFtKSB7XG5cdFx0XHRwcm9ncmFtTmFtZSA9IERFRkFVTFRfUFJPR1JBTV9OQU1FO1xuXHRcdH0gZWxzZSBpZiAocHJvZ3JhbSA9PT0gdGhpcy5fc2VnbWVudFByb2dyYW0pIHtcblx0XHRcdHByb2dyYW1OYW1lID0gU0VHTUVOVF9QUk9HUkFNX05BTUU7XG5cdFx0fSBlbHNlIGlmIChwcm9ncmFtID09PSB0aGlzLl9wb2ludHNQcm9ncmFtKSB7XG5cdFx0XHRwcm9ncmFtTmFtZSA9IFBPSU5UU19QUk9HUkFNX05BTUU7XG5cdFx0fSBlbHNlIGlmIChwcm9ncmFtID09PSB0aGlzLl92ZWN0b3JGaWVsZFByb2dyYW0pIHtcblx0XHRcdHByb2dyYW1OYW1lID0gVkVDVE9SX0ZJRUxEX1BST0dSQU1fTkFNRTtcblx0XHR9IGVsc2UgaWYgKHByb2dyYW0gPT09IHRoaXMuX2luZGV4ZWRMaW5lc1Byb2dyYW0pIHtcblx0XHRcdHByb2dyYW1OYW1lID0gSU5ERVhFRF9MSU5FU19QUk9HUkFNX05BTUU7XG5cdFx0fVxuXHRcdGlmIChwcm9ncmFtTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHZhbGlkIHByb2dyYW1OYW1lIGZvciBXZWJHTFByb2dyYW0uJyk7XG5cdFx0fVxuXHRcdHRoaXMuc2V0UHJvZ3JhbVVuaWZvcm0ocHJvZ3JhbSwgcHJvZ3JhbU5hbWUsIHVuaWZvcm1OYW1lLCB2YWx1ZSwgdHlwZSk7XG5cdH1cblxuXHRkZXN0cm95KCkge1xuXHRcdGNvbnN0IHsgZ2wsIGZyYWdtZW50U2hhZGVyLCBhY3RpdmVQcm9ncmFtcyB9ID0gdGhpcztcblx0XHQvLyBVbmJpbmQgYWxsIGdsIGRhdGEgYmVmb3JlIGRlbGV0aW5nLlxuXHRcdGFjdGl2ZVByb2dyYW1zLmZvckVhY2goKHsgcHJvZ3JhbSB9KSA9PiB7XG5cdFx0XHRnbC5kZWxldGVQcm9ncmFtKHByb2dyYW0pO1xuXHRcdH0pO1xuXHRcdC8vIEZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYkdMUmVuZGVyaW5nQ29udGV4dC9kZWxldGVTaGFkZXJcblx0XHQvLyBUaGlzIG1ldGhvZCBoYXMgbm8gZWZmZWN0IGlmIHRoZSBzaGFkZXIgaGFzIGFscmVhZHkgYmVlbiBkZWxldGVkXG5cdFx0Z2wuZGVsZXRlU2hhZGVyKGZyYWdtZW50U2hhZGVyKTtcblxuXHRcdGRlbGV0ZSB0aGlzLl9kZWZhdWx0UHJvZ3JhbTtcblx0XHRkZWxldGUgdGhpcy5fc2VnbWVudFByb2dyYW07XG5cdFx0ZGVsZXRlIHRoaXMuX3BvaW50c1Byb2dyYW07XG5cdFx0ZGVsZXRlIHRoaXMuX3ZlY3RvckZpZWxkUHJvZ3JhbTtcblx0XHRkZWxldGUgdGhpcy5faW5kZXhlZExpbmVzUHJvZ3JhbTtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0ZGVsZXRlIHRoaXMuZnJhZ21lbnRTaGFkZXI7XG5cblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0ZGVsZXRlIHRoaXMuZ2w7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGRlbGV0ZSB0aGlzLmVycm9yQ2FsbGJhY2s7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGRlbGV0ZSB0aGlzLnByb2dyYW07XG5cdH1cbn1cbiIsImltcG9ydCB7IHNhdmVBcyB9IGZyb20gJ2ZpbGUtc2F2ZXInO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgY2hhbmdlRHBpQmxvYiB9IGZyb20gJ2NoYW5nZWRwaSc7XG5pbXBvcnQgeyBEYXRhTGF5ZXIgfSBmcm9tICcuL0RhdGFMYXllcic7XG5pbXBvcnQge1xuXHREYXRhTGF5ZXJBcnJheVR5cGUsIERhdGFMYXllckZpbHRlclR5cGUsIERhdGFMYXllck51bUNvbXBvbmVudHMsIERhdGFMYXllclR5cGUsIERhdGFMYXllcldyYXBUeXBlLFxuXHRGTE9BVCwgSEFMRl9GTE9BVCwgVU5TSUdORURfQllURSwgQllURSwgVU5TSUdORURfU0hPUlQsIFNIT1JULCBVTlNJR05FRF9JTlQsIElOVCxcblx0VW5pZm9ybURhdGFUeXBlLCBVbmlmb3JtVmFsdWVUeXBlLCBHTFNMVmVyc2lvbiwgR0xTTDEsIEdMU0wzLCBDTEFNUF9UT19FREdFLCBUZXh0dXJlRm9ybWF0VHlwZSwgTkVBUkVTVCwgUkdCQSwgVGV4dHVyZURhdGFUeXBlLFxufSBmcm9tICcuL0NvbnN0YW50cyc7XG5pbXBvcnQgeyBHUFVQcm9ncmFtIH0gZnJvbSAnLi9HUFVQcm9ncmFtJztcbmltcG9ydCB7IFdlYkdMUmVuZGVyZXIsIFRleHR1cmUsIFZlY3RvcjQgfSBmcm9tICd0aHJlZSc7Ly8gSnVzdCBpbXBvcnRpbmcgdGhlIHR5cGVzIGhlcmUuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzL1ZlY3RvcjQnO1xuaW1wb3J0IHsgaXNXZWJHTDIsIGlzUG93ZXJPZjIgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGdldEZsb2F0MTYgfSBmcm9tICdAcGV0YW1vcmlrZW4vZmxvYXQxNic7XG5pbXBvcnQge1xuXHRpc1N0cmluZywgaXNWYWxpZEZpbHRlclR5cGUsIGlzVmFsaWRUZXh0dXJlRGF0YVR5cGUsIGlzVmFsaWRUZXh0dXJlRm9ybWF0VHlwZSwgaXNWYWxpZFdyYXBUeXBlLFxuXHR2YWxpZEZpbHRlclR5cGVzLCB2YWxpZFRleHR1cmVEYXRhVHlwZXMsIHZhbGlkVGV4dHVyZUZvcm1hdFR5cGVzLCB2YWxpZFdyYXBUeXBlcyB9IGZyb20gJy4vQ2hlY2tzJztcblxuY29uc3QgREVGQVVMVF9DSVJDTEVfTlVNX1NFR01FTlRTID0gMTg7Ly8gTXVzdCBiZSBkaXZpc2libGUgYnkgNiB0byB3b3JrIHdpdGggc3RlcFNlZ21lbnQoKS5cblxudHlwZSBFcnJvckNhbGxiYWNrID0gKG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZDtcblxuZXhwb3J0IGNsYXNzIFdlYkdMQ29tcHV0ZSB7XG5cdHJlYWRvbmx5IGdsITogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dDtcblx0cmVhZG9ubHkgZ2xzbFZlcnNpb24hOiBHTFNMVmVyc2lvbjtcblx0Ly8gVGhlc2Ugd2lkdGggYW5kIGhlaWdodCBhcmUgdGhlIGN1cnJlbnQgY2FudmFzIGF0IGZ1bGwgcmVzLlxuXHRwcml2YXRlIHdpZHRoITogbnVtYmVyO1xuXHRwcml2YXRlIGhlaWdodCE6IG51bWJlcjtcblxuXHRwcml2YXRlIGVycm9yU3RhdGUgPSBmYWxzZTtcblx0cHJpdmF0ZSByZWFkb25seSBlcnJvckNhbGxiYWNrOiBFcnJvckNhbGxiYWNrO1xuXG5cdC8vIFNhdmUgdGhyZWVqcyByZW5kZXJlciBpZiBwYXNzZWQgaW4uXG5cdHByaXZhdGUgcmVuZGVyZXI/OiBXZWJHTFJlbmRlcmVyO1xuXHRwcml2YXRlIHJlYWRvbmx5IG1heE51bVRleHR1cmVzITogbnVtYmVyO1xuXHRcblx0Ly8gUHJlY29tcHV0ZWQgYnVmZmVycyAoaW5pdGVkIGFzIG5lZWRlZCkuXG5cdHByaXZhdGUgX3F1YWRQb3NpdGlvbnNCdWZmZXI/OiBXZWJHTEJ1ZmZlcjtcblx0cHJpdmF0ZSBfYm91bmRhcnlQb3NpdGlvbnNCdWZmZXI/OiBXZWJHTEJ1ZmZlcjtcblx0Ly8gU3RvcmUgbXVsdGlwbGUgY2lyY2xlIHBvc2l0aW9ucyBidWZmZXJzIGZvciB2YXJpb3VzIG51bSBzZWdtZW50cywgdXNlIG51bVNlZ21lbnRzIGFzIGtleS5cblx0cHJpdmF0ZSBfY2lyY2xlUG9zaXRpb25zQnVmZmVyOiB7IFtrZXk6IG51bWJlcl06IFdlYkdMQnVmZmVyIH0gPSB7fTtcblxuXHRwcml2YXRlIHBvaW50SW5kZXhBcnJheT86IEZsb2F0MzJBcnJheTtcblx0cHJpdmF0ZSBwb2ludEluZGV4QnVmZmVyPzogV2ViR0xCdWZmZXI7XG5cdHByaXZhdGUgdmVjdG9yRmllbGRJbmRleEFycmF5PzogRmxvYXQzMkFycmF5O1xuXHRwcml2YXRlIHZlY3RvckZpZWxkSW5kZXhCdWZmZXI/OiBXZWJHTEJ1ZmZlcjtcblx0cHJpdmF0ZSBpbmRleGVkTGluZXNJbmRleEJ1ZmZlcj86IFdlYkdMQnVmZmVyO1xuXG5cdC8vIFByb2dyYW1zIGZvciBjb3B5aW5nIGRhdGEgKHRoZXNlIGFyZSBuZWVkZWQgZm9yIHJlbmRlcmluZyBwYXJ0aWFsIHNjcmVlbiBnZW9tZXRyaWVzKS5cblx0cHJpdmF0ZSByZWFkb25seSBjb3B5RmxvYXRQcm9ncmFtITogR1BVUHJvZ3JhbTtcblx0cHJpdmF0ZSByZWFkb25seSBjb3B5SW50UHJvZ3JhbSE6IEdQVVByb2dyYW07XG5cdHByaXZhdGUgcmVhZG9ubHkgY29weVVpbnRQcm9ncmFtITogR1BVUHJvZ3JhbTtcblxuXHQvLyBPdGhlciB1dGlsIHByb2dyYW1zLlxuXHRwcml2YXRlIF9zaW5nbGVDb2xvclByb2dyYW0/OiBHUFVQcm9ncmFtO1xuXHRwcml2YXRlIF9zaW5nbGVDb2xvcldpdGhXcmFwQ2hlY2tQcm9ncmFtPzogR1BVUHJvZ3JhbTtcblxuXHRzdGF0aWMgaW5pdFdpdGhUaHJlZVJlbmRlcmVyKFxuXHRcdHJlbmRlcmVyOiBXZWJHTFJlbmRlcmVyLFxuXHRcdHBhcmFtczoge1xuXHRcdFx0Z2xzbFZlcnNpb24/OiBHTFNMVmVyc2lvbixcblx0XHR9LFxuXHRcdGVycm9yQ2FsbGJhY2s/OiBFcnJvckNhbGxiYWNrLFxuXHQpIHtcblx0XHRyZXR1cm4gbmV3IFdlYkdMQ29tcHV0ZShcblx0XHRcdHtcblx0XHRcdFx0Y2FudmFzOiByZW5kZXJlci5kb21FbGVtZW50LFxuXHRcdFx0XHRjb250ZXh0OiByZW5kZXJlci5nZXRDb250ZXh0KCksXG5cdFx0XHRcdC4uLnBhcmFtcyxcblx0XHRcdH0sXG5cdFx0XHRlcnJvckNhbGxiYWNrLFxuXHRcdFx0cmVuZGVyZXIsXG5cdFx0KTtcblx0fVxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHBhcmFtczoge1xuXHRcdFx0Y2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCxcblx0XHRcdGNvbnRleHQ/OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0IHwgbnVsbCxcblx0XHRcdGFudGlhbGlhcz86IGJvb2xlYW4sXG5cdFx0XHRnbHNsVmVyc2lvbj86IEdMU0xWZXJzaW9uLFxuXHRcdH0sXG5cdFx0Ly8gT3B0aW9uYWxseSBwYXNzIGluIGFuIGVycm9yIGNhbGxiYWNrIGluIGNhc2Ugd2Ugd2FudCB0byBoYW5kbGUgZXJyb3JzIHJlbGF0ZWQgdG8gd2ViZ2wgc3VwcG9ydC5cblx0XHQvLyBlLmcuIHRocm93IHVwIGEgbW9kYWwgdGVsbGluZyB1c2VyIHRoaXMgd2lsbCBub3Qgd29yayBvbiB0aGVpciBkZXZpY2UuXG5cdFx0ZXJyb3JDYWxsYmFjazogRXJyb3JDYWxsYmFjayA9IChtZXNzYWdlOiBzdHJpbmcpID0+IHsgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpIH0sXG5cdFx0cmVuZGVyZXI/OiBXZWJHTFJlbmRlcmVyLFxuXHQpIHtcblx0XHQvLyBDaGVjayBwYXJhbXMuXG5cdFx0Y29uc3QgdmFsaWRLZXlzID0gWydjYW52YXMnLCAnY29udGV4dCcsICdhbnRpYWxpYXMnLCAnZ2xzbFZlcnNpb24nXTtcblx0XHRPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goa2V5ID0+IHtcblx0XHRcdGlmICh2YWxpZEtleXMuaW5kZXhPZihrZXkpIDwgMCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQga2V5ICR7a2V5fSBwYXNzZWQgdG8gV2ViR0xDb21wdXRlLmNvbnN0cnVjdG9yLiAgVmFsaWQga2V5cyBhcmUgJHt2YWxpZEtleXMuam9pbignLCAnKX0uYCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0Ly8gU2F2ZSBjYWxsYmFjayBpbiBjYXNlIHdlIHJ1biBpbnRvIGFuIGVycm9yLlxuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdHRoaXMuZXJyb3JDYWxsYmFjayA9IChtZXNzYWdlOiBzdHJpbmcpID0+IHtcblx0XHRcdGlmIChzZWxmLmVycm9yU3RhdGUpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0c2VsZi5lcnJvclN0YXRlID0gdHJ1ZTtcblx0XHRcdGVycm9yQ2FsbGJhY2sobWVzc2FnZSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgeyBjYW52YXMgfSA9IHBhcmFtcztcblx0XHRsZXQgZ2wgPSBwYXJhbXMuY29udGV4dDtcblxuXHRcdC8vIEluaXQgR0wuXG5cdFx0aWYgKCFnbCkge1xuXHRcdFx0Y29uc3Qgb3B0aW9uczogYW55ID0ge307XG5cdFx0XHRpZiAocGFyYW1zLmFudGlhbGlhcyAhPT0gdW5kZWZpbmVkKSBvcHRpb25zLmFudGlhbGlhcyA9IHBhcmFtcy5hbnRpYWxpYXM7XG5cdFx0XHQvLyBJbml0IGEgZ2wgY29udGV4dCBpZiBub3QgcGFzc2VkIGluLlxuXHRcdFx0Z2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wyJywgb3B0aW9ucykgIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgfCBudWxsXG5cdFx0XHRcdHx8IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcsIG9wdGlvbnMpICBhcyBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBudWxsXG5cdFx0XHRcdHx8IGNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnLCBvcHRpb25zKSAgYXMgV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgbnVsbDtcblx0XHRcdGlmIChnbCA9PT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLmVycm9yQ2FsbGJhY2soJ1VuYWJsZSB0byBpbml0aWFsaXplIFdlYkdMIGNvbnRleHQuJyk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGlzV2ViR0wyKGdsKSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ1VzaW5nIFdlYkdMIDIuMCBjb250ZXh0LicpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLmxvZygnVXNpbmcgV2ViR0wgMS4wIGNvbnRleHQuJyk7XG5cdFx0fVxuXHRcdHRoaXMuZ2wgPSBnbDtcblx0XHR0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG5cblx0XHQvLyBTYXZlIGdsc2wgdmVyc2lvbiwgZGVmYXVsdCB0byAxLnguXG5cdFx0Y29uc3QgZ2xzbFZlcnNpb24gPSBwYXJhbXMuZ2xzbFZlcnNpb24gPT09IHVuZGVmaW5lZCA/IEdMU0wxIDogcGFyYW1zLmdsc2xWZXJzaW9uO1xuXHRcdHRoaXMuZ2xzbFZlcnNpb24gPSBnbHNsVmVyc2lvbjtcblx0XHRpZiAoIWlzV2ViR0wyKGdsKSAmJiBnbHNsVmVyc2lvbiA9PT0gR0xTTDMpIHtcblx0XHRcdGNvbnNvbGUud2FybignR0xTTDMueCBpcyBpbmNvbXBhdGlibGUgd2l0aCBXZWJHTDEuMCBjb250ZXh0cy4nKTtcblx0XHR9XG5cblx0XHQvLyBHTCBzZXR1cC5cblx0XHQvLyBEaXNhYmxlIGRlcHRoIHRlc3RpbmcgZ2xvYmFsbHkuXG5cdFx0Z2wuZGlzYWJsZShnbC5ERVBUSF9URVNUKTtcblx0XHQvLyBTZXQgdW5wYWNrIGFsaWdubWVudCB0byAxIHNvIHdlIGNhbiBoYXZlIHRleHR1cmVzIG9mIGFyYml0cmFyeSBkaW1lbnNpb25zLlxuXHRcdC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzUxNTgyMjgyL2Vycm9yLXdoZW4tY3JlYXRpbmctdGV4dHVyZXMtaW4td2ViZ2wtd2l0aC10aGUtcmdiLWZvcm1hdFxuXHRcdGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19BTElHTk1FTlQsIDEpO1xuXHRcdC8vIFRPRE86IGxvb2sgaW50byBtb3JlIG9mIHRoZXNlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2ViR0xSZW5kZXJpbmdDb250ZXh0L3BpeGVsU3RvcmVpXG5cdFx0Ly8gLy8gU29tZSBpbXBsZW1lbnRhdGlvbnMgb2YgSFRNTENhbnZhc0VsZW1lbnQncyBvciBPZmZzY3JlZW5DYW52YXMncyBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgc3RvcmUgY29sb3IgdmFsdWVzXG5cdFx0Ly8gLy8gaW50ZXJuYWxseSBpbiBwcmVtdWx0aXBsaWVkIGZvcm0uIElmIHN1Y2ggYSBjYW52YXMgaXMgdXBsb2FkZWQgdG8gYSBXZWJHTCB0ZXh0dXJlIHdpdGggdGhlXG5cdFx0Ly8gLy8gVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIHBpeGVsIHN0b3JhZ2UgcGFyYW1ldGVyIHNldCB0byBmYWxzZSwgdGhlIGNvbG9yIGNoYW5uZWxzIHdpbGwgaGF2ZSB0byBiZSB1bi1tdWx0aXBsaWVkXG5cdFx0Ly8gLy8gYnkgdGhlIGFscGhhIGNoYW5uZWwsIHdoaWNoIGlzIGEgbG9zc3kgb3BlcmF0aW9uLiBUaGUgV2ViR0wgaW1wbGVtZW50YXRpb24gdGhlcmVmb3JlIGNhbiBub3QgZ3VhcmFudGVlIHRoYXQgY29sb3JzXG5cdFx0Ly8gLy8gd2l0aCBhbHBoYSA8IDEuMCB3aWxsIGJlIHByZXNlcnZlZCBsb3NzbGVzc2x5IHdoZW4gZmlyc3QgZHJhd24gdG8gYSBjYW52YXMgdmlhIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCBhbmQgdGhlblxuXHRcdC8vIC8vIHVwbG9hZGVkIHRvIGEgV2ViR0wgdGV4dHVyZSB3aGVuIHRoZSBVTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wgcGl4ZWwgc3RvcmFnZSBwYXJhbWV0ZXIgaXMgc2V0IHRvIGZhbHNlLlxuXHRcdC8vIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgdHJ1ZSk7XG5cblx0XHQvLyBJbml0IHByb2dyYW1zIHRvIHBhc3MgdmFsdWVzIGZyb20gb25lIHRleHR1cmUgdG8gYW5vdGhlci5cblx0XHR0aGlzLmNvcHlGbG9hdFByb2dyYW0gPSB0aGlzLmluaXRQcm9ncmFtKHtcblx0XHRcdG5hbWU6ICdjb3B5RmxvYXQnLFxuXHRcdFx0ZnJhZ21lbnRTaGFkZXI6IGdsc2xWZXJzaW9uID09PSBHTFNMMyA/IHJlcXVpcmUoJy4vZ2xzbF8zL0NvcHlGbG9hdEZyYWdTaGFkZXIuZ2xzbCcpIDogcmVxdWlyZSgnLi9nbHNsXzEvQ29weUZyYWdTaGFkZXIuZ2xzbCcpLFxuXHRcdFx0dW5pZm9ybXM6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRuYW1lOiAndV9zdGF0ZScsXG5cdFx0XHRcdFx0XHR2YWx1ZTogMCxcblx0XHRcdFx0XHRcdGRhdGFUeXBlOiBJTlQsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSxcblx0XHRcdH0sXG5cdFx0KTtcblx0XHRpZiAoZ2xzbFZlcnNpb24gPT09IEdMU0wzKSB7XG5cdFx0XHR0aGlzLmNvcHlJbnRQcm9ncmFtID0gdGhpcy5pbml0UHJvZ3JhbSh7XG5cdFx0XHRcdG5hbWU6ICdjb3B5SW50Jyxcblx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IHJlcXVpcmUoJy4vZ2xzbF8zL0NvcHlJbnRGcmFnU2hhZGVyLmdsc2wnKSxcblx0XHRcdFx0dW5pZm9ybXM6IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bmFtZTogJ3Vfc3RhdGUnLFxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogMCxcblx0XHRcdFx0XHRcdFx0ZGF0YVR5cGU6IElOVCxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0fSxcblx0XHRcdCk7XG5cdFx0XHR0aGlzLmNvcHlVaW50UHJvZ3JhbSA9IHRoaXMuaW5pdFByb2dyYW0oe1xuXHRcdFx0XHRuYW1lOiAnY29weVVpbnQnLFxuXHRcdFx0XHRmcmFnbWVudFNoYWRlcjogcmVxdWlyZSgnLi9nbHNsXzMvQ29weVVpbnRGcmFnU2hhZGVyLmdsc2wnKSxcblx0XHRcdFx0dW5pZm9ybXM6IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bmFtZTogJ3Vfc3RhdGUnLFxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogMCxcblx0XHRcdFx0XHRcdFx0ZGF0YVR5cGU6IElOVCxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0fSxcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuY29weUludFByb2dyYW0gPSB0aGlzLmNvcHlGbG9hdFByb2dyYW07XG5cdFx0XHR0aGlzLmNvcHlVaW50UHJvZ3JhbSA9IHRoaXMuY29weUZsb2F0UHJvZ3JhbTtcblx0XHR9XG5cblx0XHQvLyBVbmJpbmQgYWN0aXZlIGJ1ZmZlci5cblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgbnVsbCk7XG5cblx0XHQvLyBDYW52YXMgc2V0dXAuXG5cdFx0dGhpcy5vblJlc2l6ZShjYW52YXMpO1xuXG5cdFx0Ly8gTG9nIG51bWJlciBvZiB0ZXh0dXJlcyBhdmFpbGFibGUuXG5cdFx0dGhpcy5tYXhOdW1UZXh0dXJlcyA9IHRoaXMuZ2wuZ2V0UGFyYW1ldGVyKHRoaXMuZ2wuTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMpO1xuXHRcdGNvbnNvbGUubG9nKGAke3RoaXMubWF4TnVtVGV4dHVyZXN9IHRleHR1cmVzIG1heC5gKTtcblx0fVxuXG5cdHByaXZhdGUgZ2V0IHNpbmdsZUNvbG9yUHJvZ3JhbSgpIHtcblx0XHRpZiAodGhpcy5fc2luZ2xlQ29sb3JQcm9ncmFtID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnN0IHByb2dyYW0gPSB0aGlzLmluaXRQcm9ncmFtKHtcblx0XHRcdFx0bmFtZTogJ3NpbmdsZUNvbG9yJyxcblx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IHRoaXMuZ2xzbFZlcnNpb24gPT09IEdMU0wzID8gcmVxdWlyZSgnLi9nbHNsXzMvU2luZ2xlQ29sb3JGcmFnU2hhZGVyLmdsc2wnKSA6IHJlcXVpcmUoJy4vZ2xzbF8xL1NpbmdsZUNvbG9yRnJhZ1NoYWRlci5nbHNsJyksXG5cdFx0XHR9KTtcblx0XHRcdHRoaXMuX3NpbmdsZUNvbG9yUHJvZ3JhbSA9IHByb2dyYW07XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLl9zaW5nbGVDb2xvclByb2dyYW07XG5cdH1cblxuXHRwcml2YXRlIGdldCBzaW5nbGVDb2xvcldpdGhXcmFwQ2hlY2tQcm9ncmFtKCkge1xuXHRcdGlmICh0aGlzLl9zaW5nbGVDb2xvcldpdGhXcmFwQ2hlY2tQcm9ncmFtID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnN0IHByb2dyYW0gPSB0aGlzLmluaXRQcm9ncmFtKHtcblx0XHRcdFx0bmFtZTogJ3NpbmdsZUNvbG9yV2l0aFdyYXBDaGVjaycsXG5cdFx0XHRcdGZyYWdtZW50U2hhZGVyOiB0aGlzLmdsc2xWZXJzaW9uID09PSBHTFNMMyA/IHJlcXVpcmUoJy4vZ2xzbF8zL1NpbmdsZUNvbG9yV2l0aFdyYXBDaGVja0ZyYWdTaGFkZXIuZ2xzbCcpIDogcmVxdWlyZSgnLi9nbHNsXzEvU2luZ2xlQ29sb3JXaXRoV3JhcENoZWNrRnJhZ1NoYWRlci5nbHNsJyksXG5cdFx0XHR9KTtcblx0XHRcdHRoaXMuX3NpbmdsZUNvbG9yV2l0aFdyYXBDaGVja1Byb2dyYW0gPSBwcm9ncmFtO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5fc2luZ2xlQ29sb3JXaXRoV3JhcENoZWNrUHJvZ3JhbTtcblx0fVxuXG5cdGlzV2ViR0wyKCkge1xuXHRcdHJldHVybiBpc1dlYkdMMih0aGlzLmdsKTtcblx0fVxuXG5cdHByaXZhdGUgZ2V0IHF1YWRQb3NpdGlvbnNCdWZmZXIoKSB7XG5cdFx0aWYgKHRoaXMuX3F1YWRQb3NpdGlvbnNCdWZmZXIgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29uc3QgZnNRdWFkUG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheShbIC0xLCAtMSwgMSwgLTEsIC0xLCAxLCAxLCAxIF0pO1xuXHRcdFx0dGhpcy5fcXVhZFBvc2l0aW9uc0J1ZmZlciA9IHRoaXMuaW5pdFZlcnRleEJ1ZmZlcihmc1F1YWRQb3NpdGlvbnMpITtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuX3F1YWRQb3NpdGlvbnNCdWZmZXIhO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXQgYm91bmRhcnlQb3NpdGlvbnNCdWZmZXIoKSB7XG5cdFx0aWYgKHRoaXMuX2JvdW5kYXJ5UG9zaXRpb25zQnVmZmVyID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnN0IGJvdW5kYXJ5UG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheShbIC0xLCAtMSwgMSwgLTEsIDEsIDEsIC0xLCAxLCAtMSwgLTEgXSk7XG5cdFx0XHR0aGlzLl9ib3VuZGFyeVBvc2l0aW9uc0J1ZmZlciA9IHRoaXMuaW5pdFZlcnRleEJ1ZmZlcihib3VuZGFyeVBvc2l0aW9ucykhO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5fYm91bmRhcnlQb3NpdGlvbnNCdWZmZXIhO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXRDaXJjbGVQb3NpdGlvbnNCdWZmZXIobnVtU2VnbWVudHM6IG51bWJlcikge1xuXHRcdGlmICh0aGlzLl9jaXJjbGVQb3NpdGlvbnNCdWZmZXJbbnVtU2VnbWVudHNdID09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29uc3QgdW5pdENpcmNsZVBvaW50cyA9IFswLCAwXTtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDw9IG51bVNlZ21lbnRzOyBpKyspIHtcblx0XHRcdFx0dW5pdENpcmNsZVBvaW50cy5wdXNoKFxuXHRcdFx0XHRcdE1hdGguY29zKDIgKiBNYXRoLlBJICogaSAvIG51bVNlZ21lbnRzKSxcblx0XHRcdFx0XHRNYXRoLnNpbigyICogTWF0aC5QSSAqIGkgLyBudW1TZWdtZW50cyksXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBjaXJjbGVQb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KHVuaXRDaXJjbGVQb2ludHMpO1xuXHRcdFx0Y29uc3QgYnVmZmVyID0gdGhpcy5pbml0VmVydGV4QnVmZmVyKGNpcmNsZVBvc2l0aW9ucykhO1xuXHRcdFx0dGhpcy5fY2lyY2xlUG9zaXRpb25zQnVmZmVyW251bVNlZ21lbnRzXSA9IGJ1ZmZlcjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuX2NpcmNsZVBvc2l0aW9uc0J1ZmZlcltudW1TZWdtZW50c107XG5cdH1cblxuXHRwcml2YXRlIGluaXRWZXJ0ZXhCdWZmZXIoXG5cdFx0ZGF0YTogRmxvYXQzMkFycmF5LFxuXHQpIHtcblx0XHRjb25zdCB7IGVycm9yQ2FsbGJhY2ssIGdsIH0gPSB0aGlzO1xuXHRcdGNvbnN0IGJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuXHRcdGlmICghYnVmZmVyKSB7XG5cdFx0XHRlcnJvckNhbGxiYWNrKCdVbmFibGUgdG8gYWxsb2NhdGUgZ2wgYnVmZmVyLicpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyKTtcblx0XHQvLyBBZGQgYnVmZmVyIGRhdGEuXG5cdFx0Z2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIGRhdGEsIGdsLlNUQVRJQ19EUkFXKTtcblx0XHRyZXR1cm4gYnVmZmVyO1xuXHR9XG5cblx0aW5pdFByb2dyYW0oXG5cdFx0cGFyYW1zOiB7XG5cdFx0XHRuYW1lOiBzdHJpbmcsXG5cdFx0XHRmcmFnbWVudFNoYWRlcjogc3RyaW5nIHwgV2ViR0xTaGFkZXIsXG5cdFx0XHR1bmlmb3Jtcz86IHtcblx0XHRcdFx0bmFtZTogc3RyaW5nLFxuXHRcdFx0XHR2YWx1ZTogVW5pZm9ybVZhbHVlVHlwZSxcblx0XHRcdFx0ZGF0YVR5cGU6IFVuaWZvcm1EYXRhVHlwZSxcblx0XHRcdH1bXSxcblx0XHRcdGRlZmluZXM/OiB7XG5cdFx0XHRcdFtrZXkgOiBzdHJpbmddOiBzdHJpbmcsXG5cdFx0XHR9LFxuXHRcdH0sXG5cdCkge1xuXHRcdC8vIENoZWNrIHBhcmFtcy5cblx0XHRjb25zdCB2YWxpZEtleXMgPSBbJ25hbWUnLCAnZnJhZ21lbnRTaGFkZXInLCAndW5pZm9ybXMnLCAnZGVmaW5lcyddO1xuXHRcdE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaChrZXkgPT4ge1xuXHRcdFx0aWYgKHZhbGlkS2V5cy5pbmRleE9mKGtleSkgPCAwKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBrZXkgJHtrZXl9IHBhc3NlZCB0byBXZWJHTENvbXB1dGUuaW5pdFByb2dyYW0gd2l0aCBuYW1lICR7cGFyYW1zLm5hbWV9LiAgVmFsaWQga2V5cyBhcmUgJHt2YWxpZEtleXMuam9pbignLCAnKX0uYCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0Y29uc3QgeyBnbCwgZXJyb3JDYWxsYmFjaywgZ2xzbFZlcnNpb24gfSA9IHRoaXM7XG5cdFx0cmV0dXJuIG5ldyBHUFVQcm9ncmFtKFxuXHRcdFx0e1xuXHRcdFx0XHQuLi5wYXJhbXMsXG5cdFx0XHRcdGdsLFxuXHRcdFx0XHRlcnJvckNhbGxiYWNrLFxuXHRcdFx0XHRnbHNsVmVyc2lvbixcblx0XHRcdH0sXG5cdFx0KTtcblx0fTtcblxuXHRpbml0RGF0YUxheWVyKFxuXHRcdHBhcmFtczoge1xuXHRcdFx0bmFtZTogc3RyaW5nLFxuXHRcdFx0ZGltZW5zaW9uczogbnVtYmVyIHwgW251bWJlciwgbnVtYmVyXSxcblx0XHRcdHR5cGU6IERhdGFMYXllclR5cGUsXG5cdFx0XHRudW1Db21wb25lbnRzOiBEYXRhTGF5ZXJOdW1Db21wb25lbnRzLFxuXHRcdFx0ZGF0YT86IERhdGFMYXllckFycmF5VHlwZSxcblx0XHRcdGZpbHRlcj86IERhdGFMYXllckZpbHRlclR5cGUsXG5cdFx0XHR3cmFwUz86IERhdGFMYXllcldyYXBUeXBlLFxuXHRcdFx0d3JhcFQ/OiBEYXRhTGF5ZXJXcmFwVHlwZSxcblx0XHRcdHdyaXRhYmxlPzogYm9vbGVhbixcblx0XHRcdG51bUJ1ZmZlcnM/OiBudW1iZXIsXG5cdFx0fSxcblx0KSB7XG5cdFx0Ly8gQ2hlY2sgcGFyYW1zLlxuXHRcdGNvbnN0IHZhbGlkS2V5cyA9IFsnbmFtZScsICdkaW1lbnNpb25zJywgJ3R5cGUnLCAnbnVtQ29tcG9uZW50cycsICdkYXRhJywgJ2ZpbHRlcicsICd3cmFwUycsICd3cmFwVCcsICd3cml0YWJsZScsICdudW1CdWZmZXJzJ107XG5cdFx0T2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0XHRpZiAodmFsaWRLZXlzLmluZGV4T2Yoa2V5KSA8IDApIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGtleSAke2tleX0gcGFzc2VkIHRvIFdlYkdMQ29tcHV0ZS5pbml0RGF0YUxheWVyIHdpdGggbmFtZSAke3BhcmFtcy5uYW1lfS4gIFZhbGlkIGtleXMgYXJlICR7dmFsaWRLZXlzLmpvaW4oJywgJyl9LmApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGNvbnN0IHsgZ2wsIGVycm9yQ2FsbGJhY2ssIGdsc2xWZXJzaW9uIH0gPSB0aGlzO1xuXHRcdHJldHVybiBuZXcgRGF0YUxheWVyKHtcblx0XHRcdC4uLnBhcmFtcyxcblx0XHRcdGdsLFxuXHRcdFx0Z2xzbFZlcnNpb24sXG5cdFx0XHRlcnJvckNhbGxiYWNrLFxuXHRcdH0pO1xuXHR9O1xuXG5cdGluaXRUZXh0dXJlKFxuXHRcdHBhcmFtczoge1xuXHRcdFx0bmFtZTogc3RyaW5nLFxuXHRcdFx0dXJsOiBzdHJpbmcsXG5cdFx0XHRmaWx0ZXI/OiBEYXRhTGF5ZXJGaWx0ZXJUeXBlLFxuXHRcdFx0d3JhcFM/OiBEYXRhTGF5ZXJXcmFwVHlwZSxcblx0XHRcdHdyYXBUPzogRGF0YUxheWVyV3JhcFR5cGUsXG5cdFx0XHRmb3JtYXQ/OiBUZXh0dXJlRm9ybWF0VHlwZSxcblx0XHRcdHR5cGU/OiBUZXh0dXJlRGF0YVR5cGUsXG5cdFx0XHRvbkxvYWQ/OiAodGV4dHVyZTogV2ViR0xUZXh0dXJlKSA9PiB2b2lkLFxuXHRcdH0sXG5cdCkge1xuXHRcdC8vIENoZWNrIHBhcmFtcy5cblx0XHRjb25zdCB2YWxpZEtleXMgPSBbJ25hbWUnLCAndXJsJywgJ2ZpbHRlcicsICd3cmFwUycsICd3cmFwVCcsICdmb3JtYXQnLCAndHlwZScsICdvbkxvYWQnXTtcblx0XHRPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goa2V5ID0+IHtcblx0XHRcdGlmICh2YWxpZEtleXMuaW5kZXhPZihrZXkpIDwgMCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQga2V5ICR7a2V5fSBwYXNzZWQgdG8gV2ViR0xDb21wdXRlLmluaXRUZXh0dXJlIHdpdGggbmFtZSAke3BhcmFtcy5uYW1lfS4gIFZhbGlkIGtleXMgYXJlICR7dmFsaWRLZXlzLmpvaW4oJywgJyl9LmApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGNvbnN0IHsgdXJsLCBuYW1lIH0gPSBwYXJhbXM7XG5cdFx0aWYgKCFpc1N0cmluZyh1cmwpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIFdlYkdMQ29tcHV0ZS5pbml0VGV4dHVyZSBwYXJhbXMgdG8gaGF2ZSB1cmwgb2YgdHlwZSBzdHJpbmcsIGdvdCAke3VybH0gb2YgdHlwZSAke3R5cGVvZiB1cmx9LmApXG5cdFx0fVxuXHRcdGlmICghaXNTdHJpbmcobmFtZSkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgV2ViR0xDb21wdXRlLmluaXRUZXh0dXJlIHBhcmFtcyB0byBoYXZlIG5hbWUgb2YgdHlwZSBzdHJpbmcsIGdvdCAke25hbWV9IG9mIHR5cGUgJHt0eXBlb2YgbmFtZX0uYClcblx0XHR9XG5cblx0XHQvLyBHZXQgZmlsdGVyIHR5cGUsIGRlZmF1bHQgdG8gbmVhcmVzdC5cblx0XHRjb25zdCBmaWx0ZXIgPSBwYXJhbXMuZmlsdGVyICE9PSB1bmRlZmluZWQgPyBwYXJhbXMuZmlsdGVyIDogTkVBUkVTVDtcblx0XHRpZiAoIWlzVmFsaWRGaWx0ZXJUeXBlKGZpbHRlcikpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBmaWx0ZXI6ICR7ZmlsdGVyfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLCBtdXN0IGJlICR7dmFsaWRGaWx0ZXJUeXBlcy5qb2luKCcsICcpfS5gKTtcblx0XHR9XG5cblx0XHQvLyBHZXQgd3JhcCB0eXBlcywgZGVmYXVsdCB0byBjbGFtcCB0byBlZGdlLlxuXHRcdGNvbnN0IHdyYXBTID0gcGFyYW1zLndyYXBTICE9PSB1bmRlZmluZWQgPyBwYXJhbXMud3JhcFMgOiBDTEFNUF9UT19FREdFO1xuXHRcdGlmICghaXNWYWxpZFdyYXBUeXBlKHdyYXBTKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHdyYXBTOiAke3dyYXBTfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLCBtdXN0IGJlICR7dmFsaWRXcmFwVHlwZXMuam9pbignLCAnKX0uYCk7XG5cdFx0fVxuXHRcdGNvbnN0IHdyYXBUID0gcGFyYW1zLndyYXBUICE9PSB1bmRlZmluZWQgPyBwYXJhbXMud3JhcFQgOiBDTEFNUF9UT19FREdFO1xuXHRcdGlmICghaXNWYWxpZFdyYXBUeXBlKHdyYXBUKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHdyYXBUOiAke3dyYXBUfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLCBtdXN0IGJlICR7dmFsaWRXcmFwVHlwZXMuam9pbignLCAnKX0uYCk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGltYWdlIGZvcm1hdCB0eXBlLCBkZWZhdWx0IHRvIHJnYmEuXG5cdFx0Y29uc3QgZm9ybWF0ID0gcGFyYW1zLmZvcm1hdCAhPT0gdW5kZWZpbmVkID8gcGFyYW1zLmZvcm1hdCA6IFJHQkE7XG5cdFx0aWYgKCFpc1ZhbGlkVGV4dHVyZUZvcm1hdFR5cGUoZm9ybWF0KSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGZvcm1hdDogJHtmb3JtYXR9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIsIG11c3QgYmUgJHt2YWxpZFRleHR1cmVGb3JtYXRUeXBlcy5qb2luKCcsICcpfS5gKTtcblx0XHR9XG5cblx0XHQvLyBHZXQgaW1hZ2UgZGF0YSB0eXBlLCBkZWZhdWx0IHRvIHVuc2lnbmVkIGJ5dGUuXG5cdFx0Y29uc3QgdHlwZSA9IHBhcmFtcy50eXBlICE9PSB1bmRlZmluZWQgPyBwYXJhbXMudHlwZSA6IFVOU0lHTkVEX0JZVEU7XG5cdFx0aWYgKCFpc1ZhbGlkVGV4dHVyZURhdGFUeXBlKHR5cGUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdHlwZTogJHt0eXBlfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLCBtdXN0IGJlICR7dmFsaWRUZXh0dXJlRGF0YVR5cGVzLmpvaW4oJywgJyl9LmApO1xuXHRcdH1cblxuXHRcdGNvbnN0IHsgZ2wsIGVycm9yQ2FsbGJhY2sgfSA9IHRoaXM7XG5cdFx0Y29uc3QgdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblx0XHRpZiAodGV4dHVyZSA9PT0gbnVsbCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gaW5pdCBnbFRleHR1cmUuYCk7XG5cdFx0fVxuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuXHRcdC8vIEJlY2F1c2UgaW1hZ2VzIGhhdmUgdG8gYmUgZG93bmxvYWRlZCBvdmVyIHRoZSBpbnRlcm5ldFxuXHRcdC8vIHRoZXkgbWlnaHQgdGFrZSBhIG1vbWVudCB1bnRpbCB0aGV5IGFyZSByZWFkeS5cblx0XHQvLyBVbnRpbCB0aGVuIHB1dCBhIHNpbmdsZSBwaXhlbCBpbiB0aGUgdGV4dHVyZSBzbyB3ZSBjYW5cblx0XHQvLyB1c2UgaXQgaW1tZWRpYXRlbHkuIFdoZW4gdGhlIGltYWdlIGhhcyBmaW5pc2hlZCBkb3dubG9hZGluZ1xuXHRcdC8vIHdlJ2xsIHVwZGF0ZSB0aGUgdGV4dHVyZSB3aXRoIHRoZSBjb250ZW50cyBvZiB0aGUgaW1hZ2UuXG5cdFx0Y29uc3QgbGV2ZWwgPSAwO1xuXHRcdGNvbnN0IGludGVybmFsRm9ybWF0ID0gZ2wuUkdCQTtcblx0XHRjb25zdCB3aWR0aCA9IDE7XG5cdFx0Y29uc3QgaGVpZ2h0ID0gMTtcblx0XHRjb25zdCBib3JkZXIgPSAwO1xuXHRcdGNvbnN0IHNyY0Zvcm1hdCA9IGdsW2Zvcm1hdF07XG5cdFx0Y29uc3Qgc3JjVHlwZSA9IGdsW3R5cGVdO1xuXHRcdGNvbnN0IHBpeGVsID0gbmV3IFVpbnQ4QXJyYXkoWzAsIDAsIDAsIDBdKTtcblx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIGxldmVsLCBpbnRlcm5hbEZvcm1hdCxcblx0XHRcdHdpZHRoLCBoZWlnaHQsIGJvcmRlciwgc3JjRm9ybWF0LCBzcmNUeXBlLCBwaXhlbCk7XG5cblx0XHRjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuXHRcdGltYWdlLm9ubG9hZCA9ICgpID0+IHtcblx0XHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuXHRcdFx0Z2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCBsZXZlbCwgaW50ZXJuYWxGb3JtYXQsXG5cdFx0XHRcdHNyY0Zvcm1hdCwgc3JjVHlwZSwgaW1hZ2UpO1xuXG5cdFx0XHQvLyBXZWJHTDEgaGFzIGRpZmZlcmVudCByZXF1aXJlbWVudHMgZm9yIHBvd2VyIG9mIDIgaW1hZ2VzXG5cdFx0XHQvLyB2cyBub24gcG93ZXIgb2YgMiBpbWFnZXMgc28gY2hlY2sgaWYgdGhlIGltYWdlIGlzIGFcblx0XHRcdC8vIHBvd2VyIG9mIDIgaW4gYm90aCBkaW1lbnNpb25zLlxuXHRcdFx0aWYgKGlzUG93ZXJPZjIoaW1hZ2Uud2lkdGgpICYmIGlzUG93ZXJPZjIoaW1hZ2UuaGVpZ2h0KSkge1xuXHRcdFx0XHQvLyAvLyBZZXMsIGl0J3MgYSBwb3dlciBvZiAyLiBHZW5lcmF0ZSBtaXBzLlxuXHRcdFx0XHQvLyBnbC5nZW5lcmF0ZU1pcG1hcChnbC5URVhUVVJFXzJEKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIFRPRE86IGZpbmlzaCBpbXBsZW1lbnRpbmcgdGhpcy5cblx0XHRcdFx0Y29uc29sZS53YXJuKGBUZXh0dXJlICR7bmFtZX0gZGltZW5zaW9ucyBbJHtpbWFnZS53aWR0aH0sICR7aW1hZ2UuaGVpZ2h0fV0gYXJlIG5vdCBwb3dlciBvZiAyLmApO1xuXHRcdFx0XHQvLyAvLyBObywgaXQncyBub3QgYSBwb3dlciBvZiAyLiBUdXJuIG9mZiBtaXBzIGFuZCBzZXRcblx0XHRcdFx0Ly8gLy8gd3JhcHBpbmcgdG8gY2xhbXAgdG8gZWRnZVxuXHRcdFx0XHQvLyBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcblx0XHRcdFx0Ly8gZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG5cdFx0XHR9XG5cdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbFt3cmFwU10pO1xuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2xbd3JhcFRdKTtcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbFtmaWx0ZXJdKTtcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbFtmaWx0ZXJdKTtcblxuXHRcdFx0Ly8gQ2FsbGJhY2sgd2hlbiB0ZXh0dXJlIGhhcyBsb2FkZWQuXG5cdFx0XHRpZiAocGFyYW1zLm9uTG9hZCkgcGFyYW1zLm9uTG9hZCh0ZXh0dXJlKTtcblx0XHR9O1xuXHRcdGltYWdlLm9uZXJyb3IgPSAoZSkgPT4ge1xuXHRcdFx0ZXJyb3JDYWxsYmFjayhgRXJyb3IgbG9hZGluZyBpbWFnZSAke25hbWV9OiAke2V9YCk7XG5cdFx0fVxuXHRcdGltYWdlLnNyYyA9IHVybDtcblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXHR9XG5cblx0b25SZXNpemUoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkge1xuXHRcdGNvbnN0IHdpZHRoID0gY2FudmFzLmNsaWVudFdpZHRoO1xuXHRcdGNvbnN0IGhlaWdodCA9IGNhbnZhcy5jbGllbnRIZWlnaHQ7XG5cdFx0Ly8gU2V0IGNvcnJlY3QgY2FudmFzIHBpeGVsIHNpemUuXG5cdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYkdMX0FQSS9CeV9leGFtcGxlL0NhbnZhc19zaXplX2FuZF9XZWJHTFxuXHRcdGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuXHRcdGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0Ly8gU2F2ZSBkaW1lbnNpb25zLlxuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblx0fTtcblxuXHRwcml2YXRlIGRyYXdTZXR1cChcblx0XHRwcm9ncmFtOiBXZWJHTFByb2dyYW0sXG5cdFx0ZnVsbHNjcmVlblJlbmRlcjogYm9vbGVhbixcblx0XHRpbnB1dExheWVyczogKERhdGFMYXllciB8IFdlYkdMVGV4dHVyZSlbXSxcblx0XHRvdXRwdXRMYXllcj86IERhdGFMYXllcixcblx0KSB7XG5cdFx0Y29uc3QgeyBnbCB9ID0gdGhpcztcblx0XHQvLyBDaGVjayBpZiB3ZSBhcmUgaW4gYW4gZXJyb3Igc3RhdGUuXG5cdFx0aWYgKCFwcm9ncmFtKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ0FVVElPTjogdGhlIG9yZGVyIG9mIHRoZXNlIG5leHQgZmV3IGxpbmVzIGlzIGltcG9ydGFudC5cblxuXHRcdC8vIEdldCBhIHNoYWxsb3cgY29weSBvZiBjdXJyZW50IHRleHR1cmVzLlxuXHRcdC8vIFRoaXMgbGluZSBtdXN0IGNvbWUgYmVmb3JlIHRoaXMuc2V0T3V0cHV0KCkgYXMgaXQgZGVwZW5kcyBvbiBjdXJyZW50IGludGVybmFsIHN0YXRlLlxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRjb25zdCBpbnB1dFRleHR1cmVzID0gaW5wdXRMYXllcnMubWFwKGxheWVyID0+IGxheWVyLmdldEN1cnJlbnRTdGF0ZVRleHR1cmUgPyAobGF5ZXIgYXMgRGF0YUxheWVyKS5nZXRDdXJyZW50U3RhdGVUZXh0dXJlKCkgOiBsYXllcik7XG5cblx0XHQvLyBTZXQgb3V0cHV0IGZyYW1lYnVmZmVyLlxuXHRcdC8vIFRoaXMgbWF5IG1vZGlmeSBXZWJHTCBpbnRlcm5hbCBzdGF0ZS5cblx0XHR0aGlzLnNldE91dHB1dExheWVyKGZ1bGxzY3JlZW5SZW5kZXIsIGlucHV0TGF5ZXJzLCBvdXRwdXRMYXllcik7XG5cblx0XHQvLyBTZXQgY3VycmVudCBwcm9ncmFtLlxuXHRcdGdsLnVzZVByb2dyYW0ocHJvZ3JhbSk7XG5cblx0XHQvLyBTZXQgaW5wdXQgdGV4dHVyZXMuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dFRleHR1cmVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgaSk7XG5cdFx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBpbnB1dFRleHR1cmVzW2ldKTtcblx0XHR9XG5cdH1cblxuXHRjb3B5UHJvZ3JhbUZvclR5cGUodHlwZTogRGF0YUxheWVyVHlwZSkge1xuXHRcdHN3aXRjaCAodHlwZSkge1xuXHRcdFx0Y2FzZSBIQUxGX0ZMT0FUOlxuXHRcdFx0Y2FzZSBGTE9BVDpcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29weUZsb2F0UHJvZ3JhbTtcblx0XHRcdGNhc2UgVU5TSUdORURfQllURTpcblx0XHRcdGNhc2UgVU5TSUdORURfU0hPUlQ6XG5cdFx0XHRjYXNlIFVOU0lHTkVEX0lOVDpcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29weVVpbnRQcm9ncmFtO1xuXHRcdFx0Y2FzZSBCWVRFOlxuXHRcdFx0Y2FzZSBTSE9SVDpcblx0XHRcdGNhc2UgSU5UOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb3B5SW50UHJvZ3JhbTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB0eXBlOiAke3R5cGV9IHBhc3NlZCB0byBXZWJHTENvbXB1dGUuY29weVByb2dyYW1Gb3JUeXBlLmApO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgcGFzc1Rocm91Z2hMYXllckRhdGFGcm9tSW5wdXRUb091dHB1dChzdGF0ZTogRGF0YUxheWVyKSB7XG5cdFx0Ly8gVE9ETzogZmlndXJlIG91dCB0aGUgZmFzdGVzdCB3YXkgdG8gY29weSBhIHRleHR1cmUuXG5cdFx0Y29uc3QgY29weVByb2dyYW0gPSB0aGlzLmNvcHlQcm9ncmFtRm9yVHlwZShzdGF0ZS5pbnRlcm5hbFR5cGUpO1xuXHRcdHRoaXMuc3RlcChjb3B5UHJvZ3JhbSwgW3N0YXRlXSwgc3RhdGUpO1xuXHR9XG5cblx0cHJpdmF0ZSBzZXRPdXRwdXRMYXllcihcblx0XHRmdWxsc2NyZWVuUmVuZGVyOiBib29sZWFuLFxuXHRcdGlucHV0TGF5ZXJzOiAoRGF0YUxheWVyIHwgV2ViR0xUZXh0dXJlKVtdLFxuXHRcdG91dHB1dExheWVyPzogRGF0YUxheWVyLCAvLyBVbmRlZmluZWQgcmVuZGVycyB0byBzY3JlZW4uXG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cblx0XHQvLyBSZW5kZXIgdG8gc2NyZWVuLlxuXHRcdGlmICghb3V0cHV0TGF5ZXIpIHtcblx0XHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG5cdFx0XHQvLyBSZXNpemUgdmlld3BvcnQuXG5cdFx0XHRjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRoaXM7XG5cdFx0XHRnbC52aWV3cG9ydCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBpZiBvdXRwdXQgaXMgc2FtZSBhcyBvbmUgb2YgaW5wdXQgbGF5ZXJzLlxuXHRcdGlmIChpbnB1dExheWVycy5pbmRleE9mKG91dHB1dExheWVyKSA+IC0xKSB7XG5cdFx0XHRpZiAob3V0cHV0TGF5ZXIubnVtQnVmZmVycyA9PT0gMSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFxuQ2Fubm90IHVzZSBzYW1lIGJ1ZmZlciBmb3IgaW5wdXQgYW5kIG91dHB1dCBvZiBhIHByb2dyYW0uXG5UcnkgaW5jcmVhc2luZyB0aGUgbnVtYmVyIG9mIGJ1ZmZlcnMgaW4geW91ciBvdXRwdXQgbGF5ZXIgdG8gYXQgbGVhc3QgMiBzbyB5b3VcbmNhbiByZW5kZXIgdG8gbmV4dFN0YXRlIHVzaW5nIGN1cnJlbnRTdGF0ZSBhcyBhbiBpbnB1dC5gKTtcblx0XHRcdH1cblx0XHRcdGlmIChmdWxsc2NyZWVuUmVuZGVyKSB7XG5cdFx0XHRcdC8vIFJlbmRlciBhbmQgaW5jcmVtZW50IGJ1ZmZlciBzbyB3ZSBhcmUgcmVuZGVyaW5nIHRvIGEgZGlmZmVyZW50IHRhcmdldFxuXHRcdFx0XHQvLyB0aGFuIHRoZSBpbnB1dCB0ZXh0dXJlLlxuXHRcdFx0XHRvdXRwdXRMYXllci5fYmluZE91dHB1dEJ1ZmZlckZvcldyaXRlKHRydWUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gUGFzcyBpbnB1dCB0ZXh0dXJlIHRocm91Z2ggdG8gb3V0cHV0LlxuXHRcdFx0XHR0aGlzLnBhc3NUaHJvdWdoTGF5ZXJEYXRhRnJvbUlucHV0VG9PdXRwdXQob3V0cHV0TGF5ZXIpO1xuXHRcdFx0XHQvLyBSZW5kZXIgdG8gb3V0cHV0IHdpdGhvdXQgaW5jcmVtZW50aW5nIGJ1ZmZlci5cblx0XHRcdFx0b3V0cHV0TGF5ZXIuX2JpbmRPdXRwdXRCdWZmZXJGb3JXcml0ZShmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChmdWxsc2NyZWVuUmVuZGVyKSB7XG5cdFx0XHRcdC8vIFJlbmRlciB0byBjdXJyZW50IGJ1ZmZlci5cblx0XHRcdFx0b3V0cHV0TGF5ZXIuX2JpbmRPdXRwdXRCdWZmZXJGb3JXcml0ZShmYWxzZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBJZiB3ZSBhcmUgZG9pbmcgYSBzbmVha3kgdGhpbmcgd2l0aCBhIHN3YXBwZWQgdGV4dHVyZSBhbmQgYXJlXG5cdFx0XHRcdC8vIG9ubHkgcmVuZGVyaW5nIHBhcnQgb2YgdGhlIHNjcmVlbiwgd2UgbWF5IG5lZWQgdG8gYWRkIGEgY29weSBvcGVyYXRpb24uXG5cdFx0XHRcdGlmIChvdXRwdXRMYXllci5fdXNpbmdUZXh0dXJlT3ZlcnJpZGVGb3JDdXJyZW50QnVmZmVyKCkpIHtcblx0XHRcdFx0XHR0aGlzLnBhc3NUaHJvdWdoTGF5ZXJEYXRhRnJvbUlucHV0VG9PdXRwdXQob3V0cHV0TGF5ZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG91dHB1dExheWVyLl9iaW5kT3V0cHV0QnVmZmVyRm9yV3JpdGUoZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHQvLyBSZXNpemUgdmlld3BvcnQuXG5cdFx0Y29uc3QgWyB3aWR0aCwgaGVpZ2h0IF0gPSBvdXRwdXRMYXllci5nZXREaW1lbnNpb25zKCk7XG5cdFx0Z2wudmlld3BvcnQoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG5cdH07XG5cblx0cHJpdmF0ZSBzZXRQb3NpdGlvbkF0dHJpYnV0ZShwcm9ncmFtOiBXZWJHTFByb2dyYW0pIHtcblx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXHRcdC8vIFBvaW50IGF0dHJpYnV0ZSB0byB0aGUgY3VycmVudGx5IGJvdW5kIFZCTy5cblx0XHRjb25zdCBsb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sICdhX2ludGVybmFsX3Bvc2l0aW9uJyk7XG5cdFx0Z2wudmVydGV4QXR0cmliUG9pbnRlcihsb2NhdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcblx0XHQvLyBFbmFibGUgdGhlIGF0dHJpYnV0ZS5cblx0XHRnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShsb2NhdGlvbik7XG5cdH1cblxuXHRwcml2YXRlIHNldEluZGV4QXR0cmlidXRlKHByb2dyYW06IFdlYkdMUHJvZ3JhbSkge1xuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cdFx0Ly8gUG9pbnQgYXR0cmlidXRlIHRvIHRoZSBjdXJyZW50bHkgYm91bmQgVkJPLlxuXHRcdGNvbnN0IGxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgJ2FfaW50ZXJuYWxfaW5kZXgnKTtcblx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGxvY2F0aW9uLCAxLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXHRcdC8vIEVuYWJsZSB0aGUgYXR0cmlidXRlLlxuXHRcdGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGxvY2F0aW9uKTtcblx0fVxuXG5cdC8vIFN0ZXAgZm9yIGVudGlyZSBmdWxsc2NyZWVuIHF1YWQuXG5cdHN0ZXAoXG5cdFx0cHJvZ3JhbTogR1BVUHJvZ3JhbSxcblx0XHRpbnB1dExheWVyczogRGF0YUxheWVyIHwgKERhdGFMYXllciB8IFdlYkdMVGV4dHVyZSlbXSA9IFtdLFxuXHRcdG91dHB1dExheWVyPzogRGF0YUxheWVyLCAvLyBVbmRlZmluZWQgcmVuZGVycyB0byBzY3JlZW4uXG5cdFx0b3B0aW9ucz86IHtcblx0XHRcdHNob3VsZEJsZW5kQWxwaGE/OiBib29sZWFuLFxuXHRcdH0sXG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wsIGVycm9yU3RhdGUsIHF1YWRQb3NpdGlvbnNCdWZmZXIgfSA9IHRoaXM7XG5cblx0XHQvLyBJZ25vcmUgaWYgd2UgYXJlIGluIGVycm9yIHN0YXRlLlxuXHRcdGlmIChlcnJvclN0YXRlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgZ2xQcm9ncmFtID0gcHJvZ3JhbS5kZWZhdWx0UHJvZ3JhbSE7XG5cblx0XHQvLyBEbyBzZXR1cCAtIHRoaXMgbXVzdCBjb21lIGZpcnN0LlxuXHRcdGlucHV0TGF5ZXJzID0gaW5wdXRMYXllcnMuY29uc3RydWN0b3IgPT09IERhdGFMYXllciA/IFtpbnB1dExheWVyc10gOiBpbnB1dExheWVycyBhcyAoRGF0YUxheWVyIHwgV2ViR0xUZXh0dXJlKVtdO1xuXHRcdHRoaXMuZHJhd1NldHVwKHByb2dyYW0uZGVmYXVsdFByb2dyYW0hLCB0cnVlLCBpbnB1dExheWVycywgb3V0cHV0TGF5ZXIpO1xuXG5cdFx0Ly8gVXBkYXRlIHVuaWZvcm1zIGFuZCBidWZmZXJzLlxuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3NjYWxlJywgWzEsIDFdLCBGTE9BVCk7XG5cdFx0cHJvZ3JhbS5zZXRWZXJ0ZXhVbmlmb3JtKGdsUHJvZ3JhbSwgJ3VfaW50ZXJuYWxfdHJhbnNsYXRpb24nLCBbMCwgMF0sIEZMT0FUKTtcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgcXVhZFBvc2l0aW9uc0J1ZmZlcik7XG5cdFx0dGhpcy5zZXRQb3NpdGlvbkF0dHJpYnV0ZShwcm9ncmFtLmRlZmF1bHRQcm9ncmFtISk7XG5cblx0XHQvLyBEcmF3LlxuXHRcdGlmIChvcHRpb25zPy5zaG91bGRCbGVuZEFscGhhKSB7XG5cdFx0XHRnbC5lbmFibGUoZ2wuQkxFTkQpO1xuXHRcdFx0Z2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG5cdFx0fVxuXHRcdGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVfU1RSSVAsIDAsIDQpO1xuXHRcdGdsLmRpc2FibGUoZ2wuQkxFTkQpO1xuXHR9XG5cblx0Ly8gU3RlcCBwcm9ncmFtIG9ubHkgZm9yIGEgc3RyaXAgb2YgcHggYWxvbmcgdGhlIGJvdW5kYXJ5LlxuXHRzdGVwQm91bmRhcnkoXG5cdFx0cHJvZ3JhbTogR1BVUHJvZ3JhbSxcblx0XHRpbnB1dExheWVyczogRGF0YUxheWVyIHwgKERhdGFMYXllciB8IFdlYkdMVGV4dHVyZSlbXSA9IFtdLFxuXHRcdG91dHB1dExheWVyPzogRGF0YUxheWVyLCAvLyBVbmRlZmluZWQgcmVuZGVycyB0byBzY3JlZW4uXG5cdFx0b3B0aW9ucz86IHtcblx0XHRcdHNob3VsZEJsZW5kQWxwaGE/OiBib29sZWFuLFxuXHRcdFx0c2luZ2xlRWRnZT86ICdMRUZUJyB8ICdSSUdIVCcgfCAnVE9QJyB8ICdCT1RUT00nO1xuXHRcdH0sXG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wsIGVycm9yU3RhdGUsIGJvdW5kYXJ5UG9zaXRpb25zQnVmZmVyfSA9IHRoaXM7XG5cblx0XHQvLyBJZ25vcmUgaWYgd2UgYXJlIGluIGVycm9yIHN0YXRlLlxuXHRcdGlmIChlcnJvclN0YXRlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgZ2xQcm9ncmFtID0gcHJvZ3JhbS5kZWZhdWx0UHJvZ3JhbSE7XG5cblx0XHQvLyBEbyBzZXR1cCAtIHRoaXMgbXVzdCBjb21lIGZpcnN0LlxuXHRcdGlucHV0TGF5ZXJzID0gaW5wdXRMYXllcnMuY29uc3RydWN0b3IgPT09IERhdGFMYXllciA/IFtpbnB1dExheWVyc10gOiBpbnB1dExheWVycyBhcyAoRGF0YUxheWVyIHwgV2ViR0xUZXh0dXJlKVtdO1xuXHRcdHRoaXMuZHJhd1NldHVwKGdsUHJvZ3JhbSwgZmFsc2UsIGlucHV0TGF5ZXJzLCBvdXRwdXRMYXllcik7XG5cblx0XHQvLyBVcGRhdGUgdW5pZm9ybXMgYW5kIGJ1ZmZlcnMuXG5cdFx0Ly8gRnJhbWUgbmVlZHMgdG8gYmUgb2Zmc2V0IGFuZCBzY2FsZWQgc28gdGhhdCBhbGwgZm91ciBzaWRlcyBhcmUgaW4gdmlld3BvcnQuXG5cdFx0Y29uc3QgWyB3aWR0aCwgaGVpZ2h0IF0gPSBvdXRwdXRMYXllciA/IG91dHB1dExheWVyLmdldERpbWVuc2lvbnMoKSA6IFsgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgXTtcblx0XHRjb25zdCBvbmVQeCA9IFsgMSAvIHdpZHRoLCAxIC8gaGVpZ2h0XSBhcyBbbnVtYmVyLCBudW1iZXJdO1xuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3NjYWxlJywgWzEgLSBvbmVQeFswXSwgMSAtIG9uZVB4WzFdXSwgRkxPQVQpO1xuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3RyYW5zbGF0aW9uJywgb25lUHgsIEZMT0FUKTtcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYm91bmRhcnlQb3NpdGlvbnNCdWZmZXIpO1xuXHRcdHRoaXMuc2V0UG9zaXRpb25BdHRyaWJ1dGUoZ2xQcm9ncmFtKTtcblxuXHRcdC8vIERyYXcuXG5cdFx0aWYgKG9wdGlvbnM/LnNob3VsZEJsZW5kQWxwaGEpIHtcblx0XHRcdGdsLmVuYWJsZShnbC5CTEVORCk7XG5cdFx0XHRnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblx0XHR9XG5cdFx0aWYgKG9wdGlvbnM/LnNpbmdsZUVkZ2UpIHtcblx0XHRcdHN3aXRjaChvcHRpb25zPy5zaW5nbGVFZGdlKSB7XG5cdFx0XHRcdGNhc2UgJ0xFRlQnOlxuXHRcdFx0XHRcdGdsLmRyYXdBcnJheXMoZ2wuTElORVMsIDMsIDIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdSSUdIVCc6XG5cdFx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FUywgMSwgMik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1RPUCc6XG5cdFx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FUywgMiwgMik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0JPVFRPTSc6XG5cdFx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FUywgMCwgMik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGJvdW5kYXJ5IGVkZ2UgdHlwZTogJHtvcHRpb25zPy5zaW5nbGVFZGdlfS5gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FX0xPT1AsIDAsIDQpO1xuXHRcdH1cblx0XHRcblx0XHRnbC5kaXNhYmxlKGdsLkJMRU5EKTtcblx0fVxuXG5cdC8vIFN0ZXAgcHJvZ3JhbSBmb3IgYWxsIGJ1dCBhIHN0cmlwIG9mIHB4IGFsb25nIHRoZSBib3VuZGFyeS5cblx0c3RlcE5vbkJvdW5kYXJ5KFxuXHRcdHByb2dyYW06IEdQVVByb2dyYW0sXG5cdFx0aW5wdXRMYXllcnM6IERhdGFMYXllciB8IChEYXRhTGF5ZXIgfCBXZWJHTFRleHR1cmUpW10gPSBbXSxcblx0XHRvdXRwdXRMYXllcj86IERhdGFMYXllciwgLy8gVW5kZWZpbmVkIHJlbmRlcnMgdG8gc2NyZWVuLlxuXHRcdG9wdGlvbnM/OiB7XG5cdFx0XHRzaG91bGRCbGVuZEFscGhhPzogYm9vbGVhbixcblx0XHR9LFxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCBlcnJvclN0YXRlLCBxdWFkUG9zaXRpb25zQnVmZmVyIH0gPSB0aGlzO1xuXG5cdFx0Ly8gSWdub3JlIGlmIHdlIGFyZSBpbiBlcnJvciBzdGF0ZS5cblx0XHRpZiAoZXJyb3JTdGF0ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGdsUHJvZ3JhbSA9IHByb2dyYW0uZGVmYXVsdFByb2dyYW0hO1xuXG5cdFx0Ly8gRG8gc2V0dXAgLSB0aGlzIG11c3QgY29tZSBmaXJzdC5cblx0XHRpbnB1dExheWVycyA9IGlucHV0TGF5ZXJzLmNvbnN0cnVjdG9yID09PSBEYXRhTGF5ZXIgPyBbaW5wdXRMYXllcnNdIDogaW5wdXRMYXllcnMgYXMgKERhdGFMYXllciB8IFdlYkdMVGV4dHVyZSlbXTtcblx0XHR0aGlzLmRyYXdTZXR1cChnbFByb2dyYW0sIGZhbHNlLCBpbnB1dExheWVycywgb3V0cHV0TGF5ZXIpO1xuXG5cdFx0Ly8gVXBkYXRlIHVuaWZvcm1zIGFuZCBidWZmZXJzLlxuXHRcdGNvbnN0IFsgd2lkdGgsIGhlaWdodCBdID0gb3V0cHV0TGF5ZXIgPyBvdXRwdXRMYXllci5nZXREaW1lbnNpb25zKCkgOiBbIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0IF07XG5cdFx0Y29uc3Qgb25lUHggPSBbIDEgLyB3aWR0aCwgMSAvIGhlaWdodF0gYXMgW251bWJlciwgbnVtYmVyXTtcblx0XHRwcm9ncmFtLnNldFZlcnRleFVuaWZvcm0oZ2xQcm9ncmFtLCAndV9pbnRlcm5hbF9zY2FsZScsIFsxIC0gMiAqIG9uZVB4WzBdLCAxIC0gMiAqIG9uZVB4WzFdXSwgRkxPQVQpO1xuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3RyYW5zbGF0aW9uJywgb25lUHgsIEZMT0FUKTtcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgcXVhZFBvc2l0aW9uc0J1ZmZlcik7XG5cdFx0dGhpcy5zZXRQb3NpdGlvbkF0dHJpYnV0ZShnbFByb2dyYW0pO1xuXHRcdFxuXHRcdC8vIERyYXcuXG5cdFx0aWYgKG9wdGlvbnM/LnNob3VsZEJsZW5kQWxwaGEpIHtcblx0XHRcdGdsLmVuYWJsZShnbC5CTEVORCk7XG5cdFx0XHRnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblx0XHR9XG5cdFx0Z2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgMCwgNCk7XG5cdFx0Z2wuZGlzYWJsZShnbC5CTEVORCk7XG5cdH1cblxuXHQvLyBTdGVwIHByb2dyYW0gb25seSBmb3IgYSBjaXJjdWxhciBzcG90LlxuXHRzdGVwQ2lyY2xlKFxuXHRcdHByb2dyYW06IEdQVVByb2dyYW0sXG5cdFx0cG9zaXRpb246IFtudW1iZXIsIG51bWJlcl0sIC8vIHBvc2l0aW9uIGlzIGluIHNjcmVlbiBzcGFjZSBjb29yZHMuXG5cdFx0cmFkaXVzOiBudW1iZXIsIC8vIHJhZGl1cyBpcyBpbiBweC5cblx0XHRpbnB1dExheWVyczogRGF0YUxheWVyIHwgKERhdGFMYXllciB8IFdlYkdMVGV4dHVyZSlbXSA9IFtdLFxuXHRcdG91dHB1dExheWVyPzogRGF0YUxheWVyLCAvLyBVbmRlZmluZWQgcmVuZGVycyB0byBzY3JlZW4uXG5cdFx0b3B0aW9ucz86IHtcblx0XHRcdG51bVNlZ21lbnRzPzogbnVtYmVyLFxuXHRcdFx0c2hvdWxkQmxlbmRBbHBoYT86IGJvb2xlYW4sXG5cdFx0fSxcblx0KSB7XG5cdFx0Y29uc3QgeyBnbCwgZXJyb3JTdGF0ZSB9ID0gdGhpcztcblx0XHRjb25zdCBbIHdpZHRoLCBoZWlnaHQgXSA9IG91dHB1dExheWVyID8gb3V0cHV0TGF5ZXIuZ2V0RGltZW5zaW9ucygpIDogWyB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCBdO1xuXG5cdFx0Ly8gSWdub3JlIGlmIHdlIGFyZSBpbiBlcnJvciBzdGF0ZS5cblx0XHRpZiAoZXJyb3JTdGF0ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGdsUHJvZ3JhbSA9IHByb2dyYW0uZGVmYXVsdFByb2dyYW0hO1xuXG5cdFx0Ly8gRG8gc2V0dXAgLSB0aGlzIG11c3QgY29tZSBmaXJzdC5cblx0XHRpbnB1dExheWVycyA9IGlucHV0TGF5ZXJzLmNvbnN0cnVjdG9yID09PSBEYXRhTGF5ZXIgPyBbaW5wdXRMYXllcnNdIDogaW5wdXRMYXllcnMgYXMgKERhdGFMYXllciB8IFdlYkdMVGV4dHVyZSlbXTtcblx0XHR0aGlzLmRyYXdTZXR1cChnbFByb2dyYW0sIGZhbHNlLCBpbnB1dExheWVycywgb3V0cHV0TGF5ZXIpO1xuXG5cdFx0Ly8gVXBkYXRlIHVuaWZvcm1zIGFuZCBidWZmZXJzLlxuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3NjYWxlJywgW3JhZGl1cyAqIDIgLyB3aWR0aCwgcmFkaXVzICogMiAvIGhlaWdodF0sIEZMT0FUKTtcblx0XHRwcm9ncmFtLnNldFZlcnRleFVuaWZvcm0oZ2xQcm9ncmFtLCAndV9pbnRlcm5hbF90cmFuc2xhdGlvbicsIFsyICogcG9zaXRpb25bMF0gLyB3aWR0aCAtIDEsIDIgKiBwb3NpdGlvblsxXSAvIGhlaWdodCAtIDFdLCBGTE9BVCk7XG5cdFx0Y29uc3QgbnVtU2VnbWVudHMgPSBvcHRpb25zPy5udW1TZWdtZW50cyA/IG9wdGlvbnM/Lm51bVNlZ21lbnRzIDogREVGQVVMVF9DSVJDTEVfTlVNX1NFR01FTlRTO1xuXHRcdGlmIChudW1TZWdtZW50cyA8IDMpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgbnVtU2VnbWVudHMgZm9yIFdlYkdMQ29tcHV0ZS5zdGVwQ2lyY2xlIG11c3QgYmUgZ3JlYXRlciB0aGFuIDIsIGdvdCAke251bVNlZ21lbnRzfS5gKTtcblx0XHR9XG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuZ2V0Q2lyY2xlUG9zaXRpb25zQnVmZmVyKG51bVNlZ21lbnRzKSk7XG5cdFx0dGhpcy5zZXRQb3NpdGlvbkF0dHJpYnV0ZShnbFByb2dyYW0pO1xuXHRcdFxuXHRcdC8vIERyYXcuXG5cdFx0aWYgKG9wdGlvbnM/LnNob3VsZEJsZW5kQWxwaGEpIHtcblx0XHRcdGdsLmVuYWJsZShnbC5CTEVORCk7XG5cdFx0XHRnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblx0XHR9XG5cdFx0Z2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9GQU4sIDAsIG51bVNlZ21lbnRzICsgMik7XHRcblx0XHRnbC5kaXNhYmxlKGdsLkJMRU5EKTtcblx0fVxuXG5cdC8vIFN0ZXAgcHJvZ3JhbSBvbmx5IGZvciBhIHRoaWNrZW5lZCBsaW5lIHNlZ21lbnRzIChyb3VuZGVkIGVuZCBjYXBzIGJ5IGRlZmF1bHQpLlxuXHRzdGVwU2VnbWVudChcblx0XHRwcm9ncmFtOiBHUFVQcm9ncmFtLFxuXHRcdHBvc2l0aW9uMTogW251bWJlciwgbnVtYmVyXSwgLy8gcG9zaXRpb24gaXMgaW4gc2NyZWVuIHNwYWNlIGNvb3Jkcy5cblx0XHRwb3NpdGlvbjI6IFtudW1iZXIsIG51bWJlcl0sIC8vIHBvc2l0aW9uIGlzIGluIHNjcmVlbiBzcGFjZSBjb29yZHMuXG5cdFx0dGhpY2tuZXNzOiBudW1iZXIsIC8vIHRoaWNrbmVzcyBpcyBpbiBweC5cblx0XHRpbnB1dExheWVyczogRGF0YUxheWVyIHwgKERhdGFMYXllciB8IFdlYkdMVGV4dHVyZSlbXSA9IFtdLFxuXHRcdG91dHB1dExheWVyPzogRGF0YUxheWVyLCAvLyBVbmRlZmluZWQgcmVuZGVycyB0byBzY3JlZW4uXG5cdFx0b3B0aW9ucz86IHtcblx0XHRcdG5vRW5kQ2Fwcz86IGJvb2xlYW4sIC8vIFRydWUgYnkgZGVmYXVsdC5cblx0XHRcdG51bUNhcFNlZ21lbnRzPzogbnVtYmVyLFxuXHRcdFx0c2hvdWxkQmxlbmRBbHBoYT86IGJvb2xlYW4sXG5cdFx0fSxcblx0KSB7XG5cdFx0Y29uc3QgeyBnbCwgZXJyb3JTdGF0ZSB9ID0gdGhpcztcblx0XHRjb25zdCBbIHdpZHRoLCBoZWlnaHQgXSA9IG91dHB1dExheWVyID8gb3V0cHV0TGF5ZXIuZ2V0RGltZW5zaW9ucygpIDogWyB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCBdO1xuXG5cdFx0Ly8gSWdub3JlIGlmIHdlIGFyZSBpbiBlcnJvciBzdGF0ZS5cblx0XHRpZiAoZXJyb3JTdGF0ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGdsUHJvZ3JhbSA9IHByb2dyYW0uc2VnbWVudFByb2dyYW0hO1xuXG5cdFx0Ly8gRG8gc2V0dXAgLSB0aGlzIG11c3QgY29tZSBmaXJzdC5cblx0XHRpbnB1dExheWVycyA9IGlucHV0TGF5ZXJzLmNvbnN0cnVjdG9yID09PSBEYXRhTGF5ZXIgPyBbaW5wdXRMYXllcnNdIDogaW5wdXRMYXllcnMgYXMgKERhdGFMYXllciB8IFdlYkdMVGV4dHVyZSlbXTtcblx0XHR0aGlzLmRyYXdTZXR1cChnbFByb2dyYW0sIGZhbHNlLCBpbnB1dExheWVycywgb3V0cHV0TGF5ZXIpO1xuXG5cdFx0Ly8gVXBkYXRlIHVuaWZvcm1zIGFuZCBidWZmZXJzLlxuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX2hhbGZUaGlja25lc3MnLCB0aGlja25lc3MgLyAyLCBGTE9BVCk7XG5cdFx0cHJvZ3JhbS5zZXRWZXJ0ZXhVbmlmb3JtKGdsUHJvZ3JhbSwgJ3VfaW50ZXJuYWxfc2NhbGUnLCBbMiAvIHdpZHRoLCAyIC8gaGVpZ2h0XSwgRkxPQVQpO1xuXHRcdGNvbnN0IGRpZmZYID0gcG9zaXRpb24xWzBdIC0gcG9zaXRpb24yWzBdO1xuXHRcdGNvbnN0IGRpZmZZID0gcG9zaXRpb24xWzFdIC0gcG9zaXRpb24yWzFdO1xuXHRcdGNvbnN0IGFuZ2xlID0gTWF0aC5hdGFuMihkaWZmWSwgZGlmZlgpO1xuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3JvdGF0aW9uJywgYW5nbGUsIEZMT0FUKTtcblx0XHRjb25zdCBjZW50ZXJYID0gKHBvc2l0aW9uMVswXSArIHBvc2l0aW9uMlswXSkgLyAyO1xuXHRcdGNvbnN0IGNlbnRlclkgPSAocG9zaXRpb24xWzFdICsgcG9zaXRpb24yWzFdKSAvIDI7XG5cdFx0cHJvZ3JhbS5zZXRWZXJ0ZXhVbmlmb3JtKGdsUHJvZ3JhbSwgJ3VfaW50ZXJuYWxfdHJhbnNsYXRpb24nLCBbMiAqIGNlbnRlclggLyB3aWR0aCAtIDEsIDIgKiBjZW50ZXJZIC8gaGVpZ2h0IC0gMV0sIEZMT0FUKTtcblx0XHRjb25zdCBsZW5ndGggPSBNYXRoLnNxcnQoZGlmZlggKiBkaWZmWCArIGRpZmZZICogZGlmZlkpO1xuXHRcdFxuXHRcdGNvbnN0IG51bVNlZ21lbnRzID0gb3B0aW9ucz8ubnVtQ2FwU2VnbWVudHMgPyBvcHRpb25zPy5udW1DYXBTZWdtZW50cyAqIDIgOiBERUZBVUxUX0NJUkNMRV9OVU1fU0VHTUVOVFM7XG5cdFx0aWYgKG9wdGlvbnM/Lm5vRW5kQ2Fwcykge1xuXHRcdFx0Ly8gSGF2ZSB0byBzdWJ0cmFjdCBhIHNtYWxsIG9mZnNldCBmcm9tIGxlbmd0aC5cblx0XHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX2xlbmd0aCcsIGxlbmd0aCAtIDIgKiB0aGlja25lc3MsIEZMT0FUKTtcblx0XHRcdC8vIFVzZSBhIHJlY3RhbmdsZSBpbiBjYXNlIG9mIG5vIGNhcHMuXG5cdFx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5xdWFkUG9zaXRpb25zQnVmZmVyKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKG51bVNlZ21lbnRzIDwgNiB8fCBudW1TZWdtZW50cyAlIDYgIT09IDApIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBudW1TZWdtZW50cyBmb3IgV2ViR0xDb21wdXRlLnN0ZXBTZWdtZW50IG11c3QgYmUgZGl2aXNpYmxlIGJ5IDYsIGdvdCAke251bVNlZ21lbnRzfS5gKTtcblx0XHRcdH1cblx0XHRcdC8vIEhhdmUgdG8gc3VidHJhY3QgYSBzbWFsbCBvZmZzZXQgZnJvbSBsZW5ndGguXG5cdFx0XHRwcm9ncmFtLnNldFZlcnRleFVuaWZvcm0oZ2xQcm9ncmFtLCAndV9pbnRlcm5hbF9sZW5ndGgnLCBsZW5ndGggLSAyICogdGhpY2tuZXNzICogTWF0aC5zaW4oTWF0aC5QSSAvIG51bVNlZ21lbnRzKSwgRkxPQVQpO1xuXHRcdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuZ2V0Q2lyY2xlUG9zaXRpb25zQnVmZmVyKG51bVNlZ21lbnRzKSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zZXRQb3NpdGlvbkF0dHJpYnV0ZShnbFByb2dyYW0pO1xuXHRcdFxuXHRcdC8vIERyYXcuXG5cdFx0aWYgKG9wdGlvbnM/LnNob3VsZEJsZW5kQWxwaGEpIHtcblx0XHRcdGdsLmVuYWJsZShnbC5CTEVORCk7XG5cdFx0XHRnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblx0XHR9XG5cdFx0aWYgKG9wdGlvbnM/Lm5vRW5kQ2Fwcykge1xuXHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgMCwgNCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVfRkFOLCAwLCBudW1TZWdtZW50cyArIDIpO1xuXHRcdH1cblx0XHRnbC5kaXNhYmxlKGdsLkJMRU5EKTtcblx0fVxuXG5cdGRyYXdQb2ludHMoXG5cdFx0aW5wdXRMYXllcnM6IERhdGFMYXllciB8IChEYXRhTGF5ZXIgfCBXZWJHTFRleHR1cmUpW10sXG5cdFx0b3B0aW9ucz86IHtcblx0XHRcdHBvaW50U2l6ZT86IG51bWJlcixcblx0XHRcdGNvdW50PzogbnVtYmVyLFxuXHRcdFx0Y29sb3I/OiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sXG5cdFx0XHR3cmFwWD86IGJvb2xlYW4sXG5cdFx0XHR3cmFwWT86IGJvb2xlYW4sXG5cdFx0XHRzaG91bGRCbGVuZEFscGhhPzogYm9vbGVhbixcblx0XHR9LFxuXHRcdG91dHB1dExheWVyPzogRGF0YUxheWVyLFxuXHRcdHByb2dyYW0/OiBHUFVQcm9ncmFtLFxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCBlcnJvclN0YXRlLCBwb2ludEluZGV4QXJyYXkgfSA9IHRoaXM7XG5cdFx0Y29uc3QgWyB3aWR0aCwgaGVpZ2h0IF0gPSBvdXRwdXRMYXllciA/IG91dHB1dExheWVyLmdldERpbWVuc2lvbnMoKSA6IFsgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgXTtcblxuXHRcdC8vIElnbm9yZSBpZiB3ZSBhcmUgaW4gZXJyb3Igc3RhdGUuXG5cdFx0aWYgKGVycm9yU3RhdGUpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpbnB1dExheWVycyA9IGlucHV0TGF5ZXJzLmNvbnN0cnVjdG9yID09PSBEYXRhTGF5ZXIgPyBbaW5wdXRMYXllcnNdIDogaW5wdXRMYXllcnMgYXMgKERhdGFMYXllciB8IFdlYkdMVGV4dHVyZSlbXTtcblxuXHRcdGlmIChpbnB1dExheWVycy5sZW5ndGggPCAxKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaW5wdXRMYXllcnMgZm9yIGRyYXdQb2ludHM6IG11c3QgcGFzcyBhIHBvc2l0aW9uIERhdGFMYXllciBhcyBmaXJzdCBlbGVtZW50IG9mIGlucHV0TGF5ZXJzLmApO1xuXHRcdH1cblx0XHRjb25zdCBwb3NpdGlvbkxheWVyID0gaW5wdXRMYXllcnNbMF0gYXMgRGF0YUxheWVyO1xuXG5cdFx0Ly8gQ2hlY2sgdGhhdCBudW1Qb2ludHMgaXMgdmFsaWQuXG5cdFx0aWYgKHBvc2l0aW9uTGF5ZXIubnVtQ29tcG9uZW50cyAhPT0gMiAmJiBwb3NpdGlvbkxheWVyLm51bUNvbXBvbmVudHMgIT09IDQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgV2ViR0xDb21wdXRlLmRyYXdQb2ludHMoKSBtdXN0IGJlIHBhc3NlZCBhIHBvc2l0aW9uIERhdGFMYXllciB3aXRoIGVpdGhlciAyIG9yIDQgY29tcG9uZW50cywgZ290IHBvc2l0aW9uIERhdGFMYXllciBcIiR7cG9zaXRpb25MYXllci5uYW1lfVwiIHdpdGggJHtwb3NpdGlvbkxheWVyLm51bUNvbXBvbmVudHN9IGNvbXBvbmVudHMuYClcblx0XHR9XG5cdFx0Y29uc3QgbGVuZ3RoID0gcG9zaXRpb25MYXllci5nZXRMZW5ndGgoKTtcblx0XHRjb25zdCBjb3VudCA9IG9wdGlvbnM/LmNvdW50IHx8IGxlbmd0aDtcblx0XHRpZiAoY291bnQgPiBsZW5ndGgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBjb3VudCAke2NvdW50fSBmb3IgcG9zaXRpb24gRGF0YUxheWVyIG9mIGxlbmd0aCAke2xlbmd0aH0uYCk7XG5cdFx0fVxuXG5cdFx0aWYgKHByb2dyYW0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cHJvZ3JhbSA9IHRoaXMuc2luZ2xlQ29sb3JQcm9ncmFtO1xuXHRcdFx0Y29uc3QgY29sb3IgPSBvcHRpb25zPy5jb2xvciB8fCBbMSwgMCwgMF07XG5cdFx0XHRwcm9ncmFtLnNldFVuaWZvcm0oJ3VfY29sb3InLCBjb2xvciwgRkxPQVQpO1xuXHRcdH1cblx0XHRjb25zdCBnbFByb2dyYW0gPSBwcm9ncmFtLnBvaW50c1Byb2dyYW0hO1xuXG5cdFx0Ly8gRG8gc2V0dXAgLSB0aGlzIG11c3QgY29tZSBmaXJzdC5cblx0XHR0aGlzLmRyYXdTZXR1cChnbFByb2dyYW0sIGZhbHNlLCBpbnB1dExheWVycywgb3V0cHV0TGF5ZXIpO1xuXG5cdFx0Ly8gVXBkYXRlIHVuaWZvcm1zIGFuZCBidWZmZXJzLlxuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3Bvc2l0aW9ucycsIDAsIElOVCk7XG5cdFx0cHJvZ3JhbS5zZXRWZXJ0ZXhVbmlmb3JtKGdsUHJvZ3JhbSwgJ3VfaW50ZXJuYWxfc2NhbGUnLCBbMSAvIHdpZHRoLCAxIC8gaGVpZ2h0XSwgRkxPQVQpO1xuXHRcdC8vIFRlbGwgd2hldGhlciB3ZSBhcmUgdXNpbmcgYW4gYWJzb2x1dGUgcG9zaXRpb24gKDIgY29tcG9uZW50cyksIG9yIHBvc2l0aW9uIHdpdGggYWNjdW11bGF0aW9uIGJ1ZmZlciAoNCBjb21wb25lbnRzLCBiZXR0ZXIgZmxvYXRpbmcgcHQgYWNjdXJhY3kpLlxuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3Bvc2l0aW9uV2l0aEFjY3VtdWxhdGlvbicsIHBvc2l0aW9uTGF5ZXIubnVtQ29tcG9uZW50cyA9PT0gNCA/IDEgOiAwLCBJTlQpO1xuXHRcdC8vIFNldCBkZWZhdWx0IHBvaW50U2l6ZS5cblx0XHRjb25zdCBwb2ludFNpemUgPSBvcHRpb25zPy5wb2ludFNpemUgfHwgMTtcblx0XHRwcm9ncmFtLnNldFZlcnRleFVuaWZvcm0oZ2xQcm9ncmFtLCAndV9pbnRlcm5hbF9wb2ludFNpemUnLCBwb2ludFNpemUsIEZMT0FUKTtcblx0XHRjb25zdCBwb3NpdGlvbkxheWVyRGltZW5zaW9ucyA9IHBvc2l0aW9uTGF5ZXIuZ2V0RGltZW5zaW9ucygpO1xuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3Bvc2l0aW9uc0RpbWVuc2lvbnMnLCBwb3NpdGlvbkxheWVyRGltZW5zaW9ucywgRkxPQVQpO1xuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3dyYXBYJywgb3B0aW9ucz8ud3JhcFggPyAxIDogMCwgSU5UKTtcblx0XHRwcm9ncmFtLnNldFZlcnRleFVuaWZvcm0oZ2xQcm9ncmFtLCAndV9pbnRlcm5hbF93cmFwWScsIG9wdGlvbnM/LndyYXBZID8gMSA6IDAsIElOVCk7XG5cdFx0aWYgKHRoaXMucG9pbnRJbmRleEJ1ZmZlciA9PT0gdW5kZWZpbmVkIHx8IChwb2ludEluZGV4QXJyYXkgJiYgcG9pbnRJbmRleEFycmF5Lmxlbmd0aCA8IGNvdW50KSkge1xuXHRcdFx0Ly8gSGF2ZSB0byB1c2UgZmxvYXQzMiBhcnJheSBiYyBpbnQgaXMgbm90IHN1cHBvcnRlZCBhcyBhIHZlcnRleCBhdHRyaWJ1dGUgdHlwZS5cblx0XHRcdGNvbnN0IGluZGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGluZGljZXNbaV0gPSBpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5wb2ludEluZGV4QXJyYXkgPSBpbmRpY2VzO1xuXHRcdFx0dGhpcy5wb2ludEluZGV4QnVmZmVyID0gdGhpcy5pbml0VmVydGV4QnVmZmVyKGluZGljZXMpO1xuXHRcdH1cblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5wb2ludEluZGV4QnVmZmVyISk7XG5cdFx0dGhpcy5zZXRJbmRleEF0dHJpYnV0ZShnbFByb2dyYW0pO1xuXG5cdFx0Ly8gRHJhdy5cblx0XHQvLyBEZWZhdWx0IHRvIGJsZW5kID09PSB0cnVlLlxuXHRcdGNvbnN0IHNob3VsZEJsZW5kQWxwaGEgPSBvcHRpb25zPy5zaG91bGRCbGVuZEFscGhhID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcblx0XHRpZiAoc2hvdWxkQmxlbmRBbHBoYSkge1xuXHRcdFx0Z2wuZW5hYmxlKGdsLkJMRU5EKTtcblx0XHRcdGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXHRcdH1cblx0XHRnbC5kcmF3QXJyYXlzKGdsLlBPSU5UUywgMCwgY291bnQpO1xuXHRcdGdsLmRpc2FibGUoZ2wuQkxFTkQpO1xuXHR9XG5cblx0ZHJhd1ZlY3RvckZpZWxkKFxuXHRcdGlucHV0TGF5ZXJzOiBEYXRhTGF5ZXIgfCAoRGF0YUxheWVyIHwgV2ViR0xUZXh0dXJlKVtdLFxuXHRcdG9wdGlvbnM/OiB7XG5cdFx0XHR2ZWN0b3JTcGFjaW5nPzogbnVtYmVyLFxuXHRcdFx0dmVjdG9yU2NhbGU/OiBudW1iZXIsXG5cdFx0XHRjb2xvcj86IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSxcblx0XHRcdHNob3VsZEJsZW5kQWxwaGE/OiBib29sZWFuLFxuXHRcdH0sXG5cdFx0b3V0cHV0TGF5ZXI/OiBEYXRhTGF5ZXIsXG5cdFx0cHJvZ3JhbT86IEdQVVByb2dyYW0sXG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wsIGVycm9yU3RhdGUsIHZlY3RvckZpZWxkSW5kZXhBcnJheSB9ID0gdGhpcztcblx0XHRjb25zdCBbIHdpZHRoLCBoZWlnaHQgXSA9IG91dHB1dExheWVyID8gb3V0cHV0TGF5ZXIuZ2V0RGltZW5zaW9ucygpIDogWyB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCBdO1xuXG5cdFx0Ly8gSWdub3JlIGlmIHdlIGFyZSBpbiBlcnJvciBzdGF0ZS5cblx0XHRpZiAoZXJyb3JTdGF0ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlucHV0TGF5ZXJzID0gaW5wdXRMYXllcnMuY29uc3RydWN0b3IgPT09IERhdGFMYXllciA/IFtpbnB1dExheWVyc10gOiBpbnB1dExheWVycyBhcyAoRGF0YUxheWVyIHwgV2ViR0xUZXh0dXJlKVtdO1xuXG5cdFx0aWYgKGlucHV0TGF5ZXJzLmxlbmd0aCA8IDEpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBpbnB1dExheWVycyBmb3IgZHJhd1ZlY3RvckZpZWxkOiBtdXN0IHBhc3MgYSB2ZWN0b3IgRGF0YUxheWVyIGFzIGZpcnN0IGVsZW1lbnQgb2YgaW5wdXRMYXllcnMuYCk7XG5cdFx0fVxuXHRcdGNvbnN0IHZlY3RvckxheWVyID0gaW5wdXRMYXllcnNbMF0gYXMgRGF0YUxheWVyO1xuXG5cdFx0Ly8gQ2hlY2sgdGhhdCB2ZWN0b3JMYXllciBpcyB2YWxpZC5cblx0XHRpZiAodmVjdG9yTGF5ZXIubnVtQ29tcG9uZW50cyAhPT0gMikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBXZWJHTENvbXB1dGUuZHJhd1ZlY3RvckZpZWxkKCkgbXVzdCBiZSBwYXNzZWQgYSB2ZWN0b3IgRGF0YUxheWVyIHdpdGggMiBjb21wb25lbnRzLCBnb3QgdmVjdG9yIERhdGFMYXllciBcIiR7dmVjdG9yTGF5ZXIubmFtZX1cIiB3aXRoICR7dmVjdG9yTGF5ZXIubnVtQ29tcG9uZW50c30gY29tcG9uZW50cy5gKVxuXHRcdH1cblx0XHQvLyBDaGVjayBhc3BlY3QgcmF0aW8uXG5cdFx0Ly8gY29uc3QgZGltZW5zaW9ucyA9IHZlY3RvckxheWVyLmdldERpbWVuc2lvbnMoKTtcblx0XHQvLyBpZiAoTWF0aC5hYnMoZGltZW5zaW9uc1swXSAvIGRpbWVuc2lvbnNbMV0gLSB3aWR0aCAvIGhlaWdodCkgPiAwLjAxKSB7XG5cdFx0Ly8gXHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYXNwZWN0IHJhdGlvICR7KGRpbWVuc2lvbnNbMF0gLyBkaW1lbnNpb25zWzFdKS50b0ZpeGVkKDMpfSB2ZWN0b3IgRGF0YUxheWVyIHdpdGggZGltZW5zaW9ucyBbJHtkaW1lbnNpb25zWzBdfSwgJHtkaW1lbnNpb25zWzFdfV0sIGV4cGVjdGVkICR7KHdpZHRoIC8gaGVpZ2h0KS50b0ZpeGVkKDMpfS5gKTtcblx0XHQvLyB9XG5cblx0XHRpZiAocHJvZ3JhbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRwcm9ncmFtID0gdGhpcy5zaW5nbGVDb2xvclByb2dyYW07XG5cdFx0XHRjb25zdCBjb2xvciA9IG9wdGlvbnM/LmNvbG9yIHx8IFsxLCAwLCAwXTtcblx0XHRcdHByb2dyYW0uc2V0VW5pZm9ybSgndV9jb2xvcicsIGNvbG9yLCBGTE9BVCk7XG5cdFx0fVxuXHRcdGNvbnN0IGdsUHJvZ3JhbSA9IHByb2dyYW0udmVjdG9yRmllbGRQcm9ncmFtITtcblxuXHRcdC8vIERvIHNldHVwIC0gdGhpcyBtdXN0IGNvbWUgZmlyc3QuXG5cdFx0dGhpcy5kcmF3U2V0dXAoZ2xQcm9ncmFtLCBmYWxzZSwgaW5wdXRMYXllcnMsIG91dHB1dExheWVyKTtcblxuXHRcdC8vIFVwZGF0ZSB1bmlmb3JtcyBhbmQgYnVmZmVycy5cblx0XHRwcm9ncmFtLnNldFZlcnRleFVuaWZvcm0oZ2xQcm9ncmFtLCAndV9pbnRlcm5hbF92ZWN0b3JzJywgMCwgSU5UKTtcblx0XHQvLyBTZXQgZGVmYXVsdCBzY2FsZS5cblx0XHRjb25zdCB2ZWN0b3JTY2FsZSA9IG9wdGlvbnM/LnZlY3RvclNjYWxlIHx8IDE7XG5cdFx0cHJvZ3JhbS5zZXRWZXJ0ZXhVbmlmb3JtKGdsUHJvZ3JhbSwgJ3VfaW50ZXJuYWxfc2NhbGUnLCBbdmVjdG9yU2NhbGUgLyB3aWR0aCwgdmVjdG9yU2NhbGUgLyBoZWlnaHRdLCBGTE9BVCk7XG5cdFx0Y29uc3QgdmVjdG9yU3BhY2luZyA9IG9wdGlvbnM/LnZlY3RvclNwYWNpbmcgfHwgMTA7XG5cdFx0Y29uc3Qgc3BhY2VkRGltZW5zaW9ucyA9IFtNYXRoLmZsb29yKHdpZHRoIC8gdmVjdG9yU3BhY2luZyksIE1hdGguZmxvb3IoaGVpZ2h0IC8gdmVjdG9yU3BhY2luZyldIGFzIFtudW1iZXIsIG51bWJlcl07XG5cdFx0cHJvZ3JhbS5zZXRWZXJ0ZXhVbmlmb3JtKGdsUHJvZ3JhbSwgJ3VfaW50ZXJuYWxfZGltZW5zaW9ucycsIHNwYWNlZERpbWVuc2lvbnMsIEZMT0FUKTtcblx0XHRjb25zdCBsZW5ndGggPSAyICogc3BhY2VkRGltZW5zaW9uc1swXSAqIHNwYWNlZERpbWVuc2lvbnNbMV07XG5cdFx0aWYgKHRoaXMudmVjdG9yRmllbGRJbmRleEJ1ZmZlciA9PT0gdW5kZWZpbmVkIHx8ICh2ZWN0b3JGaWVsZEluZGV4QXJyYXkgJiYgdmVjdG9yRmllbGRJbmRleEFycmF5Lmxlbmd0aCA8IGxlbmd0aCkpIHtcblx0XHRcdC8vIEhhdmUgdG8gdXNlIGZsb2F0MzIgYXJyYXkgYmMgaW50IGlzIG5vdCBzdXBwb3J0ZWQgYXMgYSB2ZXJ0ZXggYXR0cmlidXRlIHR5cGUuXG5cdFx0XHRjb25zdCBpbmRpY2VzID0gbmV3IEZsb2F0MzJBcnJheShsZW5ndGgpO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpbmRpY2VzW2ldID0gaTtcblx0XHRcdH1cblx0XHRcdHRoaXMudmVjdG9yRmllbGRJbmRleEFycmF5ID0gaW5kaWNlcztcblx0XHRcdHRoaXMudmVjdG9yRmllbGRJbmRleEJ1ZmZlciA9IHRoaXMuaW5pdFZlcnRleEJ1ZmZlcihpbmRpY2VzKTtcblx0XHR9XG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMudmVjdG9yRmllbGRJbmRleEJ1ZmZlciEpO1xuXHRcdHRoaXMuc2V0SW5kZXhBdHRyaWJ1dGUoZ2xQcm9ncmFtKTtcblxuXHRcdC8vIERyYXcuXG5cdFx0Ly8gRGVmYXVsdCB0byBibGVuZCA9PT0gdHJ1ZS5cblx0XHRjb25zdCBzaG91bGRCbGVuZEFscGhhID0gb3B0aW9ucz8uc2hvdWxkQmxlbmRBbHBoYSA9PT0gZmFsc2UgPyBmYWxzZSA6IHRydWU7XG5cdFx0aWYgKHNob3VsZEJsZW5kQWxwaGEpIHtcblx0XHRcdGdsLmVuYWJsZShnbC5CTEVORCk7XG5cdFx0XHRnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblx0XHR9XG5cdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FUywgMCwgbGVuZ3RoKTtcblx0XHRnbC5kaXNhYmxlKGdsLkJMRU5EKTtcblx0fVxuXG5cdGRyYXdJbmRleGVkTGluZXMoXG5cdFx0aW5wdXRMYXllcnM6IERhdGFMYXllciB8IChEYXRhTGF5ZXIgfCBXZWJHTFRleHR1cmUpW10sXG5cdFx0aW5kaWNlczogRmxvYXQzMkFycmF5IHwgVWludDE2QXJyYXkgfCBVaW50MzJBcnJheSB8IEludDE2QXJyYXkgfCBJbnQzMkFycmF5LFxuXHRcdG9wdGlvbnM/OiB7XG5cdFx0XHRjb3VudD86IG51bWJlcixcblx0XHRcdGNvbG9yPzogW251bWJlciwgbnVtYmVyLCBudW1iZXJdLFxuXHRcdFx0d3JhcFg/OiBib29sZWFuLFxuXHRcdFx0d3JhcFk/OiBib29sZWFuLFxuXHRcdFx0c2hvdWxkQmxlbmRBbHBoYT86IGJvb2xlYW4sXG5cdFx0fSxcblx0XHRvdXRwdXRMYXllcj86IERhdGFMYXllcixcblx0XHRwcm9ncmFtPzogR1BVUHJvZ3JhbSxcblx0KSB7XG5cdFx0Y29uc3QgeyBnbCwgZXJyb3JTdGF0ZSB9ID0gdGhpcztcblx0XHRjb25zdCBbIHdpZHRoLCBoZWlnaHQgXSA9IG91dHB1dExheWVyID8gb3V0cHV0TGF5ZXIuZ2V0RGltZW5zaW9ucygpIDogWyB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCBdO1xuXG5cdFx0Ly8gSWdub3JlIGlmIHdlIGFyZSBpbiBlcnJvciBzdGF0ZS5cblx0XHRpZiAoZXJyb3JTdGF0ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlucHV0TGF5ZXJzID0gaW5wdXRMYXllcnMuY29uc3RydWN0b3IgPT09IERhdGFMYXllciA/IFtpbnB1dExheWVyc10gOiBpbnB1dExheWVycyBhcyAoRGF0YUxheWVyIHwgV2ViR0xUZXh0dXJlKVtdO1xuXG5cdFx0aWYgKGlucHV0TGF5ZXJzLmxlbmd0aCA8IDEpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBpbnB1dExheWVycyBmb3IgZHJhd0luZGV4ZWRMaW5lczogbXVzdCBwYXNzIGEgcG9zaXRpb24gRGF0YUxheWVyIGFzIGZpcnN0IGVsZW1lbnQgb2YgaW5wdXRMYXllcnMuYCk7XG5cdFx0fVxuXHRcdGNvbnN0IHBvc2l0aW9uTGF5ZXIgPSBpbnB1dExheWVyc1swXSBhcyBEYXRhTGF5ZXI7XG5cblx0XHQvLyBDaGVjayB0aGF0IHBvc2l0aW9uTGF5ZXIgaXMgdmFsaWQuXG5cdFx0aWYgKHBvc2l0aW9uTGF5ZXIubnVtQ29tcG9uZW50cyAhPT0gMiAmJiBwb3NpdGlvbkxheWVyLm51bUNvbXBvbmVudHMgIT09IDQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgV2ViR0xDb21wdXRlLmRyYXdJbmRleGVkTGluZXMoKSBtdXN0IGJlIHBhc3NlZCBhIHBvc2l0aW9uIERhdGFMYXllciB3aXRoIGVpdGhlciAyIG9yIDQgY29tcG9uZW50cywgZ290IHBvc2l0aW9uIERhdGFMYXllciBcIiR7cG9zaXRpb25MYXllci5uYW1lfVwiIHdpdGggJHtwb3NpdGlvbkxheWVyLm51bUNvbXBvbmVudHN9IGNvbXBvbmVudHMuYClcblx0XHR9XG5cblx0XHRpZiAocHJvZ3JhbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRwcm9ncmFtID0gb3B0aW9ucz8ud3JhcFggfHwgb3B0aW9ucz8ud3JhcFkgPyB0aGlzLnNpbmdsZUNvbG9yV2l0aFdyYXBDaGVja1Byb2dyYW0gOiB0aGlzLnNpbmdsZUNvbG9yUHJvZ3JhbTtcblx0XHRcdGNvbnN0IGNvbG9yID0gb3B0aW9ucz8uY29sb3IgfHwgWzEsIDAsIDBdO1xuXHRcdFx0cHJvZ3JhbS5zZXRVbmlmb3JtKCd1X2NvbG9yJywgY29sb3IsIEZMT0FUKTtcblx0XHR9XG5cdFx0Y29uc3QgZ2xQcm9ncmFtID0gcHJvZ3JhbS5pbmRleGVkTGluZXNQcm9ncmFtITtcblxuXHRcdC8vIERvIHNldHVwIC0gdGhpcyBtdXN0IGNvbWUgZmlyc3QuXG5cdFx0dGhpcy5kcmF3U2V0dXAoZ2xQcm9ncmFtLCBmYWxzZSwgaW5wdXRMYXllcnMsIG91dHB1dExheWVyKTtcblxuXHRcdGNvbnN0IGNvdW50ID0gb3B0aW9ucz8uY291bnQgPyBvcHRpb25zLmNvdW50IDogaW5kaWNlcy5sZW5ndGg7XG5cblx0XHQvLyBVcGRhdGUgdW5pZm9ybXMgYW5kIGJ1ZmZlcnMuXG5cdFx0cHJvZ3JhbS5zZXRWZXJ0ZXhVbmlmb3JtKGdsUHJvZ3JhbSwgJ3VfaW50ZXJuYWxfcG9zaXRpb25zJywgMCwgSU5UKTtcblx0XHRwcm9ncmFtLnNldFZlcnRleFVuaWZvcm0oZ2xQcm9ncmFtLCAndV9pbnRlcm5hbF9zY2FsZScsIFsxIC8gd2lkdGgsIDEgLyBoZWlnaHRdLCBGTE9BVCk7XG5cdFx0Ly8gVGVsbCB3aGV0aGVyIHdlIGFyZSB1c2luZyBhbiBhYnNvbHV0ZSBwb3NpdGlvbiAoMiBjb21wb25lbnRzKSwgb3IgcG9zaXRpb24gd2l0aCBhY2N1bXVsYXRpb24gYnVmZmVyICg0IGNvbXBvbmVudHMsIGJldHRlciBmbG9hdGluZyBwdCBhY2N1cmFjeSkuXG5cdFx0cHJvZ3JhbS5zZXRWZXJ0ZXhVbmlmb3JtKGdsUHJvZ3JhbSwgJ3VfaW50ZXJuYWxfcG9zaXRpb25XaXRoQWNjdW11bGF0aW9uJywgcG9zaXRpb25MYXllci5udW1Db21wb25lbnRzID09PSA0ID8gMSA6IDAsIElOVCk7XG5cdFx0Y29uc3QgcG9zaXRpb25MYXllckRpbWVuc2lvbnMgPSBwb3NpdGlvbkxheWVyLmdldERpbWVuc2lvbnMoKTtcblx0XHRwcm9ncmFtLnNldFZlcnRleFVuaWZvcm0oZ2xQcm9ncmFtLCAndV9pbnRlcm5hbF9wb3NpdGlvbnNEaW1lbnNpb25zJywgcG9zaXRpb25MYXllckRpbWVuc2lvbnMsIEZMT0FUKTtcblx0XHRwcm9ncmFtLnNldFZlcnRleFVuaWZvcm0oZ2xQcm9ncmFtLCAndV9pbnRlcm5hbF93cmFwWCcsIG9wdGlvbnM/LndyYXBYID8gMSA6IDAsIElOVCk7XG5cdFx0cHJvZ3JhbS5zZXRWZXJ0ZXhVbmlmb3JtKGdsUHJvZ3JhbSwgJ3VfaW50ZXJuYWxfd3JhcFknLCBvcHRpb25zPy53cmFwWSA/IDEgOiAwLCBJTlQpO1xuXHRcdGlmICh0aGlzLmluZGV4ZWRMaW5lc0luZGV4QnVmZmVyID09PSB1bmRlZmluZWQpIHtcblx0XHRcdC8vIEhhdmUgdG8gdXNlIGZsb2F0MzIgYXJyYXkgYmMgaW50IGlzIG5vdCBzdXBwb3J0ZWQgYXMgYSB2ZXJ0ZXggYXR0cmlidXRlIHR5cGUuXG5cdFx0XHRsZXQgZmxvYXRBcnJheTogRmxvYXQzMkFycmF5O1xuXHRcdFx0aWYgKGluZGljZXMuY29uc3RydWN0b3IgIT09IEZsb2F0MzJBcnJheSkge1xuXHRcdFx0XHQvLyBIYXZlIHRvIHVzZSBmbG9hdDMyIGFycmF5IGJjIGludCBpcyBub3Qgc3VwcG9ydGVkIGFzIGEgdmVydGV4IGF0dHJpYnV0ZSB0eXBlLlxuXHRcdFx0XHRmbG9hdEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShpbmRpY2VzLmxlbmd0aCk7XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuXHRcdFx0XHRcdGZsb2F0QXJyYXlbaV0gPSBpbmRpY2VzW2ldO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnNvbGUud2FybihgQ29udmVydGluZyBpbmRpY2VzIGFycmF5IG9mIHR5cGUgJHtpbmRpY2VzLmNvbnN0cnVjdG9yfSB0byBGbG9hdDMyQXJyYXkgaW4gV2ViR0xDb21wdXRlLmRyYXdJbmRleGVkTGluZXMgZm9yIFdlYkdMIGNvbXBhdGliaWxpdHksIHlvdSBtYXkgd2FudCB0byB1c2UgYSBGbG9hdDMyQXJyYXkgdG8gc3RvcmUgdGhpcyBpbmZvcm1hdGlvbiBzbyB0aGUgY29udmVyc2lvbiBpcyBub3QgcmVxdWlyZWQuYCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmbG9hdEFycmF5ID0gaW5kaWNlcyBhcyBGbG9hdDMyQXJyYXk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmluZGV4ZWRMaW5lc0luZGV4QnVmZmVyID0gdGhpcy5pbml0VmVydGV4QnVmZmVyKGZsb2F0QXJyYXkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5pbmRleGVkTGluZXNJbmRleEJ1ZmZlciEpO1xuXHRcdFx0Ly8gQ29weSBidWZmZXIgZGF0YS5cblx0XHRcdGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBpbmRpY2VzLCBnbC5TVEFUSUNfRFJBVyk7XG5cdFx0fVxuXHRcdC8vIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLmluZGV4ZWRMaW5lc0luZGV4QnVmZmVyISk7XG5cdFx0dGhpcy5zZXRJbmRleEF0dHJpYnV0ZShnbFByb2dyYW0pO1xuXG5cdFx0Ly8gRHJhdy5cblx0XHQvLyBEZWZhdWx0IHRvIGJsZW5kID09PSB0cnVlLlxuXHRcdGNvbnN0IHNob3VsZEJsZW5kQWxwaGEgPSBvcHRpb25zPy5zaG91bGRCbGVuZEFscGhhID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcblx0XHRpZiAoc2hvdWxkQmxlbmRBbHBoYSkge1xuXHRcdFx0Z2wuZW5hYmxlKGdsLkJMRU5EKTtcblx0XHRcdGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXHRcdH1cblx0XHRnbC5kcmF3QXJyYXlzKGdsLkxJTkVTLCAwLCBjb3VudCk7XG5cdFx0Z2wuZGlzYWJsZShnbC5CTEVORCk7XG5cdH1cblx0XG5cdGdldENvbnRleHQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2w7XG5cdH1cblxuXHRnZXRWYWx1ZXMoZGF0YUxheWVyOiBEYXRhTGF5ZXIpIHtcblx0XHRjb25zdCB7IGdsLCBnbHNsVmVyc2lvbiB9ID0gdGhpcztcblxuXHRcdC8vIEluIGNhc2UgZGF0YUxheWVyIHdhcyBub3QgdGhlIGxhc3Qgb3V0cHV0IHdyaXR0ZW4gdG8uXG5cdFx0ZGF0YUxheWVyLl9iaW5kT3V0cHV0QnVmZmVyKCk7XG5cblx0XHRjb25zdCBbIHdpZHRoLCBoZWlnaHQgXSA9IGRhdGFMYXllci5nZXREaW1lbnNpb25zKCk7XG5cdFx0bGV0IHsgZ2xOdW1DaGFubmVscywgZ2xUeXBlLCBnbEZvcm1hdCwgaW50ZXJuYWxUeXBlIH0gPSBkYXRhTGF5ZXI7XG5cdFx0bGV0IHZhbHVlcztcblx0XHRzd2l0Y2ggKGludGVybmFsVHlwZSkge1xuXHRcdFx0Y2FzZSBIQUxGX0ZMT0FUOlxuXHRcdFx0XHRpZiAoZ2wuRkxPQVQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdC8vIEZpcmVmb3ggcmVxdWlyZXMgdGhhdCBSR0JBL0ZMT0FUIGlzIHVzZWQgZm9yIHJlYWRQaXhlbHMgb2YgZmxvYXQxNiB0eXBlcy5cblx0XHRcdFx0XHRnbE51bUNoYW5uZWxzID0gNDtcblx0XHRcdFx0XHRnbEZvcm1hdCA9IGdsLlJHQkE7XG5cdFx0XHRcdFx0Z2xUeXBlID0gZ2wuRkxPQVQ7XG5cdFx0XHRcdFx0dmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheSh3aWR0aCAqIGhlaWdodCAqIGdsTnVtQ2hhbm5lbHMpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhbHVlcyA9IG5ldyBVaW50MTZBcnJheSh3aWR0aCAqIGhlaWdodCAqIGdsTnVtQ2hhbm5lbHMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIC8vIFRoZSBmb2xsb3dpbmcgd29ya3MgaW4gQ2hyb21lLlxuXHRcdFx0XHQvLyB2YWx1ZXMgPSBuZXcgVWludDE2QXJyYXkod2lkdGggKiBoZWlnaHQgKiBnbE51bUNoYW5uZWxzKTtcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgRkxPQVQ6XG5cdFx0XHRcdC8vIENocm9tZSBhbmQgRmlyZWZveCByZXF1aXJlIHRoYXQgUkdCQS9GTE9BVCBpcyB1c2VkIGZvciByZWFkUGl4ZWxzIG9mIGZsb2F0MzIgdHlwZXMuXG5cdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvV2ViR0wvaXNzdWVzLzI3NDdcblx0XHRcdFx0Z2xOdW1DaGFubmVscyA9IDQ7XG5cdFx0XHRcdGdsRm9ybWF0ID0gZ2wuUkdCQTtcblx0XHRcdFx0dmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheSh3aWR0aCAqIGhlaWdodCAqIGdsTnVtQ2hhbm5lbHMpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgVU5TSUdORURfQllURTpcblx0XHRcdFx0aWYgKGdsc2xWZXJzaW9uID09PSBHTFNMMSkge1xuXHRcdFx0XHRcdC8vIEZpcmVmb3ggcmVxdWlyZXMgdGhhdCBSR0JBL1VOU0lHTkVEX0JZVEUgaXMgdXNlZCBmb3IgcmVhZFBpeGVscyBvZiB1bnNpZ25lZCBieXRlIHR5cGVzLlxuXHRcdFx0XHRcdGdsTnVtQ2hhbm5lbHMgPSA0O1xuXHRcdFx0XHRcdGdsRm9ybWF0ID0gZ2wuUkdCQTtcblx0XHRcdFx0XHR2YWx1ZXMgPSBuZXcgVWludDhBcnJheSh3aWR0aCAqIGhlaWdodCAqIGdsTnVtQ2hhbm5lbHMpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIEZpcmVmb3ggcmVxdWlyZXMgdGhhdCBSR0JBX0lOVEVHRVIvVU5TSUdORURfSU5UIGlzIHVzZWQgZm9yIHJlYWRQaXhlbHMgb2YgdW5zaWduZWQgaW50IHR5cGVzLlxuXHRcdFx0XHRnbE51bUNoYW5uZWxzID0gNDtcblx0XHRcdFx0Z2xGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCQV9JTlRFR0VSO1xuXHRcdFx0XHRnbFR5cGUgPSBnbC5VTlNJR05FRF9JTlQ7XG5cdFx0XHRcdHZhbHVlcyA9IG5ldyBVaW50MzJBcnJheSh3aWR0aCAqIGhlaWdodCAqIGdsTnVtQ2hhbm5lbHMpO1xuXHRcdFx0XHQvLyAvLyBUaGUgZm9sbG93aW5nIHdvcmtzIGluIENocm9tZS5cblx0XHRcdFx0Ly8gdmFsdWVzID0gbmV3IFVpbnQ4QXJyYXkod2lkdGggKiBoZWlnaHQgKiBnbE51bUNoYW5uZWxzKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFVOU0lHTkVEX1NIT1JUOlxuXHRcdFx0XHQvLyBGaXJlZm94IHJlcXVpcmVzIHRoYXQgUkdCQV9JTlRFR0VSL1VOU0lHTkVEX0lOVCBpcyB1c2VkIGZvciByZWFkUGl4ZWxzIG9mIHVuc2lnbmVkIGludCB0eXBlcy5cblx0XHRcdFx0Z2xOdW1DaGFubmVscyA9IDQ7XG5cdFx0XHRcdGdsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQkFfSU5URUdFUjtcblx0XHRcdFx0Z2xUeXBlID0gZ2wuVU5TSUdORURfSU5UO1xuXHRcdFx0XHR2YWx1ZXMgPSBuZXcgVWludDMyQXJyYXkod2lkdGggKiBoZWlnaHQgKiBnbE51bUNoYW5uZWxzKTtcblx0XHRcdFx0Ly8gLy8gVGhlIGZvbGxvd2luZyB3b3JrcyBpbiBDaHJvbWUuXG5cdFx0XHRcdC8vIHZhbHVlcyA9IG5ldyBVaW50MTZBcnJheSh3aWR0aCAqIGhlaWdodCAqIGdsTnVtQ2hhbm5lbHMpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgVU5TSUdORURfSU5UOlxuXHRcdFx0XHQvLyBGaXJlZm94IHJlcXVpcmVzIHRoYXQgUkdCQV9JTlRFR0VSL1VOU0lHTkVEX0lOVCBpcyB1c2VkIGZvciByZWFkUGl4ZWxzIG9mIHVuc2lnbmVkIGludCB0eXBlcy5cblx0XHRcdFx0Z2xOdW1DaGFubmVscyA9IDQ7XG5cdFx0XHRcdGdsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQkFfSU5URUdFUjtcblx0XHRcdFx0dmFsdWVzID0gbmV3IFVpbnQzMkFycmF5KHdpZHRoICogaGVpZ2h0ICogZ2xOdW1DaGFubmVscyk7XG5cdFx0XHRcdC8vIC8vIFRoZSBmb2xsb3dpbmcgd29ya3MgaW4gQ2hyb21lLlxuXHRcdFx0XHQvLyB2YWx1ZXMgPSBuZXcgVWludDMyQXJyYXkod2lkdGggKiBoZWlnaHQgKiBnbE51bUNoYW5uZWxzKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIEJZVEU6XG5cdFx0XHRcdC8vIEZpcmVmb3ggcmVxdWlyZXMgdGhhdCBSR0JBX0lOVEVHRVIvSU5UIGlzIHVzZWQgZm9yIHJlYWRQaXhlbHMgb2YgaW50IHR5cGVzLlxuXHRcdFx0XHRnbE51bUNoYW5uZWxzID0gNDtcblx0XHRcdFx0Z2xGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCQV9JTlRFR0VSO1xuXHRcdFx0XHRnbFR5cGUgPSBnbC5JTlQ7XG5cdFx0XHRcdHZhbHVlcyA9IG5ldyBJbnQzMkFycmF5KHdpZHRoICogaGVpZ2h0ICogZ2xOdW1DaGFubmVscyk7XG5cdFx0XHRcdC8vIC8vIFRoZSBmb2xsb3dpbmcgd29ya3MgaW4gQ2hyb21lLlxuXHRcdFx0XHQvLyB2YWx1ZXMgPSBuZXcgSW50OEFycmF5KHdpZHRoICogaGVpZ2h0ICogZ2xOdW1DaGFubmVscyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBTSE9SVDpcblx0XHRcdFx0Ly8gRmlyZWZveCByZXF1aXJlcyB0aGF0IFJHQkFfSU5URUdFUi9JTlQgaXMgdXNlZCBmb3IgcmVhZFBpeGVscyBvZiBpbnQgdHlwZXMuXG5cdFx0XHRcdGdsTnVtQ2hhbm5lbHMgPSA0O1xuXHRcdFx0XHRnbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0JBX0lOVEVHRVI7XG5cdFx0XHRcdGdsVHlwZSA9IGdsLklOVDtcblx0XHRcdFx0dmFsdWVzID0gbmV3IEludDMyQXJyYXkod2lkdGggKiBoZWlnaHQgKiBnbE51bUNoYW5uZWxzKTtcblx0XHRcdFx0Ly8gLy8gVGhlIGZvbGxvd2luZyB3b3JrcyBpbiBDaHJvbWUuXG5cdFx0XHRcdC8vIHZhbHVlcyA9IG5ldyBJbnQxNkFycmF5KHdpZHRoICogaGVpZ2h0ICogZ2xOdW1DaGFubmVscyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBJTlQ6XG5cdFx0XHRcdC8vIEZpcmVmb3ggcmVxdWlyZXMgdGhhdCBSR0JBX0lOVEVHRVIvSU5UIGlzIHVzZWQgZm9yIHJlYWRQaXhlbHMgb2YgaW50IHR5cGVzLlxuXHRcdFx0XHRnbE51bUNoYW5uZWxzID0gNDtcblx0XHRcdFx0Z2xGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCQV9JTlRFR0VSO1xuXHRcdFx0XHR2YWx1ZXMgPSBuZXcgSW50MzJBcnJheSh3aWR0aCAqIGhlaWdodCAqIGdsTnVtQ2hhbm5lbHMpO1xuXHRcdFx0XHQvLyAvLyBUaGUgZm9sbG93aW5nIHdvcmtzIGluIENocm9tZS5cblx0XHRcdFx0Ly8gdmFsdWVzID0gbmV3IEludDMyQXJyYXkod2lkdGggKiBoZWlnaHQgKiBnbE51bUNoYW5uZWxzKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGludGVybmFsVHlwZSAke2ludGVybmFsVHlwZX0gZm9yIGdldFZhbHVlcygpLmApO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnJlYWR5VG9SZWFkKCkpIHtcblx0XHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJHTFJlbmRlcmluZ0NvbnRleHQvcmVhZFBpeGVsc1xuXHRcdFx0Z2wucmVhZFBpeGVscygwLCAwLCB3aWR0aCwgaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCB2YWx1ZXMpO1xuXHRcdFx0Y29uc3QgeyBudW1Db21wb25lbnRzLCB0eXBlIH0gPSBkYXRhTGF5ZXI7XG5cdFx0XHRjb25zdCBPVVRQVVRfTEVOR1RIID0gd2lkdGggKiBoZWlnaHQgKiBudW1Db21wb25lbnRzO1xuXG5cdFx0XHQvLyBDb252ZXJ0IHVpbnQxNiB0byBmbG9hdDMyIGlmIG5lZWRlZC5cblx0XHRcdGNvbnN0IGhhbmRsZUZsb2F0MTZDb252ZXJzaW9uID0gaW50ZXJuYWxUeXBlID09PSBIQUxGX0ZMT0FUICYmIHZhbHVlcy5jb25zdHJ1Y3RvciA9PT0gVWludDE2QXJyYXk7XG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRjb25zdCB2aWV3ID0gaGFuZGxlRmxvYXQxNkNvbnZlcnNpb24gPyBuZXcgRGF0YVZpZXcoKHZhbHVlcyBhcyBVaW50MTZBcnJheSkuYnVmZmVyKSA6IHVuZGVmaW5lZDtcblxuXHRcdFx0bGV0IG91dHB1dDogRGF0YUxheWVyQXJyYXlUeXBlID0gdmFsdWVzO1xuXHRcdFx0XG5cdFx0XHQvLyBXZSBtYXkgdXNlIGEgZGlmZmVyZW50IGludGVybmFsIHR5cGUgdGhhbiB0aGUgYXNzaWduZWQgdHlwZSBvZiB0aGUgRGF0YUxheWVyLlxuXHRcdFx0aWYgKGludGVybmFsVHlwZSAhPT0gdHlwZSkge1xuXHRcdFx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdFx0XHRjYXNlIEhBTEZfRkxPQVQ6XG5cdFx0XHRcdFx0Y2FzZSBGTE9BVDpcblx0XHRcdFx0XHRcdG91dHB1dCA9IG5ldyBGbG9hdDMyQXJyYXkoT1VUUFVUX0xFTkdUSCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFVOU0lHTkVEX0JZVEU6XG5cdFx0XHRcdFx0XHRvdXRwdXQgPSBuZXcgVWludDhBcnJheShPVVRQVVRfTEVOR1RIKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgQllURTpcblx0XHRcdFx0XHRcdG91dHB1dCA9IG5ldyBJbnQ4QXJyYXkoT1VUUFVUX0xFTkdUSCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFVOU0lHTkVEX1NIT1JUOlxuXHRcdFx0XHRcdFx0b3V0cHV0ID0gbmV3IFVpbnQxNkFycmF5KE9VVFBVVF9MRU5HVEgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBTSE9SVDpcblx0XHRcdFx0XHRcdG91dHB1dCA9IG5ldyBJbnQxNkFycmF5KE9VVFBVVF9MRU5HVEgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBVTlNJR05FRF9JTlQ6XG5cdFx0XHRcdFx0XHRvdXRwdXQgPSBuZXcgVWludDMyQXJyYXkoT1VUUFVUX0xFTkdUSCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIElOVDpcblx0XHRcdFx0XHRcdG91dHB1dCA9IG5ldyBJbnQzMkFycmF5KE9VVFBVVF9MRU5HVEgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgdHlwZSAke3R5cGV9IGZvciBnZXRWYWx1ZXMoKS5gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbiBzb21lIGNhc2VzIGdsTnVtQ2hhbm5lbHMgbWF5IGJlID4gbnVtQ29tcG9uZW50cy5cblx0XHRcdGlmIChoYW5kbGVGbG9hdDE2Q29udmVyc2lvbiB8fCBvdXRwdXQgIT09IHZhbHVlcyB8fCBudW1Db21wb25lbnRzICE9PSBnbE51bUNoYW5uZWxzKSB7XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSB3aWR0aCAqIGhlaWdodDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0Y29uc3QgaW5kZXgxID0gaSAqIGdsTnVtQ2hhbm5lbHM7XG5cdFx0XHRcdFx0Y29uc3QgaW5kZXgyID0gaSAqIG51bUNvbXBvbmVudHM7XG5cdFx0XHRcdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBudW1Db21wb25lbnRzOyBqKyspIHtcblx0XHRcdFx0XHRcdGlmIChoYW5kbGVGbG9hdDE2Q29udmVyc2lvbikge1xuXHRcdFx0XHRcdFx0XHRvdXRwdXRbaW5kZXgyICsgal0gPSBnZXRGbG9hdDE2KHZpZXchLCAyICogKGluZGV4MSArIGopLCB0cnVlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdG91dHB1dFtpbmRleDIgKyBqXSA9IHZhbHVlc1tpbmRleDEgKyBqXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKG91dHB1dC5sZW5ndGggIT09IE9VVFBVVF9MRU5HVEgpIHtcblx0XHRcdFx0b3V0cHV0ID0gb3V0cHV0LnNsaWNlKDAsIE9VVFBVVF9MRU5HVEgpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG91dHB1dDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gcmVhZCB2YWx1ZXMgZnJvbSBCdWZmZXIgd2l0aCBzdGF0dXM6ICR7Z2wuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyhnbC5GUkFNRUJVRkZFUil9LmApO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgcmVhZHlUb1JlYWQoKSB7XG5cdFx0Y29uc3QgeyBnbCB9ID0gdGhpcztcblx0XHRyZXR1cm4gZ2wuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyhnbC5GUkFNRUJVRkZFUikgPT0gZ2wuRlJBTUVCVUZGRVJfQ09NUExFVEU7XG5cdH07XG5cblx0c2F2ZVBORyhkYXRhTGF5ZXI6IERhdGFMYXllciwgZmlsZW5hbWUgPSBkYXRhTGF5ZXIubmFtZSwgZHBpPzogbnVtYmVyKSB7XG5cdFx0Y29uc3QgdmFsdWVzID0gdGhpcy5nZXRWYWx1ZXMoZGF0YUxheWVyKTtcblx0XHRjb25zdCBbd2lkdGgsIGhlaWdodF0gPSBkYXRhTGF5ZXIuZ2V0RGltZW5zaW9ucygpO1xuXG5cdFx0Y29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG5cdFx0Y2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgXHRjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSE7XG5cdFx0Y29uc3QgaW1hZ2VEYXRhID0gY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG5cdFx0Y29uc3QgYnVmZmVyID0gaW1hZ2VEYXRhLmRhdGE7XG5cdFx0Ly8gVE9ETzogdGhpcyBpc24ndCB3b3JraW5nIGZvciBVTlNJR05FRF9CWVRFIHR5cGVzP1xuXHRcdGNvbnN0IGlzRmxvYXQgPSBkYXRhTGF5ZXIudHlwZSA9PT0gRkxPQVQgfHwgZGF0YUxheWVyLnR5cGUgPT09IEhBTEZfRkxPQVQ7XG5cdFx0Ly8gSGF2ZSB0byBmbGlwIHRoZSB5IGF4aXMgc2luY2UgUE5HcyBhcmUgd3JpdHRlbiB0b3AgdG8gYm90dG9tLlxuXHRcdGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcblx0XHRcdGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuXHRcdFx0XHRjb25zdCBpbmRleCA9IHkgKiB3aWR0aCArIHg7XG5cdFx0XHRcdGNvbnN0IGluZGV4RmxpcHBlZCA9IChoZWlnaHQgLSAxIC0geSkgKiB3aWR0aCArIHg7XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YUxheWVyLm51bUNvbXBvbmVudHM7IGkrKykge1xuXHRcdFx0XHRcdGJ1ZmZlcls0ICogaW5kZXhGbGlwcGVkICsgaV0gPSB2YWx1ZXNbZGF0YUxheWVyLm51bUNvbXBvbmVudHMgKiBpbmRleCArIGldICogKGlzRmxvYXQgPyAyNTUgOiAxKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZGF0YUxheWVyLm51bUNvbXBvbmVudHMgPCA0KSB7XG5cdFx0XHRcdFx0YnVmZmVyWzQgKiBpbmRleEZsaXBwZWQgKyAzXSA9IDI1NTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBjb25zb2xlLmxvZyh2YWx1ZXMsIGJ1ZmZlcik7XG5cdFx0Y29udGV4dC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKTtcblxuXHRcdGNhbnZhcyEudG9CbG9iKChibG9iKSA9PiB7XG5cdFx0XHRpZiAoIWJsb2IpIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKCdQcm9ibGVtIHNhdmluZyBQTkcsIHVuYWJsZSB0byBpbml0IGJsb2IuJyk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmIChkcGkpIHtcblx0XHRcdFx0Y2hhbmdlRHBpQmxvYihibG9iLCBkcGkpLnRoZW4oKGJsb2I6IEJsb2IpID0+e1xuXHRcdFx0XHRcdHNhdmVBcyhibG9iLCBgJHtmaWxlbmFtZX0ucG5nYCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2F2ZUFzKGJsb2IsIGAke2ZpbGVuYW1lfS5wbmdgKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdH0sICdpbWFnZS9wbmcnKTtcblx0fVxuXG4gICAgcmVzZXQoKSB7XG5cdFx0Ly8gVE9ETzogaW1wbGVtZW50IHRoaXMuXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdXZWJHTENvbXB1dGUucmVzZXQoKSBub3QgaW1wbGVtZW50ZWQuJyk7XG5cdH07XG5cblx0YXR0YWNoRGF0YUxheWVyVG9UaHJlZVRleHR1cmUoZGF0YUxheWVyOiBEYXRhTGF5ZXIsIHRleHR1cmU6IFRleHR1cmUpIHtcblx0XHRpZiAoIXRoaXMucmVuZGVyZXIpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignV2ViR0xDb21wdXRlIHdhcyBub3QgaW5pdGVkIHdpdGggYSByZW5kZXJlci4nKTtcblx0XHR9XG5cdFx0Ly8gTGluayB3ZWJnbCB0ZXh0dXJlIHRvIHRocmVlanMgb2JqZWN0LlxuXHRcdC8vIFRoaXMgaXMgbm90IG9mZmljaWFsbHkgc3VwcG9ydGVkLlxuXHRcdGlmIChkYXRhTGF5ZXIubnVtQnVmZmVycyA+IDEpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgRGF0YUxheWVyIFwiJHtkYXRhTGF5ZXIubmFtZX1cIiBjb250YWlucyBtdWx0aXBsZSBXZWJHTCB0ZXh0dXJlcyAob25lIGZvciBlYWNoIGJ1ZmZlcikgdGhhdCBhcmUgZmxpcC1mbG9wcGVkIGR1cmluZyBjb21wdXRlIGN5Y2xlcywgcGxlYXNlIGNob29zZSBhIERhdGFMYXllciB3aXRoIG9uZSBidWZmZXIuYCk7XG5cdFx0fVxuXHRcdGNvbnN0IG9mZnNldFRleHR1cmVQcm9wZXJ0aWVzID0gdGhpcy5yZW5kZXJlci5wcm9wZXJ0aWVzLmdldCh0ZXh0dXJlKTtcblx0XHRvZmZzZXRUZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSA9IGRhdGFMYXllci5nZXRDdXJyZW50U3RhdGVUZXh0dXJlKCk7XG5cdFx0b2Zmc2V0VGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbEluaXQgPSB0cnVlO1xuXHR9XG5cblx0cmVzZXRUaHJlZVN0YXRlKCkge1xuXHRcdGlmICghdGhpcy5yZW5kZXJlcikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdXZWJHTENvbXB1dGUgd2FzIG5vdCBpbml0ZWQgd2l0aCBhIHJlbmRlcmVyLicpO1xuXHRcdH1cblx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXHRcdC8vIFJlc2V0IHZpZXdwb3J0LlxuXHRcdGNvbnN0IHZpZXdwb3J0ID0gdGhpcy5yZW5kZXJlci5nZXRWaWV3cG9ydChuZXcgdXRpbHMuVmVjdG9yNCgpIGFzIFZlY3RvcjQpO1xuXHRcdGdsLnZpZXdwb3J0KHZpZXdwb3J0LngsIHZpZXdwb3J0LnksIHZpZXdwb3J0LndpZHRoLCB2aWV3cG9ydC5oZWlnaHQpO1xuXHRcdC8vIFVuYmluZCBmcmFtZWJ1ZmZlciAocmVuZGVyIHRvIHNjcmVlbikuXG5cdFx0dGhpcy5yZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQobnVsbCk7XG5cdFx0Ly8gUmVzZXQgdGV4dHVyZSBiaW5kaW5ncy5cblx0XHR0aGlzLnJlbmRlcmVyLnJlc2V0U3RhdGUoKTtcblx0fVxuXHRcblx0ZGVzdHJveSgpIHtcblx0XHQvLyBUT0RPOiBOZWVkIHRvIGltcGxlbWVudCB0aGlzLlxuXHRcdGRlbGV0ZSB0aGlzLnJlbmRlcmVyO1xuXHR9XG59IiwiY29uc3QgZXh0ZW5zaW9uczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHt9O1xuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvT0VTX3RleHR1cmVfZmxvYXRcbi8vIEZsb2F0IGlzIHByb3ZpZGVkIGJ5IGRlZmF1bHQgaW4gV2ViR0wyIGNvbnRleHRzLlxuLy8gVGhpcyBleHRlbnNpb24gaW1wbGljaXRseSBlbmFibGVzIHRoZSBXRUJHTF9jb2xvcl9idWZmZXJfZmxvYXQgZXh0ZW5zaW9uIChpZiBzdXBwb3J0ZWQpLCB3aGljaCBhbGxvd3MgcmVuZGVyaW5nIHRvIDMyLWJpdCBmbG9hdGluZy1wb2ludCBjb2xvciBidWZmZXJzLlxuZXhwb3J0IGNvbnN0IE9FU19URVhUVVJFX0ZMT0FUID0gJ09FU190ZXh0dXJlX2Zsb2F0Jztcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9PRVNfdGV4dHVyZV9oYWxmX2Zsb2F0XG4vLyBIYWxmIGZsb2F0IGlzIHN1cHBvcnRlZCBieSBtb2Rlcm4gbW9iaWxlIGJyb3dzZXJzLCBmbG9hdCBub3QgeWV0IHN1cHBvcnRlZC5cbi8vIEhhbGYgZmxvYXQgaXMgcHJvdmlkZWQgYnkgZGVmYXVsdCBmb3IgV2ViZ2wyIGNvbnRleHRzLlxuLy8gVGhpcyBleHRlbnNpb24gaW1wbGljaXRseSBlbmFibGVzIHRoZSBFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXQgZXh0ZW5zaW9uIChpZiBzdXBwb3J0ZWQpLCB3aGljaCBhbGxvd3MgcmVuZGVyaW5nIHRvIDE2LWJpdCBmbG9hdGluZyBwb2ludCBmb3JtYXRzLlxuZXhwb3J0IGNvbnN0IE9FU19URVhUVVJFX0hBTEZfRkxPQVQgPSAnT0VTX3RleHR1cmVfaGFsZl9mbG9hdCc7XG4vLyBUT0RPOiBTZWVtcyBsaWtlIGxpbmVhciBmaWx0ZXJpbmcgb2YgZmxvYXRzIG1heSBiZSBzdXBwb3J0ZWQgaW4gc29tZSBicm93c2VycyB3aXRob3V0IHRoZXNlIGV4dGVuc2lvbnM/XG4vLyBodHRwczovL3d3dy5raHJvbm9zLm9yZy9yZWdpc3RyeS9PcGVuR0wvZXh0ZW5zaW9ucy9PRVMvT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyLnR4dFxuZXhwb3J0IGNvbnN0IE9FU19URVhUVVJFX0ZMT0FUX0xJTkVBUiA9ICdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInO1xuZXhwb3J0IGNvbnN0IE9FU19URVhUVVJFX0hBbEZfRkxPQVRfTElORUFSID0gJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJztcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XRUJHTF9kZXB0aF90ZXh0dXJlXG4vLyBBZGRzIGdsLlVOU0lHTkVEX1NIT1JULCBnbC5VTlNJR05FRF9JTlQgdHlwZXMgdG8gdGV4dEltYWdlMkQgaW4gV2ViR0wxLjBcbmV4cG9ydCBjb25zdCBXRUJHTF9ERVBUSF9URVhUVVJFID0gJ1dFQkdMX2RlcHRoX3RleHR1cmUnO1xuLy8gRVhUX0NPTE9SX0JVRkZFUl9GTE9BVCBhZGRzIGFiaWxpdHkgdG8gcmVuZGVyIHRvIGEgdmFyaWV0eSBvZiBmbG9hdGluZyBwdCB0ZXh0dXJlcy5cbi8vIFRoaXMgaXMgbmVlZGVkIGZvciB0aGUgV2ViR0wyIGNvbnRleHRzIHRoYXQgZG8gbm90IHN1cHBvcnQgT0VTX1RFWFRVUkVfRkxPQVQgLyBPRVNfVEVYVFVSRV9IQUxGX0ZMT0FUIGV4dGVuc2lvbnMuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdFxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzQyNjI0OTMvZnJhbWVidWZmZXItaW5jb21wbGV0ZS1hdHRhY2htZW50LWZvci10ZXh0dXJlLXdpdGgtaW50ZXJuYWwtZm9ybWF0XG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNjEwOTM0Ny9mcmFtZWJ1ZmZlci1pbmNvbXBsZXRlLWF0dGFjaG1lbnQtb25seS1oYXBwZW5zLW9uLWFuZHJvaWQtdy1maXJlZm94XG5leHBvcnQgY29uc3QgRVhUX0NPTE9SX0JVRkZFUl9GTE9BVCA9ICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEV4dGVuc2lvbihcblx0Z2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQsXG5cdGV4dGVuc2lvbk5hbWU6IHN0cmluZyxcblx0ZXJyb3JDYWxsYmFjazogKG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZCxcblx0b3B0aW9uYWwgPSBmYWxzZSxcbikge1xuXHQvLyBDaGVjayBpZiB3ZSd2ZSBhbHJlYWR5IGxvYWRlZCB0aGUgZXh0ZW5zaW9uLlxuXHRpZiAoZXh0ZW5zaW9uc1tleHRlbnNpb25OYW1lXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZXh0ZW5zaW9uc1tleHRlbnNpb25OYW1lXTtcblxuXHRsZXQgZXh0ZW5zaW9uO1xuXHR0cnkge1xuXHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbihleHRlbnNpb25OYW1lKTtcblx0fSBjYXRjaCAoZSkge31cblx0aWYgKGV4dGVuc2lvbikge1xuXHRcdC8vIENhY2hlIHRoaXMgZXh0ZW5zaW9uLlxuXHRcdGV4dGVuc2lvbnNbZXh0ZW5zaW9uTmFtZV0gPSBleHRlbnNpb247XG5cdFx0Y29uc29sZS5sb2coYExvYWRlZCBleHRlbnNpb246ICR7ZXh0ZW5zaW9uTmFtZX0uYCk7XG5cdH0gZWxzZSB7XG5cdFx0ZXh0ZW5zaW9uc1tleHRlbnNpb25OYW1lXSA9IGZhbHNlOyAvLyBDYWNoZSB0aGUgYmFkIGV4dGVuc2lvbiBsb29rdXAuXG5cdFx0Y29uc29sZS53YXJuKGBVbnN1cHBvcnRlZCAke29wdGlvbmFsID8gJ29wdGlvbmFsICcgOiAnJ31leHRlbnNpb246ICR7ZXh0ZW5zaW9uTmFtZX0uYCk7XG5cdH1cblx0Ly8gSWYgdGhlIGV4dGVuc2lvbiBpcyBub3Qgb3B0aW9uYWwsIHRocm93IGVycm9yLlxuXHRpZiAoIWV4dGVuc2lvbiAmJiAhb3B0aW9uYWwpIHtcblx0XHRlcnJvckNhbGxiYWNrKGBSZXF1aXJlZCBleHRlbnNpb24gdW5zdXBwb3J0ZWQgYnkgdGhpcyBkZXZpY2UgLyBicm93c2VyOiAke2V4dGVuc2lvbk5hbWV9LmApO1xuXHR9XG5cdHJldHVybiBleHRlbnNpb247XG59IiwiaW1wb3J0IHsgV2ViR0xDb21wdXRlIH0gZnJvbSAnLi9XZWJHTENvbXB1dGUnO1xuZXhwb3J0ICogZnJvbSAnLi9Db25zdGFudHMnO1xuXG5leHBvcnQge1xuXHRXZWJHTENvbXB1dGUsXG59OyIsIi8vIENvcGllZCBmcm9tIGh0dHA6Ly93ZWJnbGZ1bmRhbWVudGFscy5vcmcvd2ViZ2wvbGVzc29ucy93ZWJnbC1ib2lsZXJwbGF0ZS5odG1sXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZVNoYWRlcihcblx0Z2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQsXG5cdGVycm9yQ2FsbGJhY2s6IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQsXG5cdHNoYWRlclNvdXJjZTogc3RyaW5nLFxuXHRzaGFkZXJUeXBlOiBudW1iZXIsXG5cdHByb2dyYW1OYW1lPzogc3RyaW5nLFxuKSB7XG5cdC8vIENyZWF0ZSB0aGUgc2hhZGVyIG9iamVjdFxuXHRjb25zdCBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoc2hhZGVyVHlwZSk7XG5cdGlmICghc2hhZGVyKSB7XG5cdFx0ZXJyb3JDYWxsYmFjaygnVW5hYmxlIHRvIGluaXQgZ2wgc2hhZGVyLicpO1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU2V0IHRoZSBzaGFkZXIgc291cmNlIGNvZGUuXG5cdGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNoYWRlclNvdXJjZSk7XG5cblx0Ly8gQ29tcGlsZSB0aGUgc2hhZGVyXG5cdGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcblxuXHQvLyBDaGVjayBpZiBpdCBjb21waWxlZFxuXHRjb25zdCBzdWNjZXNzID0gZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpO1xuXHRpZiAoIXN1Y2Nlc3MpIHtcblx0XHQvLyBTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgY29tcGlsYXRpb24gLSBwcmludCB0aGUgZXJyb3IuXG5cdFx0ZXJyb3JDYWxsYmFjayhgQ291bGQgbm90IGNvbXBpbGUgJHtzaGFkZXJUeXBlID09PSBnbC5GUkFHTUVOVF9TSEFERVIgPyAnZnJhZ21lbnQnIDogJ3ZlcnRleCd9XG5cdFx0XHQgc2hhZGVyJHtwcm9ncmFtTmFtZSA/IGAgZm9yIHByb2dyYW0gXCIke3Byb2dyYW1OYW1lfVwiYCA6ICcnfTogJHtnbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcil9LmApO1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdHJldHVybiBzaGFkZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1dlYkdMMihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkge1xuXHQvLyBUaGlzIGNvZGUgaXMgcHVsbGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9ibG9iL21hc3Rlci9zcmMvcmVuZGVyZXJzL3dlYmdsL1dlYkdMQ2FwYWJpbGl0aWVzLmpzXG5cdC8vIEB0cy1pZ25vcmVcblx0cmV0dXJuICh0eXBlb2YgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2wgaW5zdGFuY2VvZiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KSB8fCAodHlwZW9mIFdlYkdMMkNvbXB1dGVSZW5kZXJpbmdDb250ZXh0ICE9PSAndW5kZWZpbmVkJyAmJiBnbCBpbnN0YW5jZW9mIFdlYkdMMkNvbXB1dGVSZW5kZXJpbmdDb250ZXh0KTtcblx0Ly8gcmV0dXJuICEhKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLkhBTEZfRkxPQVQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Bvd2VyT2YyKHZhbHVlOiBudW1iZXIpIHtcblx0cmV0dXJuICh2YWx1ZSAmICh2YWx1ZSAtIDEpKSA9PSAwO1xufSIsIi8vIFRoZXNlIGFyZSB0aGUgcGFydHMgb2YgdGhyZWVqcyBWZWN0b3I0IHRoYXQgd2UgbmVlZC5cbmV4cG9ydCBjbGFzcyBWZWN0b3I0IHtcblx0eDogbnVtYmVyO1xuXHR5OiBudW1iZXI7XG5cdHo6IG51bWJlcjtcblx0dzogbnVtYmVyO1xuXHRjb25zdHJ1Y3RvciggeCA9IDAsIHkgPSAwLCB6ID0gMCwgdyA9IDEgKSB7XG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMueiA9IHo7XG5cdFx0dGhpcy53ID0gdztcblx0fVxuXHRnZXQgd2lkdGgoKSB7XG5cdFx0cmV0dXJuIHRoaXMuejtcblx0fVxuXHRnZXQgaGVpZ2h0KCkge1xuXHRcdHJldHVybiB0aGlzLnc7XG5cdH1cblx0Y29weSh2OiBWZWN0b3I0KSB7XG5cdFx0dGhpcy54ID0gdi54O1xuXHRcdHRoaXMueSA9IHYueTtcblx0XHR0aGlzLnogPSB2Lno7XG5cdFx0dGhpcy53ID0gdi53O1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5cXG52YXJ5aW5nIHZlYzIgdl9VVjtcXG5cXG51bmlmb3JtIHNhbXBsZXIyRCB1X3N0YXRlO1xcblxcbnZvaWQgbWFpbigpIHtcXG5cXHRnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodV9zdGF0ZSwgdl9VVik7XFxufVwiIiwibW9kdWxlLmV4cG9ydHMgPSBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5cXG5hdHRyaWJ1dGUgdmVjMiBhX2ludGVybmFsX3Bvc2l0aW9uO1xcblxcbnVuaWZvcm0gdmVjMiB1X2ludGVybmFsX3NjYWxlO1xcbnVuaWZvcm0gdmVjMiB1X2ludGVybmFsX3RyYW5zbGF0aW9uO1xcblxcbnZhcnlpbmcgdmVjMiB2X1VWX2xvY2FsO1xcbnZhcnlpbmcgdmVjMiB2X1VWO1xcblxcbnZvaWQgbWFpbigpIHtcXG5cXHQvLyBDYWxjdWxhdGUgVVYgY29vcmRpbmF0ZXMgb2YgY3VycmVudCByZW5kZXJlZCBvYmplY3QuXFxuXFx0dl9VVl9sb2NhbCA9IDAuNSAqIChhX2ludGVybmFsX3Bvc2l0aW9uICsgMS4wKTtcXG5cXG5cXHQvLyBBcHBseSB0cmFuc2Zvcm1hdGlvbnMuXFxuXFx0dmVjMiBwb3NpdGlvbiA9IHVfaW50ZXJuYWxfc2NhbGUgKiBhX2ludGVybmFsX3Bvc2l0aW9uICsgdV9pbnRlcm5hbF90cmFuc2xhdGlvbjtcXG5cXG5cXHQvLyBDYWxjdWxhdGUgYSBnbG9iYWwgdXYgZm9yIHRoZSB2aWV3cG9ydC5cXG5cXHR2X1VWID0gMC41ICogKHBvc2l0aW9uICsgMS4wKTtcXG5cXG5cXHQvLyBDYWxjdWxhdGUgdmVydGV4IHBvc2l0aW9uLlxcblxcdGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMCwgMSk7XFxufVwiIiwibW9kdWxlLmV4cG9ydHMgPSBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5wcmVjaXNpb24gaGlnaHAgaW50O1xcblxcbi8qKlxcbiAqIFJldHVybnMgYWNjdXJhdGUgTU9EIHdoZW4gYXJndW1lbnRzIGFyZSBhcHByb3hpbWF0ZSBpbnRlZ2Vycy5cXG4gKi9cXG5mbG9hdCBtb2RJKGZsb2F0IGEsIGZsb2F0IGIpIHtcXG4gICAgZmxvYXQgbSA9IGEgLSBmbG9vcigoYSArIDAuNSkgLyBiKSAqIGI7XFxuICAgIHJldHVybiBmbG9vcihtICsgMC41KTtcXG59XFxuXFxuLy8gQ2Fubm90IHVzZSBpbnQgdmVydGV4IGF0dHJpYnV0ZXM6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI3ODc0OTgzL3dlYmdsLWhvdy10by11c2UtaW50ZWdlci1hdHRyaWJ1dGVzLWluLWdsc2xcXG5hdHRyaWJ1dGUgZmxvYXQgYV9pbnRlcm5hbF9pbmRleDsgLy8gSW5kZXggb2YgcG9pbnQuXFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgdV9pbnRlcm5hbF9wb3NpdGlvbnM7IC8vIFRleHR1cmUgbG9va3VwIHdpdGggcG9zaXRpb24gZGF0YS5cXG51bmlmb3JtIHZlYzIgdV9pbnRlcm5hbF9wb3NpdGlvbnNEaW1lbnNpb25zO1xcbnVuaWZvcm0gdmVjMiB1X2ludGVybmFsX3NjYWxlO1xcbnVuaWZvcm0gYm9vbCB1X2ludGVybmFsX3Bvc2l0aW9uV2l0aEFjY3VtdWxhdGlvbjtcXG51bmlmb3JtIGJvb2wgdV9pbnRlcm5hbF93cmFwWDtcXG51bmlmb3JtIGJvb2wgdV9pbnRlcm5hbF93cmFwWTtcXG5cXG52YXJ5aW5nIHZlYzIgdl9VVjtcXG52YXJ5aW5nIHZlYzIgdl9saW5lV3JhcHBpbmc7IC8vIFVzZSB0aGlzIHRvIHRlc3QgaWYgbGluZSBpcyBvbmx5IGhhbGYgd3JhcHBlZCBhbmQgc2hvdWxkIG5vdCBiZSByZW5kZXJlZC5cXG5cXG52b2lkIG1haW4oKSB7XFxuXFx0Ly8gQ2FsY3VsYXRlIGEgdXYgYmFzZWQgb24gdGhlIHBvaW50J3MgaW5kZXggYXR0cmlidXRlLlxcblxcdHZlYzIgcGFydGljbGVVViA9IHZlYzIoXFxuXFx0XFx0bW9kSShhX2ludGVybmFsX2luZGV4LCB1X2ludGVybmFsX3Bvc2l0aW9uc0RpbWVuc2lvbnMueCksXFxuXFx0XFx0Zmxvb3IoZmxvb3IoYV9pbnRlcm5hbF9pbmRleCArIDAuNSkgLyB1X2ludGVybmFsX3Bvc2l0aW9uc0RpbWVuc2lvbnMueClcXG5cXHQpIC8gdV9pbnRlcm5hbF9wb3NpdGlvbnNEaW1lbnNpb25zO1xcblxcblxcdC8vIENhbGN1bGF0ZSBhIGdsb2JhbCB1diBmb3IgdGhlIHZpZXdwb3J0LlxcblxcdC8vIExvb2t1cCB2ZXJ0ZXggcG9zaXRpb24gYW5kIHNjYWxlIHRvIFswLCAxXSByYW5nZS5cXG5cXHQvLyBXZSBoYXZlIHBhY2tlZCBhIDJEIGRpc3BsYWNlbWVudCB3aXRoIHRoZSBwb3NpdGlvbi5cXG5cXHR2ZWM0IHBvc2l0aW9uRGF0YSA9IHRleHR1cmUyRCh1X2ludGVybmFsX3Bvc2l0aW9ucywgcGFydGljbGVVVik7XFxuXFx0Ly8gcG9zaXRpb24gPSBmaXJzdCB0d28gY29tcG9uZW50cyBwbHVzIGxhc3QgdHdvIGNvbXBvbmVudHMgKG9wdGlvbmFsIGFjY3VtdWxhdGlvbiBidWZmZXIpLlxcblxcdHZlYzIgcG9zaXRpb25BYnNvbHV0ZSA9IHBvc2l0aW9uRGF0YS5yZztcXG5cXHRpZiAodV9pbnRlcm5hbF9wb3NpdGlvbldpdGhBY2N1bXVsYXRpb24pIHBvc2l0aW9uQWJzb2x1dGUgKz0gcG9zaXRpb25EYXRhLmJhO1xcblxcdHZfVVYgPSBwb3NpdGlvbkFic29sdXRlICogdV9pbnRlcm5hbF9zY2FsZTtcXG5cXG5cXHQvLyBXcmFwIGlmIG5lZWRlZC5cXG5cXHR2X2xpbmVXcmFwcGluZyA9IHZlYzIoMC4wKTtcXG5cXHRpZiAodV9pbnRlcm5hbF93cmFwWCkge1xcblxcdFxcdGlmICh2X1VWLnggPCAwLjApIHtcXG5cXHRcXHRcXHR2X1VWLnggKz0gMS4wO1xcblxcdFxcdFxcdHZfbGluZVdyYXBwaW5nLnggPSAxLjA7XFxuXFx0XFx0fSBlbHNlIGlmICh2X1VWLnggPiAxLjApIHtcXG5cXHRcXHRcXHR2X1VWLnggLT0gMS4wO1xcblxcdFxcdFxcdHZfbGluZVdyYXBwaW5nLnggPSAxLjA7XFxuXFx0XFx0fVxcblxcdH1cXG5cXHRpZiAodV9pbnRlcm5hbF93cmFwWSkge1xcblxcdFxcdGlmICh2X1VWLnkgPCAwLjApIHtcXG5cXHRcXHRcXHR2X1VWLnkgKz0gMS4wO1xcblxcdFxcdFxcdHZfbGluZVdyYXBwaW5nLnkgPSAxLjA7XFxuXFx0XFx0fSBlbHNlIGlmICh2X1VWLnkgPiAxLjApIHtcXG5cXHRcXHRcXHR2X1VWLnkgLT0gMS4wO1xcblxcdFxcdFxcdHZfbGluZVdyYXBwaW5nLnkgPSAxLjA7XFxuXFx0XFx0fVxcblxcdH1cXG5cXG5cXHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaW4gWy0xLCAxXSByYW5nZS5cXG5cXHR2ZWMyIHBvc2l0aW9uID0gdl9VViAqIDIuMCAtIDEuMDtcXG5cXG5cXHRnbF9Qb3NpdGlvbiA9IHZlYzQocG9zaXRpb24sIDAsIDEpO1xcbn1cIiIsIm1vZHVsZS5leHBvcnRzID0gXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxucHJlY2lzaW9uIGhpZ2hwIGludDtcXG5cXG4vKipcXG4gKiBSZXR1cm5zIGFjY3VyYXRlIE1PRCB3aGVuIGFyZ3VtZW50cyBhcmUgYXBwcm94aW1hdGUgaW50ZWdlcnMuXFxuICovXFxuZmxvYXQgbW9kSShmbG9hdCBhLCBmbG9hdCBiKSB7XFxuICAgIGZsb2F0IG0gPSBhIC0gZmxvb3IoKGEgKyAwLjUpIC8gYikgKiBiO1xcbiAgICByZXR1cm4gZmxvb3IobSArIDAuNSk7XFxufVxcblxcbi8vIENhbm5vdCB1c2UgaW50IHZlcnRleCBhdHRyaWJ1dGVzOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yNzg3NDk4My93ZWJnbC1ob3ctdG8tdXNlLWludGVnZXItYXR0cmlidXRlcy1pbi1nbHNsXFxuYXR0cmlidXRlIGZsb2F0IGFfaW50ZXJuYWxfaW5kZXg7IC8vIEluZGV4IG9mIHBvaW50LlxcblxcbnVuaWZvcm0gc2FtcGxlcjJEIHVfaW50ZXJuYWxfcG9zaXRpb25zOyAvLyBUZXh0dXJlIGxvb2t1cCB3aXRoIHBvc2l0aW9uIGRhdGEuXFxudW5pZm9ybSB2ZWMyIHVfaW50ZXJuYWxfcG9zaXRpb25zRGltZW5zaW9ucztcXG51bmlmb3JtIHZlYzIgdV9pbnRlcm5hbF9zY2FsZTtcXG51bmlmb3JtIGZsb2F0IHVfaW50ZXJuYWxfcG9pbnRTaXplO1xcbnVuaWZvcm0gYm9vbCB1X2ludGVybmFsX3Bvc2l0aW9uV2l0aEFjY3VtdWxhdGlvbjtcXG51bmlmb3JtIGJvb2wgdV9pbnRlcm5hbF93cmFwWDtcXG51bmlmb3JtIGJvb2wgdV9pbnRlcm5hbF93cmFwWTtcXG5cXG52YXJ5aW5nIHZlYzIgdl9VVjtcXG5cXG52b2lkIG1haW4oKSB7XFxuXFx0Ly8gQ2FsY3VsYXRlIGEgdXYgYmFzZWQgb24gdGhlIHBvaW50J3MgaW5kZXggYXR0cmlidXRlLlxcblxcdHZlYzIgcGFydGljbGVVViA9IHZlYzIoXFxuXFx0XFx0bW9kSShhX2ludGVybmFsX2luZGV4LCB1X2ludGVybmFsX3Bvc2l0aW9uc0RpbWVuc2lvbnMueCksXFxuXFx0XFx0Zmxvb3IoZmxvb3IoYV9pbnRlcm5hbF9pbmRleCArIDAuNSkgLyB1X2ludGVybmFsX3Bvc2l0aW9uc0RpbWVuc2lvbnMueClcXG5cXHQpIC8gdV9pbnRlcm5hbF9wb3NpdGlvbnNEaW1lbnNpb25zO1xcblxcblxcdC8vIENhbGN1bGF0ZSBhIGdsb2JhbCB1diBmb3IgdGhlIHZpZXdwb3J0LlxcblxcdC8vIExvb2t1cCB2ZXJ0ZXggcG9zaXRpb24gYW5kIHNjYWxlIHRvIFswLCAxXSByYW5nZS5cXG5cXHQvLyBXZSBoYXZlIHBhY2tlZCBhIDJEIGRpc3BsYWNlbWVudCB3aXRoIHRoZSBwb3NpdGlvbi5cXG5cXHR2ZWM0IHBvc2l0aW9uRGF0YSA9IHRleHR1cmUyRCh1X2ludGVybmFsX3Bvc2l0aW9ucywgcGFydGljbGVVVik7XFxuXFx0Ly8gcG9zaXRpb24gPSBmaXJzdCB0d28gY29tcG9uZW50cyBwbHVzIGxhc3QgdHdvIGNvbXBvbmVudHMgKG9wdGlvbmFsIGFjY3VtdWxhdGlvbiBidWZmZXIpLlxcblxcdHZlYzIgcG9zaXRpb25BYnNvbHV0ZSA9IHBvc2l0aW9uRGF0YS5yZztcXG5cXHRpZiAodV9pbnRlcm5hbF9wb3NpdGlvbldpdGhBY2N1bXVsYXRpb24pIHBvc2l0aW9uQWJzb2x1dGUgKz0gcG9zaXRpb25EYXRhLmJhO1xcblxcdHZfVVYgPSBwb3NpdGlvbkFic29sdXRlICogdV9pbnRlcm5hbF9zY2FsZTtcXG5cXG5cXHQvLyBXcmFwIGlmIG5lZWRlZC5cXG5cXHRpZiAodV9pbnRlcm5hbF93cmFwWCkge1xcblxcdFxcdGlmICh2X1VWLnggPCAwLjApIHZfVVYueCArPSAxLjA7XFxuXFx0XFx0aWYgKHZfVVYueCA+IDEuMCkgdl9VVi54IC09IDEuMDtcXG5cXHR9XFxuXFx0aWYgKHVfaW50ZXJuYWxfd3JhcFkpIHtcXG5cXHRcXHRpZiAodl9VVi55IDwgMC4wKSB2X1VWLnkgKz0gMS4wO1xcblxcdFxcdGlmICh2X1VWLnkgPiAxLjApIHZfVVYueSAtPSAxLjA7XFxuXFx0fVxcblxcblxcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpbiBbLTEsIDFdIHJhbmdlLlxcblxcdHZlYzIgcG9zaXRpb24gPSB2X1VWICogMi4wIC0gMS4wO1xcblxcblxcdGdsX1BvaW50U2l6ZSA9IHVfaW50ZXJuYWxfcG9pbnRTaXplO1xcblxcdGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMCwgMSk7XFxufVwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIi8vIFZlcnRleCBzaGFkZXIgZm9yIGZ1bGxzY3JlZW4gcXVhZC5cXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuXFxuYXR0cmlidXRlIHZlYzIgYV9pbnRlcm5hbF9wb3NpdGlvbjtcXG5cXG51bmlmb3JtIGZsb2F0IHVfaW50ZXJuYWxfaGFsZlRoaWNrbmVzcztcXG51bmlmb3JtIHZlYzIgdV9pbnRlcm5hbF9zY2FsZTtcXG51bmlmb3JtIGZsb2F0IHVfaW50ZXJuYWxfbGVuZ3RoO1xcbnVuaWZvcm0gZmxvYXQgdV9pbnRlcm5hbF9yb3RhdGlvbjtcXG51bmlmb3JtIHZlYzIgdV9pbnRlcm5hbF90cmFuc2xhdGlvbjtcXG5cXG52YXJ5aW5nIHZlYzIgdl9VVl9sb2NhbDtcXG52YXJ5aW5nIHZlYzIgdl9VVjtcXG5cXG5tYXQyIHJvdGF0ZTJkKGZsb2F0IF9hbmdsZSl7XFxuXFx0cmV0dXJuIG1hdDIoY29zKF9hbmdsZSksIC1zaW4oX2FuZ2xlKSwgc2luKF9hbmdsZSksIGNvcyhfYW5nbGUpKTtcXG59XFxuXFxudm9pZCBtYWluKCkge1xcblxcdC8vIENhbGN1bGF0ZSBVViBjb29yZGluYXRlcyBvZiBjdXJyZW50IHJlbmRlcmVkIG9iamVjdC5cXG5cXHR2X1VWX2xvY2FsID0gMC41ICogKGFfaW50ZXJuYWxfcG9zaXRpb24gKyAxLjApO1xcblxcblxcdHZlYzIgcG9zaXRpb24gPSBhX2ludGVybmFsX3Bvc2l0aW9uO1xcblxcblxcdC8vIEFwcGx5IHRoaWNrbmVzcyAvIHJhZGl1cy5cXG5cXHRwb3NpdGlvbiAqPSB1X2ludGVybmFsX2hhbGZUaGlja25lc3M7XFxuXFxuXFx0Ly8gU3RyZXRjaCBjZW50ZXIgb2Ygc2hhcGUgdG8gZm9ybSBhIHJvdW5kLWNhcHBlZCBsaW5lIHNlZ21lbnQuXFxuXFx0aWYgKHBvc2l0aW9uLnggPCAwLjApIHtcXG5cXHRcXHRwb3NpdGlvbi54IC09IHVfaW50ZXJuYWxfbGVuZ3RoIC8gMi4wO1xcblxcdFxcdHZfVVZfbG9jYWwueCA9IDAuMDsgLy8gU2V0IGVudGlyZSBjYXAgVVYueCB0byAwLlxcblxcdH0gZWxzZSBpZiAocG9zaXRpb24ueCA+IDAuMCkge1xcblxcdFxcdHBvc2l0aW9uLnggKz0gdV9pbnRlcm5hbF9sZW5ndGggLyAyLjA7XFxuXFx0XFx0dl9VVl9sb2NhbC54ID0gMS4wOyAvLyBTZXQgZW50aXJlIGNhcCBVVi54IHRvIDEuXFxuXFx0fVxcblxcblxcdC8vIEFwcGx5IHRyYW5zZm9ybWF0aW9ucy5cXG5cXHRwb3NpdGlvbiA9IHVfaW50ZXJuYWxfc2NhbGUgKiAocm90YXRlMmQoLXVfaW50ZXJuYWxfcm90YXRpb24pICogcG9zaXRpb24pICsgdV9pbnRlcm5hbF90cmFuc2xhdGlvbjtcXG5cXG5cXHQvLyBDYWxjdWxhdGUgYSBnbG9iYWwgdXYgZm9yIHRoZSB2aWV3cG9ydC5cXG5cXHR2X1VWID0gMC41ICogKHBvc2l0aW9uICsgMS4wKTtcXG5cXG5cXHQvLyBDYWxjdWxhdGUgdmVydGV4IHBvc2l0aW9uLlxcblxcdGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMCwgMSk7XFxufVwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIi8vIEZyYWdtZW50IHNoYWRlciB0aGF0IGRyYXdzIGEgc2luZ2xlIGNvbG9yLlxcbnByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5cXG51bmlmb3JtIHZlYzMgdV9jb2xvcjtcXG5cXG52b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCh1X2NvbG9yLCAxKTtcXG59XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiLy8gRnJhZ21lbnQgc2hhZGVyIHRoYXQgZHJhd3MgYSBzaW5nbGUgY29sb3IuXFxucHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcblxcbnVuaWZvcm0gdmVjMyB1X2NvbG9yO1xcbnZhcnlpbmcgdmVjMiB2X2xpbmVXcmFwcGluZztcXG5cXG52b2lkIG1haW4oKSB7XFxuXFx0Ly8gY2hlY2sgaWYgdGhpcyBsaW5lIGhhcyB3cmFwcGVkLlxcblxcdGlmICgodl9saW5lV3JhcHBpbmcueCAhPSAwLjAgJiYgdl9saW5lV3JhcHBpbmcueCAhPSAxLjApIHx8ICh2X2xpbmVXcmFwcGluZy55ICE9IDAuMCAmJiB2X2xpbmVXcmFwcGluZy55ICE9IDEuMCkpIHtcXG5cXHRcXHQvLyBSZW5kZXIgbm90aGluZy5cXG5cXHRcXHRkaXNjYXJkO1xcblxcdFxcdHJldHVybjtcXG5cXHR9XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCh1X2NvbG9yLCAxKTtcXG59XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbnByZWNpc2lvbiBoaWdocCBpbnQ7XFxuXFxuLyoqXFxuICogUmV0dXJucyBhY2N1cmF0ZSBNT0Qgd2hlbiBhcmd1bWVudHMgYXJlIGFwcHJveGltYXRlIGludGVnZXJzLlxcbiAqL1xcbmZsb2F0IG1vZEkoZmxvYXQgYSwgZmxvYXQgYikge1xcbiAgICBmbG9hdCBtID0gYSAtIGZsb29yKChhICsgMC41KSAvIGIpICogYjtcXG4gICAgcmV0dXJuIGZsb29yKG0gKyAwLjUpO1xcbn1cXG5cXG4vLyBDYW5ub3QgdXNlIGludCB2ZXJ0ZXggYXR0cmlidXRlczogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjc4NzQ5ODMvd2ViZ2wtaG93LXRvLXVzZS1pbnRlZ2VyLWF0dHJpYnV0ZXMtaW4tZ2xzbFxcbmF0dHJpYnV0ZSBmbG9hdCBhX2ludGVybmFsX2luZGV4OyAvLyBJbmRleCBvZiBwb2ludC5cXG5cXG51bmlmb3JtIHNhbXBsZXIyRCB1X2ludGVybmFsX3ZlY3RvcnM7IC8vIFRleHR1cmUgbG9va3VwIHdpdGggdmVjdG9yIGRhdGEuXFxudW5pZm9ybSB2ZWMyIHVfaW50ZXJuYWxfZGltZW5zaW9ucztcXG51bmlmb3JtIHZlYzIgdV9pbnRlcm5hbF9zY2FsZTtcXG5cXG52YXJ5aW5nIHZlYzIgdl9VVjtcXG5cXG52b2lkIG1haW4oKSB7XFxuXFx0Ly8gRGl2aWRlIGluZGV4IGJ5IDIuXFxuXFx0ZmxvYXQgaW5kZXggPSBmbG9vcigoYV9pbnRlcm5hbF9pbmRleCArIDAuNSkgLyAyLjApO1xcblxcdC8vIENhbGN1bGF0ZSBhIHV2IGJhc2VkIG9uIHRoZSB2ZXJ0ZXggaW5kZXggYXR0cmlidXRlLlxcblxcdHZfVVYgPSB2ZWMyKFxcblxcdFxcdG1vZEkoaW5kZXgsIHVfaW50ZXJuYWxfZGltZW5zaW9ucy54KSxcXG5cXHRcXHRmbG9vcihmbG9vcihpbmRleCArIDAuNSkgLyB1X2ludGVybmFsX2RpbWVuc2lvbnMueClcXG5cXHQpIC8gdV9pbnRlcm5hbF9kaW1lbnNpb25zO1xcblxcblxcdC8vIEFkZCB2ZWN0b3IgZGlzcGxhY2VtZW50IGlmIG5lZWRlZC5cXG5cXHRpZiAobW9kSShhX2ludGVybmFsX2luZGV4LCAyLjApID4gMC4wKSB7XFxuXFx0XFx0Ly8gTG9va3VwIHZlY3RvckRhdGEgYXQgY3VycmVudCBVVi5cXG5cXHRcXHR2ZWMyIHZlY3RvckRhdGEgPSB0ZXh0dXJlMkQodV9pbnRlcm5hbF92ZWN0b3JzLCB2X1VWKS54eTtcXG5cXHRcXHR2X1VWICs9IHZlY3RvckRhdGEgKiB1X2ludGVybmFsX3NjYWxlO1xcblxcdH1cXG5cXG5cXHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaW4gWy0xLCAxXSByYW5nZS5cXG5cXHR2ZWMyIHBvc2l0aW9uID0gdl9VViAqIDIuMCAtIDEuMDtcXG5cXG5cXHRnbF9Qb3NpdGlvbiA9IHZlYzQocG9zaXRpb24sIDAsIDEpO1xcbn1cIiIsIm1vZHVsZS5leHBvcnRzID0gXCIjdmVyc2lvbiAzMDAgZXNcXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxucHJlY2lzaW9uIGhpZ2hwIHNhbXBsZXIyRDtcXG5cXG5pbiB2ZWMyIHZfVVY7XFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgdV9zdGF0ZTtcXG5cXG5vdXQgdmVjNCBvdXRfZnJhZ0NvbG9yO1xcblxcbnZvaWQgbWFpbigpIHtcXG5cXHRvdXRfZnJhZ0NvbG9yID0gdGV4dHVyZSh1X3N0YXRlLCB2X1VWKTtcXG59XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiI3ZlcnNpb24gMzAwIGVzXFxucHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbnByZWNpc2lvbiBoaWdocCBpbnQ7XFxucHJlY2lzaW9uIGhpZ2hwIGlzYW1wbGVyMkQ7XFxuXFxuaW4gdmVjMiB2X1VWO1xcblxcbnVuaWZvcm0gaXNhbXBsZXIyRCB1X3N0YXRlO1xcblxcbm91dCBpdmVjNCBvdXRfZnJhZ0NvbG9yO1xcblxcbnZvaWQgbWFpbigpIHtcXG5cXHRvdXRfZnJhZ0NvbG9yID0gdGV4dHVyZSh1X3N0YXRlLCB2X1VWKTtcXG59XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiI3ZlcnNpb24gMzAwIGVzXFxucHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbnByZWNpc2lvbiBoaWdocCBpbnQ7XFxucHJlY2lzaW9uIGhpZ2hwIHVzYW1wbGVyMkQ7XFxuXFxuaW4gdmVjMiB2X1VWO1xcblxcbnVuaWZvcm0gdXNhbXBsZXIyRCB1X3N0YXRlO1xcblxcbm91dCB1dmVjNCBvdXRfZnJhZ0NvbG9yO1xcblxcbnZvaWQgbWFpbigpIHtcXG5cXHRvdXRfZnJhZ0NvbG9yID0gdGV4dHVyZSh1X3N0YXRlLCB2X1VWKTtcXG59XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiI3ZlcnNpb24gMzAwIGVzXFxucHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcblxcbmluIHZlYzIgYV9pbnRlcm5hbF9wb3NpdGlvbjtcXG5cXG51bmlmb3JtIHZlYzIgdV9pbnRlcm5hbF9zY2FsZTtcXG51bmlmb3JtIHZlYzIgdV9pbnRlcm5hbF90cmFuc2xhdGlvbjtcXG5cXG5vdXQgdmVjMiB2X1VWX2xvY2FsO1xcbm91dCB2ZWMyIHZfVVY7XFxub3V0IHZlYzIgb3V0X3Bvc2l0aW9uO1xcblxcbnZvaWQgbWFpbigpIHtcXG5cXHQvLyBDYWxjdWxhdGUgVVYgY29vcmRpbmF0ZXMgb2YgY3VycmVudCByZW5kZXJlZCBvYmplY3QuXFxuXFx0dl9VVl9sb2NhbCA9IDAuNSAqIChhX2ludGVybmFsX3Bvc2l0aW9uICsgMS4wKTtcXG5cXG5cXHQvLyBBcHBseSB0cmFuc2Zvcm1hdGlvbnMuXFxuXFx0dmVjMiBwb3NpdGlvbiA9IHVfaW50ZXJuYWxfc2NhbGUgKiBhX2ludGVybmFsX3Bvc2l0aW9uICsgdV9pbnRlcm5hbF90cmFuc2xhdGlvbjtcXG5cXG5cXHQvLyBDYWxjdWxhdGUgYSBnbG9iYWwgdXYgZm9yIHRoZSB2aWV3cG9ydC5cXG5cXHR2X1VWID0gMC41ICogKHBvc2l0aW9uICsgMS4wKTtcXG5cXG5cXHQvLyBDYWxjdWxhdGUgdmVydGV4IHBvc2l0aW9uLlxcblxcdG91dF9wb3NpdGlvbiA9IHBvc2l0aW9uO1xcbn1cIiIsIm1vZHVsZS5leHBvcnRzID0gXCIjdmVyc2lvbiAzMDAgZXNcXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuXFxuYXR0cmlidXRlIHZlYzIgYV9pbnRlcm5hbF9wb3NpdGlvbjtcXG5cXG51bmlmb3JtIGZsb2F0IHVfaW50ZXJuYWxfaGFsZlRoaWNrbmVzcztcXG51bmlmb3JtIHZlYzIgdV9pbnRlcm5hbF9zY2FsZTtcXG51bmlmb3JtIGZsb2F0IHVfaW50ZXJuYWxfbGVuZ3RoO1xcbnVuaWZvcm0gZmxvYXQgdV9pbnRlcm5hbF9yb3RhdGlvbjtcXG51bmlmb3JtIHZlYzIgdV9pbnRlcm5hbF90cmFuc2xhdGlvbjtcXG5cXG52YXJ5aW5nIHZlYzIgdl9VVl9sb2NhbDtcXG52YXJ5aW5nIHZlYzIgdl9VVjtcXG5cXG5tYXQyIHJvdGF0ZTJkKGZsb2F0IF9hbmdsZSl7XFxuXFx0cmV0dXJuIG1hdDIoY29zKF9hbmdsZSksIC1zaW4oX2FuZ2xlKSwgc2luKF9hbmdsZSksIGNvcyhfYW5nbGUpKTtcXG59XFxuXFxudm9pZCBtYWluKCkge1xcblxcdC8vIENhbGN1bGF0ZSBVViBjb29yZGluYXRlcyBvZiBjdXJyZW50IHJlbmRlcmVkIG9iamVjdC5cXG5cXHR2X1VWX2xvY2FsID0gMC41ICogKGFfaW50ZXJuYWxfcG9zaXRpb24gKyAxLjApO1xcblxcblxcdHZlYzIgcG9zaXRpb24gPSBhX2ludGVybmFsX3Bvc2l0aW9uO1xcblxcblxcdC8vIEFwcGx5IHJhZGl1cy5cXG5cXHRwb3NpdGlvbiAqPSB1X2ludGVybmFsX3JhZGl1cztcXG5cXG5cXHQvLyBTdHJldGNoIGNlbnRlciBvZiBzaGFwZSB0byBmb3JtIGEgcm91bmQtY2FwcGVkIGxpbmUgc2VnbWVudC5cXG5cXHRpZiAocG9zaXRpb24ueCA8IDAuMCkge1xcblxcdFxcdHBvc2l0aW9uLnggLT0gdV9pbnRlcm5hbF9sZW5ndGggLyAyLjA7XFxuXFx0XFx0dl9VVl9sb2NhbC54ID0gMC4wOyAvLyBTZXQgZW50aXJlIGNhcCBVVi54IHRvIDAuXFxuXFx0fSBlbHNlIGlmIChwb3NpdGlvbi54ID4gMC4wKSB7XFxuXFx0XFx0cG9zaXRpb24ueCArPSB1X2ludGVybmFsX2xlbmd0aCAvIDIuMDtcXG5cXHRcXHR2X1VWX2xvY2FsLnggPSAxLjA7IC8vIFNldCBlbnRpcmUgY2FwIFVWLnggdG8gMS5cXG5cXHR9XFxuXFxuXFx0Ly8gQXBwbHkgdHJhbnNmb3JtYXRpb25zLlxcblxcdHBvc2l0aW9uID0gdV9pbnRlcm5hbF9zY2FsZSAqIChyb3RhdGUyZCgtdV9pbnRlcm5hbF9yb3RhdGlvbikgKiBwb3NpdGlvbikgKyB1X2ludGVybmFsX3RyYW5zbGF0aW9uO1xcblxcblxcdC8vIENhbGN1bGF0ZSBhIGdsb2JhbCB1diBmb3IgdGhlIHZpZXdwb3J0LlxcblxcdHZfVVYgPSAwLjUgKiAocG9zaXRpb24gKyAxLjApO1xcblxcblxcdC8vIENhbGN1bGF0ZSB2ZXJ0ZXggcG9zaXRpb24uXFxuXFx0Z2xfUG9zaXRpb24gPSB2ZWM0KHBvc2l0aW9uLCAwLCAxKTtcXG59XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiLy8gRnJhZ21lbnQgc2hhZGVyIHRoYXQgZHJhd3MgYSBzaW5nbGUgY29sb3IuXFxucHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcblxcbnVuaWZvcm0gdmVjMyB1X2NvbG9yO1xcblxcbnZvaWQgbWFpbigpIHtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KHVfY29sb3IsIDEpO1xcbn1cIiIsIm1vZHVsZS5leHBvcnRzID0gXCIvLyBGcmFnbWVudCBzaGFkZXIgdGhhdCBkcmF3cyBhIHNpbmdsZSBjb2xvci5cXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuXFxudW5pZm9ybSB2ZWMzIHVfY29sb3I7XFxudmFyeWluZyB2ZWMyIHZfbGluZVdyYXBwaW5nO1xcblxcbnZvaWQgbWFpbigpIHtcXG5cXHQvLyBjaGVjayBpZiB0aGlzIGxpbmUgaGFzIHdyYXBwZWQuXFxuXFx0aWYgKCh2X2xpbmVXcmFwcGluZy54ICE9IDAuMCAmJiB2X2xpbmVXcmFwcGluZy54ICE9IDEuMCkgfHwgKHZfbGluZVdyYXBwaW5nLnkgIT0gMC4wICYmIHZfbGluZVdyYXBwaW5nLnkgIT0gMS4wKSkge1xcblxcdFxcdC8vIFJlbmRlciBub3RoaW5nLlxcblxcdFxcdGRpc2NhcmQ7XFxuXFx0XFx0cmV0dXJuO1xcblxcdH1cXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KHVfY29sb3IsIDEpO1xcbn1cIiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZSA9IE9iamVjdC5jcmVhdGUobW9kdWxlKTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCAnZXhwb3J0cycsIHtcblx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdHNldDogKCkgPT4ge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFUyBNb2R1bGVzIG1heSBub3QgYXNzaWduIG1vZHVsZS5leHBvcnRzIG9yIGV4cG9ydHMuKiwgVXNlIEVTTSBleHBvcnQgc3ludGF4LCBpbnN0ZWFkOiAnICsgbW9kdWxlLmlkKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwNyk7XG4iXSwic291cmNlUm9vdCI6IiJ9