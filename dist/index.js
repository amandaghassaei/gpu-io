!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.WebGLCompute=t():e.WebGLCompute=t()}(self,(function(){return(()=>{var e={501:(e,t,r)=>{"use strict";r.r(t),r.d(t,{Float16Array:()=>de,getFloat16:()=>me,hfround:()=>h,setFloat16:()=>Te});const n=new ArrayBuffer(4),i=new Float32Array(n),a=new Uint32Array(n),o=new Uint32Array(512),s=new Uint32Array(512);for(let e=0;e<256;++e){const t=e-127;t<-27?(o[0|e]=0,o[256|e]=32768,s[0|e]=24,s[256|e]=24):t<-14?(o[0|e]=1024>>-t-14,o[256|e]=1024>>-t-14|32768,s[0|e]=-t-1,s[256|e]=-t-1):t<=15?(o[0|e]=t+15<<10,o[256|e]=t+15<<10|32768,s[0|e]=13,s[256|e]=13):t<128?(o[0|e]=31744,o[256|e]=64512,s[0|e]=24,s[256|e]=24):(o[0|e]=31744,o[256|e]=64512,s[0|e]=13,s[256|e]=13)}function l(e){i[0]=e;const t=a[0],r=t>>23&511;return o[r]+((8388607&t)>>s[r])}const u=new Uint32Array(2048),f=new Uint32Array(64),c=new Uint32Array(64);u[0]=0;for(let e=1;e<1024;++e){let t=e<<13,r=0;for(;0==(8388608&t);)r-=8388608,t<<=1;t&=-8388609,r+=947912704,u[e]=t|r}for(let e=1024;e<2048;++e)u[e]=939524096+(e-1024<<13);f[0]=0;for(let e=1;e<31;++e)f[e]=e<<23;f[31]=1199570944,f[32]=2147483648;for(let e=33;e<63;++e)f[e]=2147483648+(e-32<<23);f[63]=3347054592,c[0]=0;for(let e=1;e<64;++e)c[e]=32===e?0:1024;function p(e){const t=e>>10;return a[0]=u[c[t]+(1023&e)]+f[t],i[0]}function h(e){return e=Number(e),Number.isFinite(e)&&0!==e?p(l(e)):e}var d=r(277),_="object"==typeof self&&self&&self.Object===Object&&self;const g=d.Z||_||Function("return this")(),m=g.Symbol;var T=Object.prototype,v=T.hasOwnProperty,y=T.toString,E=m?m.toStringTag:void 0;var b=Object.prototype.toString;var A=m?m.toStringTag:void 0;const w=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":A&&A in Object(e)?function(e){var t=v.call(e,E),r=e[E];try{e[E]=void 0;var n=!0}catch(e){}var i=y.call(e);return n&&(t?e[E]=r:delete e[E]),i}(e):function(e){return b.call(e)}(e)},L=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)},F=g["__core-js_shared__"];var R,N=(R=/[^.]+$/.exec(F&&F.keys&&F.keys.IE_PROTO||""))?"Symbol(src)_1."+R:"";var I=Function.prototype.toString;var O=/^\[object .+?Constructor\]$/,U=Function.prototype,x=Object.prototype,S=U.toString,P=x.hasOwnProperty,D=RegExp("^"+S.call(P).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");const G=function(e){return!(!L(e)||(t=e,N&&N in t))&&(function(e){if(!L(e))return!1;var t=w(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}(e)?D:O).test(function(e){if(null!=e){try{return I.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e));var t},B=function(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return G(r)?r:void 0},C=B(Object,"create");var k=Object.prototype.hasOwnProperty;var V=Object.prototype.hasOwnProperty;function M(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}M.prototype.clear=function(){this.__data__=C?C(null):{},this.size=0},M.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},M.prototype.get=function(e){var t=this.__data__;if(C){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return k.call(t,e)?t[e]:void 0},M.prototype.has=function(e){var t=this.__data__;return C?void 0!==t[e]:V.call(t,e)},M.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=C&&void 0===t?"__lodash_hash_undefined__":t,this};const j=M,H=function(e,t){for(var r=e.length;r--;)if((n=e[r][0])===(i=t)||n!=n&&i!=i)return r;var n,i;return-1};var W=Array.prototype.splice;function X(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}X.prototype.clear=function(){this.__data__=[],this.size=0},X.prototype.delete=function(e){var t=this.__data__,r=H(t,e);return!(r<0||(r==t.length-1?t.pop():W.call(t,r,1),--this.size,0))},X.prototype.get=function(e){var t=this.__data__,r=H(t,e);return r<0?void 0:t[r][1]},X.prototype.has=function(e){return H(this.__data__,e)>-1},X.prototype.set=function(e,t){var r=this.__data__,n=H(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this};const Y=X,z=B(g,"Map"),q=function(e,t){var r,n,i=e.__data__;return("string"==(n=typeof(r=t))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?i["string"==typeof t?"string":"hash"]:i.map};function Z(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}Z.prototype.clear=function(){this.size=0,this.__data__={hash:new j,map:new(z||Y),string:new j}},Z.prototype.delete=function(e){var t=q(this,e).delete(e);return this.size-=t?1:0,t},Z.prototype.get=function(e){return q(this,e).get(e)},Z.prototype.has=function(e){return q(this,e).has(e)},Z.prototype.set=function(e,t){var r=q(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this};const $=Z;function K(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var n=arguments,i=t?t.apply(this,n):n[0],a=r.cache;if(a.has(i))return a.get(i);var o=e.apply(this,n);return r.cache=a.set(i,o)||a,o};return r.cache=new(K.Cache||$),r}K.Cache=$;const J=K,Q=Object.getOwnPropertyDescriptor(new Uint8Array(1),0).writable;function ee(e){let t="number"!=typeof e?Number(e):e;return Number.isNaN(t)&&(t=0),Math.trunc(t)}function te(e,t){const[r,n]=[Number.isNaN(e),Number.isNaN(t)];if(r&&n)return 0;if(r)return 1;if(n)return-1;if(e<t)return-1;if(e>t)return 1;if(0===e&&0===t){const[r,n]=[Object.is(e,0),Object.is(t,0)];if(!r&&n)return-1;if(r&&!n)return 1}return 0}function re(e){return e instanceof DataView}function ne(e){return"string"==typeof e&&e===ee(e)+""}var ie=r(730),ae=ie.Z&&ie.Z.isArrayBuffer;const oe=ae?(se=ae,function(e){return se(e)}):function(e){return function(e){return null!=e&&"object"==typeof e}(e)&&"[object ArrayBuffer]"==w(e)};var se;const le=function(){const e=new WeakMap;return t=>{let r=e.get(t);return r||(r=Object.create(null),e.set(t,r),r)}}();function ue(e){return e instanceof de}function fe(e){if(!ue(e))throw new TypeError("This is not a Float16Array")}function ce(e){const t=e.length,r=new Array(t);for(let n=0;n<t;++n)r[n]=p(e[n]);return r}const pe={apply(e,t,r){return ue(t)&&"function"==typeof(n=e)&&ge.has(n)?Reflect.apply(e,le(t).target,r):Reflect.apply(e,t,r);var n}},he={get(e,t){let r=null;if(Q||(r=e,e=le(r).target),ne(t))return Reflect.has(e,t)?p(Reflect.get(e,t)):void 0;{const n=null!==r&&Reflect.has(r,t)?Reflect.get(r,t):Reflect.get(e,t);if("function"!=typeof n)return n;let i=le(n).proxy;return void 0===i&&(i=le(n).proxy=new Proxy(n,pe)),i}},set(e,t,r){let n=null;return Q||(n=e,e=le(n).target),ne(t)?Reflect.set(e,t,l(r)):null===n||Reflect.has(e,t)&&!Object.isFrozen(n)?Reflect.set(e,t,r):Reflect.set(n,t,r)}};Q||(he.getPrototypeOf=e=>Reflect.getPrototypeOf(le(e).target),he.setPrototypeOf=(e,t)=>Reflect.setPrototypeOf(le(e).target,t),he.defineProperty=(e,t,r)=>{const n=le(e).target;return!Reflect.has(n,t)||Object.isFrozen(e)?Reflect.defineProperty(e,t,r):Reflect.defineProperty(n,t,r)},he.deleteProperty=(e,t)=>{const r=le(e).target;return Reflect.has(e,t)?Reflect.deleteProperty(e,t):Reflect.deleteProperty(r,t)},he.has=(e,t)=>Reflect.has(e,t)||Reflect.has(le(e).target,t),he.isExtensible=e=>Reflect.isExtensible(e),he.preventExtensions=e=>Reflect.preventExtensions(e),he.getOwnPropertyDescriptor=(e,t)=>Reflect.getOwnPropertyDescriptor(e,t),he.ownKeys=e=>Reflect.ownKeys(e));class de extends Uint16Array{constructor(e,t,r){if(ue(e))super(le(e).target);else if(null===e||"object"!=typeof e||oe(e))switch(arguments.length){case 0:super();break;case 1:super(e);break;case 2:super(e,t);break;case 3:super(e,t,r);break;default:super(...arguments)}else{const t=Reflect.has(e,"length")||void 0===e[Symbol.iterator]?e:[...e],r=t.length;super(r);for(let e=0;e<r;++e)this[e]=l(t[e])}let n;if(Q)n=new Proxy(this,he);else{const e=Object.create(null);le(e).target=this,n=new Proxy(e,he)}return le(n).target=this,le(this).proxy=n,n}static from(e,...t){if(0===t.length)return new de(Uint16Array.from(e,l).buffer);const r=t[0],n=t[1];return new de(Uint16Array.from(e,(function(e,...t){return l(r.call(this,e,...t))}),n).buffer)}static of(...e){return new de(e)}*[Symbol.iterator](){for(const e of super[Symbol.iterator]())yield p(e)}keys(){return super.keys()}*values(){for(const e of super.values())yield p(e)}*entries(){for(const[e,t]of super.entries())yield[e,p(t)]}map(e,...t){fe(this);const r=t[0],n=[];for(let t=0,i=this.length;t<i;++t){const i=p(this[t]);n.push(e.call(r,i,t,le(this).proxy))}return new de(n)}filter(e,...t){fe(this);const r=t[0],n=[];for(let t=0,i=this.length;t<i;++t){const i=p(this[t]);e.call(r,i,t,le(this).proxy)&&n.push(i)}return new de(n)}reduce(e,...t){let r,n;fe(this),0===t.length?(r=p(this[0]),n=1):(r=t[0],n=0);for(let t=n,i=this.length;t<i;++t)r=e(r,p(this[t]),t,le(this).proxy);return r}reduceRight(e,...t){let r,n;fe(this);const i=this.length;0===t.length?(r=p(this[i-1]),n=i-1):(r=t[0],n=i);for(let t=n;t--;)r=e(r,p(this[t]),t,le(this).proxy);return r}forEach(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t)e.call(r,p(this[t]),t,le(this).proxy)}find(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t){const n=p(this[t]);if(e.call(r,n,t,le(this).proxy))return n}}findIndex(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t){const n=p(this[t]);if(e.call(r,n,t,le(this).proxy))return t}return-1}every(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t)if(!e.call(r,p(this[t]),t,le(this).proxy))return!1;return!0}some(e,...t){fe(this);const r=t[0];for(let t=0,n=this.length;t<n;++t)if(e.call(r,p(this[t]),t,le(this).proxy))return!0;return!1}set(e,...t){fe(this);const r=t[0];let n;if(ue(e))n=le(e).target;else{const t=Reflect.has(e,"length")||void 0===e[Symbol.iterator]?e:[...e],r=t.length;n=new Uint16Array(r);for(let e=0,r=t.length;e<r;++e)n[e]=l(t[e])}super.set(n,r)}reverse(){return fe(this),super.reverse(),le(this).proxy}fill(e,...t){return fe(this),super.fill(l(e),...t),le(this).proxy}copyWithin(e,t,...r){return fe(this),super.copyWithin(e,t,...r),le(this).proxy}sort(...e){fe(this);let t=e[0];void 0===t&&(t=te);const r=J(p);return super.sort(((e,n)=>t(r(e),r(n)))),le(this).proxy}slice(...e){let t;fe(this);try{t=super.slice(...e)}catch(r){if(!(r instanceof TypeError))throw r;t=new Uint16Array(this.buffer,this.byteOffset,this.length).slice(...e)}return new de(t.buffer)}subarray(...e){let t;fe(this);try{t=super.subarray(...e)}catch(r){if(!(r instanceof TypeError))throw r;t=new Uint16Array(this.buffer,this.byteOffset,this.length).subarray(...e)}return new de(t.buffer,t.byteOffset,t.length)}indexOf(e,...t){fe(this);const r=this.length;let n=ee(t[0]);n<0&&(n+=r,n<0&&(n=0));for(let t=n,i=r;t<i;++t)if(p(this[t])===e)return t;return-1}lastIndexOf(e,...t){fe(this);const r=this.length;let n=ee(t[0]);n=0===n?r:n+1,n>=0?n=n<r?n:r:n+=r;for(let t=n;t--;)if(p(this[t])===e)return t;return-1}includes(e,...t){fe(this);const r=this.length;let n=ee(t[0]);n<0&&(n+=r,n<0&&(n=0));const i=Number.isNaN(e);for(let t=n,a=r;t<a;++t){const r=p(this[t]);if(i&&Number.isNaN(r))return!0;if(r===e)return!0}return!1}join(...e){return fe(this),ce(this).join(...e)}toLocaleString(...e){return fe(this),ce(this).toLocaleString(...e)}get[Symbol.toStringTag](){if(ue(this))return"Float16Array"}}const _e=de.prototype,ge=new WeakSet;for(const e of Reflect.ownKeys(_e)){const t=_e[e];"function"==typeof t&&ge.add(t)}function me(e,t,...r){if(!re(e))throw new TypeError("First argument to getFloat16 function must be a DataView");return p(e.getUint16(t,...r))}function Te(e,t,r,...n){if(!re(e))throw new TypeError("First argument to setFloat16 function must be a DataView");e.setUint16(t,l(r),...n)}},277:(e,t,r)=>{"use strict";r.d(t,{Z:()=>n});const n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g},730:(e,t,r)=>{"use strict";r.d(t,{Z:()=>s});var n=r(277);e=r.hmd(e);var i="object"==typeof exports&&exports&&!exports.nodeType&&exports,a=i&&e&&!e.nodeType&&e,o=a&&a.exports===i&&n.Z.process;const s=function(){try{return a&&a.require&&a.require("util").types||o&&o.binding&&o.binding("util")}catch(e){}}()},627:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isArray=t.isString=t.isPositiveInteger=t.isInteger=t.isNumber=t.isValidTextureDataType=t.validTextureDataTypes=t.isValidTextureFormatType=t.validTextureFormatTypes=t.isValidWrapType=t.validWrapTypes=t.isValidFilterType=t.validFilterTypes=t.isValidDataType=t.validDataTypes=void 0;var n=r(738);function i(e){return!isNaN(e)}function a(e){return i(e)&&e%1==0}t.validDataTypes=[n.HALF_FLOAT,n.FLOAT,n.UNSIGNED_BYTE,n.BYTE,n.UNSIGNED_SHORT,n.SHORT,n.UNSIGNED_INT,n.INT],t.isValidDataType=function(e){return t.validDataTypes.indexOf(e)>-1},t.validFilterTypes=[n.LINEAR,n.NEAREST],t.isValidFilterType=function(e){return t.validFilterTypes.indexOf(e)>-1},t.validWrapTypes=[n.CLAMP_TO_EDGE,n.REPEAT],t.isValidWrapType=function(e){return t.validWrapTypes.indexOf(e)>-1},t.validTextureFormatTypes=[n.RGB,n.RGBA],t.isValidTextureFormatType=function(e){return t.validTextureFormatTypes.indexOf(e)>-1},t.validTextureDataTypes=[n.UNSIGNED_BYTE],t.isValidTextureDataType=function(e){return t.validTextureDataTypes.indexOf(e)>-1},t.isNumber=i,t.isInteger=a,t.isPositiveInteger=function(e){return a(e)&&e>0},t.isString=function(e){return"string"==typeof e},t.isArray=function(e){return Array.isArray(e)}},738:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.INT_4D_UNIFORM=t.INT_3D_UNIFORM=t.INT_2D_UNIFORM=t.INT_1D_UNIFORM=t.FLOAT_4D_UNIFORM=t.FLOAT_3D_UNIFORM=t.FLOAT_2D_UNIFORM=t.FLOAT_1D_UNIFORM=t.GLSL1=t.GLSL3=t.RGBA=t.RGB=t.CLAMP_TO_EDGE=t.REPEAT=t.NEAREST=t.LINEAR=t.INT=t.UNSIGNED_INT=t.SHORT=t.UNSIGNED_SHORT=t.BYTE=t.UNSIGNED_BYTE=t.FLOAT=t.HALF_FLOAT=void 0,t.HALF_FLOAT="HALF_FLOAT",t.FLOAT="FLOAT",t.UNSIGNED_BYTE="UNSIGNED_BYTE",t.BYTE="BYTE",t.UNSIGNED_SHORT="UNSIGNED_SHORT",t.SHORT="SHORT",t.UNSIGNED_INT="UNSIGNED_INT",t.INT="INT",t.LINEAR="LINEAR",t.NEAREST="NEAREST",t.REPEAT="REPEAT",t.CLAMP_TO_EDGE="CLAMP_TO_EDGE",t.RGB="RGB",t.RGBA="RGBA",t.GLSL3="300 es",t.GLSL1="100",t.FLOAT_1D_UNIFORM="1f",t.FLOAT_2D_UNIFORM="2f",t.FLOAT_3D_UNIFORM="3f",t.FLOAT_4D_UNIFORM="3f",t.INT_1D_UNIFORM="1i",t.INT_2D_UNIFORM="2i",t.INT_3D_UNIFORM="3i",t.INT_4D_UNIFORM="3i"},930:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DataLayer=void 0;var n=r(501),i=r(627),a=r(738),o=r(581),s=r(593),l=function(){function e(t){this.bufferIndex=0,this.buffers=[];var r=t.gl,n=t.errorCallback,o=t.name,s=t.dimensions,l=t.type,u=t.numComponents,f=t.data,c=t.glslVersion;if(this.name=o,this.gl=r,this.errorCallback=n,!i.isPositiveInteger(u)||u>4)throw new Error("Invalid numComponents "+u+' for DataLayer "'+o+'".');this.numComponents=u;var p=!!t.writable;this.writable=p;var h=e.calcSize(s,o),d=h.length,_=h.width,g=h.height;if(this.length=d,!i.isPositiveInteger(_))throw new Error("Invalid width "+_+' for DataLayer "'+o+'".');if(this.width=_,!i.isPositiveInteger(g))throw new Error("Invalid length "+g+' for DataLayer "'+o+'".');this.height=g;var m=void 0!==t.filter?t.filter:d?a.NEAREST:a.LINEAR;if(!i.isValidFilterType(m))throw new Error("Invalid filter: "+m+' for DataLayer "'+o+'", must be '+i.validFilterTypes.join(", ")+".");this.filter=m;var T=void 0!==t.wrapS?t.wrapS:a.CLAMP_TO_EDGE;if(!i.isValidWrapType(T))throw new Error("Invalid wrapS: "+T+' for DataLayer "'+o+'", must be '+i.validWrapTypes.join(", ")+".");this.wrapS=T;var v=void 0!==t.wrapT?t.wrapT:a.CLAMP_TO_EDGE;if(!i.isValidWrapType(v))throw new Error("Invalid wrapT: "+v+' for DataLayer "'+o+'", must be '+i.validWrapTypes.join(", ")+".");if(this.wrapT=v,!i.isValidDataType(l))throw new Error("Invalid type "+l+' for DataLayer "'+o+'", must be one of '+i.validDataTypes.join(", ")+".");this.type=l;var y=e.getInternalType({gl:r,type:l,glslVersion:c,writable:p,filter:m,name:o,errorCallback:n});this.internalType=y;var E=e.getGLTextureParameters({gl:r,name:o,numComponents:u,writable:p,internalType:y,glslVersion:c,errorCallback:n}),b=E.glFormat,A=E.glInternalFormat,w=E.glType,L=E.glNumChannels;this.glInternalFormat=A,this.glFormat=b,this.glType=w,this.glNumChannels=L,this.internalFilter=e.getInternalFilter({gl:r,filter:m,internalType:y,name:o,errorCallback:n}),this.glFilter=r[this.internalFilter],this.internalWrapS=e.getInternalWrap({gl:r,wrap:T,name:o}),this.glWrapS=r[this.internalWrapS],this.internalWrapT=e.getInternalWrap({gl:r,wrap:v,name:o}),this.glWrapT=r[this.internalWrapT];var F=void 0!==t.numBuffers?t.numBuffers:1;if(!i.isPositiveInteger(F))throw new Error("Invalid numBuffers: "+F+' for DataLayer "'+o+'", must be positive integer.');this.numBuffers=F,this.initBuffers(f)}return e.calcSize=function(e,t){var r,n,a;if(isNaN(e)){if(n=e[0],!i.isPositiveInteger(n))throw new Error("Invalid width "+n+' for DataLayer "'+t+'".');if(a=e[1],!i.isPositiveInteger(a))throw new Error("Invalid height "+a+' for DataLayer "'+t+'".')}else{if(!i.isPositiveInteger(e))throw new Error("Invalid length "+e+' for DataLayer "'+t+'".');for(var o=1,s=r=e;s>2;)o++,s/=2;n=Math.pow(2,Math.floor(o/2)+o%2),a=Math.pow(2,Math.floor(o/2))}return{width:n,height:a,length:r}},e.getInternalWrap=function(e){var t=e.gl,r=e.wrap,n=e.name;return s.isWebGL2(t)||r===a.CLAMP_TO_EDGE||s.isWebGL2(t)?r:(console.warn('Falling back to CLAMP_TO_EDGE wrapping for DataLayer "'+n+'" for WebGL 1.'),a.CLAMP_TO_EDGE)},e.getInternalFilter=function(e){var t=e.gl,r=e.errorCallback,n=e.internalType,i=e.name,s=e.filter;return s===a.NEAREST||(n===a.HALF_FLOAT&&(o.getExtension(t,o.OES_TEXTURE_HAlF_FLOAT_LINEAR,r,!0)||o.getExtension(t,o.OES_TEXTURE_FLOAT_LINEAR,r,!0)||(console.warn('Falling back to NEAREST filter for DataLayer "'+i+'".'),s=a.NEAREST)),n===a.FLOAT&&(o.getExtension(t,o.OES_TEXTURE_FLOAT_LINEAR,r,!0)||(console.warn('Falling back to NEAREST filter for DataLayer "'+i+'".'),s=a.NEAREST))),s},e.getInternalType=function(t){var r=t.gl,n=t.errorCallback,i=t.writable,l=t.name,u=t.glslVersion,f=t.type;return e.shouldCastIntTypeAsFloat(t)&&(f===a.UNSIGNED_BYTE||f===a.BYTE?f=a.HALF_FLOAT:(f===a.INT||a.UNSIGNED_INT,console.warn("Falling back "+f+' type to FLOAT type for glsl1.x support for DataLayer "'+l+'".\nLarge UNSIGNED_INT or INT with absolute value > 16,777,216 are not supported, on mobile UNSIGNED_INT, INT, UNSIGNED_SHORT, and SHORT with absolute value > 2,048 may not be supported.'),f=a.FLOAT)),s.isWebGL2(r)||(f===a.FLOAT&&(o.getExtension(r,o.OES_TEXTURE_FLOAT,n,!0)||(console.warn('FLOAT not supported, falling back to HALF_FLOAT type for DataLayer "'+l+'".'),f=a.HALF_FLOAT),i&&(e.testFramebufferWrite({gl:r,type:f,glslVersion:u})||f===a.HALF_FLOAT||(console.warn('FLOAT not supported for writing operations, falling back to HALF_FLOAT type for DataLayer "'+l+'".'),f=a.HALF_FLOAT))),f===a.HALF_FLOAT&&(o.getExtension(r,o.OES_TEXTURE_HALF_FLOAT,n),i&&(e.testFramebufferWrite({gl:r,type:f,glslVersion:u})||n("This browser does not support rendering to HALF_FLOAT textures.")))),i&&s.isWebGL2(r)&&(f===a.HALF_FLOAT||f===a.FLOAT)&&o.getExtension(r,o.EXT_COLOR_BUFFER_FLOAT,n),f},e.shouldCastIntTypeAsFloat=function(e){var t=e.gl,r=e.type,n=e.filter;return(e.glslVersion!==a.GLSL3||!s.isWebGL2(t))&&(r===a.UNSIGNED_BYTE&&n===a.LINEAR||r===a.BYTE||r===a.SHORT||r===a.INT||r===a.UNSIGNED_SHORT||r===a.UNSIGNED_INT)},e.getGLTextureParameters=function(e){var t,r,n,i,l=e.gl,u=e.errorCallback,f=e.name,c=e.numComponents,p=e.internalType,h=e.writable,d=e.glslVersion;if(s.isWebGL2(l)){if(i=c,3===c&&h&&(i=4),p===a.FLOAT||p===a.HALF_FLOAT)switch(i){case 1:r=l.RED;break;case 2:r=l.RG;break;case 3:r=l.RGB;break;case 4:r=l.RGBA;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}else if(d===a.GLSL1&&p===a.UNSIGNED_BYTE)switch(i){case 1:if(!h){r=l.ALPHA;break}case 2:if(!h){r=l.LUMINANCE_ALPHA;break}case 3:r=l.RGB,i=3;break;case 4:r=l.RGBA,i=4;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}else switch(i){case 1:r=l.RED_INTEGER;break;case 2:r=l.RG_INTEGER;break;case 3:r=l.RGB_INTEGER;break;case 4:r=l.RGBA_INTEGER;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}switch(p){case a.HALF_FLOAT:switch(t=l.HALF_FLOAT,i){case 1:n=l.R16F;break;case 2:n=l.RG16F;break;case 3:n=l.RGB16F;break;case 4:n=l.RGBA16F;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case a.FLOAT:switch(t=l.FLOAT,i){case 1:n=l.R32F;break;case 2:n=l.RG32F;break;case 3:n=l.RGB32F;break;case 4:n=l.RGBA32F;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case a.UNSIGNED_BYTE:if(t=l.UNSIGNED_BYTE,d===a.GLSL1&&p===a.UNSIGNED_BYTE)n=r;else switch(i){case 1:n=l.R8UI;break;case 2:n=l.RG8UI;break;case 3:n=l.RGB8UI;break;case 4:n=l.RGBA8UI;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case a.BYTE:switch(t=l.BYTE,i){case 1:n=l.R8I;break;case 2:n=l.RG8I;break;case 3:n=l.RGB8I;break;case 4:n=l.RGBA8I;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case a.SHORT:switch(t=l.SHORT,i){case 1:n=l.R16I;break;case 2:n=l.RG16I;break;case 3:n=l.RGB16I;break;case 4:n=l.RGBA16I;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case a.UNSIGNED_SHORT:switch(t=l.UNSIGNED_SHORT,i){case 1:n=l.R16UI;break;case 2:n=l.RG16UI;break;case 3:n=l.RGB16UI;break;case 4:n=l.RGBA16UI;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case a.INT:switch(t=l.INT,i){case 1:n=l.R32I;break;case 2:n=l.RG32I;break;case 3:n=l.RGB32I;break;case 4:n=l.RGBA32I;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;case a.UNSIGNED_INT:switch(t=l.UNSIGNED_INT,i){case 1:n=l.R32UI;break;case 2:n=l.RG32UI;break;case 3:n=l.RGB32UI;break;case 4:n=l.RGBA32UI;break;default:throw new Error("Unsupported glNumChannels "+i+' for DataLayer "'+f+'".')}break;default:throw new Error("Unsupported type "+p+' for DataLayer "'+f+'".')}}else{switch(c){case 1:if(!h){r=l.ALPHA;break}case 2:if(!h){r=l.LUMINANCE_ALPHA;break}case 3:r=l.RGB,n=l.RGB,i=3;break;case 4:r=l.RGBA,n=l.RGBA,i=4;break;default:throw new Error("Unsupported numComponents "+c+' for DataLayer "'+f+'".')}switch(p){case a.FLOAT:t=l.FLOAT;break;case a.HALF_FLOAT:t=l.HALF_FLOAT||o.getExtension(l,o.OES_TEXTURE_HALF_FLOAT,u).HALF_FLOAT_OES;break;case a.UNSIGNED_BYTE:t=l.UNSIGNED_BYTE;break;default:throw new Error("Unsupported type "+p+' in WebGL 1.0 for DataLayer "'+f+'".')}}if(void 0===t||void 0===r||void 0===n){var _=[];throw void 0===t&&_.push("glType"),void 0===r&&_.push("glFormat"),void 0===n&&_.push("glInternalFormat"),new Error("Invalid type: "+p+" for numComponents "+c+", unable to init parameter"+(_.length>1?"s":"")+" "+_.join(", ")+' for DataLayer "'+f+'".')}if(void 0===i||c<1||c>4||i<c)throw new Error("Invalid numChannels "+i+" for numComponents "+c+' for DataLayer "'+f+'".');return{glFormat:r,glInternalFormat:n,glType:t,glNumChannels:i}},e.testFramebufferWrite=function(t){var r=t.gl,n=t.type,i=t.glslVersion,o=r.createTexture();if(!o)return!1;r.bindTexture(r.TEXTURE_2D,o);var s=r[a.CLAMP_TO_EDGE],l=r[a.CLAMP_TO_EDGE],u=r[a.NEAREST];r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,s),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,l),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,u),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,u);var f=e.getGLTextureParameters({gl:r,name:"testFramebufferWrite",numComponents:1,writable:!0,internalType:n,glslVersion:i,errorCallback:function(){}}),c=f.glInternalFormat,p=f.glFormat,h=f.glType;r.texImage2D(r.TEXTURE_2D,0,c,100,100,0,p,h,null);var d=r.createFramebuffer();if(!d)return r.deleteTexture(o),!1;r.bindFramebuffer(r.FRAMEBUFFER,d),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,o,0);var _=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.deleteTexture(o),r.deleteFramebuffer(d),_},e.prototype.validateDataArray=function(e){if(e){var t=this,r=t.width,i=t.height,o=t.length,s=t.numComponents,l=t.glNumChannels,u=t.type,f=t.internalType,c=t.name;if(o&&e.length!==o*s||!o&&e.length!==r*i*s)throw new Error("Invalid data length "+e.length+' for DataLayer "'+c+'" of size '+(o||r+"x"+i)+"x"+s+".");var p=!1;switch(u){case a.HALF_FLOAT:case a.FLOAT:p=p||e.constructor!==Float32Array;break;case a.UNSIGNED_BYTE:p=p||e.constructor!==Uint8Array;break;case a.BYTE:p=p||e.constructor!==Int8Array;break;case a.UNSIGNED_SHORT:p=p||e.constructor!==Uint16Array;break;case a.SHORT:p=p||e.constructor!==Int16Array;break;case a.UNSIGNED_INT:p=p||e.constructor!==Uint32Array;break;case a.INT:p=p||e.constructor!==Int32Array;break;default:throw new Error('Error initing DataLayer "'+c+'".  Unsupported type "'+u+'" for WebGLCompute.initDataLayer.')}if(p)throw new Error("Invalid TypedArray of type "+e.constructor.name+' supplied to DataLayer "'+c+'" of type "'+u+'".');var h=e,d=r*i*l,_=h.length!==d,g=f===a.HALF_FLOAT;if(u!==f||_||g){switch(f){case a.HALF_FLOAT:h=new Uint16Array(d);break;case a.FLOAT:h=new Float32Array(d);break;case a.UNSIGNED_BYTE:h=new Uint8Array(d);break;case a.BYTE:h=new Int8Array(d);break;case a.UNSIGNED_SHORT:h=new Uint16Array(d);break;case a.SHORT:h=new Int16Array(d);break;case a.UNSIGNED_INT:h=new Uint32Array(d);break;case a.INT:h=new Int32Array(d);break;default:throw new Error("Error initing "+c+".  Unsupported internalType "+f+" for WebGLCompute.initDataLayer.")}for(var m=g?new DataView(h.buffer):null,T=0,v=e.length/s;T<v;T++)for(var y=0;y<s;y++){var E=e[T*s+y],b=T*l+y;g?n.setFloat16(m,2*b,E,!0):h[b]=E}}return h}},e.prototype.initBuffers=function(e){for(var t=this,r=t.name,n=t.numBuffers,i=t.gl,a=t.width,o=t.height,s=t.glInternalFormat,l=t.glFormat,u=t.glType,f=t.glFilter,c=t.glWrapS,p=t.glWrapT,h=t.writable,d=t.errorCallback,_=this.validateDataArray(e),g=0;g<n;g++){var m=i.createTexture();if(!m)return void d('Could not init texture for DataLayer "'+r+'": '+i.getError()+".");i.bindTexture(i.TEXTURE_2D,m),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_S,c),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_T,p),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,f),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,f),i.texImage2D(i.TEXTURE_2D,0,s,a,o,0,l,u,_||null);var T={texture:m};if(h){var v=i.createFramebuffer();if(!v)return void d('Could not init framebuffer for DataLayer "'+r+'": '+i.getError()+".");i.bindFramebuffer(i.FRAMEBUFFER,v),i.framebufferTexture2D(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,m,0);var y=i.checkFramebufferStatus(i.FRAMEBUFFER);y!=i.FRAMEBUFFER_COMPLETE&&d('Invalid status for framebuffer for DataLayer "'+r+'": '+y+"."),T.framebuffer=v}this.buffers.push(T)}i.bindFramebuffer(i.FRAMEBUFFER,null)},e.prototype.getCurrentStateTexture=function(){return this.buffers[this.bufferIndex].texture},e.prototype.getPreviousStateTexture=function(e){if(void 0===e&&(e=-1),1===this.numBuffers)throw new Error('Cannot call getPreviousStateTexture on DataLayer "'+this.name+'" with only one buffer.');var t=this.bufferIndex+e+this.numBuffers;if(t<0||t>=this.numBuffers)throw new Error("Invalid index "+e+" passed to getPreviousStateTexture on DataLayer "+this.name+" with "+this.numBuffers+" buffers.");return this.buffers[t].texture},e.prototype.bindOutputBuffer=function(e){var t=this.gl;e&&(this.bufferIndex=(this.bufferIndex+1)%this.numBuffers);var r=this.buffers[this.bufferIndex].framebuffer;if(!r)throw new Error('DataLayer "'+this.name+'" is not writable.');t.bindFramebuffer(t.FRAMEBUFFER,r)},e.prototype.setData=function(e){this.destroyBuffers(),this.initBuffers(e)},e.prototype.resize=function(t,r){var n=e.calcSize(t,this.name),i=n.length,a=n.width,o=n.height;this.length=i,this.width=a,this.height=o,this.destroyBuffers(),this.initBuffers(r)},e.prototype.clear=function(){this.destroyBuffers(),this.initBuffers()},e.prototype.getDimensions=function(){return[this.width,this.height]},e.prototype.getTextures=function(){return this.buffers.map((function(e){return e.texture}))},e.prototype.getLength=function(){if(!this.length)throw new Error('Cannot call getLength() on 2D DataLayer "'+this.name+'".');return this.length},e.prototype.destroyBuffers=function(){var e=this.gl,t=this.buffers;t.forEach((function(t){var r=t.framebuffer,n=t.texture;e.deleteTexture(n),r&&e.deleteFramebuffer(r),delete t.texture,delete t.framebuffer})),t.length=0},e.prototype.destroy=function(){this.destroyBuffers(),delete this.gl,delete this.errorCallback},e}();t.DataLayer=l},664:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GPUProgram=void 0;var n=r(627),i=r(738),a=r(593),o=r(435),s=r(790),l=r(218),u=r(852),f=r(198),c=r(502),p="DEFAULT",h="SEGMENT",d="POINTS",_="VECTOR_FIELD",g=function(){function e(e){var t=this;this.uniforms={};var r=e.gl,i=e.errorCallback,o=e.name,s=e.fragmentShader,l=e.glslVersion,u=e.uniforms,f=e.defines;if(this.gl=r,this.errorCallback=i,this.name=o,this.glslVersion=l,"string"==typeof s||"string"==typeof s[0]){var c="string"==typeof s?s:s.join("\n");f&&(c=Object.keys(f).map((function(e){if(!n.isString(e)||!n.isString(f[e]))throw new Error("GPUProgram defines must be passed in as key value pairs that are both strings, got key value pair of type "+typeof e+" : "+typeof f[e]+".");return"#define "+e+" "+f[e]+"\n"})).join("\n")+c);var p=a.compileShader(r,i,c,r.FRAGMENT_SHADER,o);if(!p)return void i('Unable to compile fragment shader for program "'+o+'".');this.fragmentShader=p}else if(f)throw new Error('Unable to attach defines to program "'+o+'" because fragment shader is already compiled.');null==u||u.forEach((function(e){var r=e.name,n=e.value,i=e.dataType;t.setUniform(r,n,i)}))}return e.prototype.initProgram=function(e,t){var r=this,n=r.gl,i=r.fragmentShader,a=r.errorCallback,o=r.uniforms,s=n.createProgram();if(s){if(n.attachShader(s,i),n.attachShader(s,e),n.linkProgram(s),n.getProgramParameter(s,n.LINK_STATUS)){for(var l=Object.keys(o),u=0;u<l.length;u++){var f=l[u],c=o[f],p=c.value,h=c.type;this.setProgramUniform(s,t,f,p,h)}return s}a('Program "'+name+'" failed to link: '+n.getProgramInfoLog(s))}else a("Unable to init gl program: "+name+".")},Object.defineProperty(e.prototype,"defaultProgram",{get:function(){if(this._defaultProgram)return this._defaultProgram;if(void 0===e.defaultVertexShader){var t=this,r=t.gl,n=t.name,l=t.errorCallback,u=t.glslVersion===i.GLSL3?o:s,f=a.compileShader(r,l,u,r.VERTEX_SHADER,n);if(!f)return void l('Unable to compile default vertex shader for program "'+n+'".');e.defaultVertexShader=f}var c=this.initProgram(e.defaultVertexShader,p);return this._defaultProgram=c,this._defaultProgram},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"segmentProgram",{get:function(){if(this._segmentProgram)return this._segmentProgram;if(void 0===e.segmentVertexShader){var t=this,r=t.gl,n=t.name,o=t.errorCallback,s=t.glslVersion===i.GLSL3?l:u,f=a.compileShader(r,o,s,r.VERTEX_SHADER,n);if(!f)return void o('Unable to compile segment vertex shader for program "'+n+'".');e.segmentVertexShader=f}var c=this.initProgram(e.segmentVertexShader,h);return this._segmentProgram=c,this._segmentProgram},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pointsProgram",{get:function(){if(this._pointsProgram)return this._pointsProgram;if(void 0===e.pointsVertexShader){var t=this,r=t.gl,n=t.name,o=t.errorCallback,s=t.glslVersion===i.GLSL3?pointsVertexShaderSource_glsl3:f;if(void 0===s)throw new Error("Need to write glsl3 version of pointsVertexShader.");var l=a.compileShader(r,o,s,r.VERTEX_SHADER,n);if(!l)return void o('Unable to compile points vertex shader for program "'+n+'".');e.pointsVertexShader=l}var u=this.initProgram(e.pointsVertexShader,d);return this._pointsProgram=u,this._pointsProgram},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"vectorFieldProgram",{get:function(){if(this._vectorFieldProgram)return this._vectorFieldProgram;if(void 0===e.vectorFieldVertexShader){var t=this,r=t.gl,n=t.name,o=t.errorCallback,s=t.glslVersion===i.GLSL3?vectorFieldVertexShaderSource_glsl3:c;if(void 0===s)throw new Error("Need to write glsl3 version of vectorFieldVertexShader.");var l=a.compileShader(r,o,s,r.VERTEX_SHADER,n);if(!l)return void o('Unable to compile vector field vertex shader for program "'+n+'".');e.vectorFieldVertexShader=l}var u=this.initProgram(e.vectorFieldVertexShader,_);return this._vectorFieldProgram=u,this._vectorFieldProgram},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activePrograms",{get:function(){var e=[];return this._defaultProgram&&e.push({program:this._defaultProgram,programName:p}),this._segmentProgram&&e.push({program:this._segmentProgram,programName:h}),this._pointsProgram&&e.push({program:this._pointsProgram,programName:d}),this._vectorFieldProgram&&e.push({program:this._vectorFieldProgram,programName:_}),e},enumerable:!1,configurable:!0}),e.prototype.uniformTypeForValue=function(e,t){var r=this;if(t===i.FLOAT){if(n.isArray(e))e.forEach((function(t){if(!n.isNumber(t))throw new Error("Invalid uniform value: "+e+' for program "'+r.name+'", expected float or float[] of length 1-4.')}));else if(!n.isNumber(e))throw new Error("Invalid uniform value: "+e+' for program "'+this.name+'", expected float or float[] of length 1-4.');if(!n.isArray(e)||1===e.length)return i.FLOAT_1D_UNIFORM;if(2===e.length)return i.FLOAT_2D_UNIFORM;if(3===e.length)return i.FLOAT_3D_UNIFORM;if(4===e.length)return i.FLOAT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e+' for program "'+this.name+'", expected float or float[] of length 1-4.')}if(t===i.INT){if(n.isArray(e))e.forEach((function(t){if(!n.isInteger(t))throw new Error("Invalid uniform value: "+e+' for program "'+r.name+'", expected int or int[] of length 1-4.')}));else if(!n.isInteger(e))throw new Error("Invalid uniform value: "+e+' for program "'+this.name+'", expected int or int[] of length 1-4.');if(!n.isArray(e)||1===e.length)return i.INT_1D_UNIFORM;if(2===e.length)return i.INT_2D_UNIFORM;if(3===e.length)return i.INT_3D_UNIFORM;if(4===e.length)return i.INT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e+' for program "'+this.name+'", expected int or int[] of length 1-4.')}throw new Error("Invalid uniform data type: "+t+' for program "'+this.name+'", expected '+i.FLOAT+" or "+i.INT+".")},e.prototype.setProgramUniform=function(e,t,r,n,a){var o,s=this,l=s.gl,u=s.uniforms,f=s.errorCallback;l.useProgram(e);var c=null===(o=u[r])||void 0===o?void 0:o.location[t];if(void 0===c){var p=l.getUniformLocation(e,r);if(!p)return void f('Could not init uniform "'+r+'" for program "'+this.name+'".\n\t\tCheck that uniform is present in shader code, unused uniforms may be removed by compiler.\n\t\tAlso check that uniform type in shader code matches type '+a+".\n\t\tError code: "+l.getError()+".");c=p,u[r]&&(u[r].location[t]=c)}switch(a){case i.FLOAT_1D_UNIFORM:l.uniform1f(c,n);break;case i.FLOAT_2D_UNIFORM:l.uniform2fv(c,n);break;case i.FLOAT_3D_UNIFORM:l.uniform3fv(c,n);break;case i.FLOAT_4D_UNIFORM:l.uniform4fv(c,n);break;case i.INT_1D_UNIFORM:l.uniform1i(c,n);break;case i.INT_2D_UNIFORM:l.uniform2iv(c,n);break;case i.INT_3D_UNIFORM:l.uniform3iv(c,n);break;case i.INT_4D_UNIFORM:l.uniform4iv(c,n);break;default:throw new Error("Unknown uniform type "+a+' for GPUProgram "'+this.name+'".')}},e.prototype.setUniform=function(e,t,r){var n=this.activePrograms,i=this.uniforms,a=i[e]?i[e].type:void 0;if(r){var o=this.uniformTypeForValue(t,r);if(void 0===a)a=o;else if(a!==o)throw new Error('Uniform "'+e+'" for GPUProgram "'+this.name+'" cannot change from type '+a+" to type "+o+".")}if(void 0===a)throw new Error('Unknown type for uniform "'+e+'", please pass in dataType to GPUProgram.setUniform when initing a new uniform.');i[e]||(i[e]={type:a,location:{},value:t});for(var s=0;s<n.length;s++){var l=n[s],u=l.program,f=l.programName;this.setProgramUniform(u,f,e,t,a)}},e.prototype.setVertexUniform=function(e,t,r,n){var i,a=this.uniformTypeForValue(r,n);if(void 0===e)throw new Error("Must pass in valid WebGLProgram to setVertexUniform, got undefined.");if(e===this._defaultProgram?i=p:e===this._segmentProgram?i=h:e===this._pointsProgram?i=d:e===this._vectorFieldProgram&&(i=_),void 0===i)throw new Error("Could not find valid programName for WebGLProgram.");this.setProgramUniform(e,i,t,r,a)},e.prototype.destroy=function(){var e=this,t=e.gl,r=e.fragmentShader;e.activePrograms.forEach((function(e){var r=e.program;t.deleteProgram(r)})),t.deleteShader(r),delete this._defaultProgram,delete this._segmentProgram,delete this._pointsProgram,delete this._vectorFieldProgram,delete this.fragmentShader,delete this.gl,delete this.errorCallback,delete this.program},e}();t.GPUProgram=g},215:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.WebGLCompute=void 0;var i=r(930),a=r(738),o=r(664),s=r(406),l=r(593),u=r(501),f=r(627),c=r(518),p=r(546),h=r(374),d=r(541),_=function(){function e(e,t,r){void 0===t&&(t=function(e){throw new Error(e)}),this.errorState=!1;var n=["canvas","context","antialias","glslVersion"];Object.keys(e).forEach((function(e){if(n.indexOf(e)<0)throw new Error("Invalid key "+e+" passed to WebGLCompute.constructor.  Valid keys are "+n.join(", ")+".")}));var i=this;this.errorCallback=function(e){i.errorState||(i.errorState=!0,t(e))};var o=e.canvas,s=e.context;if(!s){var u={};if(void 0!==e.antialias&&(u.antialias=e.antialias),null===(s=o.getContext("webgl2",u)||o.getContext("webgl",u)||o.getContext("experimental-webgl",u)))return void this.errorCallback("Unable to initialize WebGL context.")}l.isWebGL2(s)?console.log("Using WebGL 2.0 context."):console.log("Using WebGL 1.0 context."),this.gl=s,this.renderer=r;var f=void 0===e.glslVersion?a.GLSL1:e.glslVersion;this.glslVersion=f,l.isWebGL2(s)||f!==a.GLSL3||console.warn("GLSL3.x is incompatible with WebGL1.0 contexts."),s.disable(s.DEPTH_TEST),s.pixelStorei(s.UNPACK_ALIGNMENT,1),this.copyFloatProgram=this.initProgram({name:"copyFloat",fragmentShader:f===a.GLSL3?c:d,uniforms:[{name:"u_state",value:0,dataType:a.INT}]}),f===a.GLSL3?(this.copyIntProgram=this.initProgram({name:"copyInt",fragmentShader:p,uniforms:[{name:"u_state",value:0,dataType:a.INT}]}),this.copyUintProgram=this.initProgram({name:"copyUint",fragmentShader:h,uniforms:[{name:"u_state",value:0,dataType:a.INT}]})):(this.copyIntProgram=this.copyFloatProgram,this.copyUintProgram=this.copyFloatProgram),s.bindBuffer(s.ARRAY_BUFFER,null),this.onResize(o),this.maxNumTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),console.log(this.maxNumTextures+" textures max.")}return e.initWithThreeRenderer=function(t,r,i){return new e(n({canvas:t.domElement,context:t.getContext()},r),i,t)},e.prototype.isWebGL2=function(){return l.isWebGL2(this.gl)},Object.defineProperty(e.prototype,"quadPositionsBuffer",{get:function(){if(void 0===this._quadPositionsBuffer){var e=new Float32Array([-1,-1,1,-1,-1,1,1,1]);this._quadPositionsBuffer=this.initVertexBuffer(e)}return this._quadPositionsBuffer},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"boundaryPositionsBuffer",{get:function(){if(void 0===this._boundaryPositionsBuffer){var e=new Float32Array([-1,-1,1,-1,1,1,-1,1,-1,-1]);this._boundaryPositionsBuffer=this.initVertexBuffer(e)}return this._boundaryPositionsBuffer},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"circlePositionsBuffer",{get:function(){if(void 0===this._circlePositionsBuffer){for(var e=[0,0],t=0;t<=18;t++)e.push(Math.cos(2*Math.PI*t/18),Math.sin(2*Math.PI*t/18));var r=new Float32Array(e);this._circlePositionsBuffer=this.initVertexBuffer(r)}return this._circlePositionsBuffer},enumerable:!1,configurable:!0}),e.prototype.initVertexBuffer=function(e){var t=this.errorCallback,r=this.gl,n=r.createBuffer();if(n)return r.bindBuffer(r.ARRAY_BUFFER,n),r.bufferData(r.ARRAY_BUFFER,e,r.STATIC_DRAW),n;t("Unable to allocate gl buffer.")},e.prototype.initProgram=function(e){var t=["name","fragmentShader","uniforms","defines"];Object.keys(e).forEach((function(e){if(t.indexOf(e)<0)throw new Error("Invalid key "+e+" passed to WebGLCompute.initProgram.  Valid keys are "+t.join(", ")+".")}));var r=this,i=r.gl,a=r.errorCallback,s=r.glslVersion;return new o.GPUProgram(n(n({},e),{gl:i,errorCallback:a,glslVersion:s}))},e.prototype.initDataLayer=function(e){var t=["name","dimensions","type","numComponents","data","filter","wrapS","wrapT","writable","numBuffers"];Object.keys(e).forEach((function(e){if(t.indexOf(e)<0)throw new Error("Invalid key "+e+" passed to WebGLCompute.initDataLayer.  Valid keys are "+t.join(", ")+".")}));var r=this,a=r.gl,o=r.errorCallback,s=r.glslVersion;return new i.DataLayer(n(n({},e),{gl:a,glslVersion:s,errorCallback:o}))},e.prototype.initTexture=function(e,t){var r=["name","url","filter","wrapS","wrapT","format"];Object.keys(e).forEach((function(e){if(r.indexOf(e)<0)throw new Error("Invalid key "+e+" passed to WebGLCompute.initTexture.  Valid keys are "+r.join(", ")+".")}));var n=e.url,i=e.name;if(!f.isString(n))throw new Error("Expected WebGLCompute.initTexture params to have url of type string, got "+n+" of type "+typeof n+".");if(!f.isString(i))throw new Error("Expected WebGLCompute.initTexture params to have name of type string, got "+i+" of type "+typeof i+".");var o=void 0!==e.filter?e.filter:a.NEAREST;if(!f.isValidFilterType(o))throw new Error("Invalid filter: "+o+' for DataLayer "'+i+'", must be '+f.validFilterTypes.join(", ")+".");var s=void 0!==e.wrapS?e.wrapS:a.CLAMP_TO_EDGE;if(!f.isValidWrapType(s))throw new Error("Invalid wrapS: "+s+' for DataLayer "'+i+'", must be '+f.validWrapTypes.join(", ")+".");var u=void 0!==e.wrapT?e.wrapT:a.CLAMP_TO_EDGE;if(!f.isValidWrapType(u))throw new Error("Invalid wrapT: "+u+' for DataLayer "'+i+'", must be '+f.validWrapTypes.join(", ")+".");var c=void 0!==e.format?e.format:a.RGBA;if(!f.isValidTextureFormatType(c))throw new Error("Invalid format: "+c+' for DataLayer "'+i+'", must be '+f.validTextureFormatTypes.join(", ")+".");var p=void 0!==e.type?e.type:a.UNSIGNED_BYTE;if(!f.isValidTextureDataType(c))throw new Error("Invalid type: "+p+' for DataLayer "'+i+'", must be '+f.validTextureDataTypes.join(", ")+".");var h=this.gl,d=this.errorCallback,_=h.createTexture();if(null===_)throw new Error("Unable to init glTexture.");h.bindTexture(h.TEXTURE_2D,_);var g=h.RGBA,m=h[c],T=h[p],v=new Uint8Array([0,0,0,0]);h.texImage2D(h.TEXTURE_2D,0,g,1,1,0,m,T,v);var y=new Image;return y.onload=function(){h.bindTexture(h.TEXTURE_2D,_),h.texImage2D(h.TEXTURE_2D,0,g,m,T,y),l.isPowerOf2(y.width)&&l.isPowerOf2(y.height)||console.warn("Texture "+i+" dimensions ["+y.width+", "+y.height+"] are not power of 2."),h.texParameteri(h.TEXTURE_2D,h.TEXTURE_WRAP_S,h[s]),h.texParameteri(h.TEXTURE_2D,h.TEXTURE_WRAP_T,h[u]),h.texParameteri(h.TEXTURE_2D,h.TEXTURE_MIN_FILTER,h[o]),h.texParameteri(h.TEXTURE_2D,h.TEXTURE_MAG_FILTER,h[o]),t&&t(_)},y.onerror=function(e){d("Error loading image "+i+": "+e)},y.src=n,_},e.prototype.onResize=function(e){var t=e.clientWidth,r=e.clientHeight;e.width=t,e.height=r,this.width=t,this.height=r},e.prototype.drawSetup=function(e,t,r,n){var i=this.gl;if(e){var a=r.map((function(e){return e.getCurrentStateTexture?e.getCurrentStateTexture():e}));this.setOutputLayer(t,r,n),i.useProgram(e);for(var o=0;o<a.length;o++)i.activeTexture(i.TEXTURE0+o),i.bindTexture(i.TEXTURE_2D,a[o])}},e.prototype.copyProgramForType=function(e){switch(e){case a.HALF_FLOAT:case a.FLOAT:return this.copyFloatProgram;case a.UNSIGNED_BYTE:case a.UNSIGNED_SHORT:case a.UNSIGNED_INT:return this.copyUintProgram;case a.BYTE:case a.SHORT:case a.INT:return this.copyIntProgram;default:throw new Error("Invalid type: "+e+" passed to WebGLCompute.copyProgramForType.")}},e.prototype.setOutputLayer=function(e,t,r){var n=this.gl;if(r){if(t.indexOf(r)>-1){if(1===r.numBuffers)throw new Error("\nCannot use same buffer for input and output of a program.\nTry increasing the number of buffers in your output layer to at least 2 so you\ncan render to nextState using currentState as an input.");if(e)r.bindOutputBuffer(!0);else{var i=this.copyProgramForType(r.internalType);this.step(i,[r],r),r.bindOutputBuffer(!1)}}else r.bindOutputBuffer(!1);var a=r.getDimensions(),o=a[0],s=a[1];n.viewport(0,0,o,s)}else{n.bindFramebuffer(n.FRAMEBUFFER,null);var l=this.width,u=this.height;n.viewport(0,0,l,u)}},e.prototype.setPositionAttribute=function(e){var t=this.gl,r=t.getAttribLocation(e,"a_internal_position");t.vertexAttribPointer(r,2,t.FLOAT,!1,0,0),t.enableVertexAttribArray(r)},e.prototype.setIndexAttribute=function(e){var t=this.gl,r=t.getAttribLocation(e,"a_internal_index");t.vertexAttribPointer(r,1,t.FLOAT,!1,0,0),t.enableVertexAttribArray(r)},e.prototype.step=function(e,t,r,n){void 0===t&&(t=[]);var i=this,o=i.gl,s=i.errorState,l=i.quadPositionsBuffer;if(!s){var u=e.defaultProgram;this.drawSetup(e.defaultProgram,!0,t,r),e.setVertexUniform(u,"u_internal_scale",[1,1],a.FLOAT),e.setVertexUniform(u,"u_internal_translation",[0,0],a.FLOAT),o.bindBuffer(o.ARRAY_BUFFER,l),this.setPositionAttribute(e.defaultProgram),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.TRIANGLE_STRIP,0,4),o.disable(o.BLEND)}},e.prototype.stepBoundary=function(e,t,r,n){void 0===t&&(t=[]);var i=this,o=i.gl,s=i.errorState,l=i.boundaryPositionsBuffer;if(!s){var u=e.defaultProgram;this.drawSetup(u,!1,t,r);var f=r?r.getDimensions():[this.width,this.height],c=[1/f[0],1/f[1]];if(e.setVertexUniform(u,"u_internal_scale",[1-c[0],1-c[1]],a.FLOAT),e.setVertexUniform(u,"u_internal_translation",c,a.FLOAT),o.bindBuffer(o.ARRAY_BUFFER,l),this.setPositionAttribute(u),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),null==n?void 0:n.singleEdge)switch(null==n?void 0:n.singleEdge){case"LEFT":o.drawArrays(o.LINES,3,2);break;case"RIGHT":o.drawArrays(o.LINES,1,2);break;case"TOP":o.drawArrays(o.LINES,2,2);break;case"BOTTOM":o.drawArrays(o.LINES,0,2);break;default:throw new Error("Unknown boundary edge type: "+(null==n?void 0:n.singleEdge)+".")}else o.drawArrays(o.LINE_LOOP,0,4);o.disable(o.BLEND)}},e.prototype.stepNonBoundary=function(e,t,r,n){void 0===t&&(t=[]);var i=this,o=i.gl,s=i.errorState,l=i.quadPositionsBuffer;if(!s){var u=e.defaultProgram;this.drawSetup(u,!1,t,r);var f=r?r.getDimensions():[this.width,this.height],c=[1/f[0],1/f[1]];e.setVertexUniform(u,"u_internal_scale",[1-2*c[0],1-2*c[1]],a.FLOAT),e.setVertexUniform(u,"u_internal_translation",c,a.FLOAT),o.bindBuffer(o.ARRAY_BUFFER,l),this.setPositionAttribute(u),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.TRIANGLE_STRIP,0,4),o.disable(o.BLEND)}},e.prototype.stepCircle=function(e,t,r,n,i,o){void 0===n&&(n=[]);var s=this,l=s.gl,u=s.errorState,f=s.circlePositionsBuffer,c=i?i.getDimensions():[this.width,this.height],p=c[0],h=c[1];if(!u){var d=e.defaultProgram;this.drawSetup(d,!1,n,i),e.setVertexUniform(d,"u_internal_scale",[2*r/p,2*r/h],a.FLOAT),e.setVertexUniform(d,"u_internal_translation",[2*t[0]/p-1,2*t[1]/h-1],a.FLOAT),l.bindBuffer(l.ARRAY_BUFFER,f),this.setPositionAttribute(d),(null==o?void 0:o.shouldBlendAlpha)&&(l.enable(l.BLEND),l.blendFunc(l.SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA)),l.drawArrays(l.TRIANGLE_FAN,0,20),l.disable(l.BLEND)}},e.prototype.stepSegment=function(e,t,r,n,i,o,s){void 0===i&&(i=[]);var l=this,u=l.gl,f=l.errorState,c=l.circlePositionsBuffer,p=o?o.getDimensions():[this.width,this.height],h=p[0],d=p[1];if(!f){var _=e.segmentProgram;this.drawSetup(_,!1,i,o),e.setVertexUniform(_,"u_internal_radius",n,a.FLOAT),e.setVertexUniform(_,"u_internal_scale",[2/h,2/d],a.FLOAT);var g=t[0]-r[0],m=t[1]-r[1],T=Math.atan2(m,g);e.setVertexUniform(_,"u_internal_rotation",T,a.FLOAT);var v=Math.sqrt(g*g+m*m);e.setVertexUniform(_,"u_internal_length",v,a.FLOAT);var y=(t[0]+r[0])/2,E=(t[1]+r[1])/2;e.setVertexUniform(_,"u_internal_translation",[2*y/h-1,2*E/d-1],a.FLOAT),u.bindBuffer(u.ARRAY_BUFFER,c),this.setPositionAttribute(_),(null==s?void 0:s.shouldBlendAlpha)&&(u.enable(u.BLEND),u.blendFunc(u.SRC_ALPHA,u.ONE_MINUS_SRC_ALPHA)),u.drawArrays(u.TRIANGLE_FAN,0,20),u.disable(u.BLEND)}},e.prototype.drawPoints=function(e,t,r,n){var i=this,o=i.gl,s=i.errorState,l=i.pointIndexArray,u=r?r.getDimensions():[this.width,this.height],f=u[0],c=u[1];if(!s){if(t.length<1)throw new Error('Invalid inputLayers for drawPoints on program "'+e.name+'": must pass a positionDataLayer as first element of inputLayers.');var p=t[0];if(2!==p.numComponents&&4!==p.numComponents)throw new Error('WebGLCompute.drawPoints() must be passed a positionDataLayer with either 2 or 4 components, got positionDataLayer "'+p.name+'" with '+p.numComponents+" components.");var h=p.getLength(),d=(null==n?void 0:n.numPoints)||h;if(d>h)throw new Error("Invalid numPoint "+d+" for positionDataLayer of length "+h+".");var _=e.pointsProgram;this.drawSetup(_,!1,t,r),e.setVertexUniform(_,"u_internal_data",0,a.INT),e.setVertexUniform(_,"u_internal_scale",[1/f,1/c],a.FLOAT);var g=(null==n?void 0:n.pointSize)||1;e.setVertexUniform(_,"u_internal_pointSize",g,a.FLOAT);var m=p.getDimensions();if(e.setVertexUniform(_,"u_internal_dimensions",m,a.FLOAT),void 0===this.pointIndexBuffer||l&&l.length<d){for(var T=new Float32Array(h),v=0;v<h;v++)T[v]=v;this.pointIndexArray=T,this.pointIndexBuffer=this.initVertexBuffer(T)}o.bindBuffer(o.ARRAY_BUFFER,this.pointIndexBuffer),this.setIndexAttribute(_),!1!==(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.POINTS,0,d),o.disable(o.BLEND)}},e.prototype.drawVectorField=function(e,t,r,n){var i=this,o=i.gl,s=i.errorState,l=i.vectorFieldIndexArray,u=r?r.getDimensions():[this.width,this.height],f=u[0],c=u[1];if(!s){if(t.length<1)throw new Error('Invalid inputLayers for drawVectorField on program "'+e.name+'": must pass a vectorDataLayer as first element of inputLayers.');var p=t[0];if(2!==p.numComponents)throw new Error('WebGLCompute.drawVectorField() must be passed a vectorDataLayer with 2 components, got vectorDataLayer "'+p.name+'" with '+p.numComponents+" components.");var h=p.getDimensions();if(Math.abs(h[0]/h[1]-f/c)>.001)throw new Error("Invalid aspect ratio "+(h[0]/h[1]).toFixed(3)+" vectorDataLayer with dimensions ["+h[0]+", "+h[1]+"], expected ["+f+", "+c+"].");var d=e.vectorFieldProgram;this.drawSetup(d,!1,t,r),e.setVertexUniform(d,"u_internal_data",0,a.INT);var _=(null==n?void 0:n.vectorScale)||10;e.setVertexUniform(d,"u_internal_scale",[_/f,_/c],a.FLOAT);var g=(null==n?void 0:n.vectorSpacing)||1,m=[Math.floor(f/g),Math.floor(c/g)];e.setVertexUniform(d,"u_internal_dimensions",m,a.FLOAT);var T=2*m[0]*m[1];if(void 0===this.vectorFieldIndexBuffer||l&&l.length<T){for(var v=new Float32Array(T),y=0;y<T;y++)v[y]=y;this.vectorFieldIndexArray=v,this.vectorFieldIndexBuffer=this.initVertexBuffer(v)}o.bindBuffer(o.ARRAY_BUFFER,this.vectorFieldIndexBuffer),this.setIndexAttribute(d),!1!==(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.LINES,0,T),o.disable(o.BLEND)}},e.prototype.getContext=function(){return this.gl},e.prototype.getValues=function(e){var t,r=this.gl,n=this.glslVersion,i=e.getDimensions(),o=i[0],s=i[1],l=e.glNumChannels,f=e.glType,c=e.glFormat,p=e.internalType;switch(p){case a.HALF_FLOAT:void 0!==r.FLOAT?(l=4,c=r.RGBA,f=r.FLOAT,t=new Float32Array(o*s*l)):t=new Uint16Array(o*s*l);break;case a.FLOAT:l=4,c=r.RGBA,t=new Float32Array(o*s*l);break;case a.UNSIGNED_BYTE:if(n===a.GLSL1){l=4,c=r.RGBA,t=new Uint8Array(o*s*l);break}l=4,c=r.RGBA_INTEGER,f=r.UNSIGNED_INT,t=new Uint32Array(o*s*l);break;case a.UNSIGNED_SHORT:l=4,c=r.RGBA_INTEGER,f=r.UNSIGNED_INT,t=new Uint32Array(o*s*l);break;case a.UNSIGNED_INT:l=4,c=r.RGBA_INTEGER,t=new Uint32Array(o*s*l);break;case a.BYTE:case a.SHORT:l=4,c=r.RGBA_INTEGER,f=r.INT,t=new Int32Array(o*s*l);break;case a.INT:l=4,c=r.RGBA_INTEGER,t=new Int32Array(o*s*l);break;default:throw new Error("Unsupported internalType "+p+" for getValues().")}if(this.readyToRead()){r.readPixels(0,0,o,s,c,f,t);var h=e.numComponents,d=e.type,_=o*s*h,g=p===a.HALF_FLOAT&&t.constructor===Uint16Array,m=g?new DataView(t.buffer):void 0,T=t;if(p!==d)switch(d){case a.HALF_FLOAT:case a.FLOAT:T=new Float32Array(_);break;case a.UNSIGNED_BYTE:T=new Uint8Array(_);break;case a.BYTE:T=new Int8Array(_);break;case a.UNSIGNED_SHORT:T=new Uint16Array(_);break;case a.SHORT:T=new Int16Array(_);break;case a.UNSIGNED_INT:T=new Uint32Array(_);break;case a.INT:T=new Int32Array(_);break;default:throw new Error("Unsupported type "+d+" for getValues().")}if(g||T!==t||h!==l)for(var v=0,y=o*s;v<y;v++)for(var E=v*l,b=v*h,A=0;A<h;A++)T[b+A]=g?u.getFloat16(m,2*(E+A),!0):t[E+A];return T.length!==_&&(T=T.slice(0,_)),T}throw new Error("Unable to read values from Buffer with status: "+r.checkFramebufferStatus(r.FRAMEBUFFER)+".")},e.prototype.readyToRead=function(){var e=this.gl;return e.checkFramebufferStatus(e.FRAMEBUFFER)==e.FRAMEBUFFER_COMPLETE},e.prototype.reset=function(){},e.prototype.attachDataLayerToThreeTexture=function(e,t){if(!this.renderer)throw new Error("WebGLCompute was not inited with a renderer.");var r=e.getTextures();if(r.length>1)throw new Error('DataLayer "'+e.name+'" contains multiple WebGL textures (one for each buffer) that are flip-flopped during compute cycles, please choose a DataLayer with one buffer.');var n=this.renderer.properties.get(t);n.__webglTexture=r[0],n.__webglInit=!0},e.prototype.resetThreeState=function(){if(!this.renderer)throw new Error("WebGLCompute was not inited with a renderer.");var e=this.gl,t=this.renderer.getViewport(new s.Vector4);e.viewport(t.x,t.y,t.width,t.height),this.renderer.setRenderTarget(null),this.renderer.resetState()},e.prototype.destroy=function(){delete this.renderer},e}();t.WebGLCompute=_},581:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getExtension=t.EXT_COLOR_BUFFER_FLOAT=t.WEBGL_DEPTH_TEXTURE=t.OES_TEXTURE_HAlF_FLOAT_LINEAR=t.OES_TEXTURE_FLOAT_LINEAR=t.OES_TEXTURE_HALF_FLOAT=t.OES_TEXTURE_FLOAT=void 0;var r={};t.OES_TEXTURE_FLOAT="OES_texture_float",t.OES_TEXTURE_HALF_FLOAT="OES_texture_half_float",t.OES_TEXTURE_FLOAT_LINEAR="OES_texture_float_linear",t.OES_TEXTURE_HAlF_FLOAT_LINEAR="OES_texture_half_float_linear",t.WEBGL_DEPTH_TEXTURE="WEBGL_depth_texture",t.EXT_COLOR_BUFFER_FLOAT="EXT_color_buffer_float",t.getExtension=function(e,t,n,i){if(void 0===i&&(i=!1),void 0!==r[t])return r[t];var a;try{a=e.getExtension(t)}catch(e){}return a?(r[t]=a,console.log("Loaded extension: "+t+".")):(r[t]=!1,console.warn("Unsupported "+(i?"optional ":"")+"extension: "+t+".")),a||i||n("Required extension unsupported by this device / browser: "+t+"."),a}},593:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isPowerOf2=t.isWebGL2=t.compileShader=void 0,t.compileShader=function(e,t,r,n,i){var a=e.createShader(n);return a?(e.shaderSource(a,r),e.compileShader(a),e.getShaderParameter(a,e.COMPILE_STATUS)?a:(t("Could not compile "+(n===e.FRAGMENT_SHADER?"fragment":"vertex")+"\n\t\t\t shader"+(i?' for program "'+i+'"':"")+": "+e.getShaderInfoLog(a)+"."),null)):(t("Unable to init gl shader."),null)},t.isWebGL2=function(e){return"undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&e instanceof WebGL2ComputeRenderingContext},t.isPowerOf2=function(e){return 0==(e&e-1)}},406:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Vector4=void 0;var r=function(){function e(e,t,r,n){void 0===e&&(e=0),void 0===t&&(t=0),void 0===r&&(r=0),void 0===n&&(n=1),this.x=e,this.y=t,this.z=r,this.w=n}return Object.defineProperty(e.prototype,"width",{get:function(){return this.z},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.w},enumerable:!1,configurable:!0}),e.prototype.copy=function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w,this},e}();t.Vector4=r},541:e=>{e.exports="precision highp float;\n\nvarying vec2 v_UV;\n\nuniform sampler2D u_state;\n\nvoid main() {\n\tgl_FragColor = texture2D(u_state, v_UV);\n}"},790:e=>{e.exports="precision highp float;\n\nattribute vec2 a_internal_position;\n\nuniform vec2 u_internal_scale;\nuniform vec2 u_internal_translation;\n\nvarying vec2 v_UV_local;\nvarying vec2 v_UV;\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\t// Apply transformations.\n\tvec2 position = u_internal_scale * a_internal_position + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}"},198:e=>{e.exports="precision highp float;\nprecision highp int;\n\n/**\n * Returns accurate MOD when arguments are approximate integers.\n */\nfloat modI(float a, float b) {\n    float m = a - floor((a + 0.5) / b) * b;\n    return floor(m + 0.5);\n}\n\n// Cannot use int vertex attributes: https://stackoverflow.com/questions/27874983/webgl-how-to-use-integer-attributes-in-glsl\nattribute float a_internal_index; // Index of point.\n\nuniform sampler2D u_internal_data; // Texture lookup with position data.\nuniform vec2 u_internal_dimensions;\nuniform vec2 u_internal_scale;\nuniform float u_internal_pointSize;\n\nvarying vec2 v_UV;\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\tvec2 particleUV = vec2(\n\t\tmodI(a_internal_index, u_internal_dimensions.x),\n\t\tfloor(floor(a_internal_index + 0.5) / u_internal_dimensions.x)\n\t) / u_internal_dimensions;\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\t// We have packed a 2D displacement with the position.\n\tvec4 positionData = texture2D(u_internal_data, particleUV);\n\t// position = first two components plus last two components (optional accumulation buffer).\n\tvec2 positionAbsolute = positionData.rg + positionData.ba;\n\tv_UV = positionAbsolute * u_internal_scale;\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_UV * 2.0 - 1.0;\n\n\tgl_PointSize = u_internal_pointSize;\n\tgl_Position = vec4(position, 0, 1);\n}"},852:e=>{e.exports="// Vertex shader for fullscreen quad.\nprecision highp float;\n\nattribute vec2 a_internal_position;\n\nuniform float u_internal_radius;\nuniform vec2 u_internal_scale;\nuniform float u_internal_length;\nuniform float u_internal_rotation;\nuniform vec2 u_internal_translation;\n\nvarying vec2 v_UV_local;\nvarying vec2 v_UV;\n\nmat2 rotate2d(float _angle){\n\treturn mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle));\n}\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\tvec2 position = a_internal_position;\n\n\t// Apply radius.\n\tposition *= u_internal_radius;\n\n\t// Stretch center of shape to form a round-capped line segment.\n\tif (position.x < 0.0) {\n\t\tposition.x -= u_internal_length / 2.0;\n\t} else if (position.x > 0.0) {\n\t\tposition.x += u_internal_length / 2.0;\n\t}\n\n\t// Apply transformations.\n\tposition = u_internal_scale * (rotate2d(-u_internal_rotation) * position) + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}"},502:e=>{e.exports="precision highp float;\nprecision highp int;\n\n/**\n * Returns accurate MOD when arguments are approximate integers.\n */\nfloat modI(float a, float b) {\n    float m = a - floor((a + 0.5) / b) * b;\n    return floor(m + 0.5);\n}\n\n// Cannot use int vertex attributes: https://stackoverflow.com/questions/27874983/webgl-how-to-use-integer-attributes-in-glsl\nattribute float a_internal_index; // Index of point.\n\nuniform sampler2D u_internal_data; // Texture lookup with vector data.\nuniform vec2 u_internal_dimensions;\nuniform vec2 u_internal_scale;\n\nvarying vec2 v_UV;\n\nvoid main() {\n\t// Divide index by 2.\n\tfloat index = floor((a_internal_index + 0.5) / 2.0);\n\t// Calculate a uv based on the vertex index attribute.\n\tv_UV = vec2(\n\t\tmodI(index, u_internal_dimensions.x),\n\t\tfloor(floor(index + 0.5) / u_internal_dimensions.x)\n\t) / u_internal_dimensions;\n\n\t// Add vector displacement if needed.\n\tif (modI(a_internal_index, 2.0) > 0.0) {\n\t\t// Lookup vectorData at current UV.\n\t\tvec2 vectorData = texture2D(u_internal_data, v_UV).xy;\n\t\tv_UV += vectorData * u_internal_scale;\n\t}\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_UV * 2.0 - 1.0;\n\n\tgl_Position = vec4(position, 0, 1);\n}"},518:e=>{e.exports="#version 300 es\nprecision highp float;\nprecision highp sampler2D;\n\nin vec2 v_UV;\n\nuniform sampler2D u_state;\n\nout vec4 out_fragColor;\n\nvoid main() {\n\tout_fragColor = texture(u_state, v_UV);\n}"},546:e=>{e.exports="#version 300 es\nprecision highp float;\nprecision highp int;\nprecision highp isampler2D;\n\nin vec2 v_UV;\n\nuniform isampler2D u_state;\n\nout ivec4 out_fragColor;\n\nvoid main() {\n\tout_fragColor = texture(u_state, v_UV);\n}"},374:e=>{e.exports="#version 300 es\nprecision highp float;\nprecision highp int;\nprecision highp usampler2D;\n\nin vec2 v_UV;\n\nuniform usampler2D u_state;\n\nout uvec4 out_fragColor;\n\nvoid main() {\n\tout_fragColor = texture(u_state, v_UV);\n}"},435:e=>{e.exports="#version 300 es\nprecision highp float;\n\nin vec2 a_internal_position;\n\nuniform vec2 u_internal_scale;\nuniform vec2 u_internal_translation;\n\nout vec2 v_UV_local;\nout vec2 v_UV;\nout vec2 out_position;\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\t// Apply transformations.\n\tvec2 position = u_internal_scale * a_internal_position + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tout_position = position;\n}"},218:e=>{e.exports="#version 300 es\nprecision highp float;\n\nattribute vec2 a_internal_position;\n\nuniform float u_internal_radius;\nuniform vec2 u_internal_scale;\nuniform float u_internal_length;\nuniform float u_internal_rotation;\nuniform vec2 u_internal_translation;\n\nvarying vec2 v_UV_local;\nvarying vec2 v_UV;\n\nmat2 rotate2d(float _angle){\n\treturn mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle));\n}\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_UV_local = 0.5 * (a_internal_position + 1.0);\n\n\tvec2 position = a_internal_position;\n\n\t// Apply radius.\n\tposition *= u_internal_radius;\n\n\t// Stretch center of shape to form a round-capped line segment.\n\tif (position.x < 0.0) {\n\t\tposition.x -= u_internal_length / 2.0;\n\t} else if (position.x > 0.0) {\n\t\tposition.x += u_internal_length / 2.0;\n\t}\n\n\t// Apply transformations.\n\tposition = u_internal_scale * (rotate2d(-u_internal_rotation) * position) + u_internal_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_UV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}"}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var a=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.loaded=!0,a.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{"use strict";var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.REPEAT=e.CLAMP_TO_EDGE=e.LINEAR=e.NEAREST=e.GLSL3=e.GLSL1=e.INT=e.UNSIGNED_INT=e.SHORT=e.UNSIGNED_SHORT=e.BYTE=e.UNSIGNED_BYTE=e.FLOAT=e.HALF_FLOAT=e.WebGLCompute=void 0;var t=r(215);Object.defineProperty(e,"WebGLCompute",{enumerable:!0,get:function(){return t.WebGLCompute}});var i=r(738);Object.defineProperty(e,"HALF_FLOAT",{enumerable:!0,get:function(){return i.HALF_FLOAT}}),Object.defineProperty(e,"FLOAT",{enumerable:!0,get:function(){return i.FLOAT}}),Object.defineProperty(e,"UNSIGNED_BYTE",{enumerable:!0,get:function(){return i.UNSIGNED_BYTE}}),Object.defineProperty(e,"BYTE",{enumerable:!0,get:function(){return i.BYTE}}),Object.defineProperty(e,"UNSIGNED_SHORT",{enumerable:!0,get:function(){return i.UNSIGNED_SHORT}}),Object.defineProperty(e,"SHORT",{enumerable:!0,get:function(){return i.SHORT}}),Object.defineProperty(e,"UNSIGNED_INT",{enumerable:!0,get:function(){return i.UNSIGNED_INT}}),Object.defineProperty(e,"INT",{enumerable:!0,get:function(){return i.INT}}),Object.defineProperty(e,"NEAREST",{enumerable:!0,get:function(){return i.NEAREST}}),Object.defineProperty(e,"LINEAR",{enumerable:!0,get:function(){return i.LINEAR}}),Object.defineProperty(e,"CLAMP_TO_EDGE",{enumerable:!0,get:function(){return i.CLAMP_TO_EDGE}}),Object.defineProperty(e,"REPEAT",{enumerable:!0,get:function(){return i.REPEAT}}),Object.defineProperty(e,"GLSL1",{enumerable:!0,get:function(){return i.GLSL1}}),Object.defineProperty(e,"GLSL3",{enumerable:!0,get:function(){return i.GLSL3}})})(),n})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9AcGV0YW1vcmlrZW4vZmxvYXQxNi9zcmMvbGliLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9AcGV0YW1vcmlrZW4vZmxvYXQxNi9zcmMvaGZyb3VuZC5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yb290LmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0LmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNNYXNrZWQuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzTmF0aXZlLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXROYXRpdmUuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlQ3JlYXRlLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaEhhcy5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19IYXNoLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hTZXQuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXNzb2NJbmRleE9mLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvZXEuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0xpc3RDYWNoZS5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlSGFzLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19NYXAuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0TWFwRGF0YS5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fTWFwQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL0BwZXRhbW9yaWtlbi9mbG9hdDE2L3NyYy9idWcuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL0BwZXRhbW9yaWtlbi9mbG9hdDE2L3NyYy9zcGVjLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9AcGV0YW1vcmlrZW4vZmxvYXQxNi9zcmMvaXMuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0FycmF5QnVmZmVyLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VVbmFyeS5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNBcnJheUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvQHBldGFtb3Jpa2VuL2Zsb2F0MTYvc3JjL0Zsb2F0MTZBcnJheS5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvQHBldGFtb3Jpa2VuL2Zsb2F0MTYvc3JjL3ByaXZhdGUuanMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vbm9kZV9tb2R1bGVzL0BwZXRhbW9yaWtlbi9mbG9hdDE2L3NyYy9kYXRhVmlldy5qcyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25vZGVVdGlsLmpzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL3NyYy9DaGVja3MudHMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vc3JjL0NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9zcmMvRGF0YUxheWVyLnRzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL3NyYy9HUFVQcm9ncmFtLnRzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL3NyYy9XZWJHTENvbXB1dGUudHMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vc3JjL2V4dGVuc2lvbnMudHMiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vc3JjL3V0aWxzLnRzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL3NyYy91dGlscy9WZWN0b3I0LnRzIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL3NyYy9nbHNsXzEvQ29weUZyYWdTaGFkZXIuZ2xzbCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9zcmMvZ2xzbF8xL0RlZmF1bHRWZXJ0ZXhTaGFkZXIuZ2xzbCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9zcmMvZ2xzbF8xL1BvaW50c1ZlcnRleFNoYWRlci5nbHNsIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL3NyYy9nbHNsXzEvU2VnbWVudFZlcnRleFNoYWRlci5nbHNsIiwid2VicGFjazovL1dlYkdMQ29tcHV0ZS8uL3NyYy9nbHNsXzEvVmVjdG9yRmllbGRWZXJ0ZXhTaGFkZXIuZ2xzbCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9zcmMvZ2xzbF8zL0NvcHlGbG9hdEZyYWdTaGFkZXIuZ2xzbCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9zcmMvZ2xzbF8zL0NvcHlJbnRGcmFnU2hhZGVyLmdsc2wiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlLy4vc3JjL2dsc2xfMy9Db3B5VWludEZyYWdTaGFkZXIuZ2xzbCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9zcmMvZ2xzbF8zL0RlZmF1bHRWZXJ0ZXhTaGFkZXIuZ2xzbCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9zcmMvZ2xzbF8zL1NlZ21lbnRWZXJ0ZXhTaGFkZXIuZ2xzbCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vV2ViR0xDb21wdXRlL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvd2VicGFjay9ydW50aW1lL2hhcm1vbnkgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9XZWJHTENvbXB1dGUvLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsImJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiZmxvYXRWaWV3IiwiRmxvYXQzMkFycmF5IiwidWludDMyVmlldyIsIlVpbnQzMkFycmF5IiwiYmFzZVRhYmxlIiwic2hpZnRUYWJsZSIsImkiLCJlIiwicm91bmRUb0Zsb2F0MTZCaXRzIiwibnVtIiwiZiIsIm1hbnRpc3NhVGFibGUiLCJleHBvbmVudFRhYmxlIiwib2Zmc2V0VGFibGUiLCJtIiwiY29udmVydFRvTnVtYmVyIiwiZmxvYXQxNmJpdHMiLCJoZnJvdW5kIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJmcmVlU2VsZiIsIk9iamVjdCIsIkZ1bmN0aW9uIiwib2JqZWN0UHJvdG8iLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwidG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsInVuZGVmaW5lZCIsInZhbHVlIiwiaXNPd24iLCJjYWxsIiwidGFnIiwidW5tYXNrZWQiLCJyZXN1bHQiLCJ0eXBlIiwidWlkIiwibWFza1NyY0tleSIsImV4ZWMiLCJmdW5jVG9TdHJpbmciLCJyZUlzSG9zdEN0b3IiLCJyZUlzTmF0aXZlIiwiUmVnRXhwIiwicmVwbGFjZSIsImZ1bmMiLCJ0ZXN0Iiwib2JqZWN0Iiwia2V5IiwiSGFzaCIsImVudHJpZXMiLCJpbmRleCIsImxlbmd0aCIsInRoaXMiLCJjbGVhciIsImVudHJ5Iiwic2V0IiwiX19kYXRhX18iLCJzaXplIiwiaGFzIiwiZ2V0IiwiZGF0YSIsImFycmF5Iiwib3RoZXIiLCJzcGxpY2UiLCJBcnJheSIsIkxpc3RDYWNoZSIsInBvcCIsInB1c2giLCJtYXAiLCJNYXBDYWNoZSIsIm1lbW9pemUiLCJyZXNvbHZlciIsIlR5cGVFcnJvciIsIm1lbW9pemVkIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwiY2FjaGUiLCJDYWNoZSIsImlzVHlwZWRBcnJheUluZGV4ZWRQcm9wZXJ0eVdyaXRhYmxlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiVWludDhBcnJheSIsIndyaXRhYmxlIiwiVG9JbnRlZ2VyIiwidGFyZ2V0IiwibnVtYmVyIiwiaXNOYU4iLCJNYXRoIiwidHJ1bmMiLCJkZWZhdWx0Q29tcGFyZUZ1bmN0aW9uIiwieCIsInkiLCJpc05hTl94IiwiaXNOYU5feSIsImlzUGx1c1plcm9feCIsImlzUGx1c1plcm9feSIsImlzIiwiaXNEYXRhVmlldyIsInZpZXciLCJEYXRhVmlldyIsImlzU3RyaW5nTnVtYmVyS2V5Iiwibm9kZUlzQXJyYXlCdWZmZXIiLCJfIiwid20iLCJXZWFrTWFwIiwib2JqIiwiY3JlYXRlIiwiY3JlYXRlUHJpdmF0ZVN0b3JhZ2UiLCJpc0Zsb2F0MTZBcnJheSIsIkZsb2F0MTZBcnJheSIsImFzc2VydEZsb2F0MTZBcnJheSIsImNvcHlUb0FycmF5IiwiYXBwbHlIYW5kbGVyIiwidGhpc0FyZyIsImRlZmF1bHRGbG9hdDE2QXJyYXlNZXRob2RzIiwiUmVmbGVjdCIsImhhbmRsZXIiLCJ3cmFwcGVyIiwicmV0IiwicHJveHkiLCJQcm94eSIsImlzRnJvemVuIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsImRlZmluZVByb3BlcnR5IiwiZGVzY3JpcHRvciIsImRlbGV0ZVByb3BlcnR5IiwiaXNFeHRlbnNpYmxlIiwicHJldmVudEV4dGVuc2lvbnMiLCJvd25LZXlzIiwiVWludDE2QXJyYXkiLCJpbnB1dCIsImJ5dGVPZmZzZXQiLCJzdXBlciIsImFycmF5TGlrZSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwic3JjIiwib3B0cyIsImZyb20iLCJtYXBGdW5jIiwidmFsIiwia2V5cyIsInZhbHVlcyIsImNhbGxiYWNrIiwibCIsInN0YXJ0Iiwib2Zmc2V0IiwicmV2ZXJzZSIsImZpbGwiLCJjb3B5V2l0aGluIiwiY29tcGFyZUZ1bmN0aW9uIiwiX2NvbnZlcnRUb051bWJlciIsInNvcnQiLCJzbGljZSIsInN1YmFycmF5IiwiZWxlbWVudCIsImpvaW4iLCJ0b0xvY2FsZVN0cmluZyIsInRvU3RyaW5nVGFnIiwiRmxvYXQxNkFycmF5JHByb3RvdHlwZSIsIldlYWtTZXQiLCJhZGQiLCJnZXRGbG9hdDE2IiwiZGF0YVZpZXciLCJnZXRVaW50MTYiLCJzZXRGbG9hdDE2Iiwic2V0VWludDE2IiwiZyIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwiZnJlZVByb2Nlc3MiLCJyZXF1aXJlIiwidHlwZXMiLCJiaW5kaW5nIiwiaXNOdW1iZXIiLCJpc0ludGVnZXIiLCJ2YWxpZERhdGFUeXBlcyIsIkhBTEZfRkxPQVQiLCJGTE9BVCIsIlVOU0lHTkVEX0JZVEUiLCJCWVRFIiwiVU5TSUdORURfU0hPUlQiLCJTSE9SVCIsIlVOU0lHTkVEX0lOVCIsIklOVCIsImluZGV4T2YiLCJ2YWxpZEZpbHRlclR5cGVzIiwiTElORUFSIiwiTkVBUkVTVCIsInZhbGlkV3JhcFR5cGVzIiwiQ0xBTVBfVE9fRURHRSIsIlJFUEVBVCIsInZhbGlkVGV4dHVyZUZvcm1hdFR5cGVzIiwiUkdCIiwiUkdCQSIsInZhbGlkVGV4dHVyZURhdGFUeXBlcyIsImlzQXJyYXkiLCJHTFNMMyIsIkdMU0wxIiwiRkxPQVRfMURfVU5JRk9STSIsIkZMT0FUXzJEX1VOSUZPUk0iLCJGTE9BVF8zRF9VTklGT1JNIiwiRkxPQVRfNERfVU5JRk9STSIsIklOVF8xRF9VTklGT1JNIiwiSU5UXzJEX1VOSUZPUk0iLCJJTlRfM0RfVU5JRk9STSIsIklOVF80RF9VTklGT1JNIiwicGFyYW1zIiwiYnVmZmVySW5kZXgiLCJidWZmZXJzIiwiZ2wiLCJlcnJvckNhbGxiYWNrIiwibmFtZSIsImRpbWVuc2lvbnMiLCJudW1Db21wb25lbnRzIiwiZ2xzbFZlcnNpb24iLCJpc1Bvc2l0aXZlSW50ZWdlciIsIkVycm9yIiwiRGF0YUxheWVyIiwiY2FsY1NpemUiLCJ3aWR0aCIsImhlaWdodCIsImZpbHRlciIsImlzVmFsaWRGaWx0ZXJUeXBlIiwid3JhcFMiLCJpc1ZhbGlkV3JhcFR5cGUiLCJ3cmFwVCIsImlzVmFsaWREYXRhVHlwZSIsImludGVybmFsVHlwZSIsImdldEludGVybmFsVHlwZSIsImdldEdMVGV4dHVyZVBhcmFtZXRlcnMiLCJnbEZvcm1hdCIsImdsSW50ZXJuYWxGb3JtYXQiLCJnbFR5cGUiLCJnbE51bUNoYW5uZWxzIiwiaW50ZXJuYWxGaWx0ZXIiLCJnZXRJbnRlcm5hbEZpbHRlciIsImdsRmlsdGVyIiwiaW50ZXJuYWxXcmFwUyIsImdldEludGVybmFsV3JhcCIsIndyYXAiLCJnbFdyYXBTIiwiaW50ZXJuYWxXcmFwVCIsImdsV3JhcFQiLCJudW1CdWZmZXJzIiwiaW5pdEJ1ZmZlcnMiLCJleHAiLCJyZW1haW5kZXIiLCJwb3ciLCJmbG9vciIsImlzV2ViR0wyIiwiY29uc29sZSIsIndhcm4iLCJnZXRFeHRlbnNpb24iLCJPRVNfVEVYVFVSRV9IQWxGX0ZMT0FUX0xJTkVBUiIsIk9FU19URVhUVVJFX0ZMT0FUX0xJTkVBUiIsInNob3VsZENhc3RJbnRUeXBlQXNGbG9hdCIsIk9FU19URVhUVVJFX0ZMT0FUIiwidGVzdEZyYW1lYnVmZmVyV3JpdGUiLCJPRVNfVEVYVFVSRV9IQUxGX0ZMT0FUIiwiRVhUX0NPTE9SX0JVRkZFUl9GTE9BVCIsIlJFRCIsIlJHIiwiQUxQSEEiLCJMVU1JTkFOQ0VfQUxQSEEiLCJSRURfSU5URUdFUiIsIlJHX0lOVEVHRVIiLCJSR0JfSU5URUdFUiIsIlJHQkFfSU5URUdFUiIsIlIxNkYiLCJSRzE2RiIsIlJHQjE2RiIsIlJHQkExNkYiLCJSMzJGIiwiUkczMkYiLCJSR0IzMkYiLCJSR0JBMzJGIiwiUjhVSSIsIlJHOFVJIiwiUkdCOFVJIiwiUkdCQThVSSIsIlI4SSIsIlJHOEkiLCJSR0I4SSIsIlJHQkE4SSIsIlIxNkkiLCJSRzE2SSIsIlJHQjE2SSIsIlJHQkExNkkiLCJSMTZVSSIsIlJHMTZVSSIsIlJHQjE2VUkiLCJSR0JBMTZVSSIsIlIzMkkiLCJSRzMySSIsIlJHQjMySSIsIlJHQkEzMkkiLCJSMzJVSSIsIlJHMzJVSSIsIlJHQjMyVUkiLCJSR0JBMzJVSSIsIkhBTEZfRkxPQVRfT0VTIiwibWlzc2luZ1BhcmFtcyIsInRleHR1cmUiLCJjcmVhdGVUZXh0dXJlIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzJEIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfV1JBUF9TIiwiVEVYVFVSRV9XUkFQX1QiLCJURVhUVVJFX01JTl9GSUxURVIiLCJURVhUVVJFX01BR19GSUxURVIiLCJ0ZXhJbWFnZTJEIiwiZnJhbWVidWZmZXIiLCJjcmVhdGVGcmFtZWJ1ZmZlciIsImRlbGV0ZVRleHR1cmUiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJ2YWxpZFN0YXR1cyIsImNoZWNrRnJhbWVidWZmZXJTdGF0dXMiLCJGUkFNRUJVRkZFUl9DT01QTEVURSIsImRlbGV0ZUZyYW1lYnVmZmVyIiwidmFsaWRhdGVEYXRhQXJyYXkiLCJfZGF0YSIsImludmFsaWRUeXBlRm91bmQiLCJjb25zdHJ1Y3RvciIsIkludDhBcnJheSIsIkludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiaW1hZ2VTaXplIiwiaW5jb3JyZWN0U2l6ZSIsImhhbmRsZUZsb2F0MTYiLCJfbGVuIiwiaiIsImdldEVycm9yIiwiZ2V0Q3VycmVudFN0YXRlVGV4dHVyZSIsImdldFByZXZpb3VzU3RhdGVUZXh0dXJlIiwicHJldmlvdXNJbmRleCIsImJpbmRPdXRwdXRCdWZmZXIiLCJpbmNyZW1lbnRCdWZmZXJJbmRleCIsInNldERhdGEiLCJkZXN0cm95QnVmZmVycyIsInJlc2l6ZSIsImdldERpbWVuc2lvbnMiLCJnZXRUZXh0dXJlcyIsImdldExlbmd0aCIsImZvckVhY2giLCJkZXN0cm95IiwiZGVmYXVsdFZlcnRleFNoYWRlclNvdXJjZV9nbHNsMyIsImRlZmF1bHRWZXJ0ZXhTaGFkZXJTb3VyY2VfZ2xzbDEiLCJzZWdtZW50VmVydGV4U2hhZGVyU291cmNlX2dsc2wzIiwic2VnbWVudFZlcnRleFNoYWRlclNvdXJjZV9nbHNsMSIsInBvaW50c1ZlcnRleFNoYWRlclNvdXJjZV9nbHNsMSIsInZlY3RvckZpZWxkVmVydGV4U2hhZGVyU291cmNlX2dsc2wxIiwiREVGQVVMVF9QUk9HUkFNX05BTUUiLCJTRUdNRU5UX1BST0dSQU1fTkFNRSIsIlBPSU5UU19QUk9HUkFNX05BTUUiLCJWRUNUT1JfRklFTERfUFJPR1JBTV9OQU1FIiwidW5pZm9ybXMiLCJmcmFnbWVudFNoYWRlciIsImRlZmluZXMiLCJzb3VyY2VTdHJpbmciLCJpc1N0cmluZyIsInNoYWRlciIsImNvbXBpbGVTaGFkZXIiLCJGUkFHTUVOVF9TSEFERVIiLCJ1bmlmb3JtIiwiZGF0YVR5cGUiLCJzZXRVbmlmb3JtIiwiaW5pdFByb2dyYW0iLCJ2ZXJ0ZXhTaGFkZXIiLCJwcm9ncmFtTmFtZSIsInByb2dyYW0iLCJjcmVhdGVQcm9ncmFtIiwiYXR0YWNoU2hhZGVyIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJ1bmlmb3JtTmFtZXMiLCJ1bmlmb3JtTmFtZSIsInNldFByb2dyYW1Vbmlmb3JtIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJfZGVmYXVsdFByb2dyYW0iLCJHUFVQcm9ncmFtIiwiZGVmYXVsdFZlcnRleFNoYWRlciIsInZlcnRleFNoYWRlclNvdXJjZSIsIlZFUlRFWF9TSEFERVIiLCJfc2VnbWVudFByb2dyYW0iLCJzZWdtZW50VmVydGV4U2hhZGVyIiwiX3BvaW50c1Byb2dyYW0iLCJwb2ludHNWZXJ0ZXhTaGFkZXIiLCJwb2ludHNWZXJ0ZXhTaGFkZXJTb3VyY2VfZ2xzbDMiLCJfdmVjdG9yRmllbGRQcm9ncmFtIiwidmVjdG9yRmllbGRWZXJ0ZXhTaGFkZXIiLCJ2ZWN0b3JGaWVsZFZlcnRleFNoYWRlclNvdXJjZV9nbHNsMyIsInByb2dyYW1zIiwidW5pZm9ybVR5cGVGb3JWYWx1ZSIsInVzZVByb2dyYW0iLCJsb2NhdGlvbiIsIl9sb2NhdGlvbiIsImdldFVuaWZvcm1Mb2NhdGlvbiIsInVuaWZvcm0xZiIsInVuaWZvcm0yZnYiLCJ1bmlmb3JtM2Z2IiwidW5pZm9ybTRmdiIsInVuaWZvcm0xaSIsInVuaWZvcm0yaXYiLCJ1bmlmb3JtM2l2IiwidW5pZm9ybTRpdiIsImFjdGl2ZVByb2dyYW1zIiwidHlwZVBhcmFtIiwic2V0VmVydGV4VW5pZm9ybSIsImRlbGV0ZVByb2dyYW0iLCJkZWxldGVTaGFkZXIiLCJjb3B5RmxvYXRGcmFnbWVudFNoYWRlclNvdXJjZV9nbHNsMyIsImNvcHlJbnRGcmFnbWVudFNoYWRlclNvdXJjZV9nbHNsMyIsImNvcHlVaW50RnJhZ21lbnRTaGFkZXJTb3VyY2VfZ2xzbDMiLCJjb3B5RnJhZ21lbnRTaGFkZXJTb3VyY2VfZ2xzbDEiLCJyZW5kZXJlciIsIm1lc3NhZ2UiLCJlcnJvclN0YXRlIiwidmFsaWRLZXlzIiwiY2FudmFzIiwiY29udGV4dCIsIm9wdGlvbnMiLCJhbnRpYWxpYXMiLCJnZXRDb250ZXh0IiwibG9nIiwiZGlzYWJsZSIsIkRFUFRIX1RFU1QiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19BTElHTk1FTlQiLCJjb3B5RmxvYXRQcm9ncmFtIiwiY29weUludFByb2dyYW0iLCJjb3B5VWludFByb2dyYW0iLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwib25SZXNpemUiLCJtYXhOdW1UZXh0dXJlcyIsImdldFBhcmFtZXRlciIsIk1BWF9URVhUVVJFX0lNQUdFX1VOSVRTIiwiaW5pdFdpdGhUaHJlZVJlbmRlcmVyIiwiV2ViR0xDb21wdXRlIiwiZG9tRWxlbWVudCIsIl9xdWFkUG9zaXRpb25zQnVmZmVyIiwiZnNRdWFkUG9zaXRpb25zIiwiaW5pdFZlcnRleEJ1ZmZlciIsIl9ib3VuZGFyeVBvc2l0aW9uc0J1ZmZlciIsImJvdW5kYXJ5UG9zaXRpb25zIiwiX2NpcmNsZVBvc2l0aW9uc0J1ZmZlciIsInVuaXRDaXJjbGVQb2ludHMiLCJjb3MiLCJQSSIsInNpbiIsImNpcmNsZVBvc2l0aW9ucyIsImNyZWF0ZUJ1ZmZlciIsImJ1ZmZlckRhdGEiLCJTVEFUSUNfRFJBVyIsImluaXREYXRhTGF5ZXIiLCJpbml0VGV4dHVyZSIsInVybCIsImZvcm1hdCIsImlzVmFsaWRUZXh0dXJlRm9ybWF0VHlwZSIsImlzVmFsaWRUZXh0dXJlRGF0YVR5cGUiLCJpbnRlcm5hbEZvcm1hdCIsInNyY0Zvcm1hdCIsInNyY1R5cGUiLCJwaXhlbCIsImltYWdlIiwiSW1hZ2UiLCJvbmxvYWQiLCJpc1Bvd2VyT2YyIiwib25lcnJvciIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiZHJhd1NldHVwIiwiZnVsbHNjcmVlblJlbmRlciIsImlucHV0TGF5ZXJzIiwib3V0cHV0TGF5ZXIiLCJpbnB1dFRleHR1cmVzIiwibGF5ZXIiLCJzZXRPdXRwdXRMYXllciIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsImNvcHlQcm9ncmFtRm9yVHlwZSIsImNvcHlQcm9ncmFtIiwic3RlcCIsInZpZXdwb3J0Iiwic2V0UG9zaXRpb25BdHRyaWJ1dGUiLCJnZXRBdHRyaWJMb2NhdGlvbiIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInNldEluZGV4QXR0cmlidXRlIiwicXVhZFBvc2l0aW9uc0J1ZmZlciIsImdsUHJvZ3JhbSIsImRlZmF1bHRQcm9ncmFtIiwic2hvdWxkQmxlbmRBbHBoYSIsImVuYWJsZSIsIkJMRU5EIiwiYmxlbmRGdW5jIiwiU1JDX0FMUEhBIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsImRyYXdBcnJheXMiLCJUUklBTkdMRV9TVFJJUCIsInN0ZXBCb3VuZGFyeSIsImJvdW5kYXJ5UG9zaXRpb25zQnVmZmVyIiwib25lUHgiLCJzaW5nbGVFZGdlIiwiTElORVMiLCJMSU5FX0xPT1AiLCJzdGVwTm9uQm91bmRhcnkiLCJzdGVwQ2lyY2xlIiwicG9zaXRpb24iLCJyYWRpdXMiLCJjaXJjbGVQb3NpdGlvbnNCdWZmZXIiLCJUUklBTkdMRV9GQU4iLCJOVU1fU0VHTUVOVFNfQ0lSQ0xFIiwic3RlcFNlZ21lbnQiLCJwb3NpdGlvbjEiLCJwb3NpdGlvbjIiLCJzZWdtZW50UHJvZ3JhbSIsImRpZmZYIiwiZGlmZlkiLCJhbmdsZSIsImF0YW4yIiwic3FydCIsInBvc2l0aW9uWCIsInBvc2l0aW9uWSIsImRyYXdQb2ludHMiLCJwb2ludEluZGV4QXJyYXkiLCJwb3NpdGlvbkxheWVyIiwibnVtUG9pbnRzIiwicG9pbnRzUHJvZ3JhbSIsInBvaW50U2l6ZSIsInBvc2l0aW9uTGF5ZXJEaW1lbnNpb25zIiwicG9pbnRJbmRleEJ1ZmZlciIsImluZGljZXMiLCJQT0lOVFMiLCJkcmF3VmVjdG9yRmllbGQiLCJ2ZWN0b3JGaWVsZEluZGV4QXJyYXkiLCJ2ZWN0b3JMYXllciIsImFicyIsInRvRml4ZWQiLCJ2ZWN0b3JGaWVsZFByb2dyYW0iLCJ2ZWN0b3JTY2FsZSIsInZlY3RvclNwYWNpbmciLCJzcGFjZWREaW1lbnNpb25zIiwidmVjdG9yRmllbGRJbmRleEJ1ZmZlciIsImdldFZhbHVlcyIsImRhdGFMYXllciIsInJlYWR5VG9SZWFkIiwicmVhZFBpeGVscyIsIk9VVFBVVF9MRU5HVEgiLCJoYW5kbGVGbG9hdDE2Q29udmVyc2lvbiIsIm91dHB1dCIsImluZGV4MSIsImluZGV4MiIsInJlc2V0IiwiYXR0YWNoRGF0YUxheWVyVG9UaHJlZVRleHR1cmUiLCJ0ZXh0dXJlcyIsIm9mZnNldFRleHR1cmVQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsIl9fd2ViZ2xUZXh0dXJlIiwiX193ZWJnbEluaXQiLCJyZXNldFRocmVlU3RhdGUiLCJnZXRWaWV3cG9ydCIsInV0aWxzIiwiVmVjdG9yNCIsInNldFJlbmRlclRhcmdldCIsInJlc2V0U3RhdGUiLCJleHRlbnNpb25zIiwiV0VCR0xfREVQVEhfVEVYVFVSRSIsImV4dGVuc2lvbk5hbWUiLCJvcHRpb25hbCIsImV4dGVuc2lvbiIsInNoYWRlclNvdXJjZSIsInNoYWRlclR5cGUiLCJjcmVhdGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsImdldFNoYWRlckluZm9Mb2ciLCJXZWJHTDJSZW5kZXJpbmdDb250ZXh0IiwiV2ViR0wyQ29tcHV0ZVJlbmRlcmluZ0NvbnRleHQiLCJ6IiwidyIsImNvcHkiLCJ2IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiaWQiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJvIiwiZW51bWVyYWJsZSIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJobWQiLCJjaGlsZHJlbiIsInByb3AiLCJyIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUEyQ0EsRUFBTUMsR0FDMUIsaUJBQVpDLFNBQTBDLGlCQUFYQyxPQUN4Q0EsT0FBT0QsUUFBVUQsSUFDUSxtQkFBWEcsUUFBeUJBLE9BQU9DLElBQzlDRCxPQUFPLEdBQUlILEdBQ2UsaUJBQVpDLFFBQ2RBLFFBQXNCLGFBQUlELElBRTFCRCxFQUFtQixhQUFJQyxJQVJ6QixDQVNHSyxNQUFNLFdBQ1QsTSw4SENSQSxNQUFNQyxFQUFTLElBQUlDLFlBQVksR0FDekJDLEVBQVksSUFBSUMsYUFBYUgsR0FDN0JJLEVBQWEsSUFBSUMsWUFBWUwsR0FHN0JNLEVBQVksSUFBSUQsWUFBWSxLQUM1QkUsRUFBYSxJQUFJRixZQUFZLEtBRW5DLElBQUksSUFBSUcsRUFBSSxFQUFHQSxFQUFJLE1BQU9BLEVBQUcsQ0FDekIsTUFBTUMsRUFBSUQsRUFBSSxJQUdWQyxHQUFLLElBQ0xILEVBQWMsRUFBSkUsR0FBYSxFQUN2QkYsRUFBYyxJQUFKRSxHQUFhLE1BQ3ZCRCxFQUFlLEVBQUpDLEdBQWEsR0FDeEJELEVBQWUsSUFBSkMsR0FBYSxJQUdqQkMsR0FBSyxJQUNaSCxFQUFjLEVBQUpFLEdBQWMsT0FBWUMsRUFBSSxHQUN4Q0gsRUFBYyxJQUFKRSxHQUFjLE9BQVlDLEVBQUksR0FBTyxNQUMvQ0YsRUFBZSxFQUFKQyxJQUFjQyxFQUFJLEVBQzdCRixFQUFlLElBQUpDLElBQWNDLEVBQUksR0FHdEJBLEdBQUssSUFDWkgsRUFBYyxFQUFKRSxHQUFlQyxFQUFJLElBQU8sR0FDcENILEVBQWMsSUFBSkUsR0FBZUMsRUFBSSxJQUFPLEdBQU0sTUFDMUNGLEVBQWUsRUFBSkMsR0FBYSxHQUN4QkQsRUFBZSxJQUFKQyxHQUFhLElBR2pCQyxFQUFJLEtBQ1hILEVBQWMsRUFBSkUsR0FBYSxNQUN2QkYsRUFBYyxJQUFKRSxHQUFhLE1BQ3ZCRCxFQUFlLEVBQUpDLEdBQWEsR0FDeEJELEVBQWUsSUFBSkMsR0FBYSxLQUl4QkYsRUFBYyxFQUFKRSxHQUFhLE1BQ3ZCRixFQUFjLElBQUpFLEdBQWEsTUFDdkJELEVBQWUsRUFBSkMsR0FBYSxHQUN4QkQsRUFBZSxJQUFKQyxHQUFhLElBU3pCLFNBQVNFLEVBQW1CQyxHQUMvQlQsRUFBVSxHQUFLUyxFQUVmLE1BQU1DLEVBQUlSLEVBQVcsR0FDZkssRUFBS0csR0FBSyxHQUFNLElBQ3RCLE9BQU9OLEVBQVVHLEtBQVcsUUFBSkcsSUFBbUJMLEVBQVdFLElBSTFELE1BQU1JLEVBQWdCLElBQUlSLFlBQVksTUFDaENTLEVBQWdCLElBQUlULFlBQVksSUFDaENVLEVBQWMsSUFBSVYsWUFBWSxJQUVwQ1EsRUFBYyxHQUFLLEVBQ25CLElBQUksSUFBSUwsRUFBSSxFQUFHQSxFQUFJLE9BQVFBLEVBQUcsQ0FDMUIsSUFBSVEsRUFBSVIsR0FBSyxHQUNUQyxFQUFJLEVBR1IsS0FBMkIsSUFBaEIsUUFBSk8sSUFDSFAsR0FBSyxRQUNMTyxJQUFNLEVBR1ZBLElBQUssUUFDTFAsR0FBSyxVQUVMSSxFQUFjTCxHQUFLUSxFQUFJUCxFQUUzQixJQUFJLElBQUlELEVBQUksS0FBTUEsRUFBSSxPQUFRQSxFQUMxQkssRUFBY0wsR0FBSyxXQUFlQSxFQUFJLE1BQVMsSUFHbkRNLEVBQWMsR0FBSyxFQUNuQixJQUFJLElBQUlOLEVBQUksRUFBR0EsRUFBSSxLQUFNQSxFQUNyQk0sRUFBY04sR0FBS0EsR0FBSyxHQUU1Qk0sRUFBYyxJQUFNLFdBQ3BCQSxFQUFjLElBQU0sV0FDcEIsSUFBSSxJQUFJTixFQUFJLEdBQUlBLEVBQUksS0FBTUEsRUFDdEJNLEVBQWNOLEdBQUssWUFBZUEsRUFBSSxJQUFPLElBRWpETSxFQUFjLElBQU0sV0FFcEJDLEVBQVksR0FBSyxFQUNqQixJQUFJLElBQUlQLEVBQUksRUFBR0EsRUFBSSxLQUFNQSxFQUVqQk8sRUFBWVAsR0FETixLQUFOQSxFQUNpQixFQUVBLEtBU2xCLFNBQVNTLEVBQWdCQyxHQUM1QixNQUFNRixFQUFJRSxHQUFlLEdBRXpCLE9BREFkLEVBQVcsR0FBS1MsRUFBY0UsRUFBWUMsSUFBb0IsS0FBZEUsSUFBd0JKLEVBQWNFLEdBQy9FZCxFQUFVLEdDN0dOLFNBQVNpQixFQUFRUixHQUk1QixPQUhBQSxFQUFNUyxPQUFPVCxHQUdSUyxPQUFPQyxTQUFTVixJQUFnQixJQUFSQSxFQUt0Qk0sRUFES1AsRUFBbUJDLElBSHBCQSxFLGFDVFhXLEVBQTBCLGlCQUFSdkIsTUFBb0JBLE1BQVFBLEtBQUt3QixTQUFXQSxRQUFVeEIsS0FLNUUsUUFGVyxLQUFjdUIsR0FBWUUsU0FBUyxjQUFUQSxHQ0RyQyxFQUZhLFNDQWIsSUFBSUMsRUFBY0YsT0FBT0csVUFHckIsRUFBaUJELEVBQVlFLGVBTzdCQyxFQUF1QkgsRUFBWUksU0FHbkNDLEVBQWlCLEVBQVMsbUJBQXFCQyxFQ2ZuRCxJQU9JLEVBUGNSLE9BQU9HLFVBT2NHLFNDSHZDLElBSUksRUFBaUIsRUFBUyxtQkFBcUJFLEVBa0JuRCxRQVRBLFNBQW9CQyxHQUNsQixPQUFhLE1BQVRBLE9BQ2VELElBQVZDLEVBZFEscUJBREwsZ0JBaUJKLEdBQWtCLEtBQWtCVCxPQUFPUyxHRkdyRCxTQUFtQkEsR0FDakIsSUFBSUMsRUFBUSxFQUFlQyxLQUFLRixFQUFPRixHQUNuQ0ssRUFBTUgsRUFBTUYsR0FFaEIsSUFDRUUsRUFBTUYsUUFBa0JDLEVBQ3hCLElBQUlLLEdBQVcsRUFDZixNQUFPM0IsSUFFVCxJQUFJNEIsRUFBU1QsRUFBcUJNLEtBQUtGLEdBUXZDLE9BUElJLElBQ0VILEVBQ0ZELEVBQU1GLEdBQWtCSyxTQUVqQkgsRUFBTUYsSUFHVk8sRUVuQkgsQ0FBVUwsR0ROaEIsU0FBd0JBLEdBQ3RCLE9BQU8sRUFBcUJFLEtBQUtGLEdDTTdCLENBQWVBLElDTXJCLEVBTEEsU0FBa0JBLEdBQ2hCLElBQUlNLFNBQWNOLEVBQ2xCLE9BQWdCLE1BQVRBLElBQTBCLFVBQVJNLEdBQTRCLFlBQVJBLElDdEIvQyxFQUZpQix3QkNBakIsSUFDTUMsRUFERkMsR0FDRUQsRUFBTSxTQUFTRSxLQUFLLEdBQWMsUUFBbUIsaUJBQTRCLEtBQ3ZFLGlCQUFtQkYsRUFBTyxHQ0oxQyxJQUdJRyxFQUhZbEIsU0FBU0UsVUFHSUcsU0NLN0IsSUFHSWMsRUFBZSw4QkFHZixFQUFZbkIsU0FBU0UsVUFDckIsRUFBY0gsT0FBT0csVUFHckIsRUFBZSxFQUFVRyxTQUd6QixFQUFpQixFQUFZRixlQUc3QmlCLEVBQWFDLE9BQU8sSUFDdEIsRUFBYVgsS0FBSyxHQUFnQlksUUFqQmpCLHNCQWlCdUMsUUFDdkRBLFFBQVEseURBQTBELFNBQVcsS0FtQmhGLFFBUkEsU0FBc0JkLEdBQ3BCLFNBQUssRUFBU0EsS0Z4QkVlLEVFd0JpQmYsRUZ2QnhCUSxHQUFlQSxLQUFjTyxNR1V4QyxTQUFvQmYsR0FDbEIsSUFBSyxFQUFTQSxHQUNaLE9BQU8sRUFJVCxJQUFJRyxFQUFNLEVBQVdILEdBQ3JCLE1BNUJZLHFCQTRCTEcsR0EzQkksOEJBMkJjQSxHQTdCWiwwQkE2QjZCQSxHQTFCN0Isa0JBMEJnREEsRURTL0MsQ0FBV0gsR0FBU1ksRUFBYUQsR0FDaENLLEtEOUJqQixTQUFrQkQsR0FDaEIsR0FBWSxNQUFSQSxFQUFjLENBQ2hCLElBQ0UsT0FBT0wsRUFBYVIsS0FBS2EsR0FDekIsTUFBT3RDLElBQ1QsSUFDRSxPQUFRc0MsRUFBTyxHQUNmLE1BQU90QyxLQUVYLE1BQU8sR0NxQmEsQ0FBU3VCLElGNUIvQixJQUFrQmUsR0lDbEIsRUFMQSxTQUFtQkUsRUFBUUMsR0FDekIsSUFBSWxCLEVDSk4sU0FBa0JpQixFQUFRQyxHQUN4QixPQUFpQixNQUFWRCxPQUFpQmxCLEVBQVlrQixFQUFPQyxHREcvQixDQUFTRCxFQUFRQyxHQUM3QixPQUFPLEVBQWFsQixHQUFTQSxPQUFRRCxHRVJ2QyxFQUZtQixFQUFVUixPQUFRLFVDQXJDLElBTUksRUFIY0EsT0FBT0csVUFHUUMsZUNOakMsSUFHSSxFQUhjSixPQUFPRyxVQUdRQyxlQ09qQyxTQUFTd0IsRUFBS0MsR0FDWixJQUFJQyxHQUFTLEVBQ1RDLEVBQW9CLE1BQVhGLEVBQWtCLEVBQUlBLEVBQVFFLE9BRzNDLElBREFDLEtBQUtDLFVBQ0lILEVBQVFDLEdBQVEsQ0FDdkIsSUFBSUcsRUFBUUwsRUFBUUMsR0FDcEJFLEtBQUtHLElBQUlELEVBQU0sR0FBSUEsRUFBTSxLQUs3Qk4sRUFBS3pCLFVBQVU4QixNQ2hCZixXQUNFRCxLQUFLSSxTQUFXLEVBQWUsRUFBYSxNQUFRLEdBQ3BESixLQUFLSyxLQUFPLEdEZWRULEVBQUt6QixVQUFrQixPRWhCdkIsU0FBb0J3QixHQUNsQixJQUFJYixFQUFTa0IsS0FBS00sSUFBSVgsV0FBZUssS0FBS0ksU0FBU1QsR0FFbkQsT0FEQUssS0FBS0ssTUFBUXZCLEVBQVMsRUFBSSxFQUNuQkEsR0ZjVGMsRUFBS3pCLFVBQVVvQyxJRlBmLFNBQWlCWixHQUNmLElBQUlhLEVBQU9SLEtBQUtJLFNBQ2hCLEdBQUksRUFBYyxDQUNoQixJQUFJdEIsRUFBUzBCLEVBQUtiLEdBQ2xCLE1BckJpQiw4QkFxQlZiLE9BQTRCTixFQUFZTSxFQUVqRCxPQUFPLEVBQWVILEtBQUs2QixFQUFNYixHQUFPYSxFQUFLYixRQUFPbkIsR0VFdERvQixFQUFLekIsVUFBVW1DLElEWGYsU0FBaUJYLEdBQ2YsSUFBSWEsRUFBT1IsS0FBS0ksU0FDaEIsT0FBTyxPQUE4QjVCLElBQWRnQyxFQUFLYixHQUFzQixFQUFlaEIsS0FBSzZCLEVBQU1iLElDVTlFQyxFQUFLekIsVUFBVWdDLElHZGYsU0FBaUJSLEVBQUtsQixHQUNwQixJQUFJK0IsRUFBT1IsS0FBS0ksU0FHaEIsT0FGQUosS0FBS0ssTUFBUUwsS0FBS00sSUFBSVgsR0FBTyxFQUFJLEVBQ2pDYSxFQUFLYixHQUFRLFFBQTBCbkIsSUFBVkMsRUFmViw0QkFla0RBLEVBQzlEdUIsTUhZVCxVSVhBLEVBVkEsU0FBc0JTLEVBQU9kLEdBRTNCLElBREEsSUFBSUksRUFBU1UsRUFBTVYsT0FDWkEsS0FDTCxJQ21CUXRCLEVEbkJEZ0MsRUFBTVYsR0FBUSxPQ21CTlcsRURuQlVmLElDb0JBbEIsR0FBVUEsR0FBU2lDLEdBQVVBLEVEbkJwRCxPQUFPWCxFQ2tCYixJQUFZdEIsRUFBT2lDLEVEZmpCLE9BQVEsR0VkVixJQUdJQyxFQUhhQyxNQUFNekMsVUFHQ3dDLE9DT3hCLFNBQVNFLEVBQVVoQixHQUNqQixJQUFJQyxHQUFTLEVBQ1RDLEVBQW9CLE1BQVhGLEVBQWtCLEVBQUlBLEVBQVFFLE9BRzNDLElBREFDLEtBQUtDLFVBQ0lILEVBQVFDLEdBQVEsQ0FDdkIsSUFBSUcsRUFBUUwsRUFBUUMsR0FDcEJFLEtBQUtHLElBQUlELEVBQU0sR0FBSUEsRUFBTSxLQUs3QlcsRUFBVTFDLFVBQVU4QixNQ2xCcEIsV0FDRUQsS0FBS0ksU0FBVyxHQUNoQkosS0FBS0ssS0FBTyxHRGlCZFEsRUFBVTFDLFVBQWtCLE9EVDVCLFNBQXlCd0IsR0FDdkIsSUFBSWEsRUFBT1IsS0FBS0ksU0FDWk4sRUFBUSxFQUFhVSxFQUFNYixHQUUvQixRQUFJRyxFQUFRLElBSVJBLEdBRFlVLEVBQUtULE9BQVMsRUFFNUJTLEVBQUtNLE1BRUxILEVBQU9oQyxLQUFLNkIsRUFBTVYsRUFBTyxLQUV6QkUsS0FBS0ssS0FDQSxLQ0pUUSxFQUFVMUMsVUFBVW9DLElFaEJwQixTQUFzQlosR0FDcEIsSUFBSWEsRUFBT1IsS0FBS0ksU0FDWk4sRUFBUSxFQUFhVSxFQUFNYixHQUUvQixPQUFPRyxFQUFRLE9BQUl0QixFQUFZZ0MsRUFBS1YsR0FBTyxJRmE3Q2UsRUFBVTFDLFVBQVVtQyxJR2pCcEIsU0FBc0JYLEdBQ3BCLE9BQU8sRUFBYUssS0FBS0ksU0FBVVQsSUFBUSxHSGlCN0NrQixFQUFVMUMsVUFBVWdDLElJakJwQixTQUFzQlIsRUFBS2xCLEdBQ3pCLElBQUkrQixFQUFPUixLQUFLSSxTQUNaTixFQUFRLEVBQWFVLEVBQU1iLEdBUS9CLE9BTklHLEVBQVEsS0FDUkUsS0FBS0ssS0FDUEcsRUFBS08sS0FBSyxDQUFDcEIsRUFBS2xCLEtBRWhCK0IsRUFBS1YsR0FBTyxHQUFLckIsRUFFWnVCLE1KU1QsVUt6QkEsRUFGVSxFQUFVLEVBQU0sT0NhMUIsRUFQQSxTQUFvQmdCLEVBQUtyQixHQUN2QixJQ0ppQmxCLEVBQ2JNLEVER0F5QixFQUFPUSxFQUFJWixTQUNmLE9DSGdCLFdBRFpyQixTQURhTixFREtBa0IsS0NIbUIsVUFBUlosR0FBNEIsVUFBUkEsR0FBNEIsV0FBUkEsRUFDckQsY0FBVk4sRUFDVSxPQUFWQSxHREVEK0IsRUFBbUIsaUJBQVBiLEVBQWtCLFNBQVcsUUFDekNhLEVBQUtRLEtFRFgsU0FBU0MsRUFBU3BCLEdBQ2hCLElBQUlDLEdBQVMsRUFDVEMsRUFBb0IsTUFBWEYsRUFBa0IsRUFBSUEsRUFBUUUsT0FHM0MsSUFEQUMsS0FBS0MsVUFDSUgsRUFBUUMsR0FBUSxDQUN2QixJQUFJRyxFQUFRTCxFQUFRQyxHQUNwQkUsS0FBS0csSUFBSUQsRUFBTSxHQUFJQSxFQUFNLEtBSzdCZSxFQUFTOUMsVUFBVThCLE1DZG5CLFdBQ0VELEtBQUtLLEtBQU8sRUFDWkwsS0FBS0ksU0FBVyxDQUNkLEtBQVEsSUFBSSxFQUNaLElBQU8sSUFBSyxHQUFPLEdBQ25CLE9BQVUsSUFBSSxJRFVsQmEsRUFBUzlDLFVBQWtCLE9FZjNCLFNBQXdCd0IsR0FDdEIsSUFBSWIsRUFBUyxFQUFXa0IsS0FBTUwsR0FBYSxPQUFFQSxHQUU3QyxPQURBSyxLQUFLSyxNQUFRdkIsRUFBUyxFQUFJLEVBQ25CQSxHRmFUbUMsRUFBUzlDLFVBQVVvQyxJR2hCbkIsU0FBcUJaLEdBQ25CLE9BQU8sRUFBV0ssS0FBTUwsR0FBS1ksSUFBSVosSUhnQm5Dc0IsRUFBUzlDLFVBQVVtQyxJSWpCbkIsU0FBcUJYLEdBQ25CLE9BQU8sRUFBV0ssS0FBTUwsR0FBS1csSUFBSVgsSUppQm5Dc0IsRUFBUzlDLFVBQVVnQyxJS2pCbkIsU0FBcUJSLEVBQUtsQixHQUN4QixJQUFJK0IsRUFBTyxFQUFXUixLQUFNTCxHQUN4QlUsRUFBT0csRUFBS0gsS0FJaEIsT0FGQUcsRUFBS0wsSUFBSVIsRUFBS2xCLEdBQ2R1QixLQUFLSyxNQUFRRyxFQUFLSCxNQUFRQSxFQUFPLEVBQUksRUFDOUJMLE1MYVQsVU1rQkEsU0FBU2tCLEVBQVExQixFQUFNMkIsR0FDckIsR0FBbUIsbUJBQVIzQixHQUFtQyxNQUFaMkIsR0FBdUMsbUJBQVpBLEVBQzNELE1BQU0sSUFBSUMsVUFoRFEsdUJBa0RwQixJQUFJQyxFQUFXLFdBQ2IsSUFBSUMsRUFBT0MsVUFDUDVCLEVBQU13QixFQUFXQSxFQUFTSyxNQUFNeEIsS0FBTXNCLEdBQVFBLEVBQUssR0FDbkRHLEVBQVFKLEVBQVNJLE1BRXJCLEdBQUlBLEVBQU1uQixJQUFJWCxHQUNaLE9BQU84QixFQUFNbEIsSUFBSVosR0FFbkIsSUFBSWIsRUFBU1UsRUFBS2dDLE1BQU14QixLQUFNc0IsR0FFOUIsT0FEQUQsRUFBU0ksTUFBUUEsRUFBTXRCLElBQUlSLEVBQUtiLElBQVcyQyxFQUNwQzNDLEdBR1QsT0FEQXVDLEVBQVNJLE1BQVEsSUFBS1AsRUFBUVEsT0FBUyxHQUNoQ0wsRUFJVEgsRUFBUVEsTUFBUSxFQUVoQixVQ3BFYUMsRUFBc0MzRCxPQUFPNEQseUJBQXlCLElBQUlDLFdBQVcsR0FBSSxHQUFHQyxTQ0FsRyxTQUFTQyxHQUFVQyxHQUN0QixJQUFJQyxFQUEyQixpQkFBWEQsRUFBc0JuRSxPQUFPbUUsR0FBVUEsRUFJM0QsT0FISW5FLE9BQU9xRSxNQUFNRCxLQUNiQSxFQUFTLEdBRU5FLEtBQUtDLE1BQU1ILEdBUWYsU0FBU0ksR0FBdUJDLEVBQUdDLEdBQ3RDLE1BQU9DLEVBQVNDLEdBQVcsQ0FBQzVFLE9BQU9xRSxNQUFNSSxHQUFJekUsT0FBT3FFLE1BQU1LLElBRTFELEdBQUlDLEdBQVdDLEVBQ1gsT0FBTyxFQUdYLEdBQUlELEVBQ0EsT0FBTyxFQUdYLEdBQUlDLEVBQ0EsT0FBUSxFQUdaLEdBQUlILEVBQUlDLEVBQ0osT0FBUSxFQUdaLEdBQUlELEVBQUlDLEVBQ0osT0FBTyxFQUdYLEdBQVUsSUFBTkQsR0FBaUIsSUFBTkMsRUFBUyxDQUNwQixNQUFPRyxFQUFjQyxHQUFnQixDQUFDM0UsT0FBTzRFLEdBQUdOLEVBQUcsR0FBSXRFLE9BQU80RSxHQUFHTCxFQUFHLElBRXBFLElBQUtHLEdBQWdCQyxFQUNqQixPQUFRLEVBR1osR0FBSUQsSUFBaUJDLEVBQ2pCLE9BQU8sRUFJZixPQUFPLEVDNUNKLFNBQVNFLEdBQVdDLEdBQ3ZCLE9BQU9BLGFBQWdCQyxTQU9wQixTQUFTQyxHQUFrQnJELEdBQzlCLE1BQXNCLGlCQUFSQSxHQUFvQkEsSUFBUW9DLEdBQVVwQyxHQUFPLEcsY0NaM0RzRCxHQUFvQixNQUFZLG1CQXFCcEMsU0FGb0JBLElDakJEekQsR0RpQitCeUQsR0NoQnpDLFNBQVN4RSxHQUNkLE9BQU9lLEdBQUtmLEtDR2hCLFNBQTJCQSxHQUN6QixPQ1dGLFNBQXNCQSxHQUNwQixPQUFnQixNQUFUQSxHQUFpQyxpQkFBVEEsRURaeEIsQ0FBYUEsSUFWRCx3QkFVVyxFQUFXQSxJRE4zQyxJQUFtQmUsR0dBbkIsTUFBTTBELEdDSkMsV0FDTixNQUFNQyxFQUFLLElBQUlDLFFBQ2YsT0FBUTVHLElBQ1AsSUFBSTZHLEVBQU1GLEVBQUc1QyxJQUFJL0QsR0FDakIsT0FBSTZHLElBR0hBLEVBQU1yRixPQUFPc0YsT0FBTyxNQUNwQkgsRUFBR2hELElBQUkzRCxFQUFNNkcsR0FDTkEsSURMQUUsR0FNVixTQUFTQyxHQUFleEIsR0FDcEIsT0FBT0EsYUFBa0J5QixHQU83QixTQUFTQyxHQUFtQjFCLEdBQ3hCLElBQUt3QixHQUFleEIsR0FDaEIsTUFBTSxJQUFJWixVQUFVLDhCQWdCNUIsU0FBU3VDLEdBQVloRyxHQUNqQixNQUFNb0MsRUFBU3BDLEVBQVlvQyxPQUVyQlUsRUFBUSxJQUFJRyxNQUFNYixHQUN4QixJQUFJLElBQUk5QyxFQUFJLEVBQUdBLEVBQUk4QyxJQUFVOUMsRUFDekJ3RCxFQUFNeEQsR0FBS1MsRUFBZ0JDLEVBQVlWLElBRzNDLE9BQU93RCxFQUlYLE1BQU1tRCxHQUFlLENBQ2pCLE1BQU1wRSxFQUFNcUUsRUFBU3ZDLEdBRWpCLE9BQUlrQyxHQUFlSyxJQXRCRSxtQkFEUzdCLEVBdUI4QnhDLElBdEJ6QnNFLEdBQTJCeEQsSUFBSTBCLEdBdUJ2RCtCLFFBQVF2QyxNQUFNaEMsRUFBTTBELEdBQUVXLEdBQVM3QixPQUFRVixHQUczQ3lDLFFBQVF2QyxNQUFNaEMsRUFBTXFFLEVBQVN2QyxHQTNCNUMsSUFBc0NVLElBZ0NoQ2dDLEdBQVUsQ0FDWixJQUFJaEMsRUFBUXJDLEdBQ1IsSUFBSXNFLEVBQVUsS0FNZCxHQUxLdEMsSUFDRHNDLEVBQVVqQyxFQUNWQSxFQUFTa0IsR0FBRWUsR0FBU2pDLFFBR3BCZ0IsR0FBa0JyRCxHQUNsQixPQUFPb0UsUUFBUXpELElBQUkwQixFQUFRckMsR0FBT2pDLEVBQWdCcUcsUUFBUXhELElBQUl5QixFQUFRckMsU0FBUW5CLEVBQzNFLENBQ0gsTUFBTTBGLEVBQWtCLE9BQVpELEdBQW9CRixRQUFRekQsSUFBSTJELEVBQVN0RSxHQUFPb0UsUUFBUXhELElBQUkwRCxFQUFTdEUsR0FBT29FLFFBQVF4RCxJQUFJeUIsRUFBUXJDLEdBRTVHLEdBQW1CLG1CQUFSdUUsRUFDUCxPQUFPQSxFQUlYLElBQUlDLEVBQVFqQixHQUFFZ0IsR0FBS0MsTUFNbkIsWUFKYzNGLElBQVYyRixJQUNBQSxFQUFRakIsR0FBRWdCLEdBQUtDLE1BQVEsSUFBSUMsTUFBTUYsRUFBS04sS0FHbkNPLElBSWYsSUFBSW5DLEVBQVFyQyxFQUFLbEIsR0FDYixJQUFJd0YsRUFBVSxLQU1kLE9BTEt0QyxJQUNEc0MsRUFBVWpDLEVBQ1ZBLEVBQVNrQixHQUFFZSxHQUFTakMsUUFHcEJnQixHQUFrQnJELEdBQ1hvRSxRQUFRNUQsSUFBSTZCLEVBQVFyQyxFQUFLeEMsRUFBbUJzQixJQUduQyxPQUFad0YsR0FBc0JGLFFBQVF6RCxJQUFJMEIsRUFBUXJDLEtBQVEzQixPQUFPcUcsU0FBU0osR0FHM0RGLFFBQVE1RCxJQUFJNkIsRUFBUXJDLEVBQUtsQixHQUZ6QnNGLFFBQVE1RCxJQUFJOEQsRUFBU3RFLEVBQUtsQixLQVE1Q2tELElBQ0RxQyxHQUFRTSxlQUFrQkwsR0FBcUJGLFFBQVFPLGVBQWVwQixHQUFFZSxHQUFTakMsUUFDakZnQyxHQUFRTyxlQUFpQixDQUFDTixFQUFTOUYsSUFBdUI0RixRQUFRUSxlQUFlckIsR0FBRWUsR0FBU2pDLE9BQVE3RCxHQUVwRzZGLEdBQVFRLGVBQWlCLENBQUNQLEVBQVN0RSxFQUFLOEUsS0FDcEMsTUFBTXpDLEVBQVNrQixHQUFFZSxHQUFTakMsT0FDMUIsT0FBUStCLFFBQVF6RCxJQUFJMEIsRUFBUXJDLElBQVEzQixPQUFPcUcsU0FBU0osR0FBV0YsUUFBUVMsZUFBZVAsRUFBU3RFLEVBQUs4RSxHQUFjVixRQUFRUyxlQUFleEMsRUFBUXJDLEVBQUs4RSxJQUUxSlQsR0FBUVUsZUFBaUIsQ0FBQ1QsRUFBU3RFLEtBQy9CLE1BQU1xQyxFQUFTa0IsR0FBRWUsR0FBU2pDLE9BQzFCLE9BQU8rQixRQUFRekQsSUFBSTJELEVBQVN0RSxHQUFPb0UsUUFBUVcsZUFBZVQsRUFBU3RFLEdBQU9vRSxRQUFRVyxlQUFlMUMsRUFBUXJDLElBRzdHcUUsR0FBUTFELElBQU0sQ0FBQzJELEVBQVN0RSxJQUFpQm9FLFFBQVF6RCxJQUFJMkQsRUFBU3RFLElBQVFvRSxRQUFRekQsSUFBSTRDLEdBQUVlLEdBQVNqQyxPQUFRckMsR0FFckdxRSxHQUFRVyxhQUFnQlYsR0FBcUJGLFFBQVFZLGFBQWFWLEdBQ2xFRCxHQUFRWSxrQkFBcUJYLEdBQXFCRixRQUFRYSxrQkFBa0JYLEdBRTVFRCxHQUFRcEMseUJBQTJCLENBQUNxQyxFQUFTdEUsSUFBaUJvRSxRQUFRbkMseUJBQXlCcUMsRUFBU3RFLEdBQ3hHcUUsR0FBUWEsUUFBV1osR0FBcUJGLFFBQVFjLFFBQVFaLElBRzdDLE1BQU1SLFdBQXFCcUIsWUFFdEMsWUFBWUMsRUFBT0MsRUFBWWpGLEdBRTNCLEdBQUl5RCxHQUFldUIsR0FDZkUsTUFBTS9CLEdBQUU2QixHQUFPL0MsYUFHWixHQUFjLE9BQVYrQyxHQUFtQyxpQkFBVkEsR0FBdUIsR0FBY0EsR0FjckUsT0FBT3hELFVBQVV4QixRQUNiLEtBQUssRUFDRGtGLFFBQ0EsTUFFSixLQUFLLEVBQ0RBLE1BQU1GLEdBQ04sTUFFSixLQUFLLEVBQ0RFLE1BQU1GLEVBQU9DLEdBQ2IsTUFFSixLQUFLLEVBQ0RDLE1BQU1GLEVBQU9DLEVBQVlqRixHQUN6QixNQUVKLFFBRUlrRixTQUFTMUQsZUFqQzRELENBRTdFLE1BQU0yRCxFQUFhbkIsUUFBUXpELElBQUl5RSxFQUFPLGdCQUF3Q3ZHLElBQTNCdUcsRUFBTUksT0FBT0MsVUFBdUNMLEVBQWIsSUFBSUEsR0FFeEZoRixFQUFTbUYsRUFBVW5GLE9BQ3pCa0YsTUFBTWxGLEdBRU4sSUFBSSxJQUFJOUMsRUFBSSxFQUFHQSxFQUFJOEMsSUFBVTlDLEVBRXpCK0MsS0FBSy9DLEdBQUtFLEVBQW1CK0gsRUFBVWpJLElBNEIvQyxJQUFJa0gsRUFFSixHQUFJeEMsRUFDQXdDLEVBQVEsSUFBSUMsTUFBTXBFLEtBQU1nRSxRQUNyQixDQUNILE1BQU1DLEVBQVVqRyxPQUFPc0YsT0FBTyxNQUM5QkosR0FBRWUsR0FBU2pDLE9BQVNoQyxLQUNwQm1FLEVBQVEsSUFBSUMsTUFBTUgsRUFBU0QsSUFTL0IsT0FMQWQsR0FBRWlCLEdBQU9uQyxPQUFTaEMsS0FHbEJrRCxHQUFFbEQsTUFBTW1FLE1BQVFBLEVBRVRBLEVBSVgsWUFBWWtCLEtBQVFDLEdBQ2hCLEdBQW9CLElBQWhCQSxFQUFLdkYsT0FDTCxPQUFPLElBQUkwRCxHQUFhcUIsWUFBWVMsS0FBS0YsRUFBS2xJLEdBQW9CVixRQUd0RSxNQUFNK0ksRUFBVUYsRUFBSyxHQUNmekIsRUFBVXlCLEVBQUssR0FFckIsT0FBTyxJQUFJN0IsR0FBYXFCLFlBQVlTLEtBQUtGLEdBQUssU0FBVUksS0FBUW5FLEdBQzVELE9BQU9uRSxFQUFtQnFJLEVBQVE3RyxLQUFLcUIsS0FBTXlGLEtBQVFuRSxNQUN0RHVDLEdBQVNwSCxRQUdoQixhQUFhNkUsR0FDVCxPQUFPLElBQUltQyxHQUFhbkMsR0FJNUIsRUFBRzZELE9BQU9DLFlBQ04sSUFBSSxNQUFNSyxLQUFPUixNQUFNRSxPQUFPQyxrQkFDcEIxSCxFQUFnQitILEdBSTlCLE9BQ0ksT0FBT1IsTUFBTVMsT0FHakIsVUFDSSxJQUFJLE1BQU1ELEtBQU9SLE1BQU1VLGVBQ2JqSSxFQUFnQitILEdBSzlCLFdBQ0ksSUFBSSxNQUFPeEksRUFBR3dJLEtBQVFSLE1BQU1wRixlQUNsQixDQUFDNUMsRUFBR1MsRUFBZ0IrSCxJQU1sQyxJQUFJRyxLQUFhTixHQUNiNUIsR0FBbUIxRCxNQUVuQixNQUFNNkQsRUFBVXlCLEVBQUssR0FFZjdFLEVBQVEsR0FDZCxJQUFJLElBQUl4RCxFQUFJLEVBQUc0SSxFQUFJN0YsS0FBS0QsT0FBUTlDLEVBQUk0SSxJQUFLNUksRUFBRyxDQUN4QyxNQUFNd0ksRUFBTS9ILEVBQWdCc0MsS0FBSy9DLElBQ2pDd0QsRUFBTU0sS0FBSzZFLEVBQVNqSCxLQUFLa0YsRUFBUzRCLEVBQUt4SSxFQUFHaUcsR0FBRWxELE1BQU1tRSxRQUd0RCxPQUFPLElBQUlWLEdBQWFoRCxHQUk1QixPQUFPbUYsS0FBYU4sR0FDaEI1QixHQUFtQjFELE1BRW5CLE1BQU02RCxFQUFVeUIsRUFBSyxHQUVmN0UsRUFBUSxHQUNkLElBQUksSUFBSXhELEVBQUksRUFBRzRJLEVBQUk3RixLQUFLRCxPQUFROUMsRUFBSTRJLElBQUs1SSxFQUFHLENBQ3hDLE1BQU13SSxFQUFNL0gsRUFBZ0JzQyxLQUFLL0MsSUFDN0IySSxFQUFTakgsS0FBS2tGLEVBQVM0QixFQUFLeEksRUFBR2lHLEdBQUVsRCxNQUFNbUUsUUFDdkMxRCxFQUFNTSxLQUFLMEUsR0FJbkIsT0FBTyxJQUFJaEMsR0FBYWhELEdBRzVCLE9BQU9tRixLQUFhTixHQUdoQixJQUFJRyxFQUFLSyxFQUZUcEMsR0FBbUIxRCxNQUlDLElBQWhCc0YsRUFBS3ZGLFFBQ0wwRixFQUFNL0gsRUFBZ0JzQyxLQUFLLElBQzNCOEYsRUFBUSxJQUVSTCxFQUFNSCxFQUFLLEdBQ1hRLEVBQVEsR0FHWixJQUFJLElBQUk3SSxFQUFJNkksRUFBT0QsRUFBSTdGLEtBQUtELE9BQVE5QyxFQUFJNEksSUFBSzVJLEVBQ3pDd0ksRUFBTUcsRUFBU0gsRUFBSy9ILEVBQWdCc0MsS0FBSy9DLElBQUtBLEVBQUdpRyxHQUFFbEQsTUFBTW1FLE9BRzdELE9BQU9zQixFQUdYLFlBQVlHLEtBQWFOLEdBR3JCLElBQUlHLEVBQUtLLEVBRlRwQyxHQUFtQjFELE1BSW5CLE1BQU1ELEVBQVNDLEtBQUtELE9BQ0EsSUFBaEJ1RixFQUFLdkYsUUFDTDBGLEVBQU0vSCxFQUFnQnNDLEtBQUtELEVBQVMsSUFDcEMrRixFQUFRL0YsRUFBUyxJQUVqQjBGLEVBQU1ILEVBQUssR0FDWFEsRUFBUS9GLEdBR1osSUFBSSxJQUFJOUMsRUFBSTZJLEVBQU83SSxLQUNmd0ksRUFBTUcsRUFBU0gsRUFBSy9ILEVBQWdCc0MsS0FBSy9DLElBQUtBLEVBQUdpRyxHQUFFbEQsTUFBTW1FLE9BRzdELE9BQU9zQixFQUdYLFFBQVFHLEtBQWFOLEdBQ2pCNUIsR0FBbUIxRCxNQUVuQixNQUFNNkQsRUFBVXlCLEVBQUssR0FFckIsSUFBSSxJQUFJckksRUFBSSxFQUFHNEksRUFBSTdGLEtBQUtELE9BQVE5QyxFQUFJNEksSUFBSzVJLEVBQ3JDMkksRUFBU2pILEtBQUtrRixFQUFTbkcsRUFBZ0JzQyxLQUFLL0MsSUFBS0EsRUFBR2lHLEdBQUVsRCxNQUFNbUUsT0FJcEUsS0FBS3lCLEtBQWFOLEdBQ2Q1QixHQUFtQjFELE1BRW5CLE1BQU02RCxFQUFVeUIsRUFBSyxHQUVyQixJQUFJLElBQUlySSxFQUFJLEVBQUc0SSxFQUFJN0YsS0FBS0QsT0FBUTlDLEVBQUk0SSxJQUFLNUksRUFBRyxDQUN4QyxNQUFNd0IsRUFBUWYsRUFBZ0JzQyxLQUFLL0MsSUFDbkMsR0FBSTJJLEVBQVNqSCxLQUFLa0YsRUFBU3BGLEVBQU94QixFQUFHaUcsR0FBRWxELE1BQU1tRSxPQUN6QyxPQUFPMUYsR0FLbkIsVUFBVW1ILEtBQWFOLEdBQ25CNUIsR0FBbUIxRCxNQUVuQixNQUFNNkQsRUFBVXlCLEVBQUssR0FFckIsSUFBSSxJQUFJckksRUFBSSxFQUFHNEksRUFBSTdGLEtBQUtELE9BQVE5QyxFQUFJNEksSUFBSzVJLEVBQUcsQ0FDeEMsTUFBTXdCLEVBQVFmLEVBQWdCc0MsS0FBSy9DLElBQ25DLEdBQUkySSxFQUFTakgsS0FBS2tGLEVBQVNwRixFQUFPeEIsRUFBR2lHLEdBQUVsRCxNQUFNbUUsT0FDekMsT0FBT2xILEVBSWYsT0FBUSxFQUdaLE1BQU0ySSxLQUFhTixHQUNmNUIsR0FBbUIxRCxNQUVuQixNQUFNNkQsRUFBVXlCLEVBQUssR0FFckIsSUFBSSxJQUFJckksRUFBSSxFQUFHNEksRUFBSTdGLEtBQUtELE9BQVE5QyxFQUFJNEksSUFBSzVJLEVBQ3JDLElBQUsySSxFQUFTakgsS0FBS2tGLEVBQVNuRyxFQUFnQnNDLEtBQUsvQyxJQUFLQSxFQUFHaUcsR0FBRWxELE1BQU1tRSxPQUM3RCxPQUFPLEVBSWYsT0FBTyxFQUdYLEtBQUt5QixLQUFhTixHQUNkNUIsR0FBbUIxRCxNQUVuQixNQUFNNkQsRUFBVXlCLEVBQUssR0FFckIsSUFBSSxJQUFJckksRUFBSSxFQUFHNEksRUFBSTdGLEtBQUtELE9BQVE5QyxFQUFJNEksSUFBSzVJLEVBQ3JDLEdBQUkySSxFQUFTakgsS0FBS2tGLEVBQVNuRyxFQUFnQnNDLEtBQUsvQyxJQUFLQSxFQUFHaUcsR0FBRWxELE1BQU1tRSxPQUM1RCxPQUFPLEVBSWYsT0FBTyxFQUlYLElBQUlZLEtBQVVPLEdBQ1Y1QixHQUFtQjFELE1BRW5CLE1BQU0rRixFQUFTVCxFQUFLLEdBRXBCLElBQUkzSCxFQUdKLEdBQUk2RixHQUFldUIsR0FDZnBILEVBQWN1RixHQUFFNkIsR0FBTy9DLFdBR3BCLENBQ0gsTUFBTWtELEVBQWFuQixRQUFRekQsSUFBSXlFLEVBQU8sZ0JBQXdDdkcsSUFBM0J1RyxFQUFNSSxPQUFPQyxVQUF1Q0wsRUFBYixJQUFJQSxHQUN4RmhGLEVBQVNtRixFQUFVbkYsT0FFekJwQyxFQUFjLElBQUltSCxZQUFZL0UsR0FDOUIsSUFBSSxJQUFJOUMsRUFBSSxFQUFHNEksRUFBSVgsRUFBVW5GLE9BQVE5QyxFQUFJNEksSUFBSzVJLEVBQzFDVSxFQUFZVixHQUFLRSxFQUFtQitILEVBQVVqSSxJQUl0RGdJLE1BQU05RSxJQUFJeEMsRUFBYW9JLEdBRzNCLFVBS0ksT0FKQXJDLEdBQW1CMUQsTUFFbkJpRixNQUFNZSxVQUVDOUMsR0FBRWxELE1BQU1tRSxNQUduQixLQUFLMUYsS0FBVTZHLEdBS1gsT0FKQTVCLEdBQW1CMUQsTUFFbkJpRixNQUFNZ0IsS0FBSzlJLEVBQW1Cc0IsTUFBVzZHLEdBRWxDcEMsR0FBRWxELE1BQU1tRSxNQUduQixXQUFXbkMsRUFBUThELEtBQVVSLEdBS3pCLE9BSkE1QixHQUFtQjFELE1BRW5CaUYsTUFBTWlCLFdBQVdsRSxFQUFROEQsS0FBVVIsR0FFNUJwQyxHQUFFbEQsTUFBTW1FLE1BR25CLFFBQVFtQixHQUNKNUIsR0FBbUIxRCxNQUVuQixJQUFJbUcsRUFBa0JiLEVBQUssUUFFSDlHLElBQXBCMkgsSUFDQUEsRUFBa0I5RCxJQUd0QixNQUFNK0QsRUFBbUIsRUFBUTFJLEdBSWpDLE9BRkF1SCxNQUFNb0IsTUFBSyxDQUFDL0QsRUFBR0MsSUFBZTRELEVBQWdCQyxFQUFpQjlELEdBQUk4RCxFQUFpQjdELE1BRTdFVyxHQUFFbEQsTUFBTW1FLE1BS25CLFNBQVNtQixHQUdMLElBQUkzSCxFQUZKK0YsR0FBbUIxRCxNQUtuQixJQUNJckMsRUFBY3NILE1BQU1xQixTQUFTaEIsR0FDL0IsTUFBTXBJLEdBQ0osS0FBSUEsYUFBYWtFLFdBSWIsTUFBTWxFLEVBRk5TLEVBRGUsSUFBSW1ILFlBQVk5RSxLQUFLdkQsT0FBUXVELEtBQUtnRixXQUFZaEYsS0FBS0QsUUFDN0N1RyxTQUFTaEIsR0FNdEMsT0FBTyxJQUFJN0IsR0FBYTlGLEVBQVlsQixRQUl4QyxZQUFZNkksR0FHUixJQUFJM0gsRUFGSitGLEdBQW1CMUQsTUFLbkIsSUFDSXJDLEVBQWNzSCxNQUFNc0IsWUFBWWpCLEdBQ2xDLE1BQU1wSSxHQUNKLEtBQUlBLGFBQWFrRSxXQUliLE1BQU1sRSxFQUZOUyxFQURlLElBQUltSCxZQUFZOUUsS0FBS3ZELE9BQVF1RCxLQUFLZ0YsV0FBWWhGLEtBQUtELFFBQzdDd0csWUFBWWpCLEdBTXpDLE9BQU8sSUFBSTdCLEdBQWE5RixFQUFZbEIsT0FBUWtCLEVBQVlxSCxXQUFZckgsRUFBWW9DLFFBSXBGLFFBQVF5RyxLQUFZbEIsR0FDaEI1QixHQUFtQjFELE1BRW5CLE1BQU1ELEVBQVNDLEtBQUtELE9BRXBCLElBQUl3RixFQUFPeEQsR0FBVXVELEVBQUssSUFFdEJDLEVBQU8sSUFDUEEsR0FBUXhGLEVBQ0p3RixFQUFPLElBQ1BBLEVBQU8sSUFJZixJQUFJLElBQUl0SSxFQUFJc0ksRUFBTU0sRUFBSTlGLEVBQVE5QyxFQUFJNEksSUFBSzVJLEVBQ25DLEdBQUlTLEVBQWdCc0MsS0FBSy9DLE1BQVF1SixFQUM3QixPQUFPdkosRUFJZixPQUFRLEVBR1osWUFBWXVKLEtBQVlsQixHQUNwQjVCLEdBQW1CMUQsTUFFbkIsTUFBTUQsRUFBU0MsS0FBS0QsT0FFcEIsSUFBSXdGLEVBQU94RCxHQUFVdUQsRUFBSyxJQUUxQkMsRUFBZ0IsSUFBVEEsRUFBYXhGLEVBQVN3RixFQUFPLEVBRWhDQSxHQUFRLEVBQ1JBLEVBQU9BLEVBQU94RixFQUFTd0YsRUFBT3hGLEVBRTlCd0YsR0FBUXhGLEVBR1osSUFBSSxJQUFJOUMsRUFBSXNJLEVBQU10SSxLQUNkLEdBQUlTLEVBQWdCc0MsS0FBSy9DLE1BQVF1SixFQUM3QixPQUFPdkosRUFJZixPQUFRLEVBR1osU0FBU3VKLEtBQVlsQixHQUNqQjVCLEdBQW1CMUQsTUFFbkIsTUFBTUQsRUFBU0MsS0FBS0QsT0FFcEIsSUFBSXdGLEVBQU94RCxHQUFVdUQsRUFBSyxJQUV0QkMsRUFBTyxJQUNQQSxHQUFReEYsRUFDSndGLEVBQU8sSUFDUEEsRUFBTyxJQUlmLE1BQU1yRCxFQUFRckUsT0FBT3FFLE1BQU1zRSxHQUMzQixJQUFJLElBQUl2SixFQUFJc0ksRUFBTU0sRUFBSTlGLEVBQVE5QyxFQUFJNEksSUFBSzVJLEVBQUcsQ0FDdEMsTUFBTXdCLEVBQVFmLEVBQWdCc0MsS0FBSy9DLElBRW5DLEdBQUlpRixHQUFTckUsT0FBT3FFLE1BQU16RCxHQUN0QixPQUFPLEVBR1gsR0FBSUEsSUFBVStILEVBQ1YsT0FBTyxFQUlmLE9BQU8sRUFJWCxRQUFRbEIsR0FLSixPQUpBNUIsR0FBbUIxRCxNQUVMMkQsR0FBWTNELE1BRWJ5RyxRQUFRbkIsR0FHekIsa0JBQWtCQSxHQU1kLE9BTEE1QixHQUFtQjFELE1BRUwyRCxHQUFZM0QsTUFHYjBHLGtCQUFrQnBCLEdBSW5DL0UsSUFBSzRFLE9BQU93QixlQUNSLEdBQUluRCxHQUFleEQsTUFDZixNQUFPLGdCQUtuQixNQUFNNEcsR0FBeUJuRCxHQUFhdEYsVUFFdEMyRixHQUE2QixJQUFJK0MsUUFDdkMsSUFBSSxNQUFNbEgsS0FBT29FLFFBQVFjLFFBQVErQixJQUF5QixDQUN0RCxNQUFNbkIsRUFBTW1CLEdBQXVCakgsR0FDaEIsbUJBQVI4RixHQUNQM0IsR0FBMkJnRCxJQUFJckIsR0U1a0JoQyxTQUFTc0IsR0FBV0MsRUFBVWhDLEtBQWVNLEdBQ2hELElBQUt6QyxHQUFXbUUsR0FDWixNQUFNLElBQUk1RixVQUFVLDREQUd4QixPQUFPMUQsRUFBaUJzSixFQUFTQyxVQUFVakMsS0FBZU0sSUFVdkQsU0FBUzRCLEdBQVdGLEVBQVVoQyxFQUFZdkcsS0FBVTZHLEdBQ3ZELElBQUt6QyxHQUFXbUUsR0FDWixNQUFNLElBQUk1RixVQUFVLDREQUd4QjRGLEVBQVNHLFVBQVVuQyxFQUFZN0gsRUFBbUJzQixNQUFXNkcsSyw0Q0MzQmpFLFFBRmtDLGlCQUFWLEVBQUE4QixHQUFzQixFQUFBQSxHQUFVLEVBQUFBLEVBQU9wSixTQUFXQSxRQUFVLEVBQUFvSixHLG9FQ0VwRixJQUFJQyxFQUFnQyxpQkFBWGpMLFNBQXVCQSxVQUFZQSxRQUFRa0wsVUFBWWxMLFFBRzVFbUwsRUFBYUYsR0FBNENoTCxJQUFXQSxFQUFPaUwsVUFBWWpMLEVBTXZGbUwsRUFIZ0JELEdBQWNBLEVBQVduTCxVQUFZaUwsR0FHdEIsWUFpQm5DLFFBZGdCLFdBQ2QsSUFJRSxPQUZZRSxHQUFjQSxFQUFXRSxTQUFXRixFQUFXRSxRQUFRLFFBQVFDLE9BT3BFRixHQUFlQSxFQUFZRyxTQUFXSCxFQUFZRyxRQUFRLFFBQ2pFLE1BQU96SyxLQVhJLEksc1dDZmYsYUErQkEsU0FBZ0IwSyxFQUFTbkosR0FDeEIsT0FBUXlELE1BQU16RCxHQUdmLFNBQWdCb0osRUFBVXBKLEdBQ3pCLE9BQU9tSixFQUFTbkosSUFBV0EsRUFBUSxHQUFNLEVBOUI3QixFQUFBcUosZUFBaUIsQ0FBQyxFQUFBQyxXQUFZLEVBQUFDLE1BQU8sRUFBQUMsY0FBZSxFQUFBQyxLQUFNLEVBQUFDLGVBQWdCLEVBQUFDLE1BQU8sRUFBQUMsYUFBYyxFQUFBQyxLQUM1RywyQkFBZ0N2SixHQUMvQixPQUFPLEVBQUErSSxlQUFlUyxRQUFReEosSUFBUyxHQUczQixFQUFBeUosaUJBQW1CLENBQUMsRUFBQUMsT0FBUSxFQUFBQyxTQUN6Qyw2QkFBa0MzSixHQUNqQyxPQUFPLEVBQUF5SixpQkFBaUJELFFBQVF4SixJQUFTLEdBRzdCLEVBQUE0SixlQUFpQixDQUFDLEVBQUFDLGNBQWUsRUFBQUMsUUFDOUMsMkJBQWdDOUosR0FDL0IsT0FBTyxFQUFBNEosZUFBZUosUUFBUXhKLElBQVMsR0FHM0IsRUFBQStKLHdCQUEwQixDQUFDLEVBQUFDLElBQUssRUFBQUMsTUFDN0Msb0NBQXlDakssR0FDeEMsT0FBTyxFQUFBK0osd0JBQXdCUCxRQUFReEosSUFBUyxHQUdwQyxFQUFBa0ssc0JBQXdCLENBQUMsRUFBQWhCLGVBQ3RDLGtDQUF1Q2xKLEdBQ3RDLE9BQU8sRUFBQWtLLHNCQUFzQlYsUUFBUXhKLElBQVMsR0FHL0MsYUFJQSxjQUlBLDZCQUFrQ04sR0FDakMsT0FBT29KLEVBQVVwSixJQUFXQSxFQUFRLEdBR3JDLG9CQUF5QkEsR0FDeEIsTUFBd0IsaUJBQVZBLEdBR2YsbUJBQXdCQSxHQUN2QixPQUFPbUMsTUFBTXNJLFFBQVF6SyxLLG9ZQ2hEVCxFQUFBc0osV0FBYSxhQUNiLEVBQUFDLE1BQVEsUUFDUixFQUFBQyxjQUFnQixnQkFDaEIsRUFBQUMsS0FBTyxPQUNQLEVBQUFDLGVBQWlCLGlCQUNqQixFQUFBQyxNQUFRLFFBQ1IsRUFBQUMsYUFBZSxlQUNmLEVBQUFDLElBQU0sTUFFTixFQUFBRyxPQUFTLFNBQ1QsRUFBQUMsUUFBVSxVQUVWLEVBQUFHLE9BQVMsU0FDVCxFQUFBRCxjQUFnQixnQkFHaEIsRUFBQUcsSUFBTSxNQUNOLEVBQUFDLEtBQU8sT0FXUCxFQUFBRyxNQUFRLFNBQ1IsRUFBQUMsTUFBUSxNQUlSLEVBQUFDLGlCQUFtQixLQUNuQixFQUFBQyxpQkFBbUIsS0FDbkIsRUFBQUMsaUJBQW1CLEtBQ25CLEVBQUFDLGlCQUFtQixLQUNuQixFQUFBQyxlQUFpQixLQUNqQixFQUFBQyxlQUFpQixLQUNqQixFQUFBQyxlQUFpQixLQUNqQixFQUFBQyxlQUFpQixNLCtGQ3hDOUIsYUFDQSxTQUNBLFNBS0EsU0FRQSxTQVNBLGFBb0NDLFdBQ0NDLEdBL0JPLEtBQUFDLFlBQWMsRUFFTCxLQUFBQyxRQUE2QixHQTZDckMsSUFBQUMsRUFBZ0ZILEVBQU0sR0FBbEZJLEVBQTRFSixFQUFNLGNBQW5FSyxFQUE2REwsRUFBTSxLQUE3RE0sRUFBdUROLEVBQU0sV0FBakQ5SyxFQUEyQzhLLEVBQU0sS0FBM0NPLEVBQXFDUCxFQUFNLGNBQTVCckosRUFBc0JxSixFQUFNLEtBQXRCUSxFQUFnQlIsRUFBTSxZQVE5RixHQUxBN0osS0FBS2tLLEtBQU9BLEVBQ1psSyxLQUFLZ0ssR0FBS0EsRUFDVmhLLEtBQUtpSyxjQUFnQkEsR0FHaEIsRUFBQUssa0JBQWtCRixJQUFrQkEsRUFBZ0IsRUFDeEQsTUFBTSxJQUFJRyxNQUFNLHlCQUF5QkgsRUFBYSxtQkFBbUJGLEVBQUksTUFFOUVsSyxLQUFLb0ssY0FBZ0JBLEVBR3JCLElBQU10SSxJQUFhK0gsRUFBTy9ILFNBQzFCOUIsS0FBSzhCLFNBQVdBLEVBR1YsTUFBNEIwSSxFQUFVQyxTQUFTTixFQUFZRCxHQUF6RG5LLEVBQU0sU0FBRTJLLEVBQUssUUFBRUMsRUFBTSxTQUU3QixHQURBM0ssS0FBS0QsT0FBU0EsR0FDVCxFQUFBdUssa0JBQWtCSSxHQUN0QixNQUFNLElBQUlILE1BQU0saUJBQWlCRyxFQUFLLG1CQUFtQlIsRUFBSSxNQUc5RCxHQURBbEssS0FBSzBLLE1BQVFBLEdBQ1IsRUFBQUosa0JBQWtCSyxHQUN0QixNQUFNLElBQUlKLE1BQU0sa0JBQWtCSSxFQUFNLG1CQUFtQlQsRUFBSSxNQUVoRWxLLEtBQUsySyxPQUFTQSxFQUlkLElBQU1DLE9BQTJCcE0sSUFBbEJxTCxFQUFPZSxPQUF1QmYsRUFBT2UsT0FBVTdLLEVBQVMsRUFBQTJJLFFBQVUsRUFBQUQsT0FDakYsSUFBSyxFQUFBb0Msa0JBQWtCRCxHQUN0QixNQUFNLElBQUlMLE1BQU0sbUJBQW1CSyxFQUFNLG1CQUFtQlYsRUFBSSxjQUFjLEVBQUExQixpQkFBaUIvQixLQUFLLE1BQUssS0FFMUd6RyxLQUFLNEssT0FBU0EsRUFHZCxJQUFNRSxPQUF5QnRNLElBQWpCcUwsRUFBT2lCLE1BQXNCakIsRUFBT2lCLE1BQVEsRUFBQWxDLGNBQzFELElBQUssRUFBQW1DLGdCQUFnQkQsR0FDcEIsTUFBTSxJQUFJUCxNQUFNLGtCQUFrQk8sRUFBSyxtQkFBbUJaLEVBQUksY0FBYyxFQUFBdkIsZUFBZWxDLEtBQUssTUFBSyxLQUV0R3pHLEtBQUs4SyxNQUFRQSxFQUNiLElBQU1FLE9BQXlCeE0sSUFBakJxTCxFQUFPbUIsTUFBc0JuQixFQUFPbUIsTUFBUSxFQUFBcEMsY0FDMUQsSUFBSyxFQUFBbUMsZ0JBQWdCQyxHQUNwQixNQUFNLElBQUlULE1BQU0sa0JBQWtCUyxFQUFLLG1CQUFtQmQsRUFBSSxjQUFjLEVBQUF2QixlQUFlbEMsS0FBSyxNQUFLLEtBS3RHLEdBSEF6RyxLQUFLZ0wsTUFBUUEsR0FHUixFQUFBQyxnQkFBZ0JsTSxHQUNwQixNQUFNLElBQUl3TCxNQUFNLGdCQUFnQnhMLEVBQUksbUJBQW1CbUwsRUFBSSxxQkFBcUIsRUFBQXBDLGVBQWVyQixLQUFLLE1BQUssS0FFMUd6RyxLQUFLakIsS0FBT0EsRUFDWixJQUFNbU0sRUFBZVYsRUFBVVcsZ0JBQWdCLENBQzlDbkIsR0FBRSxFQUNGakwsS0FBSSxFQUNKc0wsWUFBVyxFQUNYdkksU0FBUSxFQUNSOEksT0FBTSxFQUNOVixLQUFJLEVBQ0pELGNBQWEsSUFFZGpLLEtBQUtrTCxhQUFlQSxFQUVkLE1BS0ZWLEVBQVVZLHVCQUF1QixDQUNwQ3BCLEdBQUUsRUFDRkUsS0FBSSxFQUNKRSxjQUFhLEVBQ2J0SSxTQUFRLEVBQ1JvSixhQUFZLEVBQ1piLFlBQVcsRUFDWEosY0FBYSxJQVhib0IsRUFBUSxXQUNSQyxFQUFnQixtQkFDaEJDLEVBQU0sU0FDTkMsRUFBYSxnQkFVZHhMLEtBQUtzTCxpQkFBbUJBLEVBQ3hCdEwsS0FBS3FMLFNBQVdBLEVBQ2hCckwsS0FBS3VMLE9BQVNBLEVBQ2R2TCxLQUFLd0wsY0FBZ0JBLEVBR3JCeEwsS0FBS3lMLGVBQWlCakIsRUFBVWtCLGtCQUFrQixDQUFFMUIsR0FBRSxFQUFFWSxPQUFNLEVBQUVNLGFBQVksRUFBRWhCLEtBQUksRUFBRUQsY0FBYSxJQUNqR2pLLEtBQUsyTCxTQUFXM0IsRUFBR2hLLEtBQUt5TCxnQkFDeEJ6TCxLQUFLNEwsY0FBZ0JwQixFQUFVcUIsZ0JBQWdCLENBQUU3QixHQUFFLEVBQUU4QixLQUFNaEIsRUFBT1osS0FBSSxJQUN0RWxLLEtBQUsrTCxRQUFVL0IsRUFBR2hLLEtBQUs0TCxlQUN2QjVMLEtBQUtnTSxjQUFnQnhCLEVBQVVxQixnQkFBZ0IsQ0FBRTdCLEdBQUUsRUFBRThCLEtBQU1kLEVBQU9kLEtBQUksSUFDdEVsSyxLQUFLaU0sUUFBVWpDLEVBQUdoSyxLQUFLZ00sZUFHdkIsSUFBTUUsT0FBbUMxTixJQUF0QnFMLEVBQU9xQyxXQUEyQnJDLEVBQU9xQyxXQUFhLEVBQ3pFLElBQUssRUFBQTVCLGtCQUFrQjRCLEdBQ3RCLE1BQU0sSUFBSTNCLE1BQU0sdUJBQXVCMkIsRUFBVSxtQkFBbUJoQyxFQUFJLGdDQUV6RWxLLEtBQUtrTSxXQUFhQSxFQUVsQmxNLEtBQUttTSxZQUFZM0wsR0FpMEJuQixPQTl6QmdCLEVBQUFpSyxTQUFmLFNBQXdCTixFQUF1Q0QsR0FDOUQsSUFBSW5LLEVBQVEySyxFQUFPQyxFQUNuQixHQUFLekksTUFBTWlJLEdBY0osQ0FFTixHQURBTyxFQUFTUCxFQUFnQyxJQUNwQyxFQUFBRyxrQkFBa0JJLEdBQ3RCLE1BQU0sSUFBSUgsTUFBTSxpQkFBaUJHLEVBQUssbUJBQW1CUixFQUFJLE1BRzlELEdBREFTLEVBQVVSLEVBQWdDLElBQ3JDLEVBQUFHLGtCQUFrQkssR0FDdEIsTUFBTSxJQUFJSixNQUFNLGtCQUFrQkksRUFBTSxtQkFBbUJULEVBQUksVUFyQi9CLENBQ2pDLElBQUssRUFBQUksa0JBQWtCSCxHQUN0QixNQUFNLElBQUlJLE1BQU0sa0JBQWtCSixFQUFVLG1CQUFtQkQsRUFBSSxNQU1wRSxJQUZBLElBQUlrQyxFQUFNLEVBQ05DLEVBSEp0TSxFQUFTb0ssRUFJRmtDLEVBQVksR0FDbEJELElBQ0FDLEdBQWEsRUFFZDNCLEVBQVF2SSxLQUFLbUssSUFBSSxFQUFHbkssS0FBS29LLE1BQU1ILEVBQU0sR0FBS0EsRUFBTSxHQUNoRHpCLEVBQVN4SSxLQUFLbUssSUFBSSxFQUFHbkssS0FBS29LLE1BQU1ILEVBQUksSUFXckMsTUFBTyxDQUFFMUIsTUFBSyxFQUFFQyxPQUFNLEVBQUU1SyxPQUFNLElBR2hCLEVBQUE4TCxnQkFBZixTQUNDaEMsR0FNUSxJQUFBRyxFQUFtQkgsRUFBTSxHQUFyQmlDLEVBQWVqQyxFQUFNLEtBQWZLLEVBQVNMLEVBQU0sS0FFakMsT0FBSSxFQUFBMkMsU0FBU3hDLElBSVQ4QixJQUFTLEVBQUFsRCxlQUdSLEVBQUE0RCxTQUFTeEMsR0FOTjhCLEdBZ0JQVyxRQUFRQyxLQUFLLHlEQUF5RHhDLEVBQUksa0JBQ25FLEVBQUF0QixnQkFLTSxFQUFBOEMsa0JBQWYsU0FDQzdCLEdBUVEsSUFBQUcsRUFBMENILEVBQU0sR0FBNUNJLEVBQXNDSixFQUFNLGNBQTdCcUIsRUFBdUJyQixFQUFNLGFBQWZLLEVBQVNMLEVBQU0sS0FDbERlLEVBQVdmLEVBQU0sT0FDdkIsT0FBSWUsSUFBVyxFQUFBbEMsVUFLWHdDLElBQWlCLEVBQUFuRCxhQUVGLEVBQUE0RSxhQUFhM0MsRUFBSSxFQUFBNEMsOEJBQStCM0MsR0FBZSxJQUM3RSxFQUFBMEMsYUFBYTNDLEVBQUksRUFBQTZDLHlCQUEwQjVDLEdBQWUsS0FFN0R3QyxRQUFRQyxLQUFLLGlEQUFpRHhDLEVBQUksTUFFbEVVLEVBQVMsRUFBQWxDLFVBRUx3QyxJQUFpQixFQUFBbEQsUUFDSixFQUFBMkUsYUFBYTNDLEVBQUksRUFBQTZDLHlCQUEwQjVDLEdBQWUsS0FFM0V3QyxRQUFRQyxLQUFLLGlEQUFpRHhDLEVBQUksTUFFbEVVLEVBQVMsRUFBQWxDLFdBakJIa0MsR0F1Qk0sRUFBQU8sZ0JBQWYsU0FDQ3RCLEdBVVEsSUFBQUcsRUFBbURILEVBQU0sR0FBckRJLEVBQStDSixFQUFNLGNBQXRDL0gsRUFBZ0MrSCxFQUFNLFNBQTVCSyxFQUFzQkwsRUFBTSxLQUF0QlEsRUFBZ0JSLEVBQU0sWUFFN0RxQixFQURhckIsRUFBTSxLQTJEdkIsT0F4RGdCVyxFQUFVc0MseUJBQXlCakQsS0FFOUNxQixJQUFpQixFQUFBakQsZUFBaUJpRCxJQUFpQixFQUFBaEQsS0FFdERnRCxFQUFlLEVBQUFuRCxZQUtYbUQsSUFBaUIsRUFBQTVDLEtBQXdCLEVBQUFELGFBRzdDb0UsUUFBUUMsS0FBSyxnQkFBZ0J4QixFQUFZLDBEQUEwRGhCLEVBQUksOExBRXZHZ0IsRUFBZSxFQUFBbEQsUUFJWixFQUFBd0UsU0FBU3hDLEtBQ1RrQixJQUFpQixFQUFBbEQsUUFDRixFQUFBMkUsYUFBYTNDLEVBQUksRUFBQStDLGtCQUFtQjlDLEdBQWUsS0FFcEV3QyxRQUFRQyxLQUFLLHVFQUF1RXhDLEVBQUksTUFDeEZnQixFQUFlLEVBQUFuRCxZQVFaakcsSUFDVzBJLEVBQVV3QyxxQkFBcUIsQ0FBRWhELEdBQUUsRUFBRWpMLEtBQU1tTSxFQUFjYixZQUFXLEtBQ3BFYSxJQUFpQixFQUFBbkQsYUFDOUIwRSxRQUFRQyxLQUFLLDhGQUE4RnhDLEVBQUksTUFDL0dnQixFQUFlLEVBQUFuRCxjQUtkbUQsSUFBaUIsRUFBQW5ELGFBQ3BCLEVBQUE0RSxhQUFhM0MsRUFBSSxFQUFBaUQsdUJBQXdCaEQsR0FFckNuSSxJQUNXMEksRUFBVXdDLHFCQUFxQixDQUFFaEQsR0FBRSxFQUFFakwsS0FBTW1NLEVBQWNiLFlBQVcsS0FFakZKLEVBQWMsc0VBT2RuSSxHQUFZLEVBQUEwSyxTQUFTeEMsS0FBUWtCLElBQWlCLEVBQUFuRCxZQUFjbUQsSUFBaUIsRUFBQWxELFFBQ2hGLEVBQUEyRSxhQUFhM0MsRUFBSSxFQUFBa0QsdUJBQXdCakQsR0FFbkNpQixHQUdPLEVBQUE0Qix5QkFBZixTQUNDakQsR0FPUSxJQUFBRyxFQUFrQ0gsRUFBTSxHQUFwQzlLLEVBQThCOEssRUFBTSxLQUE5QmUsRUFBd0JmLEVBQU0sT0FDaEQsT0FEMENBLEVBQU0sY0FDNUIsRUFBQVYsUUFBUyxFQUFBcUQsU0FBU3hDLE1BRWxDakwsSUFBUyxFQUFBa0osZUFBaUIyQyxJQUFXLEVBQUFuQyxRQU1sQzFKLElBQVMsRUFBQW1KLE1BQVFuSixJQUFTLEVBQUFxSixPQUFTckosSUFBUyxFQUFBdUosS0FBT3ZKLElBQVMsRUFBQW9KLGdCQUFrQnBKLElBQVMsRUFBQXNKLGVBR2hGLEVBQUErQyx1QkFBZixTQUNDdkIsR0FVUSxJQUVKMEIsRUFDSEYsRUFDQUMsRUFDQUUsRUFMT3hCLEVBQWdGSCxFQUFNLEdBQWxGSSxFQUE0RUosRUFBTSxjQUFuRUssRUFBNkRMLEVBQU0sS0FBN0RPLEVBQXVEUCxFQUFNLGNBQTlDcUIsRUFBd0NyQixFQUFNLGFBQWhDL0gsRUFBMEIrSCxFQUFNLFNBQXRCUSxFQUFnQlIsRUFBTSxZQU85RixHQUFJLEVBQUEyQyxTQUFTeEMsR0FBSyxDQVVqQixHQVRBd0IsRUFBZ0JwQixFQU1NLElBQWxCQSxHQUF1QnRJLElBQzFCMEosRUFBZ0IsR0FFYk4sSUFBaUIsRUFBQWxELE9BQVNrRCxJQUFpQixFQUFBbkQsV0FDOUMsT0FBUXlELEdBQ1AsS0FBSyxFQUNKSCxFQUFZckIsRUFBOEJtRCxJQUMxQyxNQUNELEtBQUssRUFDSjlCLEVBQVlyQixFQUE4Qm9ELEdBQzFDLE1BQ0QsS0FBSyxFQUNKL0IsRUFBV3JCLEVBQUdqQixJQUNkLE1BQ0QsS0FBSyxFQUNKc0MsRUFBV3JCLEVBQUdoQixLQUNkLE1BQ0QsUUFDQyxNQUFNLElBQUl1QixNQUFNLDZCQUE2QmlCLEVBQWEsbUJBQW1CdEIsRUFBSSxXQUU3RSxHQUFJRyxJQUFnQixFQUFBakIsT0FBUzhCLElBQWlCLEVBQUFqRCxjQUNwRCxPQUFRdUQsR0FHUCxLQUFLLEVBQ0osSUFBSzFKLEVBQVUsQ0FDZHVKLEVBQVdyQixFQUFHcUQsTUFDZCxNQUVGLEtBQUssRUFDSixJQUFLdkwsRUFBVSxDQUNkdUosRUFBV3JCLEVBQUdzRCxnQkFDZCxNQUVGLEtBQUssRUFDSmpDLEVBQVdyQixFQUFHakIsSUFDZHlDLEVBQWdCLEVBQ2hCLE1BQ0QsS0FBSyxFQUNKSCxFQUFXckIsRUFBR2hCLEtBQ2R3QyxFQUFnQixFQUNoQixNQUNELFFBQ0MsTUFBTSxJQUFJakIsTUFBTSw2QkFBNkJpQixFQUFhLG1CQUFtQnRCLEVBQUksV0FHbkYsT0FBUXNCLEdBQ1AsS0FBSyxFQUNKSCxFQUFZckIsRUFBOEJ1RCxZQUMxQyxNQUNELEtBQUssRUFDSmxDLEVBQVlyQixFQUE4QndELFdBQzFDLE1BQ0QsS0FBSyxFQUNKbkMsRUFBWXJCLEVBQThCeUQsWUFDMUMsTUFDRCxLQUFLLEVBQ0pwQyxFQUFZckIsRUFBOEIwRCxhQUMxQyxNQUNELFFBQ0MsTUFBTSxJQUFJbkQsTUFBTSw2QkFBNkJpQixFQUFhLG1CQUFtQnRCLEVBQUksTUFHcEYsT0FBUWdCLEdBQ1AsS0FBSyxFQUFBbkQsV0FFSixPQURBd0QsRUFBVXZCLEVBQThCakMsV0FDaEN5RCxHQUNQLEtBQUssRUFDSkYsRUFBb0J0QixFQUE4QjJELEtBQ2xELE1BQ0QsS0FBSyxFQUNKckMsRUFBb0J0QixFQUE4QjRELE1BQ2xELE1BQ0QsS0FBSyxFQUNKdEMsRUFBb0J0QixFQUE4QjZELE9BQ2xELE1BQ0QsS0FBSyxFQUNKdkMsRUFBb0J0QixFQUE4QjhELFFBQ2xELE1BQ0QsUUFDQyxNQUFNLElBQUl2RCxNQUFNLDZCQUE2QmlCLEVBQWEsbUJBQW1CdEIsRUFBSSxNQUVuRixNQUNELEtBQUssRUFBQWxDLE1BRUosT0FEQXVELEVBQVV2QixFQUE4QmhDLE1BQ2hDd0QsR0FDUCxLQUFLLEVBQ0pGLEVBQW9CdEIsRUFBOEIrRCxLQUNsRCxNQUNELEtBQUssRUFDSnpDLEVBQW9CdEIsRUFBOEJnRSxNQUNsRCxNQUNELEtBQUssRUFDSjFDLEVBQW9CdEIsRUFBOEJpRSxPQUNsRCxNQUNELEtBQUssRUFDSjNDLEVBQW9CdEIsRUFBOEJrRSxRQUNsRCxNQUNELFFBQ0MsTUFBTSxJQUFJM0QsTUFBTSw2QkFBNkJpQixFQUFhLG1CQUFtQnRCLEVBQUksTUFFbkYsTUFDRCxLQUFLLEVBQUFqQyxjQUVKLEdBREFzRCxFQUFTdkIsRUFBRy9CLGNBQ1JvQyxJQUFnQixFQUFBakIsT0FBUzhCLElBQWlCLEVBQUFqRCxjQUM3Q3FELEVBQW1CRCxPQUVuQixPQUFRRyxHQUNQLEtBQUssRUFDSkYsRUFBb0J0QixFQUE4Qm1FLEtBQ2xELE1BQ0QsS0FBSyxFQUNKN0MsRUFBb0J0QixFQUE4Qm9FLE1BQ2xELE1BQ0QsS0FBSyxFQUNKOUMsRUFBb0J0QixFQUE4QnFFLE9BQ2xELE1BQ0QsS0FBSyxFQUNKL0MsRUFBb0J0QixFQUE4QnNFLFFBQ2xELE1BQ0QsUUFDQyxNQUFNLElBQUkvRCxNQUFNLDZCQUE2QmlCLEVBQWEsbUJBQW1CdEIsRUFBSSxNQUdwRixNQUNELEtBQUssRUFBQWhDLEtBRUosT0FEQXFELEVBQVN2QixFQUFHOUIsS0FDSnNELEdBQ1AsS0FBSyxFQUNKRixFQUFvQnRCLEVBQThCdUUsSUFDbEQsTUFDRCxLQUFLLEVBQ0pqRCxFQUFvQnRCLEVBQThCd0UsS0FDbEQsTUFDRCxLQUFLLEVBQ0psRCxFQUFvQnRCLEVBQThCeUUsTUFDbEQsTUFDRCxLQUFLLEVBQ0puRCxFQUFvQnRCLEVBQThCMEUsT0FDbEQsTUFDRCxRQUNDLE1BQU0sSUFBSW5FLE1BQU0sNkJBQTZCaUIsRUFBYSxtQkFBbUJ0QixFQUFJLE1BRW5GLE1BQ0QsS0FBSyxFQUFBOUIsTUFFSixPQURBbUQsRUFBU3ZCLEVBQUc1QixNQUNKb0QsR0FDUCxLQUFLLEVBQ0pGLEVBQW9CdEIsRUFBOEIyRSxLQUNsRCxNQUNELEtBQUssRUFDSnJELEVBQW9CdEIsRUFBOEI0RSxNQUNsRCxNQUNELEtBQUssRUFDSnRELEVBQW9CdEIsRUFBOEI2RSxPQUNsRCxNQUNELEtBQUssRUFDSnZELEVBQW9CdEIsRUFBOEI4RSxRQUNsRCxNQUNELFFBQ0MsTUFBTSxJQUFJdkUsTUFBTSw2QkFBNkJpQixFQUFhLG1CQUFtQnRCLEVBQUksTUFFbkYsTUFDRCxLQUFLLEVBQUEvQixlQUVKLE9BREFvRCxFQUFTdkIsRUFBRzdCLGVBQ0pxRCxHQUNQLEtBQUssRUFDSkYsRUFBb0J0QixFQUE4QitFLE1BQ2xELE1BQ0QsS0FBSyxFQUNKekQsRUFBb0J0QixFQUE4QmdGLE9BQ2xELE1BQ0QsS0FBSyxFQUNKMUQsRUFBb0J0QixFQUE4QmlGLFFBQ2xELE1BQ0QsS0FBSyxFQUNKM0QsRUFBb0J0QixFQUE4QmtGLFNBQ2xELE1BQ0QsUUFDQyxNQUFNLElBQUkzRSxNQUFNLDZCQUE2QmlCLEVBQWEsbUJBQW1CdEIsRUFBSSxNQUVuRixNQUNELEtBQUssRUFBQTVCLElBRUosT0FEQWlELEVBQVN2QixFQUFHMUIsSUFDSmtELEdBQ1AsS0FBSyxFQUNKRixFQUFvQnRCLEVBQThCbUYsS0FDbEQsTUFDRCxLQUFLLEVBQ0o3RCxFQUFvQnRCLEVBQThCb0YsTUFDbEQsTUFDRCxLQUFLLEVBQ0o5RCxFQUFvQnRCLEVBQThCcUYsT0FDbEQsTUFDRCxLQUFLLEVBQ0ovRCxFQUFvQnRCLEVBQThCc0YsUUFDbEQsTUFDRCxRQUNDLE1BQU0sSUFBSS9FLE1BQU0sNkJBQTZCaUIsRUFBYSxtQkFBbUJ0QixFQUFJLE1BRW5GLE1BQ0QsS0FBSyxFQUFBN0IsYUFFSixPQURBa0QsRUFBU3ZCLEVBQUczQixhQUNKbUQsR0FDUCxLQUFLLEVBQ0pGLEVBQW9CdEIsRUFBOEJ1RixNQUNsRCxNQUNELEtBQUssRUFDSmpFLEVBQW9CdEIsRUFBOEJ3RixPQUNsRCxNQUNELEtBQUssRUFDSmxFLEVBQW9CdEIsRUFBOEJ5RixRQUNsRCxNQUNELEtBQUssRUFDSm5FLEVBQW9CdEIsRUFBOEIwRixTQUNsRCxNQUNELFFBQ0MsTUFBTSxJQUFJbkYsTUFBTSw2QkFBNkJpQixFQUFhLG1CQUFtQnRCLEVBQUksTUFFbkYsTUFDRCxRQUNDLE1BQU0sSUFBSUssTUFBTSxvQkFBb0JXLEVBQVksbUJBQW1CaEIsRUFBSSxXQUVuRSxDQUNOLE9BQVFFLEdBRVAsS0FBSyxFQUNKLElBQUt0SSxFQUFVLENBQ2R1SixFQUFXckIsRUFBR3FELE1BQ2QsTUFFRixLQUFLLEVBQ0osSUFBS3ZMLEVBQVUsQ0FDZHVKLEVBQVdyQixFQUFHc0QsZ0JBQ2QsTUFFRixLQUFLLEVBQ0pqQyxFQUFXckIsRUFBR2pCLElBQ2R1QyxFQUFtQnRCLEVBQUdqQixJQUN0QnlDLEVBQWdCLEVBQ2hCLE1BQ0QsS0FBSyxFQUNKSCxFQUFXckIsRUFBR2hCLEtBQ2RzQyxFQUFtQnRCLEVBQUdoQixLQUN0QndDLEVBQWdCLEVBQ2hCLE1BQ0QsUUFDQyxNQUFNLElBQUlqQixNQUFNLDZCQUE2QkgsRUFBYSxtQkFBbUJGLEVBQUksTUFFbkYsT0FBUWdCLEdBQ1AsS0FBSyxFQUFBbEQsTUFDSnVELEVBQVN2QixFQUFHaEMsTUFDWixNQUNELEtBQUssRUFBQUQsV0FDSndELEVBQVV2QixFQUE4QmpDLFlBQWMsRUFBQTRFLGFBQWEzQyxFQUFJLEVBQUFpRCx1QkFBd0JoRCxHQUFlMEYsZUFDOUcsTUFDRCxLQUFLLEVBQUExSCxjQUNKc0QsRUFBU3ZCLEVBQUcvQixjQUNaLE1BRUQsUUFDQyxNQUFNLElBQUlzQyxNQUFNLG9CQUFvQlcsRUFBWSxnQ0FBZ0NoQixFQUFJLE9BS3ZGLFFBQWUxTCxJQUFYK00sUUFBcUMvTSxJQUFiNk0sUUFBK0M3TSxJQUFyQjhNLEVBQWdDLENBQ3JGLElBQU1zRSxFQUFnQixHQUl0QixXQUhlcFIsSUFBWCtNLEdBQXNCcUUsRUFBYzdPLEtBQUssZUFDNUJ2QyxJQUFiNk0sR0FBd0J1RSxFQUFjN08sS0FBSyxpQkFDdEJ2QyxJQUFyQjhNLEdBQWdDc0UsRUFBYzdPLEtBQUssb0JBQ2pELElBQUl3SixNQUFNLGlCQUFpQlcsRUFBWSxzQkFBc0JkLEVBQWEsOEJBQTZCd0YsRUFBYzdQLE9BQVMsRUFBSSxJQUFNLElBQUUsSUFBSTZQLEVBQWNuSixLQUFLLE1BQUssbUJBQW1CeUQsRUFBSSxNQUVwTSxRQUFzQjFMLElBQWxCZ04sR0FBK0JwQixFQUFnQixHQUFLQSxFQUFnQixHQUFLb0IsRUFBZ0JwQixFQUM1RixNQUFNLElBQUlHLE1BQU0sdUJBQXVCaUIsRUFBYSxzQkFBc0JwQixFQUFhLG1CQUFtQkYsRUFBSSxNQUcvRyxNQUFPLENBQ05tQixTQUFRLEVBQ1JDLGlCQUFnQixFQUNoQkMsT0FBTSxFQUNOQyxjQUFhLElBSUEsRUFBQXdCLHFCQUFmLFNBQ0NuRCxHQU1RLElBQUFHLEVBQTBCSCxFQUFNLEdBQTVCOUssRUFBc0I4SyxFQUFNLEtBQXRCUSxFQUFnQlIsRUFBTSxZQUNsQ2dHLEVBQVU3RixFQUFHOEYsZ0JBQ25CLElBQUtELEVBQ0osT0FBTyxFQUVSN0YsRUFBRytGLFlBQVkvRixFQUFHZ0csV0FBWUgsR0FHOUIsSUFBTS9FLEVBQVFkLEVBQUcsRUFBQXBCLGVBQ1hvQyxFQUFRaEIsRUFBRyxFQUFBcEIsZUFDWGdDLEVBQVNaLEVBQUcsRUFBQXRCLFNBS2xCc0IsRUFBR2lHLGNBQWNqRyxFQUFHZ0csV0FBWWhHLEVBQUdrRyxlQUFnQnBGLEdBQ25EZCxFQUFHaUcsY0FBY2pHLEVBQUdnRyxXQUFZaEcsRUFBR21HLGVBQWdCbkYsR0FDbkRoQixFQUFHaUcsY0FBY2pHLEVBQUdnRyxXQUFZaEcsRUFBR29HLG1CQUFvQnhGLEdBQ3ZEWixFQUFHaUcsY0FBY2pHLEVBQUdnRyxXQUFZaEcsRUFBR3FHLG1CQUFvQnpGLEdBRWpELE1BQXlDSixFQUFVWSx1QkFBdUIsQ0FDL0VwQixHQUFFLEVBQ0ZFLEtBQU0sdUJBQ05FLGNBQWUsRUFDZnRJLFVBQVUsRUFDVm9KLGFBQWNuTSxFQUNkc0wsWUFBVyxFQUNYSixjQUFlLGVBUFJxQixFQUFnQixtQkFBRUQsRUFBUSxXQUFFRSxFQUFNLFNBUzFDdkIsRUFBR3NHLFdBQVd0RyxFQUFHZ0csV0FBWSxFQUFHMUUsRUFoQmxCLElBQ0MsSUFla0QsRUFBR0QsRUFBVUUsRUFBUSxNQUd0RixJQUFNZ0YsRUFBY3ZHLEVBQUd3RyxvQkFDdkIsSUFBS0QsRUFHSixPQURBdkcsRUFBR3lHLGNBQWNaLElBQ1YsRUFFUjdGLEVBQUcwRyxnQkFBZ0IxRyxFQUFHMkcsWUFBYUosR0FFbkN2RyxFQUFHNEcscUJBQXFCNUcsRUFBRzJHLFlBQWEzRyxFQUFHNkcsa0JBQW1CN0csRUFBR2dHLFdBQVlILEVBQVMsR0FFdEYsSUFDTWlCLEVBRFM5RyxFQUFHK0csdUJBQXVCL0csRUFBRzJHLGVBQ2IzRyxFQUFHZ0gscUJBTWxDLE9BSEFoSCxFQUFHeUcsY0FBY1osR0FDakI3RixFQUFHaUgsa0JBQWtCVixHQUVkTyxHQUdBLFlBQUFJLGtCQUFSLFNBQ0NDLEdBRUEsR0FBS0EsRUFBTCxDQUdNLE1BQW9GblIsS0FBbEYwSyxFQUFLLFFBQUVDLEVBQU0sU0FBRTVLLEVBQU0sU0FBRXFLLEVBQWEsZ0JBQUVvQixFQUFhLGdCQUFFek0sRUFBSSxPQUFFbU0sRUFBWSxlQUFFaEIsRUFBSSxPQUdyRixHQUFLbkssR0FBVW9SLEVBQU1wUixTQUFXQSxFQUFTcUssSUFBb0JySyxHQUFVb1IsRUFBTXBSLFNBQVcySyxFQUFRQyxFQUFTUCxFQUN4RyxNQUFNLElBQUlHLE1BQU0sdUJBQXVCNEcsRUFBTXBSLE9BQU0sbUJBQW1CbUssRUFBSSxjQUFhbkssR0FBcUIySyxFQUFLLElBQUlDLEdBQVEsSUFBSVAsRUFBYSxLQUkvSSxJQUFJZ0gsR0FBbUIsRUFDdkIsT0FBUXJTLEdBQ1AsS0FBSyxFQUFBZ0osV0FHTCxLQUFLLEVBQUFDLE1BQ0pvSixFQUFtQkEsR0FBb0JELEVBQU1FLGNBQWdCelUsYUFDN0QsTUFDRCxLQUFLLEVBQUFxTCxjQUNKbUosRUFBbUJBLEdBQW9CRCxFQUFNRSxjQUFnQnhQLFdBQzdELE1BQ0QsS0FBSyxFQUFBcUcsS0FDSmtKLEVBQW1CQSxHQUFvQkQsRUFBTUUsY0FBZ0JDLFVBQzdELE1BQ0QsS0FBSyxFQUFBbkosZUFDSmlKLEVBQW1CQSxHQUFvQkQsRUFBTUUsY0FBZ0J2TSxZQUM3RCxNQUNELEtBQUssRUFBQXNELE1BQ0pnSixFQUFtQkEsR0FBb0JELEVBQU1FLGNBQWdCRSxXQUM3RCxNQUNELEtBQUssRUFBQWxKLGFBQ0orSSxFQUFtQkEsR0FBb0JELEVBQU1FLGNBQWdCdlUsWUFDN0QsTUFDRCxLQUFLLEVBQUF3TCxJQUNKOEksRUFBbUJBLEdBQW9CRCxFQUFNRSxjQUFnQkcsV0FDN0QsTUFDRCxRQUNDLE1BQU0sSUFBSWpILE1BQU0sNEJBQTRCTCxFQUFJLHlCQUF5Qm5MLEVBQUkscUNBRS9FLEdBQUlxUyxFQUNILE1BQU0sSUFBSTdHLE1BQU0sOEJBQStCNEcsRUFBTUUsWUFBb0JuSCxLQUFJLDJCQUEyQkEsRUFBSSxjQUFjbkwsRUFBSSxNQUcvSCxJQUFJeUIsRUFBTzJRLEVBQ0xNLEVBQVkvRyxFQUFRQyxFQUFTYSxFQUk3QmtHLEVBQWdCbFIsRUFBS1QsU0FBVzBSLEVBRWhDRSxFQUFnQnpHLElBQWlCLEVBQUFuRCxXQUl2QyxHQUZ1QmhKLElBQVNtTSxHQUVWd0csR0FBaUJDLEVBQWUsQ0FDckQsT0FBUXpHLEdBQ1AsS0FBSyxFQUFBbkQsV0FDSnZILEVBQU8sSUFBSXNFLFlBQVkyTSxHQUN2QixNQUNELEtBQUssRUFBQXpKLE1BQ0p4SCxFQUFPLElBQUk1RCxhQUFhNlUsR0FDeEIsTUFDRCxLQUFLLEVBQUF4SixjQUNKekgsRUFBTyxJQUFJcUIsV0FBVzRQLEdBQ3RCLE1BQ0QsS0FBSyxFQUFBdkosS0FDSjFILEVBQU8sSUFBSThRLFVBQVVHLEdBQ3JCLE1BQ0QsS0FBSyxFQUFBdEosZUFDSjNILEVBQU8sSUFBSXNFLFlBQVkyTSxHQUN2QixNQUNELEtBQUssRUFBQXJKLE1BQ0o1SCxFQUFPLElBQUkrUSxXQUFXRSxHQUN0QixNQUNELEtBQUssRUFBQXBKLGFBQ0o3SCxFQUFPLElBQUkxRCxZQUFZMlUsR0FDdkIsTUFDRCxLQUFLLEVBQUFuSixJQUNKOUgsRUFBTyxJQUFJZ1IsV0FBV0MsR0FDdEIsTUFDRixRQUNFLE1BQU0sSUFBSWxILE1BQU0saUJBQWlCTCxFQUFJLCtCQUErQmdCLEVBQVksb0NBSWxGLElBREEsSUFBTXBJLEVBQU82TyxFQUFnQixJQUFJNU8sU0FBU3ZDLEVBQUsvRCxRQUFVLEtBQ2hEUSxFQUFJLEVBQUcyVSxFQUFPVCxFQUFNcFIsT0FBU3FLLEVBQWVuTixFQUFJMlUsRUFBTTNVLElBQzlELElBQUssSUFBSTRVLEVBQUksRUFBR0EsRUFBSXpILEVBQWV5SCxJQUFLLENBQ3ZDLElBQU1wVCxFQUFRMFMsRUFBTWxVLEVBQUltTixFQUFnQnlILEdBQ2xDL1IsRUFBUTdDLEVBQUl1TyxFQUFnQnFHLEVBQzlCRixFQUNILEVBQUF6SyxXQUFXcEUsRUFBTyxFQUFJaEQsRUFBT3JCLEdBQU8sR0FFcEMrQixFQUFLVixHQUFTckIsR0FNbEIsT0FBTytCLElBR0EsWUFBQTJMLFlBQVIsU0FDQ2dGLEdBcUJBLElBbkJNLE1BY0ZuUixLQWJIa0ssRUFBSSxPQUNKZ0MsRUFBVSxhQUNWbEMsRUFBRSxLQUNGVSxFQUFLLFFBQ0xDLEVBQU0sU0FDTlcsRUFBZ0IsbUJBQ2hCRCxFQUFRLFdBQ1JFLEVBQU0sU0FDTkksRUFBUSxXQUNSSSxFQUFPLFVBQ1BFLEVBQU8sVUFDUG5LLEVBQVEsV0FDUm1JLEVBQWEsZ0JBR1J6SixFQUFPUixLQUFLa1Isa0JBQWtCQyxHQUczQmxVLEVBQUksRUFBR0EsRUFBSWlQLEVBQVlqUCxJQUFLLENBQ3BDLElBQU00UyxFQUFVN0YsRUFBRzhGLGdCQUNuQixJQUFLRCxFQUVKLFlBREE1RixFQUFjLHlDQUF5Q0MsRUFBSSxNQUFNRixFQUFHOEgsV0FBVSxLQUcvRTlILEVBQUcrRixZQUFZL0YsRUFBR2dHLFdBQVlILEdBSTlCN0YsRUFBR2lHLGNBQWNqRyxFQUFHZ0csV0FBWWhHLEVBQUdrRyxlQUFnQm5FLEdBQ25EL0IsRUFBR2lHLGNBQWNqRyxFQUFHZ0csV0FBWWhHLEVBQUdtRyxlQUFnQmxFLEdBQ25EakMsRUFBR2lHLGNBQWNqRyxFQUFHZ0csV0FBWWhHLEVBQUdvRyxtQkFBb0J6RSxHQUN2RDNCLEVBQUdpRyxjQUFjakcsRUFBR2dHLFdBQVloRyxFQUFHcUcsbUJBQW9CMUUsR0FFdkQzQixFQUFHc0csV0FBV3RHLEVBQUdnRyxXQUFZLEVBQUcxRSxFQUFrQlosRUFBT0MsRUFBUSxFQUFHVSxFQUFVRSxFQUFRL0ssR0FBYyxNQUVwRyxJQUFNL0QsRUFBMEIsQ0FDL0JvVCxRQUFPLEdBR1IsR0FBSS9OLEVBQVUsQ0FFYixJQUFNeU8sRUFBY3ZHLEVBQUd3RyxvQkFDdkIsSUFBS0QsRUFFSixZQURBdEcsRUFBYyw2Q0FBNkNDLEVBQUksTUFBTUYsRUFBRzhILFdBQVUsS0FHbkY5SCxFQUFHMEcsZ0JBQWdCMUcsRUFBRzJHLFlBQWFKLEdBRW5DdkcsRUFBRzRHLHFCQUFxQjVHLEVBQUcyRyxZQUFhM0csRUFBRzZHLGtCQUFtQjdHLEVBQUdnRyxXQUFZSCxFQUFTLEdBRXRGLElBQU0sRUFBUzdGLEVBQUcrRyx1QkFBdUIvRyxFQUFHMkcsYUFDekMsR0FBVTNHLEVBQUdnSCxzQkFDZi9HLEVBQWMsaURBQWlEQyxFQUFJLE1BQU0sRUFBTSxLQUloRnpOLEVBQU84VCxZQUFjQSxFQUl0QnZRLEtBQUsrSixRQUFRaEosS0FBS3RFLEdBR25CdU4sRUFBRzBHLGdCQUFnQjFHLEVBQUcyRyxZQUFhLE9BR3BDLFlBQUFvQix1QkFBQSxXQUNDLE9BQU8vUixLQUFLK0osUUFBUS9KLEtBQUs4SixhQUFhK0YsU0FHdkMsWUFBQW1DLHdCQUFBLFNBQXdCbFMsR0FDdkIsUUFEdUIsSUFBQUEsT0FBUyxHQUNSLElBQXBCRSxLQUFLa00sV0FDUixNQUFNLElBQUkzQixNQUFNLHFEQUFxRHZLLEtBQUtrSyxLQUFJLDJCQUUvRSxJQUFNK0gsRUFBZ0JqUyxLQUFLOEosWUFBY2hLLEVBQVFFLEtBQUtrTSxXQUN0RCxHQUFJK0YsRUFBZ0IsR0FBS0EsR0FBaUJqUyxLQUFLa00sV0FDOUMsTUFBTSxJQUFJM0IsTUFBTSxpQkFBaUJ6SyxFQUFLLG1EQUFtREUsS0FBS2tLLEtBQUksU0FBU2xLLEtBQUtrTSxXQUFVLGFBRTNILE9BQU9sTSxLQUFLK0osUUFBUWtJLEdBQWVwQyxTQUdwQyxZQUFBcUMsaUJBQUEsU0FDQ0MsR0FFUSxJQUFBbkksRUFBT2hLLEtBQUksR0FDZm1TLElBRUhuUyxLQUFLOEosYUFBZTlKLEtBQUs4SixZQUFjLEdBQUs5SixLQUFLa00sWUFFMUMsSUFBQXFFLEVBQWdCdlEsS0FBSytKLFFBQVEvSixLQUFLOEosYUFBWSxZQUN0RCxJQUFLeUcsRUFDSixNQUFNLElBQUloRyxNQUFNLGNBQWN2SyxLQUFLa0ssS0FBSSxzQkFFeENGLEVBQUcwRyxnQkFBZ0IxRyxFQUFHMkcsWUFBYUosSUFHcEMsWUFBQTZCLFFBQUEsU0FBUTVSLEdBRVBSLEtBQUtxUyxpQkFDTHJTLEtBQUttTSxZQUFZM0wsSUFHbEIsWUFBQThSLE9BQUEsU0FDQ25JLEVBQ0EzSixHQUVNLE1BQTRCZ0ssRUFBVUMsU0FBU04sRUFBWW5LLEtBQUtrSyxNQUE5RG5LLEVBQU0sU0FBRTJLLEVBQUssUUFBRUMsRUFBTSxTQUM3QjNLLEtBQUtELE9BQVNBLEVBQ2RDLEtBQUswSyxNQUFRQSxFQUNiMUssS0FBSzJLLE9BQVNBLEVBQ2QzSyxLQUFLcVMsaUJBQ0xyUyxLQUFLbU0sWUFBWTNMLElBR2xCLFlBQUFQLE1BQUEsV0FHQ0QsS0FBS3FTLGlCQUNMclMsS0FBS21NLGVBR04sWUFBQW9HLGNBQUEsV0FDQyxNQUFPLENBQ052UyxLQUFLMEssTUFDTDFLLEtBQUsySyxTQUlQLFlBQUE2SCxZQUFBLFdBQ0MsT0FBT3hTLEtBQUsrSixRQUFRL0ksS0FBSSxTQUFBdkUsR0FBVSxPQUFBQSxFQUFPb1QsWUFHMUMsWUFBQTRDLFVBQUEsV0FDQyxJQUFLelMsS0FBS0QsT0FDVCxNQUFNLElBQUl3SyxNQUFNLDRDQUE0Q3ZLLEtBQUtrSyxLQUFJLE1BRXRFLE9BQU9sSyxLQUFLRCxRQUdMLFlBQUFzUyxlQUFSLFdBQ08sSUFBRXJJLEVBQWdCaEssS0FBZCxHQUFFK0osRUFBWS9KLEtBQUwsUUFDbkIrSixFQUFRMkksU0FBUSxTQUFBalcsR0FDUCxJQUFBOFQsRUFBeUI5VCxFQUFNLFlBQWxCb1QsRUFBWXBULEVBQU0sUUFDdkN1TixFQUFHeUcsY0FBY1osR0FDYlUsR0FDSHZHLEVBQUdpSCxrQkFBa0JWLFVBR2Y5VCxFQUFPb1QsZUFDUHBULEVBQU84VCxlQUVmeEcsRUFBUWhLLE9BQVMsR0FHbEIsWUFBQTRTLFFBQUEsV0FDQzNTLEtBQUtxUyx3QkFFRXJTLEtBQUtnSyxVQUVMaEssS0FBS2lLLGVBRWQsRUF6OUJBLEdBQWEsRUFBQU8sYSxnR0N4QmIsYUFDQSxTQVNBLFNBQ01vSSxFQUFrQyxFQUFRLEtBQzFDQyxFQUFrQyxFQUFRLEtBQzFDQyxFQUFrQyxFQUFRLEtBQzFDQyxFQUFrQyxFQUFRLEtBQzFDQyxFQUFpQyxFQUFRLEtBQ3pDQyxFQUFzQyxFQUFRLEtBRTlDQyxFQUF1QixVQUN2QkMsRUFBdUIsVUFDdkJDLEVBQXNCLFNBQ3RCQyxFQUE0QixlQUVsQyxhQWtCQyxXQUNDeEosR0FERCxXQWJpQixLQUFBeUosU0FBd0MsR0ErQmhELElBQUF0SixFQUE0RUgsRUFBTSxHQUE5RUksRUFBd0VKLEVBQU0sY0FBL0RLLEVBQXlETCxFQUFNLEtBQXpEMEosRUFBbUQxSixFQUFNLGVBQXpDUSxFQUFtQ1IsRUFBTSxZQUE1QnlKLEVBQXNCekosRUFBTSxTQUFsQjJKLEVBQVkzSixFQUFNLFFBUzFGLEdBTkE3SixLQUFLZ0ssR0FBS0EsRUFDVmhLLEtBQUtpSyxjQUFnQkEsRUFDckJqSyxLQUFLa0ssS0FBT0EsRUFDWmxLLEtBQUtxSyxZQUFjQSxFQUdZLGlCQUFyQixHQUE2RSxpQkFBcENrSixFQUE0QixHQUFrQixDQUNoRyxJQUFJRSxFQUEwQyxpQkFBckIsRUFDeEJGLEVBQ0NBLEVBQTRCOU0sS0FBSyxNQUMvQitNLElBU0hDLEVBUHNCelYsT0FBTzBILEtBQUs4TixHQUFTeFMsS0FBSSxTQUFBckIsR0FFOUMsSUFBSyxFQUFBK1QsU0FBUy9ULEtBQVMsRUFBQStULFNBQVNGLEVBQVE3VCxJQUN2QyxNQUFNLElBQUk0SyxNQUFNLG9IQUFvSDVLLEVBQUcsYUFBYTZULEVBQVE3VCxHQUFJLEtBRWpLLE1BQU8sV0FBV0EsRUFBRyxJQUFJNlQsRUFBUTdULEdBQUksUUFDbkM4RyxLQUFLLE1BQ3VCZ04sR0FFaEMsSUFBTUUsRUFBUyxFQUFBQyxjQUFjNUosRUFBSUMsRUFBZXdKLEVBQWN6SixFQUFHNkosZ0JBQWlCM0osR0FDbEYsSUFBS3lKLEVBRUosWUFEQTFKLEVBQWMsa0RBQWtEQyxFQUFJLE1BR3JFbEssS0FBS3VULGVBQWlCSSxPQUV0QixHQUFJSCxFQUNILE1BQU0sSUFBSWpKLE1BQU0sd0NBQXdDTCxFQUFJLGtEQUk5RG9KLFdBQVVaLFNBQVEsU0FBQW9CLEdBQ1QsSUFBQTVKLEVBQTBCNEosRUFBTyxLQUEzQnJWLEVBQW9CcVYsRUFBTyxNQUFwQkMsRUFBYUQsRUFBTyxTQUN6QyxFQUFLRSxXQUFXOUosRUFBTXpMLEVBQU9zVixNQXVWaEMsT0FuVlMsWUFBQUUsWUFBUixTQUFvQkMsRUFBMkJDLEdBQ3hDLE1BQWtEblUsS0FBaERnSyxFQUFFLEtBQUV1SixFQUFjLGlCQUFFdEosRUFBYSxnQkFBRXFKLEVBQVEsV0FFN0NjLEVBQVVwSyxFQUFHcUssZ0JBQ25CLEdBQUtELEVBQUwsQ0FXQSxHQU5BcEssRUFBR3NLLGFBQWFGLEVBQVNiLEdBQ3pCdkosRUFBR3NLLGFBQWFGLEVBQVNGLEdBRXpCbEssRUFBR3VLLFlBQVlILEdBRUNwSyxFQUFHd0ssb0JBQW9CSixFQUFTcEssRUFBR3lLLGFBQ25ELENBT0EsSUFEQSxJQUFNQyxFQUFlMVcsT0FBTzBILEtBQUs0TixHQUN4QnJXLEVBQUksRUFBR0EsRUFBSXlYLEVBQWEzVSxPQUFROUMsSUFBSyxDQUM3QyxJQUFNMFgsRUFBY0QsRUFBYXpYLEdBQzNCNlcsRUFBVVIsRUFBU3FCLEdBQ2pCbFcsRUFBZ0JxVixFQUFPLE1BQWhCL1UsRUFBUytVLEVBQU8sS0FDL0I5VCxLQUFLNFUsa0JBQWtCUixFQUFTRCxFQUFhUSxFQUFhbFcsRUFBT00sR0FFbEUsT0FBT3FWLEVBWE5uSyxFQUFjLFlBQVlDLEtBQUkscUJBQXFCRixFQUFHNkssa0JBQWtCVCxTQVp4RW5LLEVBQWMsOEJBQThCQyxLQUFJLE1BMEJsRCxzQkFBSSw2QkFBYyxDLElBQWxCLFdBQ0MsR0FBSWxLLEtBQUs4VSxnQkFBaUIsT0FBTzlVLEtBQUs4VSxnQkFDdEMsUUFBdUN0VyxJQUFuQ3VXLEVBQVdDLG9CQUFtQyxDQUMzQyxNQUEyQ2hWLEtBQXpDZ0ssRUFBRSxLQUFFLEVBQUksT0FBRUMsRUFBYSxnQkFFekJnTCxFQUZzQyxnQkFFRCxFQUFBOUwsTUFBUXlKLEVBQWtDQyxFQUMvRWMsRUFBUyxFQUFBQyxjQUFjNUosRUFBSUMsRUFBZWdMLEVBQW9CakwsRUFBR2tMLGNBQWUsR0FDdEYsSUFBS3ZCLEVBRUosWUFEQTFKLEVBQWMsd0RBQXdELEVBQUksTUFHM0U4SyxFQUFXQyxvQkFBc0JyQixFQUVsQyxJQUFNUyxFQUFVcFUsS0FBS2lVLFlBQVljLEVBQVdDLG9CQUFxQjlCLEdBRWpFLE9BREFsVCxLQUFLOFUsZ0JBQWtCVixFQUNoQnBVLEtBQUs4VSxpQixnQ0FHYixzQkFBSSw2QkFBYyxDLElBQWxCLFdBQ0MsR0FBSTlVLEtBQUttVixnQkFBaUIsT0FBT25WLEtBQUttVixnQkFDdEMsUUFBdUMzVyxJQUFuQ3VXLEVBQVdLLG9CQUFtQyxDQUMzQyxNQUEyQ3BWLEtBQXpDZ0ssRUFBRSxLQUFFLEVBQUksT0FBRUMsRUFBYSxnQkFFekJnTCxFQUZzQyxnQkFFRCxFQUFBOUwsTUFBUTJKLEVBQWtDQyxFQUMvRVksRUFBUyxFQUFBQyxjQUFjNUosRUFBSUMsRUFBZWdMLEVBQW9CakwsRUFBR2tMLGNBQWUsR0FDdEYsSUFBS3ZCLEVBRUosWUFEQTFKLEVBQWMsd0RBQXdELEVBQUksTUFHM0U4SyxFQUFXSyxvQkFBc0J6QixFQUVsQyxJQUFNUyxFQUFVcFUsS0FBS2lVLFlBQVljLEVBQVdLLG9CQUFxQmpDLEdBRWpFLE9BREFuVCxLQUFLbVYsZ0JBQWtCZixFQUNoQnBVLEtBQUttVixpQixnQ0FHYixzQkFBSSw0QkFBYSxDLElBQWpCLFdBQ0MsR0FBSW5WLEtBQUtxVixlQUFnQixPQUFPclYsS0FBS3FWLGVBQ3JDLFFBQXNDN1csSUFBbEN1VyxFQUFXTyxtQkFBa0MsQ0FDMUMsTUFBMkN0VixLQUF6Q2dLLEVBQUUsS0FBRSxFQUFJLE9BQUVDLEVBQWEsZ0JBR3pCZ0wsRUFIc0MsZ0JBR0QsRUFBQTlMLE1BQVFvTSwrQkFBaUN2QyxFQUNwRixRQUEyQnhVLElBQXZCeVcsRUFDSCxNQUFNLElBQUkxSyxNQUFNLHNEQUVqQixJQUFNb0osRUFBUyxFQUFBQyxjQUFjNUosRUFBSUMsRUFBZWdMLEVBQW9CakwsRUFBR2tMLGNBQWUsR0FDdEYsSUFBS3ZCLEVBRUosWUFEQTFKLEVBQWMsdURBQXVELEVBQUksTUFHMUU4SyxFQUFXTyxtQkFBcUIzQixFQUVqQyxJQUFNUyxFQUFVcFUsS0FBS2lVLFlBQVljLEVBQVdPLG1CQUFvQmxDLEdBRWhFLE9BREFwVCxLQUFLcVYsZUFBaUJqQixFQUNmcFUsS0FBS3FWLGdCLGdDQUdiLHNCQUFJLGlDQUFrQixDLElBQXRCLFdBQ0MsR0FBSXJWLEtBQUt3VixvQkFBcUIsT0FBT3hWLEtBQUt3VixvQkFDMUMsUUFBMkNoWCxJQUF2Q3VXLEVBQVdVLHdCQUF1QyxDQUMvQyxNQUEyQ3pWLEtBQXpDZ0ssRUFBRSxLQUFFLEVBQUksT0FBRUMsRUFBYSxnQkFHekJnTCxFQUhzQyxnQkFHRCxFQUFBOUwsTUFBUXVNLG9DQUFzQ3pDLEVBQ3pGLFFBQTJCelUsSUFBdkJ5VyxFQUNILE1BQU0sSUFBSTFLLE1BQU0sMkRBRWpCLElBQU1vSixFQUFTLEVBQUFDLGNBQWM1SixFQUFJQyxFQUFlZ0wsRUFBb0JqTCxFQUFHa0wsY0FBZSxHQUN0RixJQUFLdkIsRUFFSixZQURBMUosRUFBYyw2REFBNkQsRUFBSSxNQUdoRjhLLEVBQVdVLHdCQUEwQjlCLEVBRXRDLElBQU1TLEVBQVVwVSxLQUFLaVUsWUFBWWMsRUFBV1Usd0JBQXlCcEMsR0FFckUsT0FEQXJULEtBQUt3VixvQkFBc0JwQixFQUNwQnBVLEtBQUt3VixxQixnQ0FHYixzQkFBWSw2QkFBYyxDLElBQTFCLFdBQ0MsSUFBTUcsRUFBVyxHQWlCakIsT0FoQkkzVixLQUFLOFUsaUJBQWlCYSxFQUFTNVUsS0FBSyxDQUN2Q3FULFFBQVNwVSxLQUFLOFUsZ0JBQ2RYLFlBQWFqQixJQUVWbFQsS0FBS21WLGlCQUFpQlEsRUFBUzVVLEtBQUssQ0FDdkNxVCxRQUFTcFUsS0FBS21WLGdCQUNkaEIsWUFBYWhCLElBRVZuVCxLQUFLcVYsZ0JBQWdCTSxFQUFTNVUsS0FBSyxDQUN0Q3FULFFBQVNwVSxLQUFLcVYsZUFDZGxCLFlBQWFmLElBRVZwVCxLQUFLd1YscUJBQXFCRyxFQUFTNVUsS0FBSyxDQUMzQ3FULFFBQVNwVSxLQUFLd1Ysb0JBQ2RyQixZQUFhZCxJQUVQc0MsRyxnQ0FHQSxZQUFBQyxvQkFBUixTQUNDblgsRUFDQXNWLEdBRkQsV0FJQyxHQUFJQSxJQUFhLEVBQUEvTCxNQUFPLENBRXZCLEdBQUksRUFBQWtCLFFBQVF6SyxHQUNWQSxFQUFtQmlVLFNBQVEsU0FBQWxNLEdBQzNCLElBQUssRUFBQW9CLFNBQVNwQixHQUNiLE1BQU0sSUFBSStELE1BQU0sMEJBQTBCOUwsRUFBSyxpQkFBaUIsRUFBS3lMLEtBQUksdURBSTNFLElBQUssRUFBQXRDLFNBQVNuSixHQUNiLE1BQU0sSUFBSThMLE1BQU0sMEJBQTBCOUwsRUFBSyxpQkFBaUJ1QixLQUFLa0ssS0FBSSwrQ0FHM0UsSUFBSyxFQUFBaEIsUUFBUXpLLElBQXlDLElBQTlCQSxFQUFtQnNCLE9BQzFDLE9BQU8sRUFBQXNKLGlCQUVSLEdBQW1DLElBQTlCNUssRUFBbUJzQixPQUN2QixPQUFPLEVBQUF1SixpQkFFUixHQUFtQyxJQUE5QjdLLEVBQW1Cc0IsT0FDdkIsT0FBTyxFQUFBd0osaUJBRVIsR0FBbUMsSUFBOUI5SyxFQUFtQnNCLE9BQ3ZCLE9BQU8sRUFBQXlKLGlCQUVSLE1BQU0sSUFBSWUsTUFBTSwwQkFBMEI5TCxFQUFLLGlCQUFpQnVCLEtBQUtrSyxLQUFJLCtDQUNuRSxHQUFJNkosSUFBYSxFQUFBekwsSUFBSyxDQUU1QixHQUFJLEVBQUFZLFFBQVF6SyxHQUNWQSxFQUFtQmlVLFNBQVEsU0FBQWxNLEdBQzNCLElBQUssRUFBQXFCLFVBQVVyQixHQUNkLE1BQU0sSUFBSStELE1BQU0sMEJBQTBCOUwsRUFBSyxpQkFBaUIsRUFBS3lMLEtBQUksbURBSTNFLElBQUssRUFBQXJDLFVBQVVwSixHQUNkLE1BQU0sSUFBSThMLE1BQU0sMEJBQTBCOUwsRUFBSyxpQkFBaUJ1QixLQUFLa0ssS0FBSSwyQ0FHM0UsSUFBSyxFQUFBaEIsUUFBUXpLLElBQXlDLElBQTlCQSxFQUFtQnNCLE9BQzFDLE9BQU8sRUFBQTBKLGVBRVIsR0FBbUMsSUFBOUJoTCxFQUFtQnNCLE9BQ3ZCLE9BQU8sRUFBQTJKLGVBRVIsR0FBbUMsSUFBOUJqTCxFQUFtQnNCLE9BQ3ZCLE9BQU8sRUFBQTRKLGVBRVIsR0FBbUMsSUFBOUJsTCxFQUFtQnNCLE9BQ3ZCLE9BQU8sRUFBQTZKLGVBRVIsTUFBTSxJQUFJVyxNQUFNLDBCQUEwQjlMLEVBQUssaUJBQWlCdUIsS0FBS2tLLEtBQUksMkNBRXpFLE1BQU0sSUFBSUssTUFBTSw4QkFBOEJ3SixFQUFRLGlCQUFpQi9ULEtBQUtrSyxLQUFJLGVBQWUsRUFBQWxDLE1BQUssT0FBTyxFQUFBTSxJQUFHLE1BSXhHLFlBQUFzTSxrQkFBUixTQUNDUixFQUNBRCxFQUNBUSxFQUNBbFcsRUFDQU0sRyxNQUVNLEVBQWtDaUIsS0FBaENnSyxFQUFFLEtBQUVzSixFQUFRLFdBQUVySixFQUFhLGdCQUVuQ0QsRUFBRzZMLFdBQVd6QixHQUVkLElBQUkwQixFQUFnQyxRQUF4QixFQUFHeEMsRUFBU3FCLFVBQVksZUFBRW1CLFNBQVMzQixHQUUvQyxRQUFpQjNWLElBQWJzWCxFQUF3QixDQUMzQixJQUFNQyxFQUFZL0wsRUFBR2dNLG1CQUFtQjVCLEVBQVNPLEdBQ2pELElBQUtvQixFQUtKLFlBSkE5TCxFQUFjLDJCQUEyQjBLLEVBQVcsa0JBQWtCM1UsS0FBS2tLLEtBQUksbUtBRXRCbkwsRUFBSSxzQkFDakRpTCxFQUFHOEgsV0FBVSxLQUcxQmdFLEVBQVdDLEVBRVB6QyxFQUFTcUIsS0FDWnJCLEVBQVNxQixHQUFhbUIsU0FBUzNCLEdBQWUyQixHQU1oRCxPQUFRL1csR0FDUCxLQUFLLEVBQUFzSyxpQkFDSlcsRUFBR2lNLFVBQVVILEVBQVVyWCxHQUN2QixNQUNELEtBQUssRUFBQTZLLGlCQUNKVSxFQUFHa00sV0FBV0osRUFBVXJYLEdBQ3hCLE1BQ0QsS0FBSyxFQUFBOEssaUJBQ0pTLEVBQUdtTSxXQUFXTCxFQUFVclgsR0FDeEIsTUFDRCxLQUFLLEVBQUErSyxpQkFDSlEsRUFBR29NLFdBQVdOLEVBQVVyWCxHQUN4QixNQUNELEtBQUssRUFBQWdMLGVBQ0pPLEVBQUdxTSxVQUFVUCxFQUFVclgsR0FDdkIsTUFDRCxLQUFLLEVBQUFpTCxlQUNKTSxFQUFHc00sV0FBV1IsRUFBVXJYLEdBQ3hCLE1BQ0QsS0FBSyxFQUFBa0wsZUFDSkssRUFBR3VNLFdBQVdULEVBQVVyWCxHQUN4QixNQUNELEtBQUssRUFBQW1MLGVBQ0pJLEVBQUd3TSxXQUFXVixFQUFVclgsR0FDeEIsTUFDRCxRQUNDLE1BQU0sSUFBSThMLE1BQU0sd0JBQXdCeEwsRUFBSSxvQkFBb0JpQixLQUFLa0ssS0FBSSxRQUk1RSxZQUFBOEosV0FBQSxTQUNDVyxFQUNBbFcsRUFDQXNWLEdBRU0sSUFBRTBDLEVBQTZCelcsS0FBZixlQUFFc1QsRUFBYXRULEtBQUwsU0FFNUJqQixFQUFPdVUsRUFBU3FCLEdBQWVyQixFQUFTcUIsR0FBYTVWLFVBQU9QLEVBQ2hFLEdBQUl1VixFQUFVLENBQ2IsSUFBTTJDLEVBQVkxVyxLQUFLNFYsb0JBQW9CblgsRUFBT3NWLEdBQ2xELFFBQWF2VixJQUFUTyxFQUFvQkEsRUFBTzJYLE9BSTlCLEdBQUkzWCxJQUFTMlgsRUFDWixNQUFNLElBQUluTSxNQUFNLFlBQVlvSyxFQUFXLHFCQUFxQjNVLEtBQUtrSyxLQUFJLDZCQUE2Qm5MLEVBQUksWUFBWTJYLEVBQVMsS0FJOUgsUUFBYWxZLElBQVRPLEVBQ0gsTUFBTSxJQUFJd0wsTUFBTSw2QkFBNkJvSyxFQUFXLG1GQUdwRHJCLEVBQVNxQixLQUVickIsRUFBU3FCLEdBQWUsQ0FBRTVWLEtBQUksRUFBRStXLFNBQVUsR0FBSXJYLE1BQUssSUFJcEQsSUFBSyxJQUFJeEIsRUFBSSxFQUFHQSxFQUFJd1osRUFBZTFXLE9BQVE5QyxJQUFLLENBQ3pDLE1BQTJCd1osRUFBZXhaLEdBQXhDbVgsRUFBTyxVQUFFRCxFQUFXLGNBQzVCblUsS0FBSzRVLGtCQUFrQlIsRUFBU0QsRUFBYVEsRUFBYWxXLEVBQU9NLEtBSW5FLFlBQUE0WCxpQkFBQSxTQUNDdkMsRUFDQU8sRUFDQWxXLEVBQ0FzVixHQUVBLElBSUlJLEVBSkVwVixFQUFPaUIsS0FBSzRWLG9CQUFvQm5YLEVBQU9zVixHQUM3QyxRQUFnQnZWLElBQVo0VixFQUNILE1BQU0sSUFBSTdKLE1BQU0sdUVBWWpCLEdBVEk2SixJQUFZcFUsS0FBSzhVLGdCQUNwQlgsRUFBY2pCLEVBQ0prQixJQUFZcFUsS0FBS21WLGdCQUMzQmhCLEVBQWNoQixFQUNKaUIsSUFBWXBVLEtBQUtxVixlQUMzQmxCLEVBQWNmLEVBQ0pnQixJQUFZcFUsS0FBS3dWLHNCQUMzQnJCLEVBQWNkLFFBRUs3VSxJQUFoQjJWLEVBQ0gsTUFBTSxJQUFJNUosTUFBTSxzREFFakJ2SyxLQUFLNFUsa0JBQWtCUixFQUFTRCxFQUFhUSxFQUFhbFcsRUFBT00sSUFHbEUsWUFBQTRULFFBQUEsV0FDTyxNQUF5QzNTLEtBQXZDZ0ssRUFBRSxLQUFFdUosRUFBYyxpQkFBZ0IsaUJBRTNCYixTQUFRLFNBQUMsRyxJQUFFMEIsRUFBTyxVQUNoQ3BLLEVBQUc0TSxjQUFjeEMsTUFJbEJwSyxFQUFHNk0sYUFBYXRELFVBRVR2VCxLQUFLOFUsdUJBQ0w5VSxLQUFLbVYsdUJBQ0xuVixLQUFLcVYsc0JBQ0xyVixLQUFLd1YsMkJBRUx4VixLQUFLdVQsc0JBR0x2VCxLQUFLZ0ssVUFFTGhLLEtBQUtpSyxxQkFFTGpLLEtBQUtvVSxTQUVkLEVBamFBLEdBQWEsRUFBQVcsYyxnVkN2QmIsYUFDQSxTQUtBLFNBRUEsU0FDQSxTQUNBLFNBQ0EsU0FHTStCLEVBQXNDLEVBQVEsS0FDOUNDLEVBQW9DLEVBQVEsS0FDNUNDLEVBQXFDLEVBQVEsS0FDN0NDLEVBQWlDLEVBQVEsS0FNL0MsYUErQ0MsV0FDQ3BOLEVBUUFJLEVBQ0FpTixRQURBLElBQUFqTixNQUFBLFNBQWdDa04sR0FBc0IsTUFBTSxJQUFJNU0sTUFBTTRNLEtBakQvRCxLQUFBQyxZQUFhLEVBcURwQixJQUFNQyxFQUFZLENBQUMsU0FBVSxVQUFXLFlBQWEsZUFDckRyWixPQUFPMEgsS0FBS21FLEdBQVE2SSxTQUFRLFNBQUEvUyxHQUMzQixHQUFJMFgsRUFBVTlPLFFBQVE1SSxHQUFPLEVBQzVCLE1BQU0sSUFBSTRLLE1BQU0sZUFBZTVLLEVBQUcsd0RBQXdEMFgsRUFBVTVRLEtBQUssTUFBSyxRQUloSCxJQUFNakssRUFBT3dELEtBQ2JBLEtBQUtpSyxjQUFnQixTQUFDa04sR0FDakIzYSxFQUFLNGEsYUFHVDVhLEVBQUs0YSxZQUFhLEVBQ2xCbk4sRUFBY2tOLEtBR1AsSUFBQUcsRUFBV3pOLEVBQU0sT0FDckJHLEVBQUtILEVBQU8wTixRQUdoQixJQUFLdk4sRUFBSSxDQUNSLElBQU13TixFQUFlLEdBTXJCLFFBTHlCaFosSUFBckJxTCxFQUFPNE4sWUFBeUJELEVBQVFDLFVBQVk1TixFQUFPNE4sV0FLcEQsUUFIWHpOLEVBQUtzTixFQUFPSSxXQUFXLFNBQVVGLElBQzdCRixFQUFPSSxXQUFXLFFBQVNGLElBQzNCRixFQUFPSSxXQUFXLHFCQUFzQkYsSUFHM0MsWUFEQXhYLEtBQUtpSyxjQUFjLHVDQUlqQixFQUFBdUMsU0FBU3hDLEdBQ1p5QyxRQUFRa0wsSUFBSSw0QkFFWmxMLFFBQVFrTCxJQUFJLDRCQUViM1gsS0FBS2dLLEdBQUtBLEVBQ1ZoSyxLQUFLa1gsU0FBV0EsRUFHaEIsSUFBTTdNLE9BQXFDN0wsSUFBdkJxTCxFQUFPUSxZQUE0QixFQUFBakIsTUFBUVMsRUFBT1EsWUFDdEVySyxLQUFLcUssWUFBY0EsRUFDZCxFQUFBbUMsU0FBU3hDLElBQU9LLElBQWdCLEVBQUFsQixPQUNwQ3NELFFBQVFDLEtBQUssbURBS2QxQyxFQUFHNE4sUUFBUTVOLEVBQUc2TixZQUdkN04sRUFBRzhOLFlBQVk5TixFQUFHK04saUJBQWtCLEdBV3BDL1gsS0FBS2dZLGlCQUFtQmhZLEtBQUtpVSxZQUFZLENBQ3hDL0osS0FBTSxZQUNOcUosZUFBZ0JsSixJQUFnQixFQUFBbEIsTUFBUTJOLEVBQXNDRyxFQUM5RTNELFNBQVUsQ0FDUixDQUNDcEosS0FBTSxVQUNOekwsTUFBTyxFQUNQc1YsU0FBVSxFQUFBekwsUUFLVitCLElBQWdCLEVBQUFsQixPQUNuQm5KLEtBQUtpWSxlQUFpQmpZLEtBQUtpVSxZQUFZLENBQ3RDL0osS0FBTSxVQUNOcUosZUFBZ0J3RCxFQUNoQnpELFNBQVUsQ0FDUixDQUNDcEosS0FBTSxVQUNOekwsTUFBTyxFQUNQc1YsU0FBVSxFQUFBekwsUUFLZHRJLEtBQUtrWSxnQkFBa0JsWSxLQUFLaVUsWUFBWSxDQUN2Qy9KLEtBQU0sV0FDTnFKLGVBQWdCeUQsRUFDaEIxRCxTQUFVLENBQ1IsQ0FDQ3BKLEtBQU0sVUFDTnpMLE1BQU8sRUFDUHNWLFNBQVUsRUFBQXpMLFVBTWR0SSxLQUFLaVksZUFBaUJqWSxLQUFLZ1ksaUJBQzNCaFksS0FBS2tZLGdCQUFrQmxZLEtBQUtnWSxrQkFJN0JoTyxFQUFHbU8sV0FBV25PLEVBQUdvTyxhQUFjLE1BRy9CcFksS0FBS3FZLFNBQVNmLEdBR2R0WCxLQUFLc1ksZUFBaUJ0WSxLQUFLZ0ssR0FBR3VPLGFBQWF2WSxLQUFLZ0ssR0FBR3dPLHlCQUNuRC9MLFFBQVFrTCxJQUFPM1gsS0FBS3NZLGVBQWMsa0JBMjVCcEMsT0EzaUNRLEVBQUFHLHNCQUFQLFNBQ0N2QixFQUNBck4sRUFHQUksR0FFQSxPQUFPLElBQUl5TyxFQUFhLEVBQUQsQ0FFckJwQixPQUFRSixFQUFTeUIsV0FDakJwQixRQUFTTCxFQUFTUSxjQUNmN04sR0FFSkksRUFDQWlOLElBcUlGLFlBQUExSyxTQUFBLFdBQ0MsT0FBTyxFQUFBQSxTQUFTeE0sS0FBS2dLLEtBR3RCLHNCQUFZLGtDQUFtQixDLElBQS9CLFdBQ0MsUUFBa0N4TCxJQUE5QndCLEtBQUs0WSxxQkFBb0MsQ0FDNUMsSUFBTUMsRUFBa0IsSUFBSWpjLGFBQWEsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLElBQ3BFb0QsS0FBSzRZLHFCQUF1QjVZLEtBQUs4WSxpQkFBaUJELEdBRW5ELE9BQU83WSxLQUFLNFksc0IsZ0NBR2Isc0JBQVksc0NBQXVCLEMsSUFBbkMsV0FDQyxRQUFzQ3BhLElBQWxDd0IsS0FBSytZLHlCQUF3QyxDQUNoRCxJQUFNQyxFQUFvQixJQUFJcGMsYUFBYSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLElBQzlFb0QsS0FBSytZLHlCQUEyQi9ZLEtBQUs4WSxpQkFBaUJFLEdBRXZELE9BQU9oWixLQUFLK1ksMEIsZ0NBR2Isc0JBQVksb0NBQXFCLEMsSUFBakMsV0FDQyxRQUFvQ3ZhLElBQWhDd0IsS0FBS2laLHVCQUFzQyxDQUU5QyxJQURBLElBQU1DLEVBQW1CLENBQUMsRUFBRyxHQUNwQmpjLEVBQUksRUFBR0EsR0EzTVMsR0EyTWlCQSxJQUN6Q2ljLEVBQWlCblksS0FDaEJvQixLQUFLZ1gsSUFBSSxFQUFJaFgsS0FBS2lYLEdBQUtuYyxFQTdNQSxJQThNdkJrRixLQUFLa1gsSUFBSSxFQUFJbFgsS0FBS2lYLEdBQUtuYyxFQTlNQSxLQWlOekIsSUFBTXFjLEVBQWtCLElBQUkxYyxhQUFhc2MsR0FDekNsWixLQUFLaVosdUJBQXlCalosS0FBSzhZLGlCQUFpQlEsR0FFckQsT0FBT3RaLEtBQUtpWix3QixnQ0FHTCxZQUFBSCxpQkFBUixTQUNDdFksR0FFTSxJQUFFeUosRUFBc0JqSyxLQUFULGNBQUVnSyxFQUFPaEssS0FBTCxHQUNuQnZELEVBQVN1TixFQUFHdVAsZUFDbEIsR0FBSzljLEVBT0wsT0FIQXVOLEVBQUdtTyxXQUFXbk8sRUFBR29PLGFBQWMzYixHQUUvQnVOLEVBQUd3UCxXQUFXeFAsRUFBR29PLGFBQWM1WCxFQUFNd0osRUFBR3lQLGFBQ2pDaGQsRUFOTndOLEVBQWMsa0NBU2hCLFlBQUFnSyxZQUFBLFNBQ0NwSyxHQWNBLElBQU13TixFQUFZLENBQUMsT0FBUSxpQkFBa0IsV0FBWSxXQUN6RHJaLE9BQU8wSCxLQUFLbUUsR0FBUTZJLFNBQVEsU0FBQS9TLEdBQzNCLEdBQUkwWCxFQUFVOU8sUUFBUTVJLEdBQU8sRUFDNUIsTUFBTSxJQUFJNEssTUFBTSxlQUFlNUssRUFBRyx3REFBd0QwWCxFQUFVNVEsS0FBSyxNQUFLLFFBRzFHLE1BQXFDekcsS0FBbkNnSyxFQUFFLEtBQUVDLEVBQWEsZ0JBQUVJLEVBQVcsY0FDdEMsT0FBTyxJQUFJLEVBQUEwSyxXQUFXLEVBQUQsS0FFaEJsTCxHQUFNLENBQ1RHLEdBQUUsRUFDRkMsY0FBYSxFQUNiSSxZQUFXLE1BS2QsWUFBQXFQLGNBQUEsU0FDQzdQLEdBY0EsSUFBTXdOLEVBQVksQ0FBQyxPQUFRLGFBQWMsT0FBUSxnQkFBaUIsT0FBUSxTQUFVLFFBQVMsUUFBUyxXQUFZLGNBQ2xIclosT0FBTzBILEtBQUttRSxHQUFRNkksU0FBUSxTQUFBL1MsR0FDM0IsR0FBSTBYLEVBQVU5TyxRQUFRNUksR0FBTyxFQUM1QixNQUFNLElBQUk0SyxNQUFNLGVBQWU1SyxFQUFHLDBEQUEwRDBYLEVBQVU1USxLQUFLLE1BQUssUUFHNUcsTUFBcUN6RyxLQUFuQ2dLLEVBQUUsS0FBRUMsRUFBYSxnQkFBRUksRUFBVyxjQUN0QyxPQUFPLElBQUksRUFBQUcsVUFBVSxFQUFELEtBQ2hCWCxHQUFNLENBQ1RHLEdBQUUsRUFDRkssWUFBVyxFQUNYSixjQUFhLE1BSWYsWUFBQTBQLFlBQUEsU0FDQzlQLEVBU0FqRSxHQUdBLElBQU15UixFQUFZLENBQUMsT0FBUSxNQUFPLFNBQVUsUUFBUyxRQUFTLFVBQzlEclosT0FBTzBILEtBQUttRSxHQUFRNkksU0FBUSxTQUFBL1MsR0FDM0IsR0FBSTBYLEVBQVU5TyxRQUFRNUksR0FBTyxFQUM1QixNQUFNLElBQUk0SyxNQUFNLGVBQWU1SyxFQUFHLHdEQUF3RDBYLEVBQVU1USxLQUFLLE1BQUssUUFHeEcsSUFBQW1ULEVBQWMvUCxFQUFNLElBQWZLLEVBQVNMLEVBQU0sS0FDNUIsSUFBSyxFQUFBNkosU0FBU2tHLEdBQ2IsTUFBTSxJQUFJclAsTUFBTSw0RUFBNEVxUCxFQUFHLG1CQUFtQkEsRUFBRyxLQUV0SCxJQUFLLEVBQUFsRyxTQUFTeEosR0FDYixNQUFNLElBQUlLLE1BQU0sNkVBQTZFTCxFQUFJLG1CQUFtQkEsRUFBSSxLQUl6SCxJQUFNVSxPQUEyQnBNLElBQWxCcUwsRUFBT2UsT0FBdUJmLEVBQU9lLE9BQVMsRUFBQWxDLFFBQzdELElBQUssRUFBQW1DLGtCQUFrQkQsR0FDdEIsTUFBTSxJQUFJTCxNQUFNLG1CQUFtQkssRUFBTSxtQkFBbUJWLEVBQUksY0FBYyxFQUFBMUIsaUJBQWlCL0IsS0FBSyxNQUFLLEtBSTFHLElBQU1xRSxPQUF5QnRNLElBQWpCcUwsRUFBT2lCLE1BQXNCakIsRUFBT2lCLE1BQVEsRUFBQWxDLGNBQzFELElBQUssRUFBQW1DLGdCQUFnQkQsR0FDcEIsTUFBTSxJQUFJUCxNQUFNLGtCQUFrQk8sRUFBSyxtQkFBbUJaLEVBQUksY0FBYyxFQUFBdkIsZUFBZWxDLEtBQUssTUFBSyxLQUV0RyxJQUFNdUUsT0FBeUJ4TSxJQUFqQnFMLEVBQU9tQixNQUFzQm5CLEVBQU9tQixNQUFRLEVBQUFwQyxjQUMxRCxJQUFLLEVBQUFtQyxnQkFBZ0JDLEdBQ3BCLE1BQU0sSUFBSVQsTUFBTSxrQkFBa0JTLEVBQUssbUJBQW1CZCxFQUFJLGNBQWMsRUFBQXZCLGVBQWVsQyxLQUFLLE1BQUssS0FJdEcsSUFBTW9ULE9BQTJCcmIsSUFBbEJxTCxFQUFPZ1EsT0FBdUJoUSxFQUFPZ1EsT0FBUyxFQUFBN1EsS0FDN0QsSUFBSyxFQUFBOFEseUJBQXlCRCxHQUM3QixNQUFNLElBQUl0UCxNQUFNLG1CQUFtQnNQLEVBQU0sbUJBQW1CM1AsRUFBSSxjQUFjLEVBQUFwQix3QkFBd0JyQyxLQUFLLE1BQUssS0FJakgsSUFBTTFILE9BQXVCUCxJQUFoQnFMLEVBQU85SyxLQUFxQjhLLEVBQU85SyxLQUFPLEVBQUFrSixjQUN2RCxJQUFLLEVBQUE4Uix1QkFBdUJGLEdBQzNCLE1BQU0sSUFBSXRQLE1BQU0saUJBQWlCeEwsRUFBSSxtQkFBbUJtTCxFQUFJLGNBQWMsRUFBQWpCLHNCQUFzQnhDLEtBQUssTUFBSyxLQUdyRyxJQUFFdUQsRUFBc0JoSyxLQUFwQixHQUFFaUssRUFBa0JqSyxLQUFMLGNBQ25CNlAsRUFBVTdGLEVBQUc4RixnQkFDbkIsR0FBZ0IsT0FBWkQsRUFDSCxNQUFNLElBQUl0RixNQUFNLDZCQUVqQlAsRUFBRytGLFlBQVkvRixFQUFHZ0csV0FBWUgsR0FNOUIsSUFDTW1LLEVBQWlCaFEsRUFBR2hCLEtBSXBCaVIsRUFBWWpRLEVBQUc2UCxHQUNmSyxFQUFVbFEsRUFBR2pMLEdBQ2JvYixFQUFRLElBQUl0WSxXQUFXLENBQUMsRUFBRyxFQUFHLEVBQUcsSUFDdkNtSSxFQUFHc0csV0FBV3RHLEVBQUdnRyxXQVJILEVBUXNCZ0ssRUFOdEIsRUFDQyxFQUNBLEVBS1NDLEVBQVdDLEVBQVNDLEdBRTVDLElBQU1DLEVBQVEsSUFBSUMsTUFpQ2xCLE9BaENBRCxFQUFNRSxPQUFTLFdBQ2R0USxFQUFHK0YsWUFBWS9GLEVBQUdnRyxXQUFZSCxHQUM5QjdGLEVBQUdzRyxXQUFXdEcsRUFBR2dHLFdBZEosRUFjdUJnSyxFQUNuQ0MsRUFBV0MsRUFBU0UsR0FLakIsRUFBQUcsV0FBV0gsRUFBTTFQLFFBQVUsRUFBQTZQLFdBQVdILEVBQU16UCxTQUsvQzhCLFFBQVFDLEtBQUssV0FBV3hDLEVBQUksZ0JBQWdCa1EsRUFBTTFQLE1BQUssS0FBSzBQLEVBQU16UCxPQUFNLHlCQU16RVgsRUFBR2lHLGNBQWNqRyxFQUFHZ0csV0FBWWhHLEVBQUdrRyxlQUFnQmxHLEVBQUdjLElBQ3REZCxFQUFHaUcsY0FBY2pHLEVBQUdnRyxXQUFZaEcsRUFBR21HLGVBQWdCbkcsRUFBR2dCLElBQ3REaEIsRUFBR2lHLGNBQWNqRyxFQUFHZ0csV0FBWWhHLEVBQUdvRyxtQkFBb0JwRyxFQUFHWSxJQUMxRFosRUFBR2lHLGNBQWNqRyxFQUFHZ0csV0FBWWhHLEVBQUdxRyxtQkFBb0JyRyxFQUFHWSxJQUd0RGhGLEdBQVVBLEVBQVNpSyxJQUV4QnVLLEVBQU1JLFFBQVUsU0FBQ3RkLEdBQ2hCK00sRUFBYyx1QkFBdUJDLEVBQUksS0FBS2hOLElBRS9Da2QsRUFBTS9VLElBQU11VSxFQUVML0osR0FHUixZQUFBd0ksU0FBQSxTQUFTZixHQUNSLElBQU01TSxFQUFRNE0sRUFBT21ELFlBQ2Y5UCxFQUFTMk0sRUFBT29ELGFBR3RCcEQsRUFBTzVNLE1BQVFBLEVBQ2Y0TSxFQUFPM00sT0FBU0EsRUFFaEIzSyxLQUFLMEssTUFBUUEsRUFDYjFLLEtBQUsySyxPQUFTQSxHQUdQLFlBQUFnUSxVQUFSLFNBQ0N2RyxFQUNBd0csRUFDQUMsRUFDQUMsR0FFUSxJQUFBOVEsRUFBT2hLLEtBQUksR0FFbkIsR0FBS29VLEVBQUwsQ0FTQSxJQUFNMkcsRUFBZ0JGLEVBQVk3WixLQUFJLFNBQUFnYSxHQUFTLE9BQUFBLEVBQU1qSix1QkFBMEJpSixFQUFvQmpKLHlCQUEyQmlKLEtBSTlIaGIsS0FBS2liLGVBQWVMLEVBQWtCQyxFQUFhQyxHQUduRDlRLEVBQUc2TCxXQUFXekIsR0FHZCxJQUFLLElBQUluWCxFQUFJLEVBQUdBLEVBQUk4ZCxFQUFjaGIsT0FBUTlDLElBQ3pDK00sRUFBR2tSLGNBQWNsUixFQUFHbVIsU0FBV2xlLEdBQy9CK00sRUFBRytGLFlBQVkvRixFQUFHZ0csV0FBWStLLEVBQWM5ZCxNQUk5QyxZQUFBbWUsbUJBQUEsU0FBbUJyYyxHQUNsQixPQUFRQSxHQUNQLEtBQUssRUFBQWdKLFdBQ0wsS0FBSyxFQUFBQyxNQUNKLE9BQU9oSSxLQUFLZ1ksaUJBQ2IsS0FBSyxFQUFBL1AsY0FDTCxLQUFLLEVBQUFFLGVBQ0wsS0FBSyxFQUFBRSxhQUNKLE9BQU9ySSxLQUFLa1ksZ0JBQ2IsS0FBSyxFQUFBaFEsS0FDTCxLQUFLLEVBQUFFLE1BQ0wsS0FBSyxFQUFBRSxJQUNKLE9BQU90SSxLQUFLaVksZUFDYixRQUNDLE1BQU0sSUFBSTFOLE1BQU0saUJBQWlCeEwsRUFBSSxpREFJaEMsWUFBQWtjLGVBQVIsU0FDQ0wsRUFDQUMsRUFDQUMsR0FFUSxJQUFBOVEsRUFBT2hLLEtBQUksR0FHbkIsR0FBSzhhLEVBQUwsQ0FTQSxHQUFJRCxFQUFZdFMsUUFBUXVTLElBQWdCLEVBQUcsQ0FDMUMsR0FBK0IsSUFBM0JBLEVBQVk1TyxXQUNmLE1BQU0sSUFBSTNCLE1BQU0sd01BS2pCLEdBQUlxUSxFQUdIRSxFQUFZNUksa0JBQWlCLE9BQ3ZCLENBRU4sSUFBTW1KLEVBQWNyYixLQUFLb2IsbUJBQW1CTixFQUFZNVAsY0FDeERsTCxLQUFLc2IsS0FBS0QsRUFBYSxDQUFDUCxHQUFjQSxHQUV0Q0EsRUFBWTVJLGtCQUFpQixTQUk5QjRJLEVBQVk1SSxrQkFBaUIsR0FJeEIsTUFBb0I0SSxFQUFZdkksZ0JBQTlCN0gsRUFBSyxLQUFFQyxFQUFNLEtBQ3JCWCxFQUFHdVIsU0FBUyxFQUFHLEVBQUc3USxFQUFPQyxPQWxDekIsQ0FDQ1gsRUFBRzBHLGdCQUFnQjFHLEVBQUcyRyxZQUFhLE1BRTdCLElBQUUsRUFBa0IzUSxLQUFiLE1BQUUsRUFBV0EsS0FBTCxPQUNyQmdLLEVBQUd1UixTQUFTLEVBQUcsRUFBRyxFQUFPLEtBaUNuQixZQUFBQyxxQkFBUixTQUE2QnBILEdBQ3BCLElBQUFwSyxFQUFPaEssS0FBSSxHQUViOFYsRUFBVzlMLEVBQUd5UixrQkFBa0JySCxFQUFTLHVCQUMvQ3BLLEVBQUcwUixvQkFBb0I1RixFQUFVLEVBQUc5TCxFQUFHaEMsT0FBTyxFQUFPLEVBQUcsR0FFeERnQyxFQUFHMlIsd0JBQXdCN0YsSUFHcEIsWUFBQThGLGtCQUFSLFNBQTBCeEgsR0FDakIsSUFBQXBLLEVBQU9oSyxLQUFJLEdBRWI4VixFQUFXOUwsRUFBR3lSLGtCQUFrQnJILEVBQVMsb0JBQy9DcEssRUFBRzBSLG9CQUFvQjVGLEVBQVUsRUFBRzlMLEVBQUdoQyxPQUFPLEVBQU8sRUFBRyxHQUV4RGdDLEVBQUcyUix3QkFBd0I3RixJQUk1QixZQUFBd0YsS0FBQSxTQUNDbEgsRUFDQXlHLEVBQ0FDLEVBQ0F0RCxRQUZBLElBQUFxRCxNQUFBLElBTU0sTUFBMEM3YSxLQUF4Q2dLLEVBQUUsS0FBRW9OLEVBQVUsYUFBRXlFLEVBQW1CLHNCQUczQyxJQUFJekUsRUFBSixDQUlBLElBQU0wRSxFQUFZMUgsRUFBUTJILGVBRzFCL2IsS0FBSzJhLFVBQVV2RyxFQUFRMkgsZ0JBQWlCLEVBQU1sQixFQUFhQyxHQUczRDFHLEVBQVF1QyxpQkFBaUJtRixFQUFXLG1CQUFvQixDQUFDLEVBQUcsR0FBSSxFQUFBOVQsT0FDaEVvTSxFQUFRdUMsaUJBQWlCbUYsRUFBVyx5QkFBMEIsQ0FBQyxFQUFHLEdBQUksRUFBQTlULE9BQ3RFZ0MsRUFBR21PLFdBQVduTyxFQUFHb08sYUFBY3lELEdBQy9CN2IsS0FBS3diLHFCQUFxQnBILEVBQVEySCxpQkFHOUJ2RSxhQUFPLEVBQVBBLEVBQVN3RSxvQkFDWmhTLEVBQUdpUyxPQUFPalMsRUFBR2tTLE9BQ2JsUyxFQUFHbVMsVUFBVW5TLEVBQUdvUyxVQUFXcFMsRUFBR3FTLHNCQUUvQnJTLEVBQUdzUyxXQUFXdFMsRUFBR3VTLGVBQWdCLEVBQUcsR0FDcEN2UyxFQUFHNE4sUUFBUTVOLEVBQUdrUyxTQUlmLFlBQUFNLGFBQUEsU0FDQ3BJLEVBQ0F5RyxFQUNBQyxFQUNBdEQsUUFGQSxJQUFBcUQsTUFBQSxJQU9NLE1BQTZDN2EsS0FBM0NnSyxFQUFFLEtBQUVvTixFQUFVLGFBQUVxRixFQUF1QiwwQkFHL0MsSUFBSXJGLEVBQUosQ0FJQSxJQUFNMEUsRUFBWTFILEVBQVEySCxlQUcxQi9iLEtBQUsyYSxVQUFVbUIsR0FBVyxFQUFPakIsRUFBYUMsR0FJeEMsTUFBb0JBLEVBQWNBLEVBQVl2SSxnQkFBa0IsQ0FBRXZTLEtBQUswSyxNQUFPMUssS0FBSzJLLFFBQ25GK1IsRUFBUSxDQUFFLEVBREgsS0FDYyxFQUROLE1BWXJCLEdBVkF0SSxFQUFRdUMsaUJBQWlCbUYsRUFBVyxtQkFBb0IsQ0FBQyxFQUFJWSxFQUFNLEdBQUksRUFBSUEsRUFBTSxJQUFLLEVBQUExVSxPQUN0Rm9NLEVBQVF1QyxpQkFBaUJtRixFQUFXLHlCQUEwQlksRUFBTyxFQUFBMVUsT0FDckVnQyxFQUFHbU8sV0FBV25PLEVBQUdvTyxhQUFjcUUsR0FDL0J6YyxLQUFLd2IscUJBQXFCTSxJQUd0QnRFLGFBQU8sRUFBUEEsRUFBU3dFLG9CQUNaaFMsRUFBR2lTLE9BQU9qUyxFQUFHa1MsT0FDYmxTLEVBQUdtUyxVQUFVblMsRUFBR29TLFVBQVdwUyxFQUFHcVMsc0JBRTNCN0UsYUFBTyxFQUFQQSxFQUFTbUYsV0FDWixPQUFPbkYsYUFBTyxFQUFQQSxFQUFTbUYsWUFDZixJQUFLLE9BQ0ozUyxFQUFHc1MsV0FBV3RTLEVBQUc0UyxNQUFPLEVBQUcsR0FDM0IsTUFDRCxJQUFLLFFBQ0o1UyxFQUFHc1MsV0FBV3RTLEVBQUc0UyxNQUFPLEVBQUcsR0FDM0IsTUFDRCxJQUFLLE1BQ0o1UyxFQUFHc1MsV0FBV3RTLEVBQUc0UyxNQUFPLEVBQUcsR0FDM0IsTUFDRCxJQUFLLFNBQ0o1UyxFQUFHc1MsV0FBV3RTLEVBQUc0UyxNQUFPLEVBQUcsR0FDM0IsTUFDRCxRQUNDLE1BQU0sSUFBSXJTLE1BQU0sZ0NBQStCaU4sYUFBTyxFQUFQQSxFQUFTbUYsWUFBVSxVQUdwRTNTLEVBQUdzUyxXQUFXdFMsRUFBRzZTLFVBQVcsRUFBRyxHQUdoQzdTLEVBQUc0TixRQUFRNU4sRUFBR2tTLFNBSWYsWUFBQVksZ0JBQUEsU0FDQzFJLEVBQ0F5RyxFQUNBQyxFQUNBdEQsUUFGQSxJQUFBcUQsTUFBQSxJQU1NLE1BQTBDN2EsS0FBeENnSyxFQUFFLEtBQUVvTixFQUFVLGFBQUV5RSxFQUFtQixzQkFHM0MsSUFBSXpFLEVBQUosQ0FJQSxJQUFNMEUsRUFBWTFILEVBQVEySCxlQUcxQi9iLEtBQUsyYSxVQUFVbUIsR0FBVyxFQUFPakIsRUFBYUMsR0FHeEMsTUFBb0JBLEVBQWNBLEVBQVl2SSxnQkFBa0IsQ0FBRXZTLEtBQUswSyxNQUFPMUssS0FBSzJLLFFBQ25GK1IsRUFBUSxDQUFFLEVBREgsS0FDYyxFQUROLE1BRXJCdEksRUFBUXVDLGlCQUFpQm1GLEVBQVcsbUJBQW9CLENBQUMsRUFBSSxFQUFJWSxFQUFNLEdBQUksRUFBSSxFQUFJQSxFQUFNLElBQUssRUFBQTFVLE9BQzlGb00sRUFBUXVDLGlCQUFpQm1GLEVBQVcseUJBQTBCWSxFQUFPLEVBQUExVSxPQUNyRWdDLEVBQUdtTyxXQUFXbk8sRUFBR29PLGFBQWN5RCxHQUMvQjdiLEtBQUt3YixxQkFBcUJNLElBR3RCdEUsYUFBTyxFQUFQQSxFQUFTd0Usb0JBQ1poUyxFQUFHaVMsT0FBT2pTLEVBQUdrUyxPQUNibFMsRUFBR21TLFVBQVVuUyxFQUFHb1MsVUFBV3BTLEVBQUdxUyxzQkFFL0JyUyxFQUFHc1MsV0FBV3RTLEVBQUd1UyxlQUFnQixFQUFHLEdBQ3BDdlMsRUFBRzROLFFBQVE1TixFQUFHa1MsU0FJZixZQUFBYSxXQUFBLFNBQ0MzSSxFQUNBNEksRUFDQUMsRUFDQXBDLEVBQ0FDLEVBQ0F0RCxRQUZBLElBQUFxRCxNQUFBLElBTU0sTUFBNEM3YSxLQUExQ2dLLEVBQUUsS0FBRW9OLEVBQVUsYUFBRThGLEVBQXFCLHdCQUN2QyxFQUFvQnBDLEVBQWNBLEVBQVl2SSxnQkFBa0IsQ0FBRXZTLEtBQUswSyxNQUFPMUssS0FBSzJLLFFBQWpGRCxFQUFLLEtBQUVDLEVBQU0sS0FHckIsSUFBSXlNLEVBQUosQ0FJQSxJQUFNMEUsRUFBWTFILEVBQVEySCxlQUcxQi9iLEtBQUsyYSxVQUFVbUIsR0FBVyxFQUFPakIsRUFBYUMsR0FHOUMxRyxFQUFRdUMsaUJBQWlCbUYsRUFBVyxtQkFBb0IsQ0FBVSxFQUFUbUIsRUFBYXZTLEVBQWdCLEVBQVR1UyxFQUFhdFMsR0FBUyxFQUFBM0MsT0FDbkdvTSxFQUFRdUMsaUJBQWlCbUYsRUFBVyx5QkFBMEIsQ0FBQyxFQUFJa0IsRUFBUyxHQUFLdFMsRUFBUSxFQUFHLEVBQUlzUyxFQUFTLEdBQUtyUyxFQUFTLEdBQUksRUFBQTNDLE9BQzNIZ0MsRUFBR21PLFdBQVduTyxFQUFHb08sYUFBYzhFLEdBQy9CbGQsS0FBS3diLHFCQUFxQk0sSUFHdEJ0RSxhQUFPLEVBQVBBLEVBQVN3RSxvQkFDWmhTLEVBQUdpUyxPQUFPalMsRUFBR2tTLE9BQ2JsUyxFQUFHbVMsVUFBVW5TLEVBQUdvUyxVQUFXcFMsRUFBR3FTLHNCQUUvQnJTLEVBQUdzUyxXQUFXdFMsRUFBR21ULGFBQWMsRUFBR0MsSUFDbENwVCxFQUFHNE4sUUFBUTVOLEVBQUdrUyxTQUlmLFlBQUFtQixZQUFBLFNBQ0NqSixFQUNBa0osRUFDQUMsRUFDQU4sRUFDQXBDLEVBQ0FDLEVBQ0F0RCxRQUZBLElBQUFxRCxNQUFBLElBTU0sTUFBNEM3YSxLQUExQ2dLLEVBQUUsS0FBRW9OLEVBQVUsYUFBRThGLEVBQXFCLHdCQUN2QyxFQUFvQnBDLEVBQWNBLEVBQVl2SSxnQkFBa0IsQ0FBRXZTLEtBQUswSyxNQUFPMUssS0FBSzJLLFFBQWpGRCxFQUFLLEtBQUVDLEVBQU0sS0FHckIsSUFBSXlNLEVBQUosQ0FJQSxJQUFNMEUsRUFBWTFILEVBQVFvSixlQUcxQnhkLEtBQUsyYSxVQUFVbUIsR0FBVyxFQUFPakIsRUFBYUMsR0FHOUMxRyxFQUFRdUMsaUJBQWlCbUYsRUFBVyxvQkFBcUJtQixFQUFRLEVBQUFqVixPQUNqRW9NLEVBQVF1QyxpQkFBaUJtRixFQUFXLG1CQUFvQixDQUFDLEVBQUlwUixFQUFPLEVBQUlDLEdBQVMsRUFBQTNDLE9BQ2pGLElBQU15VixFQUFRSCxFQUFVLEdBQUtDLEVBQVUsR0FDakNHLEVBQVFKLEVBQVUsR0FBS0MsRUFBVSxHQUNqQ0ksRUFBUXhiLEtBQUt5YixNQUFNRixFQUFPRCxHQUNoQ3JKLEVBQVF1QyxpQkFBaUJtRixFQUFXLHNCQUF1QjZCLEVBQU8sRUFBQTNWLE9BQ2xFLElBQU1qSSxFQUFTb0MsS0FBSzBiLEtBQUtKLEVBQVFBLEVBQVFDLEVBQVFBLEdBQ2pEdEosRUFBUXVDLGlCQUFpQm1GLEVBQVcsb0JBQXFCL2IsRUFBUSxFQUFBaUksT0FDakUsSUFBTThWLEdBQWFSLEVBQVUsR0FBS0MsRUFBVSxJQUFNLEVBQzVDUSxHQUFhVCxFQUFVLEdBQUtDLEVBQVUsSUFBTSxFQUNsRG5KLEVBQVF1QyxpQkFBaUJtRixFQUFXLHlCQUEwQixDQUFDLEVBQUlnQyxFQUFZcFQsRUFBUSxFQUFHLEVBQUlxVCxFQUFZcFQsRUFBUyxHQUFJLEVBQUEzQyxPQUN2SGdDLEVBQUdtTyxXQUFXbk8sRUFBR29PLGFBQWM4RSxHQUMvQmxkLEtBQUt3YixxQkFBcUJNLElBR3RCdEUsYUFBTyxFQUFQQSxFQUFTd0Usb0JBQ1poUyxFQUFHaVMsT0FBT2pTLEVBQUdrUyxPQUNibFMsRUFBR21TLFVBQVVuUyxFQUFHb1MsVUFBV3BTLEVBQUdxUyxzQkFFL0JyUyxFQUFHc1MsV0FBV3RTLEVBQUdtVCxhQUFjLEVBQUdDLElBQ2xDcFQsRUFBRzROLFFBQVE1TixFQUFHa1MsU0FHZixZQUFBOEIsV0FBQSxTQUNDNUosRUFDQXlHLEVBQ0FDLEVBQ0F0RCxHQU1NLE1BQXNDeFgsS0FBcENnSyxFQUFFLEtBQUVvTixFQUFVLGFBQUU2RyxFQUFlLGtCQUNqQyxFQUFvQm5ELEVBQWNBLEVBQVl2SSxnQkFBa0IsQ0FBRXZTLEtBQUswSyxNQUFPMUssS0FBSzJLLFFBQWpGRCxFQUFLLEtBQUVDLEVBQU0sS0FHckIsSUFBSXlNLEVBQUosQ0FJQSxHQUFJeUQsRUFBWTlhLE9BQVMsRUFDeEIsTUFBTSxJQUFJd0ssTUFBTSxrREFBa0Q2SixFQUFRbEssS0FBSSxxRUFFL0UsSUFBTWdVLEVBQWdCckQsRUFBWSxHQUdsQyxHQUFvQyxJQUFoQ3FELEVBQWM5VCxlQUF1RCxJQUFoQzhULEVBQWM5VCxjQUN0RCxNQUFNLElBQUlHLE1BQU0sc0hBQXNIMlQsRUFBY2hVLEtBQUksVUFBVWdVLEVBQWM5VCxjQUFhLGdCQUU5TCxJQUFNckssRUFBU21lLEVBQWN6TCxZQUN2QjBMLEdBQVkzRyxhQUFPLEVBQVBBLEVBQVMyRyxZQUFhcGUsRUFDeEMsR0FBSW9lLEVBQVlwZSxFQUNmLE1BQU0sSUFBSXdLLE1BQU0sb0JBQW9CNFQsRUFBUyxvQ0FBb0NwZSxFQUFNLEtBR3hGLElBQU0rYixFQUFZMUgsRUFBUWdLLGNBRzFCcGUsS0FBSzJhLFVBQVVtQixHQUFXLEVBQU9qQixFQUFhQyxHQUc5QzFHLEVBQVF1QyxpQkFBaUJtRixFQUFXLGtCQUFtQixFQUFHLEVBQUF4VCxLQUMxRDhMLEVBQVF1QyxpQkFBaUJtRixFQUFXLG1CQUFvQixDQUFDLEVBQUlwUixFQUFPLEVBQUlDLEdBQVMsRUFBQTNDLE9BRWpGLElBQU1xVyxHQUFZN0csYUFBTyxFQUFQQSxFQUFTNkcsWUFBYSxFQUN4Q2pLLEVBQVF1QyxpQkFBaUJtRixFQUFXLHVCQUF3QnVDLEVBQVcsRUFBQXJXLE9BQ3ZFLElBQU1zVyxFQUEwQkosRUFBYzNMLGdCQUU5QyxHQURBNkIsRUFBUXVDLGlCQUFpQm1GLEVBQVcsd0JBQXlCd0MsRUFBeUIsRUFBQXRXLFlBQ3hEeEosSUFBMUJ3QixLQUFLdWUsa0JBQW1DTixHQUFtQkEsRUFBZ0JsZSxPQUFTb2UsRUFBWSxDQUduRyxJQURBLElBQU1LLEVBQVUsSUFBSTVoQixhQUFhbUQsR0FDeEI5QyxFQUFJLEVBQUdBLEVBQUk4QyxFQUFROUMsSUFDM0J1aEIsRUFBUXZoQixHQUFLQSxFQUVkK0MsS0FBS2llLGdCQUFrQk8sRUFDdkJ4ZSxLQUFLdWUsaUJBQW1CdmUsS0FBSzhZLGlCQUFpQjBGLEdBRS9DeFUsRUFBR21PLFdBQVduTyxFQUFHb08sYUFBY3BZLEtBQUt1ZSxrQkFDcEN2ZSxLQUFLNGIsa0JBQWtCRSxJQUlnQyxLQUE5QnRFLGFBQU8sRUFBUEEsRUFBU3dFLG9CQUVqQ2hTLEVBQUdpUyxPQUFPalMsRUFBR2tTLE9BQ2JsUyxFQUFHbVMsVUFBVW5TLEVBQUdvUyxVQUFXcFMsRUFBR3FTLHNCQUUvQnJTLEVBQUdzUyxXQUFXdFMsRUFBR3lVLE9BQVEsRUFBR04sR0FDNUJuVSxFQUFHNE4sUUFBUTVOLEVBQUdrUyxTQUdmLFlBQUF3QyxnQkFBQSxTQUNDdEssRUFDQXlHLEVBQ0FDLEVBQ0F0RCxHQU1NLE1BQTRDeFgsS0FBMUNnSyxFQUFFLEtBQUVvTixFQUFVLGFBQUV1SCxFQUFxQix3QkFDdkMsRUFBb0I3RCxFQUFjQSxFQUFZdkksZ0JBQWtCLENBQUV2UyxLQUFLMEssTUFBTzFLLEtBQUsySyxRQUFqRkQsRUFBSyxLQUFFQyxFQUFNLEtBR3JCLElBQUl5TSxFQUFKLENBSUEsR0FBSXlELEVBQVk5YSxPQUFTLEVBQ3hCLE1BQU0sSUFBSXdLLE1BQU0sdURBQXVENkosRUFBUWxLLEtBQUksbUVBRXBGLElBQU0wVSxFQUFjL0QsRUFBWSxHQUdoQyxHQUFrQyxJQUE5QitELEVBQVl4VSxjQUNmLE1BQU0sSUFBSUcsTUFBTSwyR0FBMkdxVSxFQUFZMVUsS0FBSSxVQUFVMFUsRUFBWXhVLGNBQWEsZ0JBRy9LLElBQU1ELEVBQWF5VSxFQUFZck0sZ0JBQy9CLEdBQUlwUSxLQUFLMGMsSUFBSTFVLEVBQVcsR0FBS0EsRUFBVyxHQUFLTyxFQUFRQyxHQUFVLEtBQzlELE1BQU0sSUFBSUosTUFBTSx5QkFBeUJKLEVBQVcsR0FBS0EsRUFBVyxJQUFJMlUsUUFBUSxHQUFFLHFDQUFxQzNVLEVBQVcsR0FBRSxLQUFLQSxFQUFXLEdBQUUsZ0JBQWdCTyxFQUFLLEtBQUtDLEVBQU0sTUFHdkwsSUFBTW1SLEVBQVkxSCxFQUFRMkssbUJBRzFCL2UsS0FBSzJhLFVBQVVtQixHQUFXLEVBQU9qQixFQUFhQyxHQUs5QzFHLEVBQVF1QyxpQkFBaUJtRixFQUFXLGtCQUFtQixFQUFHLEVBQUF4VCxLQUUxRCxJQUFNMFcsR0FBY3hILGFBQU8sRUFBUEEsRUFBU3dILGNBQWUsR0FDNUM1SyxFQUFRdUMsaUJBQWlCbUYsRUFBVyxtQkFBb0IsQ0FBQ2tELEVBQWN0VSxFQUFPc1UsRUFBY3JVLEdBQVMsRUFBQTNDLE9BQ3JHLElBQU1pWCxHQUFnQnpILGFBQU8sRUFBUEEsRUFBU3lILGdCQUFpQixFQUMxQ0MsRUFBbUIsQ0FBQy9jLEtBQUtvSyxNQUFNN0IsRUFBUXVVLEdBQWdCOWMsS0FBS29LLE1BQU01QixFQUFTc1UsSUFDakY3SyxFQUFRdUMsaUJBQWlCbUYsRUFBVyx3QkFBeUJvRCxFQUFrQixFQUFBbFgsT0FDL0UsSUFBTWpJLEVBQVMsRUFBSW1mLEVBQWlCLEdBQUtBLEVBQWlCLEdBQzFELFFBQW9DMWdCLElBQWhDd0IsS0FBS21mLHdCQUF5Q1IsR0FBeUJBLEVBQXNCNWUsT0FBU0EsRUFBUyxDQUdsSCxJQURBLElBQU15ZSxFQUFVLElBQUk1aEIsYUFBYW1ELEdBQ3hCOUMsRUFBSSxFQUFHQSxFQUFJOEMsRUFBUTlDLElBQzNCdWhCLEVBQVF2aEIsR0FBS0EsRUFFZCtDLEtBQUsyZSxzQkFBd0JILEVBQzdCeGUsS0FBS21mLHVCQUF5Qm5mLEtBQUs4WSxpQkFBaUIwRixHQUVyRHhVLEVBQUdtTyxXQUFXbk8sRUFBR29PLGFBQWNwWSxLQUFLbWYsd0JBQ3BDbmYsS0FBSzRiLGtCQUFrQkUsSUFJZ0MsS0FBOUJ0RSxhQUFPLEVBQVBBLEVBQVN3RSxvQkFFakNoUyxFQUFHaVMsT0FBT2pTLEVBQUdrUyxPQUNibFMsRUFBR21TLFVBQVVuUyxFQUFHb1MsVUFBV3BTLEVBQUdxUyxzQkFFL0JyUyxFQUFHc1MsV0FBV3RTLEVBQUc0UyxNQUFPLEVBQUc3YyxHQUMzQmlLLEVBQUc0TixRQUFRNU4sRUFBR2tTLFNBR2YsWUFBQXhFLFdBQUEsV0FDQyxPQUFPMVgsS0FBS2dLLElBR2IsWUFBQW9WLFVBQUEsU0FBVUMsR0FDSCxJQU9GMVosRUFQSXFFLEVBQW9CaEssS0FBbEIsR0FBRXFLLEVBQWdCckssS0FBTCxZQUtqQixFQUFvQnFmLEVBQVU5TSxnQkFBNUI3SCxFQUFLLEtBQUVDLEVBQU0sS0FDZmEsRUFBa0Q2VCxFQUFTLGNBQTVDOVQsRUFBbUM4VCxFQUFTLE9BQXBDaFUsRUFBMkJnVSxFQUFTLFNBQTFCblUsRUFBaUJtVSxFQUFTLGFBRWpFLE9BQVFuVSxHQUNQLEtBQUssRUFBQW5ELGdCQUNhdkosSUFBYndMLEVBQUdoQyxPQUVOd0QsRUFBZ0IsRUFDaEJILEVBQVdyQixFQUFHaEIsS0FDZHVDLEVBQVN2QixFQUFHaEMsTUFDWnJDLEVBQVMsSUFBSS9JLGFBQWE4TixFQUFRQyxFQUFTYSxJQUUzQzdGLEVBQVMsSUFBSWIsWUFBWTRGLEVBQVFDLEVBQVNhLEdBSTNDLE1BQ0QsS0FBSyxFQUFBeEQsTUFHSndELEVBQWdCLEVBQ2hCSCxFQUFXckIsRUFBR2hCLEtBQ2RyRCxFQUFTLElBQUkvSSxhQUFhOE4sRUFBUUMsRUFBU2EsR0FDM0MsTUFDRCxLQUFLLEVBQUF2RCxjQUNKLEdBQUlvQyxJQUFnQixFQUFBakIsTUFBTyxDQUUxQm9DLEVBQWdCLEVBQ2hCSCxFQUFXckIsRUFBR2hCLEtBQ2RyRCxFQUFTLElBQUk5RCxXQUFXNkksRUFBUUMsRUFBU2EsR0FDekMsTUFHREEsRUFBZ0IsRUFDaEJILEVBQVlyQixFQUE4QjBELGFBQzFDbkMsRUFBU3ZCLEVBQUczQixhQUNaMUMsRUFBUyxJQUFJN0ksWUFBWTROLEVBQVFDLEVBQVNhLEdBRzFDLE1BQ0QsS0FBSyxFQUFBckQsZUFFSnFELEVBQWdCLEVBQ2hCSCxFQUFZckIsRUFBOEIwRCxhQUMxQ25DLEVBQVN2QixFQUFHM0IsYUFDWjFDLEVBQVMsSUFBSTdJLFlBQVk0TixFQUFRQyxFQUFTYSxHQUcxQyxNQUNELEtBQUssRUFBQW5ELGFBRUptRCxFQUFnQixFQUNoQkgsRUFBWXJCLEVBQThCMEQsYUFDMUMvSCxFQUFTLElBQUk3SSxZQUFZNE4sRUFBUUMsRUFBU2EsR0FHMUMsTUFDRCxLQUFLLEVBQUF0RCxLQVNMLEtBQUssRUFBQUUsTUFFSm9ELEVBQWdCLEVBQ2hCSCxFQUFZckIsRUFBOEIwRCxhQUMxQ25DLEVBQVN2QixFQUFHMUIsSUFDWjNDLEVBQVMsSUFBSTZMLFdBQVc5RyxFQUFRQyxFQUFTYSxHQUd6QyxNQUNELEtBQUssRUFBQWxELElBRUprRCxFQUFnQixFQUNoQkgsRUFBWXJCLEVBQThCMEQsYUFDMUMvSCxFQUFTLElBQUk2TCxXQUFXOUcsRUFBUUMsRUFBU2EsR0FHekMsTUFDRCxRQUNDLE1BQU0sSUFBSWpCLE1BQU0sNEJBQTRCVyxFQUFZLHFCQUcxRCxHQUFJbEwsS0FBS3NmLGNBQWUsQ0FFdkJ0VixFQUFHdVYsV0FBVyxFQUFHLEVBQUc3VSxFQUFPQyxFQUFRVSxFQUFVRSxFQUFRNUYsR0FDN0MsSUFBQXlFLEVBQXdCaVYsRUFBUyxjQUFsQnRnQixFQUFTc2dCLEVBQVMsS0FDbkNHLEVBQWdCOVUsRUFBUUMsRUFBU1AsRUFHakNxVixFQUEwQnZVLElBQWlCLEVBQUFuRCxZQUFjcEMsRUFBTzBMLGNBQWdCdk0sWUFFaEZoQyxFQUFPMmMsRUFBMEIsSUFBSTFjLFNBQVU0QyxFQUF1QmxKLGFBQVUrQixFQUVsRmtoQixFQUE2Qi9aLEVBR2pDLEdBQUl1RixJQUFpQm5NLEVBQ3BCLE9BQVFBLEdBQ1AsS0FBSyxFQUFBZ0osV0FDTCxLQUFLLEVBQUFDLE1BQ0owWCxFQUFTLElBQUk5aUIsYUFBYTRpQixHQUMxQixNQUNELEtBQUssRUFBQXZYLGNBQ0p5WCxFQUFTLElBQUk3ZCxXQUFXMmQsR0FDeEIsTUFDRCxLQUFLLEVBQUF0WCxLQUNKd1gsRUFBUyxJQUFJcE8sVUFBVWtPLEdBQ3ZCLE1BQ0QsS0FBSyxFQUFBclgsZUFDSnVYLEVBQVMsSUFBSTVhLFlBQVkwYSxHQUN6QixNQUNELEtBQUssRUFBQXBYLE1BQ0pzWCxFQUFTLElBQUluTyxXQUFXaU8sR0FDeEIsTUFDRCxLQUFLLEVBQUFuWCxhQUNKcVgsRUFBUyxJQUFJNWlCLFlBQVkwaUIsR0FDekIsTUFDRCxLQUFLLEVBQUFsWCxJQUNKb1gsRUFBUyxJQUFJbE8sV0FBV2dPLEdBQ3hCLE1BQ0QsUUFDQyxNQUFNLElBQUlqVixNQUFNLG9CQUFvQnhMLEVBQUkscUJBSzNDLEdBQUkwZ0IsR0FBMkJDLElBQVcvWixHQUFVeUUsSUFBa0JvQixFQUNyRSxJQUFLLElBQUl2TyxFQUFJLEVBQUcsRUFBU3lOLEVBQVFDLEVBQVExTixFQUFJLEVBQVFBLElBR3BELElBRkEsSUFBTTBpQixFQUFTMWlCLEVBQUl1TyxFQUNib1UsRUFBUzNpQixFQUFJbU4sRUFDVnlILEVBQUksRUFBR0EsRUFBSXpILEVBQWV5SCxJQUVqQzZOLEVBQU9FLEVBQVMvTixHQURiNE4sRUFDa0IsRUFBQTFZLFdBQVdqRSxFQUFPLEdBQUs2YyxFQUFTOU4sSUFBSSxHQUVwQ2xNLEVBQU9nYSxFQUFTOU4sR0FTekMsT0FISTZOLEVBQU8zZixTQUFXeWYsSUFDckJFLEVBQVNBLEVBQU9wWixNQUFNLEVBQUdrWixJQUVuQkUsRUFFUCxNQUFNLElBQUluVixNQUFNLGtEQUFrRFAsRUFBRytHLHVCQUF1Qi9HLEVBQUcyRyxhQUFZLE1BSXJHLFlBQUEyTyxZQUFSLFdBQ1MsSUFBQXRWLEVBQU9oSyxLQUFJLEdBQ25CLE9BQU9nSyxFQUFHK0csdUJBQXVCL0csRUFBRzJHLGNBQWdCM0csRUFBR2dILHNCQUdyRCxZQUFBNk8sTUFBQSxhQUlILFlBQUFDLDhCQUFBLFNBQThCVCxFQUFzQnhQLEdBQ25ELElBQUs3UCxLQUFLa1gsU0FDVCxNQUFNLElBQUkzTSxNQUFNLGdEQUlqQixJQUFNd1YsRUFBV1YsRUFBVTdNLGNBQzNCLEdBQUl1TixFQUFTaGdCLE9BQVMsRUFDckIsTUFBTSxJQUFJd0ssTUFBTSxjQUFjOFUsRUFBVW5WLEtBQUksb0pBRTdDLElBQU04VixFQUEwQmhnQixLQUFLa1gsU0FBUytJLFdBQVcxZixJQUFJc1AsR0FDN0RtUSxFQUF3QkUsZUFBaUJILEVBQVMsR0FDbERDLEVBQXdCRyxhQUFjLEdBR3ZDLFlBQUFDLGdCQUFBLFdBQ0MsSUFBS3BnQixLQUFLa1gsU0FDVCxNQUFNLElBQUkzTSxNQUFNLGdEQUVULElBQUFQLEVBQU9oSyxLQUFJLEdBRWJ1YixFQUFXdmIsS0FBS2tYLFNBQVNtSixZQUFZLElBQUlDLEVBQU1DLFNBQ3JEdlcsRUFBR3VSLFNBQVNBLEVBQVNqWixFQUFHaVosRUFBU2haLEVBQUdnWixFQUFTN1EsTUFBTzZRLEVBQVM1USxRQUU3RDNLLEtBQUtrWCxTQUFTc0osZ0JBQWdCLE1BRTlCeGdCLEtBQUtrWCxTQUFTdUosY0FHZixZQUFBOU4sUUFBQSxrQkFFUTNTLEtBQUtrWCxVQUVkLEVBeGtDQSxHQUFhLEVBQUF3QixnQix1UEN2QmIsSUFBTWdJLEVBQXFDLEdBSzlCLEVBQUEzVCxrQkFBb0Isb0JBS3BCLEVBQUFFLHVCQUF5Qix5QkFHekIsRUFBQUoseUJBQTJCLDJCQUMzQixFQUFBRCw4QkFBZ0MsZ0NBR2hDLEVBQUErVCxvQkFBc0Isc0JBTXRCLEVBQUF6VCx1QkFBeUIseUJBRXRDLHdCQUNDbEQsRUFDQTRXLEVBQ0EzVyxFQUNBNFcsR0FHQSxRQUhBLElBQUFBLE9BQUEsUUFHa0NyaUIsSUFBOUJraUIsRUFBV0UsR0FBOEIsT0FBT0YsRUFBV0UsR0FFL0QsSUFBSUUsRUFDSixJQUNDQSxFQUFZOVcsRUFBRzJDLGFBQWFpVSxHQUMzQixNQUFPMWpCLElBYVQsT0FaSTRqQixHQUVISixFQUFXRSxHQUFpQkUsRUFDNUJyVSxRQUFRa0wsSUFBSSxxQkFBcUJpSixFQUFhLE9BRTlDRixFQUFXRSxJQUFpQixFQUM1Qm5VLFFBQVFDLEtBQUssZ0JBQWVtVSxFQUFXLFlBQWMsSUFBRSxjQUFjRCxFQUFhLE1BRzlFRSxHQUFjRCxHQUNsQjVXLEVBQWMsNERBQTREMlcsRUFBYSxLQUVqRkUsSSx5SENqRFIseUJBQ0M5VyxFQUNBQyxFQUNBOFcsRUFDQUMsRUFDQTdNLEdBR0EsSUFBTVIsRUFBUzNKLEVBQUdpWCxhQUFhRCxHQUMvQixPQUFLck4sR0FNTDNKLEVBQUcrVyxhQUFhcE4sRUFBUW9OLEdBR3hCL1csRUFBRzRKLGNBQWNELEdBR0QzSixFQUFHa1gsbUJBQW1Cdk4sRUFBUTNKLEVBQUdtWCxnQkFPMUN4TixHQUpOMUosRUFBYyxzQkFBcUIrVyxJQUFlaFgsRUFBRzZKLGdCQUFrQixXQUFhLFVBQVEsbUJBQ2xGTSxFQUFjLGlCQUFpQkEsRUFBVyxJQUFNLElBQUUsS0FBS25LLEVBQUdvWCxpQkFBaUJ6TixHQUFPLEtBQ3JGLFFBaEJQMUosRUFBYyw2QkFDUCxPQW9CVCxvQkFBeUJELEdBR3hCLE1BQTBDLG9CQUEzQnFYLHdCQUEwQ3JYLGFBQWNxWCx3QkFBcUUsb0JBQWxDQywrQkFBaUR0WCxhQUFjc1gsK0JBSTFLLHNCQUEyQjdpQixHQUMxQixPQUFnQyxJQUF4QkEsRUFBU0EsRUFBUSxLLDJGQ3ZDMUIsaUJBS0MsV0FBYTZELEVBQU9DLEVBQU9nZixFQUFPQyxRQUFyQixJQUFBbGYsTUFBQSxRQUFPLElBQUFDLE1BQUEsUUFBTyxJQUFBZ2YsTUFBQSxRQUFPLElBQUFDLE1BQUEsR0FDakN4aEIsS0FBS3NDLEVBQUlBLEVBQ1R0QyxLQUFLdUMsRUFBSUEsRUFDVHZDLEtBQUt1aEIsRUFBSUEsRUFDVHZoQixLQUFLd2hCLEVBQUlBLEVBZVgsT0FiQyxzQkFBSSxvQkFBSyxDLElBQVQsV0FDQyxPQUFPeGhCLEtBQUt1aEIsRyxnQ0FFYixzQkFBSSxxQkFBTSxDLElBQVYsV0FDQyxPQUFPdmhCLEtBQUt3aEIsRyxnQ0FFYixZQUFBQyxLQUFBLFNBQUtDLEdBS0osT0FKQTFoQixLQUFLc0MsRUFBSW9mLEVBQUVwZixFQUNYdEMsS0FBS3VDLEVBQUltZixFQUFFbmYsRUFDWHZDLEtBQUt1aEIsRUFBSUcsRUFBRUgsRUFDWHZoQixLQUFLd2hCLEVBQUlFLEVBQUVGLEVBQ0p4aEIsTUFFVCxFQXhCQSxHQUFhLEVBQUF1Z0IsVyxRQ0RibGtCLEVBQU9ELFFBQVUsOEksUUNBakJDLEVBQU9ELFFBQVUsMGtCLFFDQWpCQyxFQUFPRCxRQUFVLCs3QyxRQ0FqQkMsRUFBT0QsUUFBVSxxcEMsUUNBakJDLEVBQU9ELFFBQVUsK3RDLFFDQWpCQyxFQUFPRCxRQUFVLGdOLFFDQWpCQyxFQUFPRCxRQUFVLHlPLFFDQWpCQyxFQUFPRCxRQUFVLHlPLFFDQWpCQyxFQUFPRCxRQUFVLHlsQixRQ0FqQkMsRUFBT0QsUUFBVSxnb0NDQ2J1bEIsRUFBMkIsR0FHL0IsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQnJqQixJQUFqQnNqQixFQUNILE9BQU9BLEVBQWExbEIsUUFHckIsSUFBSUMsRUFBU3NsQixFQUF5QkUsR0FBWSxDQUNqREUsR0FBSUYsRUFDSkcsUUFBUSxFQUNSNWxCLFFBQVMsSUFVVixPQU5BNmxCLEVBQW9CSixHQUFVbGpCLEtBQUt0QyxFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTd2xCLEdBRzNFdmxCLEVBQU8ybEIsUUFBUyxFQUdUM2xCLEVBQU9ELFFDdkJmd2xCLEVBQW9CTSxFQUFJLENBQUM5bEIsRUFBUytsQixLQUNqQyxJQUFJLElBQUl4aUIsS0FBT3dpQixFQUNYUCxFQUFvQlEsRUFBRUQsRUFBWXhpQixLQUFTaWlCLEVBQW9CUSxFQUFFaG1CLEVBQVN1RCxJQUM1RTNCLE9BQU93RyxlQUFlcEksRUFBU3VELEVBQUssQ0FBRTBpQixZQUFZLEVBQU05aEIsSUFBSzRoQixFQUFXeGlCLE1DSjNFaWlCLEVBQW9CeGEsRUFBSSxXQUN2QixHQUEwQixpQkFBZmtiLFdBQXlCLE9BQU9BLFdBQzNDLElBQ0MsT0FBT3RpQixNQUFRLElBQUkvQixTQUFTLGNBQWIsR0FDZCxNQUFPZixHQUNSLEdBQXNCLGlCQUFYcWxCLE9BQXFCLE9BQU9BLFFBTGpCLEdDQXhCWCxFQUFvQlksSUFBT25tQixLQUMxQkEsRUFBUzJCLE9BQU9zRixPQUFPakgsSUFDWG9tQixXQUFVcG1CLEVBQU9vbUIsU0FBVyxJQUN4Q3prQixPQUFPd0csZUFBZW5JLEVBQVEsVUFBVyxDQUN4Q2dtQixZQUFZLEVBQ1psaUIsSUFBSyxLQUNKLE1BQU0sSUFBSW9LLE1BQU0sMEZBQTRGbE8sRUFBTzBsQixPQUc5RzFsQixHQ1RSdWxCLEVBQW9CUSxFQUFJLENBQUMvZSxFQUFLcWYsSUFBVTFrQixPQUFPRyxVQUFVQyxlQUFlTyxLQUFLMEUsRUFBS3FmLEdDQ2xGZCxFQUFvQmUsRUFBS3ZtQixJQUNILG9CQUFYK0ksUUFBMEJBLE9BQU93QixhQUMxQzNJLE9BQU93RyxlQUFlcEksRUFBUytJLE9BQU93QixZQUFhLENBQUVsSSxNQUFPLFdBRTdEVCxPQUFPd0csZUFBZXBJLEVBQVMsYUFBYyxDQUFFcUMsT0FBTyxLLHVRQ0x2RCxhQVVDLDRFQVZRLEVBQUFpYSxnQkFDVCxhQVVDLDBFQVRBLEVBQUEzUSxjQVVBLHFFQVZZLEVBQUFDLFNBV1osNkVBWG1CLEVBQUFDLGlCQVluQixvRUFaa0MsRUFBQUMsUUFhbEMsOEVBYndDLEVBQUFDLGtCQWN4QyxxRUFkd0QsRUFBQUMsU0FleEQsNEVBZitELEVBQUFDLGdCQWdCL0QsbUVBaEI2RSxFQUFBQyxPQW1CN0UsdUVBbEJBLEVBQUFJLFdBbUJBLHNFQW5CUyxFQUFBRCxVQW9CVCw2RUFwQmlCLEVBQUFHLGlCQXFCakIsc0VBckJnQyxFQUFBQyxVQWdCaEMscUVBZkEsRUFBQU8sU0FnQkEscUVBaEJPLEVBQUFELFUiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJXZWJHTENvbXB1dGVcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiV2ViR0xDb21wdXRlXCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiLy8gYWxnb3JpdGhtOiBmdHA6Ly9mdHAuZm94LXRvb2xraXQub3JnL3B1Yi9mYXN0aGFsZmZsb2F0Y29udmVyc2lvbi5wZGZcblxuY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDQpO1xuY29uc3QgZmxvYXRWaWV3ID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIpO1xuY29uc3QgdWludDMyVmlldyA9IG5ldyBVaW50MzJBcnJheShidWZmZXIpO1xuXG5cbmNvbnN0IGJhc2VUYWJsZSA9IG5ldyBVaW50MzJBcnJheSg1MTIpO1xuY29uc3Qgc2hpZnRUYWJsZSA9IG5ldyBVaW50MzJBcnJheSg1MTIpO1xuXG5mb3IobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICBjb25zdCBlID0gaSAtIDEyNztcblxuICAgIC8vIHZlcnkgc21hbGwgbnVtYmVyICgwLCAtMClcbiAgICBpZiAoZSA8IC0yNykge1xuICAgICAgICBiYXNlVGFibGVbaSB8IDB4MDAwXSA9IDB4MDAwMDtcbiAgICAgICAgYmFzZVRhYmxlW2kgfCAweDEwMF0gPSAweDgwMDA7XG4gICAgICAgIHNoaWZ0VGFibGVbaSB8IDB4MDAwXSA9IDI0O1xuICAgICAgICBzaGlmdFRhYmxlW2kgfCAweDEwMF0gPSAyNDtcblxuICAgIC8vIHNtYWxsIG51bWJlciAoZGVub3JtKVxuICAgIH0gZWxzZSBpZiAoZSA8IC0xNCkge1xuICAgICAgICBiYXNlVGFibGVbaSB8IDB4MDAwXSA9ICAweDA0MDAgPj4gKC1lIC0gMTQpO1xuICAgICAgICBiYXNlVGFibGVbaSB8IDB4MTAwXSA9ICgweDA0MDAgPj4gKC1lIC0gMTQpKSB8IDB4ODAwMDtcbiAgICAgICAgc2hpZnRUYWJsZVtpIHwgMHgwMDBdID0gLWUgLSAxO1xuICAgICAgICBzaGlmdFRhYmxlW2kgfCAweDEwMF0gPSAtZSAtIDE7XG5cbiAgICAvLyBub3JtYWwgbnVtYmVyXG4gICAgfSBlbHNlIGlmIChlIDw9IDE1KSB7XG4gICAgICAgIGJhc2VUYWJsZVtpIHwgMHgwMDBdID0gIChlICsgMTUpIDw8IDEwO1xuICAgICAgICBiYXNlVGFibGVbaSB8IDB4MTAwXSA9ICgoZSArIDE1KSA8PCAxMCkgfCAweDgwMDA7XG4gICAgICAgIHNoaWZ0VGFibGVbaSB8IDB4MDAwXSA9IDEzO1xuICAgICAgICBzaGlmdFRhYmxlW2kgfCAweDEwMF0gPSAxMztcblxuICAgIC8vIGxhcmdlIG51bWJlciAoSW5maW5pdHksIC1JbmZpbml0eSlcbiAgICB9IGVsc2UgaWYgKGUgPCAxMjgpIHtcbiAgICAgICAgYmFzZVRhYmxlW2kgfCAweDAwMF0gPSAweDdjMDA7XG4gICAgICAgIGJhc2VUYWJsZVtpIHwgMHgxMDBdID0gMHhmYzAwO1xuICAgICAgICBzaGlmdFRhYmxlW2kgfCAweDAwMF0gPSAyNDtcbiAgICAgICAgc2hpZnRUYWJsZVtpIHwgMHgxMDBdID0gMjQ7XG5cbiAgICAvLyBzdGF5IChOYU4sIEluZmluaXR5LCAtSW5maW5pdHkpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZVRhYmxlW2kgfCAweDAwMF0gPSAweDdjMDA7XG4gICAgICAgIGJhc2VUYWJsZVtpIHwgMHgxMDBdID0gMHhmYzAwO1xuICAgICAgICBzaGlmdFRhYmxlW2kgfCAweDAwMF0gPSAxMztcbiAgICAgICAgc2hpZnRUYWJsZVtpIHwgMHgxMDBdID0gMTM7XG4gICAgfVxufVxuXG4vKipcbiAqIHJvdW5kIGEgbnVtYmVyIHRvIGEgaGFsZiBmbG9hdCBudW1iZXIgYml0cy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gLSBkb3VibGUgZmxvYXRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGhhbGYgZmxvYXQgbnVtYmVyIGJpdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kVG9GbG9hdDE2Qml0cyhudW0pIHtcbiAgICBmbG9hdFZpZXdbMF0gPSBudW07XG5cbiAgICBjb25zdCBmID0gdWludDMyVmlld1swXTtcbiAgICBjb25zdCBlID0gKGYgPj4gMjMpICYgMHgxZmY7XG4gICAgcmV0dXJuIGJhc2VUYWJsZVtlXSArICgoZiAmIDB4MDA3ZmZmZmYpID4+IHNoaWZ0VGFibGVbZV0pO1xufVxuXG5cbmNvbnN0IG1hbnRpc3NhVGFibGUgPSBuZXcgVWludDMyQXJyYXkoMjA0OCk7XG5jb25zdCBleHBvbmVudFRhYmxlID0gbmV3IFVpbnQzMkFycmF5KDY0KTtcbmNvbnN0IG9mZnNldFRhYmxlID0gbmV3IFVpbnQzMkFycmF5KDY0KTtcblxubWFudGlzc2FUYWJsZVswXSA9IDA7XG5mb3IobGV0IGkgPSAxOyBpIDwgMTAyNDsgKytpKSB7XG4gICAgbGV0IG0gPSBpIDw8IDEzOyAgICAvLyB6ZXJvIHBhZCBtYW50aXNzYSBiaXRzXG4gICAgbGV0IGUgPSAwOyAgICAgICAgICAvLyB6ZXJvIGV4cG9uZW50XG5cbiAgICAvLyBub3JtYWxpemVkXG4gICAgd2hpbGUoKG0gJiAweDAwODAwMDAwKSA9PT0gMCkge1xuICAgICAgICBlIC09IDB4MDA4MDAwMDA7ICAgIC8vIGRlY3JlbWVudCBleHBvbmVudFxuICAgICAgICBtIDw8PSAxO1xuICAgIH1cblxuICAgIG0gJj0gfjB4MDA4MDAwMDA7ICAgLy8gY2xlYXIgbGVhZGluZyAxIGJpdFxuICAgIGUgKz0gMHgzODgwMDAwMDsgICAgLy8gYWRqdXN0IGJpYXNcblxuICAgIG1hbnRpc3NhVGFibGVbaV0gPSBtIHwgZTtcbn1cbmZvcihsZXQgaSA9IDEwMjQ7IGkgPCAyMDQ4OyArK2kpIHtcbiAgICBtYW50aXNzYVRhYmxlW2ldID0gMHgzODAwMDAwMCArICgoaSAtIDEwMjQpIDw8IDEzKTtcbn1cblxuZXhwb25lbnRUYWJsZVswXSA9IDA7XG5mb3IobGV0IGkgPSAxOyBpIDwgMzE7ICsraSkge1xuICAgIGV4cG9uZW50VGFibGVbaV0gPSBpIDw8IDIzO1xufVxuZXhwb25lbnRUYWJsZVszMV0gPSAweDQ3ODAwMDAwO1xuZXhwb25lbnRUYWJsZVszMl0gPSAweDgwMDAwMDAwO1xuZm9yKGxldCBpID0gMzM7IGkgPCA2MzsgKytpKSB7XG4gICAgZXhwb25lbnRUYWJsZVtpXSA9IDB4ODAwMDAwMDAgKyAoKGkgLSAzMikgPDwgMjMpO1xufVxuZXhwb25lbnRUYWJsZVs2M10gPSAweGM3ODAwMDAwO1xuXG5vZmZzZXRUYWJsZVswXSA9IDA7XG5mb3IobGV0IGkgPSAxOyBpIDwgNjQ7ICsraSkge1xuICAgIGlmIChpID09PSAzMikge1xuICAgICAgICBvZmZzZXRUYWJsZVtpXSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb2Zmc2V0VGFibGVbaV0gPSAxMDI0O1xuICAgIH1cbn1cblxuLyoqXG4gKiBjb252ZXJ0IGEgaGFsZiBmbG9hdCBudW1iZXIgYml0cyB0byBhIG51bWJlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmbG9hdDE2Yml0cyAtIGhhbGYgZmxvYXQgbnVtYmVyIGJpdHNcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGRvdWJsZSBmbG9hdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvTnVtYmVyKGZsb2F0MTZiaXRzKSB7XG4gICAgY29uc3QgbSA9IGZsb2F0MTZiaXRzID4+IDEwO1xuICAgIHVpbnQzMlZpZXdbMF0gPSBtYW50aXNzYVRhYmxlW29mZnNldFRhYmxlW21dICsgKGZsb2F0MTZiaXRzICYgMHgzZmYpXSArIGV4cG9uZW50VGFibGVbbV07XG4gICAgcmV0dXJuIGZsb2F0Vmlld1swXTtcbn1cbiIsImltcG9ydCB7IGNvbnZlcnRUb051bWJlciwgcm91bmRUb0Zsb2F0MTZCaXRzIH0gZnJvbSBcIi4vbGliXCI7XG5cbi8qKlxuICogcmV0dXJucyB0aGUgbmVhcmVzdCBoYWxmIHByZWNpc2lvbiBmbG9hdCByZXByZXNlbnRhdGlvbiBvZiBhIG51bWJlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhmcm91bmQobnVtKSB7XG4gICAgbnVtID0gTnVtYmVyKG51bSk7XG5cbiAgICAvLyBmb3Igb3B0aW1pemF0aW9uXG4gICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUobnVtKSB8fCBudW0gPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG5cbiAgICBjb25zdCB4MTYgPSByb3VuZFRvRmxvYXQxNkJpdHMobnVtKTtcbiAgICByZXR1cm4gY29udmVydFRvTnVtYmVyKHgxNik7XG59XG4iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5leHBvcnQgZGVmYXVsdCByb290O1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5leHBvcnQgZGVmYXVsdCBTeW1ib2w7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdFRvU3RyaW5nO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGdldFJhd1RhZyBmcm9tICcuL19nZXRSYXdUYWcuanMnO1xuaW1wb3J0IG9iamVjdFRvU3RyaW5nIGZyb20gJy4vX29iamVjdFRvU3RyaW5nLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRUYWc7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3Q7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuZXhwb3J0IGRlZmF1bHQgY29yZUpzRGF0YTtcbiIsImltcG9ydCBjb3JlSnNEYXRhIGZyb20gJy4vX2NvcmVKc0RhdGEuanMnO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc01hc2tlZDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9Tb3VyY2U7XG4iLCJpbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24uanMnO1xuaW1wb3J0IGlzTWFza2VkIGZyb20gJy4vX2lzTWFza2VkLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCB0b1NvdXJjZSBmcm9tICcuL190b1NvdXJjZS5qcyc7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc05hdGl2ZTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0Z1bmN0aW9uO1xuIiwiaW1wb3J0IGJhc2VJc05hdGl2ZSBmcm9tICcuL19iYXNlSXNOYXRpdmUuanMnO1xuaW1wb3J0IGdldFZhbHVlIGZyb20gJy4vX2dldFZhbHVlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0TmF0aXZlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFZhbHVlO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVDcmVhdGU7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaEdldDtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoSGFzO1xuIiwiaW1wb3J0IGhhc2hDbGVhciBmcm9tICcuL19oYXNoQ2xlYXIuanMnO1xuaW1wb3J0IGhhc2hEZWxldGUgZnJvbSAnLi9faGFzaERlbGV0ZS5qcyc7XG5pbXBvcnQgaGFzaEdldCBmcm9tICcuL19oYXNoR2V0LmpzJztcbmltcG9ydCBoYXNoSGFzIGZyb20gJy4vX2hhc2hIYXMuanMnO1xuaW1wb3J0IGhhc2hTZXQgZnJvbSAnLi9faGFzaFNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBIYXNoO1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaENsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaERlbGV0ZTtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hTZXQ7XG4iLCJpbXBvcnQgZXEgZnJvbSAnLi9lcS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzc29jSW5kZXhPZjtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcTtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVEZWxldGU7XG4iLCJpbXBvcnQgbGlzdENhY2hlQ2xlYXIgZnJvbSAnLi9fbGlzdENhY2hlQ2xlYXIuanMnO1xuaW1wb3J0IGxpc3RDYWNoZURlbGV0ZSBmcm9tICcuL19saXN0Q2FjaGVEZWxldGUuanMnO1xuaW1wb3J0IGxpc3RDYWNoZUdldCBmcm9tICcuL19saXN0Q2FjaGVHZXQuanMnO1xuaW1wb3J0IGxpc3RDYWNoZUhhcyBmcm9tICcuL19saXN0Q2FjaGVIYXMuanMnO1xuaW1wb3J0IGxpc3RDYWNoZVNldCBmcm9tICcuL19saXN0Q2FjaGVTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IExpc3RDYWNoZTtcbiIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlQ2xlYXI7XG4iLCJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUdldDtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUhhcztcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVTZXQ7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbmV4cG9ydCBkZWZhdWx0IE1hcDtcbiIsImltcG9ydCBpc0tleWFibGUgZnJvbSAnLi9faXNLZXlhYmxlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRNYXBEYXRhO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0tleWFibGU7XG4iLCJpbXBvcnQgbWFwQ2FjaGVDbGVhciBmcm9tICcuL19tYXBDYWNoZUNsZWFyLmpzJztcbmltcG9ydCBtYXBDYWNoZURlbGV0ZSBmcm9tICcuL19tYXBDYWNoZURlbGV0ZS5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVHZXQgZnJvbSAnLi9fbWFwQ2FjaGVHZXQuanMnO1xuaW1wb3J0IG1hcENhY2hlSGFzIGZyb20gJy4vX21hcENhY2hlSGFzLmpzJztcbmltcG9ydCBtYXBDYWNoZVNldCBmcm9tICcuL19tYXBDYWNoZVNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBNYXBDYWNoZTtcbiIsImltcG9ydCBIYXNoIGZyb20gJy4vX0hhc2guanMnO1xuaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlQ2xlYXI7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlRGVsZXRlO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVHZXQ7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVIYXM7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZVNldDtcbiIsImltcG9ydCBNYXBDYWNoZSBmcm9tICcuL19NYXBDYWNoZS5qcyc7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsIi8qKlxuICogSmF2YVNjcmlwdENvcmUgPD0gMTIgYnVnXG4gKiBAc2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNzE2MDZcbiAqL1xuZXhwb3J0IGNvbnN0IGlzVHlwZWRBcnJheUluZGV4ZWRQcm9wZXJ0eVdyaXRhYmxlID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXcgVWludDhBcnJheSgxKSwgMCkud3JpdGFibGU7XG4iLCIvKipcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGFyZ2V0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gVG9JbnRlZ2VyKHRhcmdldCkge1xuICAgIGxldCBudW1iZXIgPSB0eXBlb2YgdGFyZ2V0ICE9PSBcIm51bWJlclwiID8gTnVtYmVyKHRhcmdldCkgOiB0YXJnZXQ7XG4gICAgaWYgKE51bWJlci5pc05hTihudW1iZXIpKSB7XG4gICAgICAgIG51bWJlciA9IDA7XG4gICAgfVxuICAgIHJldHVybiBNYXRoLnRydW5jKG51bWJlcik7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHhcbiAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gKiBAcmV0dXJucyB7LTEgfCAwIHwgMX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlRnVuY3Rpb24oeCwgeSkge1xuICAgIGNvbnN0IFtpc05hTl94LCBpc05hTl95XSA9IFtOdW1iZXIuaXNOYU4oeCksIE51bWJlci5pc05hTih5KV07XG5cbiAgICBpZiAoaXNOYU5feCAmJiBpc05hTl95KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGlmIChpc05hTl94KSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIGlmIChpc05hTl95KSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBpZiAoeCA8IHkpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIGlmICh4ID4geSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICBpZiAoeCA9PT0gMCAmJiB5ID09PSAwKSB7XG4gICAgICAgIGNvbnN0IFtpc1BsdXNaZXJvX3gsIGlzUGx1c1plcm9feV0gPSBbT2JqZWN0LmlzKHgsIDApLCBPYmplY3QuaXMoeSwgMCldO1xuXG4gICAgICAgIGlmICghaXNQbHVzWmVyb194ICYmIGlzUGx1c1plcm9feSkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzUGx1c1plcm9feCAmJiAhaXNQbHVzWmVyb195KSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAwO1xufVxuIiwiaW1wb3J0IHsgVG9JbnRlZ2VyIH0gZnJvbSBcIi4vc3BlY1wiO1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzQXJyYXlCdWZmZXIgfSBmcm9tIFwibG9kYXNoLWVzL2lzQXJyYXlCdWZmZXJcIjtcblxuLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IHZpZXdcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEYXRhVmlldyh2aWV3KSB7XG4gICAgcmV0dXJuIHZpZXcgaW5zdGFuY2VvZiBEYXRhVmlldztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IGtleVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZ051bWJlcktleShrZXkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiAmJiBrZXkgPT09IFRvSW50ZWdlcihrZXkpICsgXCJcIjtcbn1cbiIsImltcG9ydCBiYXNlSXNBcnJheUJ1ZmZlciBmcm9tICcuL19iYXNlSXNBcnJheUJ1ZmZlci5qcyc7XG5pbXBvcnQgYmFzZVVuYXJ5IGZyb20gJy4vX2Jhc2VVbmFyeS5qcyc7XG5pbXBvcnQgbm9kZVV0aWwgZnJvbSAnLi9fbm9kZVV0aWwuanMnO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcjtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheUJ1ZmZlcmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXlCdWZmZXI7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VVbmFyeTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFycmF5QnVmZmVyVGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNBcnJheUJ1ZmZlcjtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgbWVtb2l6ZSBmcm9tIFwibG9kYXNoLWVzL21lbW9pemVcIjtcbmltcG9ydCB7IGlzVHlwZWRBcnJheUluZGV4ZWRQcm9wZXJ0eVdyaXRhYmxlIH0gZnJvbSBcIi4vYnVnXCI7XG5pbXBvcnQgeyBpc0FycmF5QnVmZmVyLCBpc1N0cmluZ051bWJlcktleSB9IGZyb20gXCIuL2lzXCI7XG5pbXBvcnQgeyBjb252ZXJ0VG9OdW1iZXIsIHJvdW5kVG9GbG9hdDE2Qml0cyB9IGZyb20gXCIuL2xpYlwiO1xuaW1wb3J0IHsgY3JlYXRlUHJpdmF0ZVN0b3JhZ2UgfSBmcm9tIFwiLi9wcml2YXRlXCI7XG5pbXBvcnQgeyBUb0ludGVnZXIsIGRlZmF1bHRDb21wYXJlRnVuY3Rpb24gfSBmcm9tIFwiLi9zcGVjXCI7XG5cbmNvbnN0IF8gPSBjcmVhdGVQcml2YXRlU3RvcmFnZSgpO1xuXG4vKipcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGFyZ2V0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGbG9hdDE2QXJyYXkodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRhcmdldCBpbnN0YW5jZW9mIEZsb2F0MTZBcnJheTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IHRhcmdldFxuICogQHRocm93cyB7VHlwZUVycm9yfVxuICovXG5mdW5jdGlvbiBhc3NlcnRGbG9hdDE2QXJyYXkodGFyZ2V0KSB7XG4gICAgaWYgKCFpc0Zsb2F0MTZBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGlzIGlzIG5vdCBhIEZsb2F0MTZBcnJheVwiKTtcbiAgICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHt1bmtub3dufSB0YXJnZXRcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0RlZmF1bHRGbG9hdDE2QXJyYXlNZXRob2RzKHRhcmdldCkge1xuICAgIHJldHVybiB0eXBlb2YgdGFyZ2V0ID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmYXVsdEZsb2F0MTZBcnJheU1ldGhvZHMuaGFzKHRhcmdldCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtGbG9hdDE2QXJyYXl9IGZsb2F0MTZiaXRzXG4gKiBAcmV0dXJuIHtudW1iZXJbXX1cbiAqL1xuZnVuY3Rpb24gY29weVRvQXJyYXkoZmxvYXQxNmJpdHMpIHtcbiAgICBjb25zdCBsZW5ndGggPSBmbG9hdDE2Yml0cy5sZW5ndGg7XG5cbiAgICBjb25zdCBhcnJheSA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBhcnJheVtpXSA9IGNvbnZlcnRUb051bWJlcihmbG9hdDE2Yml0c1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xufVxuXG4vKiogQHR5cGUge1Byb3h5SGFuZGxlcjxGdW5jdGlvbj59ICovXG5jb25zdCBhcHBseUhhbmRsZXIgPSB7XG4gICAgYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgICAgICAvLyBwZWVsIG9mZiBwcm94eVxuICAgICAgICBpZiAoaXNGbG9hdDE2QXJyYXkodGhpc0FyZykgJiYgaXNEZWZhdWx0RmxvYXQxNkFycmF5TWV0aG9kcyhmdW5jKSkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkoZnVuYywgXyh0aGlzQXJnKS50YXJnZXQgLGFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncyk7XG4gICAgfSxcbn07XG5cbi8qKiBAdHlwZSB7UHJveHlIYW5kbGVyPEZsb2F0MTZBcnJheT59ICovXG5jb25zdCBoYW5kbGVyID0ge1xuICAgIGdldCh0YXJnZXQsIGtleSkge1xuICAgICAgICBsZXQgd3JhcHBlciA9IG51bGw7XG4gICAgICAgIGlmICghaXNUeXBlZEFycmF5SW5kZXhlZFByb3BlcnR5V3JpdGFibGUpIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0YXJnZXQgPSBfKHdyYXBwZXIpLnRhcmdldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1N0cmluZ051bWJlcktleShrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpID8gY29udmVydFRvTnVtYmVyKFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5KSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCByZXQgPSB3cmFwcGVyICE9PSBudWxsICYmIFJlZmxlY3QuaGFzKHdyYXBwZXIsIGtleSkgPyBSZWZsZWN0LmdldCh3cmFwcGVyLCBrZXkpIDogUmVmbGVjdC5nZXQodGFyZ2V0LCBrZXkpO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJldCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVHlwZWRBcnJheSBtZXRob2RzIGNhbid0IGJlIGNhbGxlZCBieSBQcm94eSBPYmplY3RcbiAgICAgICAgICAgIGxldCBwcm94eSA9IF8ocmV0KS5wcm94eTtcblxuICAgICAgICAgICAgaWYgKHByb3h5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwcm94eSA9IF8ocmV0KS5wcm94eSA9IG5ldyBQcm94eShyZXQsIGFwcGx5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBwcm94eTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXQodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGxldCB3cmFwcGVyID0gbnVsbDtcbiAgICAgICAgaWYgKCFpc1R5cGVkQXJyYXlJbmRleGVkUHJvcGVydHlXcml0YWJsZSkge1xuICAgICAgICAgICAgd3JhcHBlciA9IHRhcmdldDtcbiAgICAgICAgICAgIHRhcmdldCA9IF8od3JhcHBlcikudGFyZ2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzU3RyaW5nTnVtYmVyS2V5KGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgcm91bmRUb0Zsb2F0MTZCaXRzKHZhbHVlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBmcm96ZW4gb2JqZWN0IGNhbid0IGNoYW5nZSBwcm90b3R5cGUgcHJvcGVydHlcbiAgICAgICAgICAgIGlmICh3cmFwcGVyICE9PSBudWxsICYmICghUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpIHx8IE9iamVjdC5pc0Zyb3plbih3cmFwcGVyKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5zZXQod3JhcHBlciwga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbn07XG5cbmlmICghaXNUeXBlZEFycmF5SW5kZXhlZFByb3BlcnR5V3JpdGFibGUpIHtcbiAgICBoYW5kbGVyLmdldFByb3RvdHlwZU9mID0gKHdyYXBwZXIpID0+IHsgcmV0dXJuIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YoXyh3cmFwcGVyKS50YXJnZXQpOyB9O1xuICAgIGhhbmRsZXIuc2V0UHJvdG90eXBlT2YgPSAod3JhcHBlciwgcHJvdG90eXBlKSA9PiB7IHJldHVybiBSZWZsZWN0LnNldFByb3RvdHlwZU9mKF8od3JhcHBlcikudGFyZ2V0LCBwcm90b3R5cGUpOyB9O1xuXG4gICAgaGFuZGxlci5kZWZpbmVQcm9wZXJ0eSA9ICh3cmFwcGVyLCBrZXksIGRlc2NyaXB0b3IpID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gXyh3cmFwcGVyKS50YXJnZXQ7XG4gICAgICAgIHJldHVybiAhUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpIHx8IE9iamVjdC5pc0Zyb3plbih3cmFwcGVyKSA/IFJlZmxlY3QuZGVmaW5lUHJvcGVydHkod3JhcHBlciwga2V5LCBkZXNjcmlwdG9yKSA6IFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgIH07XG4gICAgaGFuZGxlci5kZWxldGVQcm9wZXJ0eSA9ICh3cmFwcGVyLCBrZXkpID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gXyh3cmFwcGVyKS50YXJnZXQ7XG4gICAgICAgIHJldHVybiBSZWZsZWN0Lmhhcyh3cmFwcGVyLCBrZXkpID8gUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh3cmFwcGVyLCBrZXkpIDogUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSk7XG4gICAgfTtcblxuICAgIGhhbmRsZXIuaGFzID0gKHdyYXBwZXIsIGtleSkgPT4geyByZXR1cm4gUmVmbGVjdC5oYXMod3JhcHBlciwga2V5KSB8fCBSZWZsZWN0LmhhcyhfKHdyYXBwZXIpLnRhcmdldCwga2V5KTsgfTtcblxuICAgIGhhbmRsZXIuaXNFeHRlbnNpYmxlID0gKHdyYXBwZXIpID0+IHsgcmV0dXJuIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHdyYXBwZXIpOyB9O1xuICAgIGhhbmRsZXIucHJldmVudEV4dGVuc2lvbnMgPSAod3JhcHBlcikgPT4geyByZXR1cm4gUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh3cmFwcGVyKTsgfTtcblxuICAgIGhhbmRsZXIuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gKHdyYXBwZXIsIGtleSkgPT4geyByZXR1cm4gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod3JhcHBlciwga2V5KTsgfTtcbiAgICBoYW5kbGVyLm93bktleXMgPSAod3JhcHBlcikgPT4geyByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHdyYXBwZXIpOyB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGbG9hdDE2QXJyYXkgZXh0ZW5kcyBVaW50MTZBcnJheSB7XG5cbiAgICBjb25zdHJ1Y3RvcihpbnB1dCwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICAgIC8vIGlucHV0IEZsb2F0MTZBcnJheVxuICAgICAgICBpZiAoaXNGbG9hdDE2QXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICBzdXBlcihfKGlucHV0KS50YXJnZXQpO1xuXG4gICAgICAgIC8vIDIyLjIuMS4zLCAyMi4yLjEuNCBUeXBlZEFycmF5LCBBcnJheSwgQXJyYXlMaWtlLCBJdGVyYWJsZVxuICAgICAgICB9IGVsc2UgaWYgKGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gXCJvYmplY3RcIiAmJiAhaXNBcnJheUJ1ZmZlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIC8vIGlmIGlucHV0IGlzIG5vdCBBcnJheUxpa2UgYW5kIEl0ZXJhYmxlLCBnZXQgQXJyYXlcbiAgICAgICAgICAgIGNvbnN0IGFycmF5TGlrZSA9ICFSZWZsZWN0LmhhcyhpbnB1dCwgXCJsZW5ndGhcIikgJiYgaW5wdXRbU3ltYm9sLml0ZXJhdG9yXSAhPT0gdW5kZWZpbmVkID8gWy4uLmlucHV0XSA6IGlucHV0O1xuXG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBhcnJheUxpa2UubGVuZ3RoO1xuICAgICAgICAgICAgc3VwZXIobGVuZ3RoKTtcblxuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgLy8gc3VwZXIgKFVpbnQxNkFycmF5KVxuICAgICAgICAgICAgICAgIHRoaXNbaV0gPSByb3VuZFRvRmxvYXQxNkJpdHMoYXJyYXlMaWtlW2ldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAvLyAyMi4yLjEuMiwgMjIuMi4xLjUgcHJpbWl0aXZlLCBBcnJheUJ1ZmZlclxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBzdXBlcihpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBzdXBlcihpbnB1dCwgYnl0ZU9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBzdXBlcihpbnB1dCwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcHJveHk7XG5cbiAgICAgICAgaWYgKGlzVHlwZWRBcnJheUluZGV4ZWRQcm9wZXJ0eVdyaXRhYmxlKSB7XG4gICAgICAgICAgICBwcm94eSA9IG5ldyBQcm94eSh0aGlzLCBoYW5kbGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHdyYXBwZXIgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgXyh3cmFwcGVyKS50YXJnZXQgPSB0aGlzO1xuICAgICAgICAgICAgcHJveHkgPSBuZXcgUHJveHkod3JhcHBlciwgaGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBwcm94eSBwcml2YXRlIHN0b3JhZ2VcbiAgICAgICAgXyhwcm94eSkudGFyZ2V0ID0gdGhpcztcblxuICAgICAgICAvLyB0aGlzIHByaXZhdGUgc3RvcmFnZVxuICAgICAgICBfKHRoaXMpLnByb3h5ID0gcHJveHk7XG5cbiAgICAgICAgcmV0dXJuIHByb3h5O1xuICAgIH1cblxuICAgIC8vIHN0YXRpYyBtZXRob2RzXG4gICAgc3RhdGljIGZyb20oc3JjLCAuLi5vcHRzKSB7XG4gICAgICAgIGlmIChvcHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDE2QXJyYXkoVWludDE2QXJyYXkuZnJvbShzcmMsIHJvdW5kVG9GbG9hdDE2Qml0cykuYnVmZmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1hcEZ1bmMgPSBvcHRzWzBdO1xuICAgICAgICBjb25zdCB0aGlzQXJnID0gb3B0c1sxXTtcblxuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MTZBcnJheShVaW50MTZBcnJheS5mcm9tKHNyYywgZnVuY3Rpb24gKHZhbCwgLi4uYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIHJvdW5kVG9GbG9hdDE2Qml0cyhtYXBGdW5jLmNhbGwodGhpcywgdmFsLCAuLi5hcmdzKSk7XG4gICAgICAgIH0sIHRoaXNBcmcpLmJ1ZmZlcik7XG4gICAgfVxuXG4gICAgc3RhdGljIG9mKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDE2QXJyYXkoYXJncyk7XG4gICAgfVxuXG4gICAgLy8gaXRlcmF0ZSBtZXRob2RzXG4gICAgKiBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgZm9yKGNvbnN0IHZhbCBvZiBzdXBlcltTeW1ib2wuaXRlcmF0b3JdKCkpIHtcbiAgICAgICAgICAgIHlpZWxkIGNvbnZlcnRUb051bWJlcih2YWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAga2V5cygpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmtleXMoKTtcbiAgICB9XG5cbiAgICAqIHZhbHVlcygpIHtcbiAgICAgICAgZm9yKGNvbnN0IHZhbCBvZiBzdXBlci52YWx1ZXMoKSkge1xuICAgICAgICAgICAgeWllbGQgY29udmVydFRvTnVtYmVyKHZhbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQHR5cGUgeygpID0+IEl0ZXJhYmxlSXRlcmF0b3I8W251bWJlciwgbnVtYmVyXT59ICovXG4gICAgKiBlbnRyaWVzKCkge1xuICAgICAgICBmb3IoY29uc3QgW2ksIHZhbF0gb2Ygc3VwZXIuZW50cmllcygpKSB7XG4gICAgICAgICAgICB5aWVsZCBbaSwgY29udmVydFRvTnVtYmVyKHZhbCldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZnVuY3Rpb25hbCBtZXRob2RzXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG1hcChjYWxsYmFjaywgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgY29uc3QgdGhpc0FyZyA9IG9wdHNbMF07XG5cbiAgICAgICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBjb252ZXJ0VG9OdW1iZXIodGhpc1tpXSk7XG4gICAgICAgICAgICBhcnJheS5wdXNoKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsLCBpLCBfKHRoaXMpLnByb3h5KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MTZBcnJheShhcnJheSk7XG4gICAgfVxuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGZpbHRlcihjYWxsYmFjaywgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgY29uc3QgdGhpc0FyZyA9IG9wdHNbMF07XG5cbiAgICAgICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBjb252ZXJ0VG9OdW1iZXIodGhpc1tpXSk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWwsIGksIF8odGhpcykucHJveHkpKSB7XG4gICAgICAgICAgICAgICAgYXJyYXkucHVzaCh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDE2QXJyYXkoYXJyYXkpO1xuICAgIH1cblxuICAgIHJlZHVjZShjYWxsYmFjaywgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgbGV0IHZhbCwgc3RhcnQ7XG5cbiAgICAgICAgaWYgKG9wdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB2YWwgPSBjb252ZXJ0VG9OdW1iZXIodGhpc1swXSk7XG4gICAgICAgICAgICBzdGFydCA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWwgPSBvcHRzWzBdO1xuICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgdmFsID0gY2FsbGJhY2sodmFsLCBjb252ZXJ0VG9OdW1iZXIodGhpc1tpXSksIGksIF8odGhpcykucHJveHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICByZWR1Y2VSaWdodChjYWxsYmFjaywgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgbGV0IHZhbCwgc3RhcnQ7XG5cbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgICAgIGlmIChvcHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdmFsID0gY29udmVydFRvTnVtYmVyKHRoaXNbbGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgc3RhcnQgPSBsZW5ndGggLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsID0gb3B0c1swXTtcbiAgICAgICAgICAgIHN0YXJ0ID0gbGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQ7IGktLTspIHtcbiAgICAgICAgICAgIHZhbCA9IGNhbGxiYWNrKHZhbCwgY29udmVydFRvTnVtYmVyKHRoaXNbaV0pLCBpLCBfKHRoaXMpLnByb3h5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgZm9yRWFjaChjYWxsYmFjaywgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgY29uc3QgdGhpc0FyZyA9IG9wdHNbMF07XG5cbiAgICAgICAgZm9yKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIGNvbnZlcnRUb051bWJlcih0aGlzW2ldKSwgaSwgXyh0aGlzKS5wcm94eSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaW5kKGNhbGxiYWNrLCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCB0aGlzQXJnID0gb3B0c1swXTtcblxuICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29udmVydFRvTnVtYmVyKHRoaXNbaV0pO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsdWUsIGksIF8odGhpcykucHJveHkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluZEluZGV4KGNhbGxiYWNrLCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCB0aGlzQXJnID0gb3B0c1swXTtcblxuICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29udmVydFRvTnVtYmVyKHRoaXNbaV0pO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsdWUsIGksIF8odGhpcykucHJveHkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgZXZlcnkoY2FsbGJhY2ssIC4uLm9wdHMpIHtcbiAgICAgICAgYXNzZXJ0RmxvYXQxNkFycmF5KHRoaXMpO1xuXG4gICAgICAgIGNvbnN0IHRoaXNBcmcgPSBvcHRzWzBdO1xuXG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgaWYgKCFjYWxsYmFjay5jYWxsKHRoaXNBcmcsIGNvbnZlcnRUb051bWJlcih0aGlzW2ldKSwgaSwgXyh0aGlzKS5wcm94eSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBzb21lKGNhbGxiYWNrLCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCB0aGlzQXJnID0gb3B0c1swXTtcblxuICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjay5jYWxsKHRoaXNBcmcsIGNvbnZlcnRUb051bWJlcih0aGlzW2ldKSwgaSwgXyh0aGlzKS5wcm94eSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBjaGFuZ2UgZWxlbWVudCBtZXRob2RzXG4gICAgc2V0KGlucHV0LCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCBvZmZzZXQgPSBvcHRzWzBdO1xuXG4gICAgICAgIGxldCBmbG9hdDE2Yml0cztcblxuICAgICAgICAvLyBpbnB1dCBGbG9hdDE2QXJyYXlcbiAgICAgICAgaWYgKGlzRmxvYXQxNkFycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgZmxvYXQxNmJpdHMgPSBfKGlucHV0KS50YXJnZXQ7XG5cbiAgICAgICAgLy8gaW5wdXQgb3RoZXJzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBhcnJheUxpa2UgPSAhUmVmbGVjdC5oYXMoaW5wdXQsIFwibGVuZ3RoXCIpICYmIGlucHV0W1N5bWJvbC5pdGVyYXRvcl0gIT09IHVuZGVmaW5lZCA/IFsuLi5pbnB1dF0gOiBpbnB1dDtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5TGlrZS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZsb2F0MTZiaXRzID0gbmV3IFVpbnQxNkFycmF5KGxlbmd0aCk7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gYXJyYXlMaWtlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgICAgIGZsb2F0MTZiaXRzW2ldID0gcm91bmRUb0Zsb2F0MTZCaXRzKGFycmF5TGlrZVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlci5zZXQoZmxvYXQxNmJpdHMsIG9mZnNldCk7XG4gICAgfVxuXG4gICAgcmV2ZXJzZSgpIHtcbiAgICAgICAgYXNzZXJ0RmxvYXQxNkFycmF5KHRoaXMpO1xuXG4gICAgICAgIHN1cGVyLnJldmVyc2UoKTtcblxuICAgICAgICByZXR1cm4gXyh0aGlzKS5wcm94eTtcbiAgICB9XG5cbiAgICBmaWxsKHZhbHVlLCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBzdXBlci5maWxsKHJvdW5kVG9GbG9hdDE2Qml0cyh2YWx1ZSksIC4uLm9wdHMpO1xuXG4gICAgICAgIHJldHVybiBfKHRoaXMpLnByb3h5O1xuICAgIH1cblxuICAgIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgc3VwZXIuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCAuLi5vcHRzKTtcblxuICAgICAgICByZXR1cm4gXyh0aGlzKS5wcm94eTtcbiAgICB9XG5cbiAgICBzb3J0KC4uLm9wdHMpIHtcbiAgICAgICAgYXNzZXJ0RmxvYXQxNkFycmF5KHRoaXMpO1xuXG4gICAgICAgIGxldCBjb21wYXJlRnVuY3Rpb24gPSBvcHRzWzBdO1xuXG4gICAgICAgIGlmIChjb21wYXJlRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29tcGFyZUZ1bmN0aW9uID0gZGVmYXVsdENvbXBhcmVGdW5jdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IF9jb252ZXJ0VG9OdW1iZXIgPSBtZW1vaXplKGNvbnZlcnRUb051bWJlcik7XG5cbiAgICAgICAgc3VwZXIuc29ydCgoeCwgeSkgPT4geyByZXR1cm4gY29tcGFyZUZ1bmN0aW9uKF9jb252ZXJ0VG9OdW1iZXIoeCksIF9jb252ZXJ0VG9OdW1iZXIoeSkpOyB9KTtcblxuICAgICAgICByZXR1cm4gXyh0aGlzKS5wcm94eTtcbiAgICB9XG5cbiAgICAvLyBjb3B5IGVsZW1lbnQgbWV0aG9kc1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBzbGljZSguLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBsZXQgZmxvYXQxNmJpdHM7XG5cbiAgICAgICAgLy8gVjgsIFNwaWRlck1vbmtleSwgSmF2YVNjcmlwdENvcmUsIENoYWtyYSB0aHJvdyBUeXBlRXJyb3JcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZsb2F0MTZiaXRzID0gc3VwZXIuc2xpY2UoLi4ub3B0cyk7XG4gICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBUeXBlRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1aW50MTYgPSBuZXcgVWludDE2QXJyYXkodGhpcy5idWZmZXIsIHRoaXMuYnl0ZU9mZnNldCwgdGhpcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGZsb2F0MTZiaXRzID0gdWludDE2LnNsaWNlKC4uLm9wdHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDE2QXJyYXkoZmxvYXQxNmJpdHMuYnVmZmVyKTtcbiAgICB9XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgc3ViYXJyYXkoLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgbGV0IGZsb2F0MTZiaXRzO1xuXG4gICAgICAgIC8vIFY4LCBTcGlkZXJNb25rZXksIEphdmFTY3JpcHRDb3JlLCBDaGFrcmEgdGhyb3cgVHlwZUVycm9yXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmbG9hdDE2Yml0cyA9IHN1cGVyLnN1YmFycmF5KC4uLm9wdHMpO1xuICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgVHlwZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdWludDE2ID0gbmV3IFVpbnQxNkFycmF5KHRoaXMuYnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHRoaXMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBmbG9hdDE2Yml0cyA9IHVpbnQxNi5zdWJhcnJheSguLi5vcHRzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQxNkFycmF5KGZsb2F0MTZiaXRzLmJ1ZmZlciwgZmxvYXQxNmJpdHMuYnl0ZU9mZnNldCwgZmxvYXQxNmJpdHMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvLyBjb250YWlucyBtZXRob2RzXG4gICAgaW5kZXhPZihlbGVtZW50LCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aDtcblxuICAgICAgICBsZXQgZnJvbSA9IFRvSW50ZWdlcihvcHRzWzBdKTtcblxuICAgICAgICBpZiAoZnJvbSA8IDApIHtcbiAgICAgICAgICAgIGZyb20gKz0gbGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGZyb20gPCAwKSB7XG4gICAgICAgICAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IobGV0IGkgPSBmcm9tLCBsID0gbGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoY29udmVydFRvTnVtYmVyKHRoaXNbaV0pID09PSBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgbGFzdEluZGV4T2YoZWxlbWVudCwgLi4ub3B0cykge1xuICAgICAgICBhc3NlcnRGbG9hdDE2QXJyYXkodGhpcyk7XG5cbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG5cbiAgICAgICAgbGV0IGZyb20gPSBUb0ludGVnZXIob3B0c1swXSk7XG5cbiAgICAgICAgZnJvbSA9IGZyb20gPT09IDAgPyBsZW5ndGggOiBmcm9tICsgMTtcblxuICAgICAgICBpZiAoZnJvbSA+PSAwKSB7XG4gICAgICAgICAgICBmcm9tID0gZnJvbSA8IGxlbmd0aCA/IGZyb20gOiBsZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcm9tICs9IGxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihsZXQgaSA9IGZyb207IGktLTspIHtcbiAgICAgICAgICAgIGlmIChjb252ZXJ0VG9OdW1iZXIodGhpc1tpXSkgPT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBpbmNsdWRlcyhlbGVtZW50LCAuLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aDtcblxuICAgICAgICBsZXQgZnJvbSA9IFRvSW50ZWdlcihvcHRzWzBdKTtcblxuICAgICAgICBpZiAoZnJvbSA8IDApIHtcbiAgICAgICAgICAgIGZyb20gKz0gbGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGZyb20gPCAwKSB7XG4gICAgICAgICAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpc05hTiA9IE51bWJlci5pc05hTihlbGVtZW50KTtcbiAgICAgICAgZm9yKGxldCBpID0gZnJvbSwgbCA9IGxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjb252ZXJ0VG9OdW1iZXIodGhpc1tpXSk7XG5cbiAgICAgICAgICAgIGlmIChpc05hTiAmJiBOdW1iZXIuaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHN0cmluZyBtZXRob2RzXG4gICAgam9pbiguLi5vcHRzKSB7XG4gICAgICAgIGFzc2VydEZsb2F0MTZBcnJheSh0aGlzKTtcblxuICAgICAgICBjb25zdCBhcnJheSA9IGNvcHlUb0FycmF5KHRoaXMpO1xuXG4gICAgICAgIHJldHVybiBhcnJheS5qb2luKC4uLm9wdHMpO1xuICAgIH1cblxuICAgIHRvTG9jYWxlU3RyaW5nKC4uLm9wdHMpIHtcbiAgICAgICAgYXNzZXJ0RmxvYXQxNkFycmF5KHRoaXMpO1xuXG4gICAgICAgIGNvbnN0IGFycmF5ID0gY29weVRvQXJyYXkodGhpcyk7XG5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gYXJyYXkudG9Mb2NhbGVTdHJpbmcoLi4ub3B0cyk7XG4gICAgfVxuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICAgICAgaWYgKGlzRmxvYXQxNkFycmF5KHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJGbG9hdDE2QXJyYXlcIjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgRmxvYXQxNkFycmF5JHByb3RvdHlwZSA9IEZsb2F0MTZBcnJheS5wcm90b3R5cGU7XG5cbmNvbnN0IGRlZmF1bHRGbG9hdDE2QXJyYXlNZXRob2RzID0gbmV3IFdlYWtTZXQoKTtcbmZvcihjb25zdCBrZXkgb2YgUmVmbGVjdC5vd25LZXlzKEZsb2F0MTZBcnJheSRwcm90b3R5cGUpKSB7XG4gICAgY29uc3QgdmFsID0gRmxvYXQxNkFycmF5JHByb3RvdHlwZVtrZXldO1xuICAgIGlmICh0eXBlb2YgdmFsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZGVmYXVsdEZsb2F0MTZBcnJheU1ldGhvZHMuYWRkKHZhbCk7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBAcmV0dXJucyB7KHNlbGY6b2JqZWN0KSA9PiBvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcml2YXRlU3RvcmFnZSgpIHtcblx0Y29uc3Qgd20gPSBuZXcgV2Vha01hcCgpO1xuXHRyZXR1cm4gKHNlbGYpID0+IHtcblx0XHRsZXQgb2JqID0gd20uZ2V0KHNlbGYpO1xuXHRcdGlmIChvYmopIHtcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdFx0XHR3bS5zZXQoc2VsZiwgb2JqKTtcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fVxuXHR9O1xufVxuIiwiaW1wb3J0IHsgaXNEYXRhVmlldyB9IGZyb20gXCIuL2lzXCI7XG5pbXBvcnQgeyBjb252ZXJ0VG9OdW1iZXIsIHJvdW5kVG9GbG9hdDE2Qml0cyB9IGZyb20gXCIuL2xpYlwiO1xuXG4vKipcbiAqIHJldHVybnMgYW4gdW5zaWduZWQgMTYtYml0IGZsb2F0IGF0IHRoZSBzcGVjaWZpZWQgYnl0ZSBvZmZzZXQgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIERhdGFWaWV3LlxuICogQHBhcmFtIHtEYXRhVmlld30gZGF0YVZpZXdcbiAqIEBwYXJhbSB7bnVtYmVyfSBieXRlT2Zmc2V0XG4gKiBAcGFyYW0ge1tib29sZWFuXX0gb3B0c1xuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZsb2F0MTYoZGF0YVZpZXcsIGJ5dGVPZmZzZXQsIC4uLm9wdHMpIHtcbiAgICBpZiAoIWlzRGF0YVZpZXcoZGF0YVZpZXcpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGaXJzdCBhcmd1bWVudCB0byBnZXRGbG9hdDE2IGZ1bmN0aW9uIG11c3QgYmUgYSBEYXRhVmlld1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udmVydFRvTnVtYmVyKCBkYXRhVmlldy5nZXRVaW50MTYoYnl0ZU9mZnNldCwgLi4ub3B0cykgKTtcbn1cblxuLyoqXG4gKiBzdG9yZXMgYW4gdW5zaWduZWQgMTYtYml0IGZsb2F0IHZhbHVlIGF0IHRoZSBzcGVjaWZpZWQgYnl0ZSBvZmZzZXQgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIERhdGFWaWV3LlxuICogQHBhcmFtIHtEYXRhVmlld30gZGF0YVZpZXdcbiAqIEBwYXJhbSB7bnVtYmVyfSBieXRlT2Zmc2V0XG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7W2Jvb2xlYW5dfSBvcHRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRGbG9hdDE2KGRhdGFWaWV3LCBieXRlT2Zmc2V0LCB2YWx1ZSwgLi4ub3B0cykge1xuICAgIGlmICghaXNEYXRhVmlldyhkYXRhVmlldykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZpcnN0IGFyZ3VtZW50IHRvIHNldEZsb2F0MTYgZnVuY3Rpb24gbXVzdCBiZSBhIERhdGFWaWV3XCIpO1xuICAgIH1cblxuICAgIGRhdGFWaWV3LnNldFVpbnQxNihieXRlT2Zmc2V0LCByb3VuZFRvRmxvYXQxNkJpdHModmFsdWUpLCAuLi5vcHRzKTtcbn1cbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbmV4cG9ydCBkZWZhdWx0IGZyZWVHbG9iYWw7XG4iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgbm9kZVV0aWw7XG4iLCJpbXBvcnQge1xuXHRIQUxGX0ZMT0FULCBGTE9BVCwgVU5TSUdORURfQllURSwgQllURSwgVU5TSUdORURfU0hPUlQsIFNIT1JULCBVTlNJR05FRF9JTlQsIElOVCxcblx0TElORUFSLCBORUFSRVNULFxuXHRSRVBFQVQsIENMQU1QX1RPX0VER0UsIFJHQiwgUkdCQSxcbn0gZnJvbSAnLi9Db25zdGFudHMnO1xuXG5leHBvcnQgY29uc3QgdmFsaWREYXRhVHlwZXMgPSBbSEFMRl9GTE9BVCwgRkxPQVQsIFVOU0lHTkVEX0JZVEUsIEJZVEUsIFVOU0lHTkVEX1NIT1JULCBTSE9SVCwgVU5TSUdORURfSU5ULCBJTlRdO1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWREYXRhVHlwZSh0eXBlOiBzdHJpbmcpIHtcblx0cmV0dXJuIHZhbGlkRGF0YVR5cGVzLmluZGV4T2YodHlwZSkgPiAtMTtcbn1cblxuZXhwb3J0IGNvbnN0IHZhbGlkRmlsdGVyVHlwZXMgPSBbTElORUFSLCBORUFSRVNUXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRmlsdGVyVHlwZSh0eXBlOiBzdHJpbmcpIHtcblx0cmV0dXJuIHZhbGlkRmlsdGVyVHlwZXMuaW5kZXhPZih0eXBlKSA+IC0xO1xufVxuXG5leHBvcnQgY29uc3QgdmFsaWRXcmFwVHlwZXMgPSBbQ0xBTVBfVE9fRURHRSwgUkVQRUFUXTsgLy8gTUlSUk9SRURfUkVQRUFUXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFdyYXBUeXBlKHR5cGU6IHN0cmluZykge1xuXHRyZXR1cm4gdmFsaWRXcmFwVHlwZXMuaW5kZXhPZih0eXBlKSA+IC0xO1xufVxuXG5leHBvcnQgY29uc3QgdmFsaWRUZXh0dXJlRm9ybWF0VHlwZXMgPSBbUkdCLCBSR0JBXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkVGV4dHVyZUZvcm1hdFR5cGUodHlwZTogc3RyaW5nKSB7XG5cdHJldHVybiB2YWxpZFRleHR1cmVGb3JtYXRUeXBlcy5pbmRleE9mKHR5cGUpID4gLTE7XG59XG5cbmV4cG9ydCBjb25zdCB2YWxpZFRleHR1cmVEYXRhVHlwZXMgPSBbVU5TSUdORURfQllURV07XG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFRleHR1cmVEYXRhVHlwZSh0eXBlOiBzdHJpbmcpIHtcblx0cmV0dXJuIHZhbGlkVGV4dHVyZURhdGFUeXBlcy5pbmRleE9mKHR5cGUpID4gLTE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlcih2YWx1ZTogYW55KSB7XG5cdHJldHVybiAhaXNOYU4odmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlOiBhbnkpIHtcblx0cmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiAodmFsdWUgJSAxID09PSAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUG9zaXRpdmVJbnRlZ2VyKHZhbHVlOiBhbnkpIHtcblx0cmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgIHZhbHVlID4gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlOiBhbnkpe1xuXHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXkodmFsdWU6IGFueSkge1xuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59IiwiZXhwb3J0IGNvbnN0IEhBTEZfRkxPQVQgPSAnSEFMRl9GTE9BVCc7XG5leHBvcnQgY29uc3QgRkxPQVQgPSAnRkxPQVQnO1xuZXhwb3J0IGNvbnN0IFVOU0lHTkVEX0JZVEUgPSAnVU5TSUdORURfQllURSc7XG5leHBvcnQgY29uc3QgQllURSA9ICdCWVRFJztcbmV4cG9ydCBjb25zdCBVTlNJR05FRF9TSE9SVCA9ICdVTlNJR05FRF9TSE9SVCc7XG5leHBvcnQgY29uc3QgU0hPUlQgPSAnU0hPUlQnO1xuZXhwb3J0IGNvbnN0IFVOU0lHTkVEX0lOVCA9ICdVTlNJR05FRF9JTlQnO1xuZXhwb3J0IGNvbnN0IElOVCA9ICdJTlQnO1xuXG5leHBvcnQgY29uc3QgTElORUFSID0gJ0xJTkVBUic7XG5leHBvcnQgY29uc3QgTkVBUkVTVCA9ICdORUFSRVNUJztcblxuZXhwb3J0IGNvbnN0IFJFUEVBVCA9ICdSRVBFQVQnO1xuZXhwb3J0IGNvbnN0IENMQU1QX1RPX0VER0UgPSAnQ0xBTVBfVE9fRURHRSc7XG4vLyBleHBvcnQgY29uc3QgTUlSUk9SRURfUkVQRUFUID0gJ01JUlJPUkVEX1JFUEVBVCc7XG5cbmV4cG9ydCBjb25zdCBSR0IgPSAnUkdCJztcbmV4cG9ydCBjb25zdCBSR0JBID0gJ1JHQkEnO1xuXG5leHBvcnQgdHlwZSBEYXRhTGF5ZXJBcnJheVR5cGUgPSAgRmxvYXQzMkFycmF5IHwgVWludDhBcnJheSB8IEludDhBcnJheSB8IFVpbnQxNkFycmF5IHwgSW50MTZBcnJheSB8IFVpbnQzMkFycmF5IHwgSW50MzJBcnJheTtcbmV4cG9ydCB0eXBlIERhdGFMYXllclR5cGUgPSB0eXBlb2YgSEFMRl9GTE9BVCB8IHR5cGVvZiBGTE9BVCB8IHR5cGVvZiBVTlNJR05FRF9CWVRFIHwgdHlwZW9mIEJZVEUgfCB0eXBlb2YgVU5TSUdORURfU0hPUlQgfCB0eXBlb2YgU0hPUlQgfCB0eXBlb2YgVU5TSUdORURfSU5UIHwgdHlwZW9mIElOVDtcbmV4cG9ydCB0eXBlIERhdGFMYXllck51bUNvbXBvbmVudHMgPSAxIHwgMiB8IDMgfCA0O1xuZXhwb3J0IHR5cGUgRGF0YUxheWVyRmlsdGVyVHlwZSA9IHR5cGVvZiBMSU5FQVIgfCB0eXBlb2YgTkVBUkVTVDtcbmV4cG9ydCB0eXBlIERhdGFMYXllcldyYXBUeXBlID0gdHlwZW9mIFJFUEVBVCB8IHR5cGVvZiBDTEFNUF9UT19FREdFOy8vIHwgdHlwZW9mIE1JUlJPUkVEX1JFUEVBVDtcblxuZXhwb3J0IHR5cGUgVGV4dHVyZUZvcm1hdFR5cGUgPSB0eXBlb2YgUkdCIHwgdHlwZW9mIFJHQkE7XG5leHBvcnQgdHlwZSBUZXh0dXJlRGF0YVR5cGUgPSB0eXBlb2YgVU5TSUdORURfQllURTtcblxuZXhwb3J0IGNvbnN0IEdMU0wzID0gJzMwMCBlcyc7XG5leHBvcnQgY29uc3QgR0xTTDEgPSAnMTAwJztcbmV4cG9ydCB0eXBlIEdMU0xWZXJzaW9uID0gdHlwZW9mIEdMU0wxIHwgdHlwZW9mIEdMU0wzO1xuXG4vLyBVbmlmb3JtIHR5cGVzLlxuZXhwb3J0IGNvbnN0IEZMT0FUXzFEX1VOSUZPUk0gPSAnMWYnO1xuZXhwb3J0IGNvbnN0IEZMT0FUXzJEX1VOSUZPUk0gPSAnMmYnO1xuZXhwb3J0IGNvbnN0IEZMT0FUXzNEX1VOSUZPUk0gPSAnM2YnO1xuZXhwb3J0IGNvbnN0IEZMT0FUXzREX1VOSUZPUk0gPSAnM2YnO1xuZXhwb3J0IGNvbnN0IElOVF8xRF9VTklGT1JNID0gJzFpJztcbmV4cG9ydCBjb25zdCBJTlRfMkRfVU5JRk9STSA9ICcyaSc7XG5leHBvcnQgY29uc3QgSU5UXzNEX1VOSUZPUk0gPSAnM2knO1xuZXhwb3J0IGNvbnN0IElOVF80RF9VTklGT1JNID0gJzNpJztcblxuZXhwb3J0IHR5cGUgVW5pZm9ybURhdGFUeXBlID0gdHlwZW9mIEZMT0FUIHwgdHlwZW9mIElOVDtcbmV4cG9ydCB0eXBlIFVuaWZvcm1WYWx1ZVR5cGUgPSBcblx0bnVtYmVyIHxcblx0W251bWJlcl0gfFxuXHRbbnVtYmVyLCBudW1iZXJdIHxcblx0W251bWJlciwgbnVtYmVyLCBudW1iZXJdIHxcblx0W251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG5leHBvcnQgdHlwZSBVbmlmb3JtVHlwZSA9IFxuXHR0eXBlb2YgRkxPQVRfMURfVU5JRk9STSB8XG5cdHR5cGVvZiBGTE9BVF8yRF9VTklGT1JNIHxcblx0dHlwZW9mIEZMT0FUXzNEX1VOSUZPUk0gfFxuXHR0eXBlb2YgRkxPQVRfNERfVU5JRk9STSB8XG5cdHR5cGVvZiBJTlRfMURfVU5JRk9STSB8XG5cdHR5cGVvZiBJTlRfMkRfVU5JRk9STSB8XG5cdHR5cGVvZiBJTlRfM0RfVU5JRk9STSB8XG5cdHR5cGVvZiBJTlRfNERfVU5JRk9STTtcbmV4cG9ydCB0eXBlIFVuaWZvcm0gPSB7IFxuXHRsb2NhdGlvbjogeyBba2V5OiBzdHJpbmddOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbiB9LFxuXHR0eXBlOiBVbmlmb3JtVHlwZSxcblx0dmFsdWU6IFVuaWZvcm1WYWx1ZVR5cGUsXG59O1xuXG4iLCJpbXBvcnQgeyBzZXRGbG9hdDE2IH0gZnJvbSAnQHBldGFtb3Jpa2VuL2Zsb2F0MTYnO1xuaW1wb3J0IHsgaXNQb3NpdGl2ZUludGVnZXIsIGlzVmFsaWREYXRhVHlwZSwgaXNWYWxpZEZpbHRlclR5cGUsIGlzVmFsaWRXcmFwVHlwZSwgdmFsaWREYXRhVHlwZXMsIHZhbGlkRmlsdGVyVHlwZXMsIHZhbGlkV3JhcFR5cGVzIH0gZnJvbSAnLi9DaGVja3MnO1xuaW1wb3J0IHtcblx0SEFMRl9GTE9BVCwgRkxPQVQsIFVOU0lHTkVEX0JZVEUsIEJZVEUsIFVOU0lHTkVEX1NIT1JULCBTSE9SVCwgVU5TSUdORURfSU5ULCBJTlQsXG5cdE5FQVJFU1QsIExJTkVBUiwgQ0xBTVBfVE9fRURHRSxcblx0RGF0YUxheWVyQXJyYXlUeXBlLCBEYXRhTGF5ZXJGaWx0ZXJUeXBlLCBEYXRhTGF5ZXJOdW1Db21wb25lbnRzLCBEYXRhTGF5ZXJUeXBlLCBEYXRhTGF5ZXJXcmFwVHlwZSwgR0xTTFZlcnNpb24sIEdMU0wzLCBHTFNMMSxcbiB9IGZyb20gJy4vQ29uc3RhbnRzJztcbmltcG9ydCB7XG5cdGdldEV4dGVuc2lvbixcblx0RVhUX0NPTE9SX0JVRkZFUl9GTE9BVCxcblx0T0VTX1RFWFRVUkVfRkxPQVQsXG5cdE9FU19URVhUVVJFX0ZMT0FUX0xJTkVBUixcblx0T0VTX1RFWFRVUkVfSEFMRl9GTE9BVCxcblx0T0VTX1RFWFRVUkVfSEFsRl9GTE9BVF9MSU5FQVIsXG59IGZyb20gJy4vZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyBpc1dlYkdMMiB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBEYXRhTGF5ZXJCdWZmZXIgPSB7XG5cdHRleHR1cmU6IFdlYkdMVGV4dHVyZSxcblx0ZnJhbWVidWZmZXI/OiBXZWJHTEZyYW1lYnVmZmVyLFxufVxuXG50eXBlIEVycm9yQ2FsbGJhY2sgPSAobWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkO1xuXG5leHBvcnQgY2xhc3MgRGF0YUxheWVyIHtcblx0cmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXHRwcml2YXRlIHJlYWRvbmx5IGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0O1xuXHRwcml2YXRlIHJlYWRvbmx5IGVycm9yQ2FsbGJhY2s6IEVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gRWFjaCBEYXRhTGF5ZXIgbWF5IGNvbnRhaW4gYSBudW1iZXIgb2YgYnVmZmVycyB0byBzdG9yZSBkaWZmZXJlbnQgaW5zdGFuY2VzIG9mIHRoZSBzdGF0ZS5cblx0cHJpdmF0ZSBidWZmZXJJbmRleCA9IDA7XG5cdHJlYWRvbmx5IG51bUJ1ZmZlcnM7XG5cdHByaXZhdGUgcmVhZG9ubHkgYnVmZmVyczogRGF0YUxheWVyQnVmZmVyW10gPSBbXTtcblxuXHQvLyBUZXh0dXJlIHNpemVzLlxuXHRwcml2YXRlIGxlbmd0aD86IG51bWJlcjsgLy8gVGhpcyBpcyBvbmx5IHVzZWQgZm9yIDFEIGRhdGEgbGF5ZXJzLlxuXHRwcml2YXRlIHdpZHRoOiBudW1iZXI7XG5cdHByaXZhdGUgaGVpZ2h0OiBudW1iZXI7XG5cblx0Ly8gRGF0YUxheWVyIHNldHRpbmdzLlxuXHRyZWFkb25seSB0eXBlOiBEYXRhTGF5ZXJUeXBlOyAvLyBJbnB1dCB0eXBlIHBhc3NlZCBpbiBkdXJpbmcgc2V0dXAuXG5cdHJlYWRvbmx5IGludGVybmFsVHlwZTogRGF0YUxheWVyVHlwZTsgLy8gVHlwZSB0aGF0IGNvcnJlc3BvbmRzIHRvIGdsVHlwZSwgbWF5IGJlIGRpZmZlcmVudCBmcm9tIHR5cGUuXG5cdHJlYWRvbmx5IHdyYXBTOiBEYXRhTGF5ZXJXcmFwVHlwZTsgLy8gSW5wdXQgd3JhcCB0eXBlIHBhc3NlZCBpbiBkdXJpbmcgc2V0dXAuXG5cdHJlYWRvbmx5IHdyYXBUOiBEYXRhTGF5ZXJXcmFwVHlwZTsgLy8gSW5wdXQgd3JhcCB0eXBlIHBhc3NlZCBpbiBkdXJpbmcgc2V0dXAuXG5cdHJlYWRvbmx5IGludGVybmFsV3JhcFM6IERhdGFMYXllcldyYXBUeXBlOyAvLyBXcmFwIHR5cGUgdGhhdCBjb3JyZXNwb25kcyB0byBnbFdyYXBTLCBtYXkgYmUgZGlmZmVyZW50IGZyb20gd3JhcFMuXG5cdHJlYWRvbmx5IGludGVybmFsV3JhcFQ6IERhdGFMYXllcldyYXBUeXBlOyAvLyBXcmFwIHR5cGUgdGhhdCBjb3JyZXNwb25kcyB0byBnbFdyYXBULCBtYXkgYmUgZGlmZmVyZW50IGZyb20gd3JhcFQuXG5cdHJlYWRvbmx5IG51bUNvbXBvbmVudHM6IERhdGFMYXllck51bUNvbXBvbmVudHM7IC8vIE51bWJlciBvZiBSR0JBIGNoYW5uZWxzIHRvIHVzZSBmb3IgdGhpcyBEYXRhTGF5ZXIuXG5cdHJlYWRvbmx5IGZpbHRlcjogRGF0YUxheWVyRmlsdGVyVHlwZTsgLy8gSW50ZXJwb2xhdGlvbiBmaWx0ZXIgdHlwZSBvZiBkYXRhLlxuXHRyZWFkb25seSBpbnRlcm5hbEZpbHRlcjogRGF0YUxheWVyRmlsdGVyVHlwZTsgLy8gRmlsdGVyIHR5cGUgdGhhdCBjb3JyZXNwb25kcyB0byBnbEZpbHRlciwgbWF5IGJlIGRpZmZlcmVudCBmcm9tIGZpbHRlci5cblx0cmVhZG9ubHkgd3JpdGFibGU6IGJvb2xlYW47XG5cblx0Ly8gR0wgdmFyaWFibGVzICh0aGVzZSBtYXkgYmUgZGlmZmVyZW50IGZyb20gdGhlaXIgY29ycmVzcG9uZGluZyBub24tZ2wgcGFyYW1ldGVycykuXG5cdHJlYWRvbmx5IGdsSW50ZXJuYWxGb3JtYXQ6IG51bWJlcjtcblx0cmVhZG9ubHkgZ2xGb3JtYXQ6IG51bWJlcjtcblx0cmVhZG9ubHkgZ2xUeXBlOiBudW1iZXI7XG5cdHJlYWRvbmx5IGdsTnVtQ2hhbm5lbHM6IG51bWJlcjtcblx0cmVhZG9ubHkgZ2xXcmFwUzogbnVtYmVyO1xuXHRyZWFkb25seSBnbFdyYXBUOiBudW1iZXI7XG5cdHJlYWRvbmx5IGdsRmlsdGVyOiBudW1iZXI7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cGFyYW1zOiB7XG5cdFx0XHRnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCxcblx0XHRcdG5hbWU6IHN0cmluZyxcblx0XHRcdGRpbWVuc2lvbnM6IG51bWJlciB8IFtudW1iZXIsIG51bWJlcl0sXG5cdFx0XHR0eXBlOiBEYXRhTGF5ZXJUeXBlLFxuXHRcdFx0bnVtQ29tcG9uZW50czogRGF0YUxheWVyTnVtQ29tcG9uZW50cyxcblx0XHRcdGdsc2xWZXJzaW9uOiBHTFNMVmVyc2lvbixcblx0XHRcdGRhdGE/OiBEYXRhTGF5ZXJBcnJheVR5cGUsXG5cdFx0XHRmaWx0ZXI/OiBEYXRhTGF5ZXJGaWx0ZXJUeXBlLFxuXHRcdFx0d3JhcFM/OiBEYXRhTGF5ZXJXcmFwVHlwZSxcblx0XHRcdHdyYXBUPzogRGF0YUxheWVyV3JhcFR5cGUsXG5cdFx0XHR3cml0YWJsZT86IGJvb2xlYW4sXG5cdFx0XHRudW1CdWZmZXJzPzogbnVtYmVyLFxuXHRcdFx0ZXJyb3JDYWxsYmFjazogRXJyb3JDYWxsYmFjayxcblx0XHR9LFxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCBlcnJvckNhbGxiYWNrLCBuYW1lLCBkaW1lbnNpb25zLCB0eXBlLCBudW1Db21wb25lbnRzLCBkYXRhLCBnbHNsVmVyc2lvbiB9ID0gcGFyYW1zO1xuXG5cdFx0Ly8gU2F2ZSBwYXJhbXMuXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblx0XHR0aGlzLmdsID0gZ2w7XG5cdFx0dGhpcy5lcnJvckNhbGxiYWNrID0gZXJyb3JDYWxsYmFjaztcblxuXHRcdC8vIG51bUNvbXBvbmVudHMgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDQuXG5cdFx0aWYgKCFpc1Bvc2l0aXZlSW50ZWdlcihudW1Db21wb25lbnRzKSB8fCBudW1Db21wb25lbnRzID4gNCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG51bUNvbXBvbmVudHMgJHtudW1Db21wb25lbnRzfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdH1cblx0XHR0aGlzLm51bUNvbXBvbmVudHMgPSBudW1Db21wb25lbnRzO1xuXG5cdFx0Ly8gd3JpdGFibGUgZGVmYXVsdHMgdG8gZmFsc2UuXG5cdFx0Y29uc3Qgd3JpdGFibGUgPSAhIXBhcmFtcy53cml0YWJsZTtcblx0XHR0aGlzLndyaXRhYmxlID0gd3JpdGFibGU7XG5cblx0XHQvLyBTZXQgZGltZW5zaW9ucywgbWF5IGJlIDFEIG9yIDJELlxuXHRcdGNvbnN0IHsgbGVuZ3RoLCB3aWR0aCwgaGVpZ2h0IH0gPSBEYXRhTGF5ZXIuY2FsY1NpemUoZGltZW5zaW9ucywgbmFtZSk7XG5cdFx0dGhpcy5sZW5ndGggPSBsZW5ndGg7XG5cdFx0aWYgKCFpc1Bvc2l0aXZlSW50ZWdlcih3aWR0aCkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB3aWR0aCAke3dpZHRofSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdH1cblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdFx0aWYgKCFpc1Bvc2l0aXZlSW50ZWdlcihoZWlnaHQpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbGVuZ3RoICR7aGVpZ2h0fSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdH1cblx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblxuXHRcdC8vIFNldCBmaWx0ZXJpbmcgLSBpZiB3ZSBhcmUgcHJvY2Vzc2luZyBhIDFEIGFycmF5LCBkZWZhdWx0IHRvIE5FQVJFU1QgZmlsdGVyaW5nLlxuXHRcdC8vIEVsc2UgZGVmYXVsdCB0byBMSU5FQVIgKGludGVycG9sYXRpb24pIGZpbHRlcmluZy5cblx0XHRjb25zdCBmaWx0ZXIgPSBwYXJhbXMuZmlsdGVyICE9PSB1bmRlZmluZWQgPyBwYXJhbXMuZmlsdGVyIDogKGxlbmd0aCA/IE5FQVJFU1QgOiBMSU5FQVIpO1xuXHRcdGlmICghaXNWYWxpZEZpbHRlclR5cGUoZmlsdGVyKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGZpbHRlcjogJHtmaWx0ZXJ9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIsIG11c3QgYmUgJHt2YWxpZEZpbHRlclR5cGVzLmpvaW4oJywgJyl9LmApO1xuXHRcdH1cblx0XHR0aGlzLmZpbHRlciA9IGZpbHRlcjtcblxuXHRcdC8vIEdldCB3cmFwIHR5cGVzLCBkZWZhdWx0IHRvIGNsYW1wIHRvIGVkZ2UuXG5cdFx0Y29uc3Qgd3JhcFMgPSBwYXJhbXMud3JhcFMgIT09IHVuZGVmaW5lZCA/IHBhcmFtcy53cmFwUyA6IENMQU1QX1RPX0VER0U7XG5cdFx0aWYgKCFpc1ZhbGlkV3JhcFR5cGUod3JhcFMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgd3JhcFM6ICR7d3JhcFN9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIsIG11c3QgYmUgJHt2YWxpZFdyYXBUeXBlcy5qb2luKCcsICcpfS5gKTtcblx0XHR9XG5cdFx0dGhpcy53cmFwUyA9IHdyYXBTO1xuXHRcdGNvbnN0IHdyYXBUID0gcGFyYW1zLndyYXBUICE9PSB1bmRlZmluZWQgPyBwYXJhbXMud3JhcFQgOiBDTEFNUF9UT19FREdFO1xuXHRcdGlmICghaXNWYWxpZFdyYXBUeXBlKHdyYXBUKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHdyYXBUOiAke3dyYXBUfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLCBtdXN0IGJlICR7dmFsaWRXcmFwVHlwZXMuam9pbignLCAnKX0uYCk7XG5cdFx0fVxuXHRcdHRoaXMud3JhcFQgPSB3cmFwVDtcblxuXHRcdC8vIFNldCBkYXRhIHR5cGUuXG5cdFx0aWYgKCFpc1ZhbGlkRGF0YVR5cGUodHlwZSkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB0eXBlICR7dHlwZX0gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIiwgbXVzdCBiZSBvbmUgb2YgJHt2YWxpZERhdGFUeXBlcy5qb2luKCcsICcpfS5gKTtcblx0XHR9XG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblx0XHRjb25zdCBpbnRlcm5hbFR5cGUgPSBEYXRhTGF5ZXIuZ2V0SW50ZXJuYWxUeXBlKHtcblx0XHRcdGdsLFxuXHRcdFx0dHlwZSxcblx0XHRcdGdsc2xWZXJzaW9uLFxuXHRcdFx0d3JpdGFibGUsXG5cdFx0XHRmaWx0ZXIsXG5cdFx0XHRuYW1lLFxuXHRcdFx0ZXJyb3JDYWxsYmFjayxcblx0XHR9KTtcblx0XHR0aGlzLmludGVybmFsVHlwZSA9IGludGVybmFsVHlwZTtcblx0XHQvLyBTZXQgZ2wgdGV4dHVyZSBwYXJhbWV0ZXJzLlxuXHRcdGNvbnN0IHtcblx0XHRcdGdsRm9ybWF0LFxuXHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCxcblx0XHRcdGdsVHlwZSxcblx0XHRcdGdsTnVtQ2hhbm5lbHMsXG5cdFx0fSA9IERhdGFMYXllci5nZXRHTFRleHR1cmVQYXJhbWV0ZXJzKHtcblx0XHRcdGdsLFxuXHRcdFx0bmFtZSxcblx0XHRcdG51bUNvbXBvbmVudHMsXG5cdFx0XHR3cml0YWJsZSxcblx0XHRcdGludGVybmFsVHlwZSxcblx0XHRcdGdsc2xWZXJzaW9uLFxuXHRcdFx0ZXJyb3JDYWxsYmFjayxcblx0XHR9KTtcblx0XHR0aGlzLmdsSW50ZXJuYWxGb3JtYXQgPSBnbEludGVybmFsRm9ybWF0O1xuXHRcdHRoaXMuZ2xGb3JtYXQgPSBnbEZvcm1hdDtcblx0XHR0aGlzLmdsVHlwZSA9IGdsVHlwZTtcblx0XHR0aGlzLmdsTnVtQ2hhbm5lbHMgPSBnbE51bUNoYW5uZWxzO1xuXG5cdFx0Ly8gU2V0IGludGVybmFsIGZpbHRlcmluZy93cmFwIHR5cGVzLlxuXHRcdHRoaXMuaW50ZXJuYWxGaWx0ZXIgPSBEYXRhTGF5ZXIuZ2V0SW50ZXJuYWxGaWx0ZXIoeyBnbCwgZmlsdGVyLCBpbnRlcm5hbFR5cGUsIG5hbWUsIGVycm9yQ2FsbGJhY2sgfSk7XG5cdFx0dGhpcy5nbEZpbHRlciA9IGdsW3RoaXMuaW50ZXJuYWxGaWx0ZXJdO1xuXHRcdHRoaXMuaW50ZXJuYWxXcmFwUyA9IERhdGFMYXllci5nZXRJbnRlcm5hbFdyYXAoeyBnbCwgd3JhcDogd3JhcFMsIG5hbWUgfSk7XG5cdFx0dGhpcy5nbFdyYXBTID0gZ2xbdGhpcy5pbnRlcm5hbFdyYXBTXTtcblx0XHR0aGlzLmludGVybmFsV3JhcFQgPSBEYXRhTGF5ZXIuZ2V0SW50ZXJuYWxXcmFwKHsgZ2wsIHdyYXA6IHdyYXBULCBuYW1lIH0pO1xuXHRcdHRoaXMuZ2xXcmFwVCA9IGdsW3RoaXMuaW50ZXJuYWxXcmFwVF07XG5cblx0XHQvLyBOdW0gYnVmZmVycyBpcyB0aGUgbnVtYmVyIG9mIHN0YXRlcyB0byBzdG9yZSBmb3IgdGhpcyBkYXRhLlxuXHRcdGNvbnN0IG51bUJ1ZmZlcnMgPSBwYXJhbXMubnVtQnVmZmVycyAhPT0gdW5kZWZpbmVkID8gcGFyYW1zLm51bUJ1ZmZlcnMgOiAxO1xuXHRcdGlmICghaXNQb3NpdGl2ZUludGVnZXIobnVtQnVmZmVycykpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBudW1CdWZmZXJzOiAke251bUJ1ZmZlcnN9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIsIG11c3QgYmUgcG9zaXRpdmUgaW50ZWdlci5gKTtcblx0XHR9XG5cdFx0dGhpcy5udW1CdWZmZXJzID0gbnVtQnVmZmVycztcblxuXHRcdHRoaXMuaW5pdEJ1ZmZlcnMoZGF0YSk7XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyBjYWxjU2l6ZShkaW1lbnNpb25zOiBudW1iZXIgfCBbbnVtYmVyLCBudW1iZXJdLCBuYW1lOiBzdHJpbmcpIHtcblx0XHRsZXQgbGVuZ3RoLCB3aWR0aCwgaGVpZ2h0O1xuXHRcdGlmICghaXNOYU4oZGltZW5zaW9ucyBhcyBudW1iZXIpKSB7XG5cdFx0XHRpZiAoIWlzUG9zaXRpdmVJbnRlZ2VyKGRpbWVuc2lvbnMpKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBsZW5ndGggJHtkaW1lbnNpb25zfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0fVxuXHRcdFx0bGVuZ3RoID0gZGltZW5zaW9ucyBhcyBudW1iZXI7XG5cdFx0XHQvLyBDYWxjIHBvd2VyIG9mIHR3byB3aWR0aCBhbmQgaGVpZ2h0IGZvciBsZW5ndGguXG5cdFx0XHRsZXQgZXhwID0gMTtcblx0XHRcdGxldCByZW1haW5kZXIgPSBsZW5ndGg7XG5cdFx0XHR3aGlsZSAocmVtYWluZGVyID4gMikge1xuXHRcdFx0XHRleHArKztcblx0XHRcdFx0cmVtYWluZGVyIC89IDI7XG5cdFx0XHR9XG5cdFx0XHR3aWR0aCA9IE1hdGgucG93KDIsIE1hdGguZmxvb3IoZXhwIC8gMikgKyBleHAgJSAyKTtcblx0XHRcdGhlaWdodCA9IE1hdGgucG93KDIsIE1hdGguZmxvb3IoZXhwLzIpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2lkdGggPSAoZGltZW5zaW9ucyBhcyBbbnVtYmVyLCBudW1iZXJdKVswXTtcblx0XHRcdGlmICghaXNQb3NpdGl2ZUludGVnZXIod2lkdGgpKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB3aWR0aCAke3dpZHRofSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0fVxuXHRcdFx0aGVpZ2h0ID0gKGRpbWVuc2lvbnMgYXMgW251bWJlciwgbnVtYmVyXSlbMV07XG5cdFx0XHRpZiAoIWlzUG9zaXRpdmVJbnRlZ2VyKGhlaWdodCkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGhlaWdodCAke2hlaWdodH0gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHsgd2lkdGgsIGhlaWdodCwgbGVuZ3RoIH07XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyBnZXRJbnRlcm5hbFdyYXAoXG5cdFx0cGFyYW1zOiB7XG5cdFx0XHRnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCxcblx0XHRcdHdyYXA6IERhdGFMYXllcldyYXBUeXBlLFxuXHRcdFx0bmFtZTogc3RyaW5nLFxuXHRcdH0sXG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wsIHdyYXAsIG5hbWUgfSA9IHBhcmFtcztcblx0XHQvLyBXZWJnbDIuMCBzdXBwb3J0cyBhbGwgY29tYmluYXRpb25zIG9mIHR5cGVzIGFuZCBmaWx0ZXJpbmcuXG5cdFx0aWYgKGlzV2ViR0wyKGdsKSkge1xuXHRcdFx0cmV0dXJuIHdyYXA7XG5cdFx0fVxuXHRcdC8vIENMQU1QX1RPX0VER0UgaXMgYWx3YXlzIHN1cHBvcnRlZC5cblx0XHRpZiAod3JhcCA9PT0gQ0xBTVBfVE9fRURHRSkge1xuXHRcdFx0cmV0dXJuIHdyYXA7XG5cdFx0fVxuXHRcdGlmICghaXNXZWJHTDIoZ2wpKSB7XG5cdFx0XHQvLyBUT0RPOiB3ZSBtYXkgd2FudCB0byBoYW5kbGUgdGhpcyBpbiB0aGUgZnJhZyBzaGFkZXIuXG5cdFx0XHQvLyBSRVBFQVQgYW5kIE1JUlJPUl9SRVBFQVQgd3JhcCBub3Qgc3VwcG9ydGVkIGZvciBub24tcG93ZXIgb2YgMiB0ZXh0dXJlcyBpbiBzYWZhcmkuXG5cdFx0XHQvLyBJJ3ZlIHRlc3RlZCB0aGlzIGFuZCBpdCBzZWVtcyB0aGF0IHNvbWUgcG93ZXIgb2YgMiB0ZXh0dXJlcyB3aWxsIHdvcmsgKDUxMiB4IDUxMiksXG5cdFx0XHQvLyBidXQgbm90IG90aGVycyAoMTAyNHgxMDI0KSwgc28gbGV0J3MganVzdCBjaGFuZ2UgYWxsIFdlYkdMIDEuMCB0byBDTEFNUC5cblx0XHRcdC8vIFdpdGhvdXQgdGhpcywgd2UgY3VycmVudGx5IGdldCBhbiBlcnJvciBhdCBkcmF3QXJyYXlzKCk6XG5cdFx0XHQvLyBcIldlYkdMOiBkcmF3QXJyYXlzOiB0ZXh0dXJlIGJvdW5kIHRvIHRleHR1cmUgdW5pdCAwIGlzIG5vdCByZW5kZXJhYmxlLlxuXHRcdFx0Ly8gSXQgbWF5YmUgbm9uLXBvd2VyLW9mLTIgYW5kIGhhdmUgaW5jb21wYXRpYmxlIHRleHR1cmUgZmlsdGVyaW5nIG9yIGlzIG5vdFxuXHRcdFx0Ly8gJ3RleHR1cmUgY29tcGxldGUnLCBvciBpdCBpcyBhIGZsb2F0L2hhbGYtZmxvYXQgdHlwZSB3aXRoIGxpbmVhciBmaWx0ZXJpbmcgYW5kXG5cdFx0XHQvLyB3aXRob3V0IHRoZSByZWxldmFudCBmbG9hdC9oYWxmLWZsb2F0IGxpbmVhciBleHRlbnNpb24gZW5hYmxlZC5cIlxuXHRcdFx0Y29uc29sZS53YXJuKGBGYWxsaW5nIGJhY2sgdG8gQ0xBTVBfVE9fRURHRSB3cmFwcGluZyBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiIGZvciBXZWJHTCAxLmApO1xuXHRcdFx0cmV0dXJuIENMQU1QX1RPX0VER0U7XG5cdFx0fVxuXHRcdHJldHVybiB3cmFwO1xuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgZ2V0SW50ZXJuYWxGaWx0ZXIoXG5cdFx0cGFyYW1zOiB7XG5cdFx0XHRnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCxcblx0XHRcdGZpbHRlcjogRGF0YUxheWVyRmlsdGVyVHlwZSxcblx0XHRcdGludGVybmFsVHlwZTogRGF0YUxheWVyVHlwZSxcblx0XHRcdG5hbWU6IHN0cmluZyxcblx0XHRcdGVycm9yQ2FsbGJhY2s6IEVycm9yQ2FsbGJhY2ssXG5cdFx0fSxcblx0KSB7XG5cdFx0Y29uc3QgeyBnbCwgZXJyb3JDYWxsYmFjaywgaW50ZXJuYWxUeXBlLCBuYW1lIH0gPSBwYXJhbXM7XG5cdFx0bGV0IHsgZmlsdGVyIH0gPSBwYXJhbXM7XG5cdFx0aWYgKGZpbHRlciA9PT0gTkVBUkVTVCkge1xuXHRcdFx0Ly8gTkVBUkVTVCBmaWx0ZXJpbmcgaXMgYWx3YXlzIHN1cHBvcnRlZC5cblx0XHRcdHJldHVybiBmaWx0ZXI7XG5cdFx0fVxuXG5cdFx0aWYgKGludGVybmFsVHlwZSA9PT0gSEFMRl9GTE9BVCkge1xuXHRcdFx0Ly8gVE9ETzogdGVzdCBpZiBmbG9hdCBsaW5lYXIgZXh0ZW5zaW9uIGlzIGFjdHVhbGx5IHdvcmtpbmcuXG5cdFx0XHRjb25zdCBleHRlbnNpb24gPSBnZXRFeHRlbnNpb24oZ2wsIE9FU19URVhUVVJFX0hBbEZfRkxPQVRfTElORUFSLCBlcnJvckNhbGxiYWNrLCB0cnVlKVxuXHRcdFx0XHR8fCBnZXRFeHRlbnNpb24oZ2wsIE9FU19URVhUVVJFX0ZMT0FUX0xJTkVBUiwgZXJyb3JDYWxsYmFjaywgdHJ1ZSk7XG5cdFx0XHRpZiAoIWV4dGVuc2lvbikge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oYEZhbGxpbmcgYmFjayB0byBORUFSRVNUIGZpbHRlciBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0XHQvL1RPRE86IGFkZCBhIGZhbGxiYWNrIHRoYXQgZG9lcyB0aGlzIGZpbHRlcmluZyBpbiB0aGUgZnJhZyBzaGFkZXI/LlxuXHRcdFx0XHRmaWx0ZXIgPSBORUFSRVNUO1xuXHRcdFx0fVxuXHRcdH0gaWYgKGludGVybmFsVHlwZSA9PT0gRkxPQVQpIHtcblx0XHRcdGNvbnN0IGV4dGVuc2lvbiA9IGdldEV4dGVuc2lvbihnbCwgT0VTX1RFWFRVUkVfRkxPQVRfTElORUFSLCBlcnJvckNhbGxiYWNrLCB0cnVlKTtcblx0XHRcdGlmICghZXh0ZW5zaW9uKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihgRmFsbGluZyBiYWNrIHRvIE5FQVJFU1QgZmlsdGVyIGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuYCk7XG5cdFx0XHRcdC8vVE9ETzogYWRkIGEgZmFsbGJhY2sgdGhhdCBkb2VzIHRoaXMgZmlsdGVyaW5nIGluIHRoZSBmcmFnIHNoYWRlcj8uXG5cdFx0XHRcdGZpbHRlciA9IE5FQVJFU1Q7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmaWx0ZXI7XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyBnZXRJbnRlcm5hbFR5cGUoXG5cdFx0cGFyYW1zOiB7XG5cdFx0XHRnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCxcblx0XHRcdHR5cGU6IERhdGFMYXllclR5cGUsXG5cdFx0XHRnbHNsVmVyc2lvbjogR0xTTFZlcnNpb24sXG5cdFx0XHR3cml0YWJsZTogYm9vbGVhbixcblx0XHRcdGZpbHRlcjogRGF0YUxheWVyRmlsdGVyVHlwZSxcblx0XHRcdG5hbWU6IHN0cmluZyxcblx0XHRcdGVycm9yQ2FsbGJhY2s6IEVycm9yQ2FsbGJhY2ssXG5cdFx0fSxcblx0KSB7XG5cdFx0Y29uc3QgeyBnbCwgZXJyb3JDYWxsYmFjaywgd3JpdGFibGUsIG5hbWUsIGdsc2xWZXJzaW9uIH0gPSBwYXJhbXM7XG5cdFx0Y29uc3QgeyB0eXBlIH0gPSBwYXJhbXM7XG5cdFx0bGV0IGludGVybmFsVHlwZSA9IHR5cGU7XG5cdFx0Ly8gQ2hlY2sgaWYgaW50IHR5cGVzIGFyZSBzdXBwb3J0ZWQuXG5cdFx0Y29uc3QgaW50Q2FzdCA9IERhdGFMYXllci5zaG91bGRDYXN0SW50VHlwZUFzRmxvYXQocGFyYW1zKTtcblx0XHRpZiAoaW50Q2FzdCkge1xuXHRcdFx0aWYgKGludGVybmFsVHlwZSA9PT0gVU5TSUdORURfQllURSB8fCBpbnRlcm5hbFR5cGUgPT09IEJZVEUpIHtcblx0XHRcdFx0Ly8gSW50ZWdlcnMgYmV0d2VlbiAwIGFuZCAyMDQ4IGNhbiBiZSBleGFjdGx5IHJlcHJlc2VudGVkIGJ5IGhhbGYgZmxvYXQgKGFuZCBhbHNvIGJldHdlZW4g4oiSMjA0OCBhbmQgMClcblx0XHRcdFx0aW50ZXJuYWxUeXBlID0gSEFMRl9GTE9BVDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIEludGVnZXJzIGJldHdlZW4gMCBhbmQgMTY3NzcyMTYgY2FuIGJlIGV4YWN0bHkgcmVwcmVzZW50ZWQgYnkgZmxvYXQzMiAoYWxzbyBhcHBsaWVzIGZvciBuZWdhdGl2ZSBpbnRlZ2VycyBiZXR3ZWVuIOKIkjE2Nzc3MjE2IGFuZCAwKVxuXHRcdFx0XHQvLyBUaGlzIGlzIHN1ZmZpY2llbnQgZm9yIFVOU0lHTkVEX1NIT1JUIGFuZCBTSE9SVCB0eXBlcy5cblx0XHRcdFx0Ly8gTGFyZ2UgVU5TSUdORURfSU5UIGFuZCBJTlQgY2Fubm90IGJlIHJlcHJlc2VudGVkIGJ5IEZMT0FUIHR5cGUuXG5cdFx0XHRcdGlmIChpbnRlcm5hbFR5cGUgPT09IElOVCB8fCBpbnRlcm5hbFR5cGUgPT09IFVOU0lHTkVEX0lOVCkge1xuXHRcdFx0XHRcdFxuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnNvbGUud2FybihgRmFsbGluZyBiYWNrICR7aW50ZXJuYWxUeXBlfSB0eXBlIHRvIEZMT0FUIHR5cGUgZm9yIGdsc2wxLnggc3VwcG9ydCBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLlxuTGFyZ2UgVU5TSUdORURfSU5UIG9yIElOVCB3aXRoIGFic29sdXRlIHZhbHVlID4gMTYsNzc3LDIxNiBhcmUgbm90IHN1cHBvcnRlZCwgb24gbW9iaWxlIFVOU0lHTkVEX0lOVCwgSU5ULCBVTlNJR05FRF9TSE9SVCwgYW5kIFNIT1JUIHdpdGggYWJzb2x1dGUgdmFsdWUgPiAyLDA0OCBtYXkgbm90IGJlIHN1cHBvcnRlZC5gKTtcblx0XHRcdFx0aW50ZXJuYWxUeXBlID0gRkxPQVQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIENoZWNrIGlmIGZsb2F0MzIgc3VwcG9ydGVkLlxuXHRcdGlmICghaXNXZWJHTDIoZ2wpKSB7XG5cdFx0XHRpZiAoaW50ZXJuYWxUeXBlID09PSBGTE9BVCkge1xuXHRcdFx0XHRjb25zdCBleHRlbnNpb24gPSBnZXRFeHRlbnNpb24oZ2wsIE9FU19URVhUVVJFX0ZMT0FULCBlcnJvckNhbGxiYWNrLCB0cnVlKTtcblx0XHRcdFx0aWYgKCFleHRlbnNpb24pIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oYEZMT0FUIG5vdCBzdXBwb3J0ZWQsIGZhbGxpbmcgYmFjayB0byBIQUxGX0ZMT0FUIHR5cGUgZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdFx0XHRpbnRlcm5hbFR5cGUgPSBIQUxGX0ZMT0FUO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE3NDc2NjMyL3dlYmdsLWV4dGVuc2lvbi1zdXBwb3J0LWFjcm9zcy1icm93c2Vyc1xuXHRcdFx0XHQvLyBSZW5kZXJpbmcgdG8gYSBmbG9hdGluZy1wb2ludCB0ZXh0dXJlIG1heSBub3QgYmUgc3VwcG9ydGVkLFxuXHRcdFx0XHQvLyBldmVuIGlmIHRoZSBPRVNfdGV4dHVyZV9mbG9hdCBleHRlbnNpb24gaXMgc3VwcG9ydGVkLlxuXHRcdFx0XHQvLyBUeXBpY2FsbHksIHRoaXMgZmFpbHMgb24gY3VycmVudCBtb2JpbGUgaGFyZHdhcmUuXG5cdFx0XHRcdC8vIFRvIGNoZWNrIGlmIHRoaXMgaXMgc3VwcG9ydGVkLCB5b3UgaGF2ZSB0byBjYWxsIHRoZSBXZWJHTFxuXHRcdFx0XHQvLyBjaGVja0ZyYW1lYnVmZmVyU3RhdHVzKCkgZnVuY3Rpb24uXG5cdFx0XHRcdGlmICh3cml0YWJsZSkge1xuXHRcdFx0XHRcdGNvbnN0IHZhbGlkID0gRGF0YUxheWVyLnRlc3RGcmFtZWJ1ZmZlcldyaXRlKHsgZ2wsIHR5cGU6IGludGVybmFsVHlwZSwgZ2xzbFZlcnNpb24gfSk7XG5cdFx0XHRcdFx0aWYgKCF2YWxpZCAmJiBpbnRlcm5hbFR5cGUgIT09IEhBTEZfRkxPQVQpIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihgRkxPQVQgbm90IHN1cHBvcnRlZCBmb3Igd3JpdGluZyBvcGVyYXRpb25zLCBmYWxsaW5nIGJhY2sgdG8gSEFMRl9GTE9BVCB0eXBlIGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuYCk7XG5cdFx0XHRcdFx0XHRpbnRlcm5hbFR5cGUgPSBIQUxGX0ZMT0FUO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly8gTXVzdCBzdXBwb3J0IGF0IGxlYXN0IGhhbGYgZmxvYXQgaWYgdXNpbmcgYSBmbG9hdCB0eXBlLlxuXHRcdFx0aWYgKGludGVybmFsVHlwZSA9PT0gSEFMRl9GTE9BVCkge1xuXHRcdFx0XHRnZXRFeHRlbnNpb24oZ2wsIE9FU19URVhUVVJFX0hBTEZfRkxPQVQsIGVycm9yQ2FsbGJhY2spO1xuXHRcdFx0XHQvLyBUT0RPOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81NDI0ODYzMy9jYW5ub3QtY3JlYXRlLWhhbGYtZmxvYXQtb2VzLXRleHR1cmUtZnJvbS11aW50MTZhcnJheS1vbi1pcGFkXG5cdFx0XHRcdGlmICh3cml0YWJsZSkge1xuXHRcdFx0XHRcdGNvbnN0IHZhbGlkID0gRGF0YUxheWVyLnRlc3RGcmFtZWJ1ZmZlcldyaXRlKHsgZ2wsIHR5cGU6IGludGVybmFsVHlwZSwgZ2xzbFZlcnNpb24gfSk7XG5cdFx0XHRcdFx0aWYgKCF2YWxpZCkge1xuXHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjayhgVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgcmVuZGVyaW5nIHRvIEhBTEZfRkxPQVQgdGV4dHVyZXMuYCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdC8vIExvYWQgYWRkaXRpb25hbCBleHRlbnNpb25zIGlmIG5lZWRlZC5cblx0XHRpZiAod3JpdGFibGUgJiYgaXNXZWJHTDIoZ2wpICYmIChpbnRlcm5hbFR5cGUgPT09IEhBTEZfRkxPQVQgfHwgaW50ZXJuYWxUeXBlID09PSBGTE9BVCkpIHtcblx0XHRcdGdldEV4dGVuc2lvbihnbCwgRVhUX0NPTE9SX0JVRkZFUl9GTE9BVCwgZXJyb3JDYWxsYmFjayk7XG5cdFx0fVxuXHRcdHJldHVybiBpbnRlcm5hbFR5cGU7XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyBzaG91bGRDYXN0SW50VHlwZUFzRmxvYXQoXG5cdFx0cGFyYW1zOiB7XG5cdFx0XHRnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCxcblx0XHRcdHR5cGU6IERhdGFMYXllclR5cGUsXG5cdFx0XHRmaWx0ZXI6IERhdGFMYXllckZpbHRlclR5cGUsXG5cdFx0XHRnbHNsVmVyc2lvbjogR0xTTFZlcnNpb24sXG5cdFx0fVxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCB0eXBlLCBmaWx0ZXIsIGdsc2xWZXJzaW9uIH0gPSBwYXJhbXM7XG5cdFx0aWYgKGdsc2xWZXJzaW9uID09PSBHTFNMMyAmJiBpc1dlYkdMMihnbCkpIHJldHVybiBmYWxzZTtcblx0XHQvLyBVTlNJR05FRF9CWVRFIGFuZCBMSU5FQVIgZmlsdGVyaW5nIGlzIG5vdCBzdXBwb3J0ZWQsIGNhc3QgYXMgZmxvYXQuXG5cdFx0aWYgKHR5cGUgPT09IFVOU0lHTkVEX0JZVEUgJiYgZmlsdGVyID09PSBMSU5FQVIpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHQvLyBJbnQgdGV4dHVyZXMgKG90aGVyIHRoYW4gVU5TSUdORURfQllURSkgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgV2ViR0wxLjAgb3IgZ2xzbDEueC5cblx0XHQvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81NTgwMzAxNy9ob3ctdG8tc2VsZWN0LXdlYmdsLWdsc2wtc2FtcGxlci10eXBlLWZyb20tdGV4dHVyZS1mb3JtYXQtcHJvcGVydGllc1xuXHRcdC8vIFVzZSBIQUxGX0ZMT0FUL0ZMT0FUIGluc3RlYWQuXG5cdFx0cmV0dXJuIHR5cGUgPT09IEJZVEUgfHwgdHlwZSA9PT0gU0hPUlQgfHwgdHlwZSA9PT0gSU5UIHx8IHR5cGUgPT09IFVOU0lHTkVEX1NIT1JUIHx8IHR5cGUgPT09IFVOU0lHTkVEX0lOVDtcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIGdldEdMVGV4dHVyZVBhcmFtZXRlcnMoXG5cdFx0cGFyYW1zOiB7XG5cdFx0XHRnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCxcblx0XHRcdG5hbWU6IHN0cmluZyxcblx0XHRcdG51bUNvbXBvbmVudHM6IERhdGFMYXllck51bUNvbXBvbmVudHMsXG5cdFx0XHRpbnRlcm5hbFR5cGU6IERhdGFMYXllclR5cGUsXG5cdFx0XHR3cml0YWJsZTogYm9vbGVhbixcblx0XHRcdGdsc2xWZXJzaW9uOiBHTFNMVmVyc2lvbixcblx0XHRcdGVycm9yQ2FsbGJhY2s6IEVycm9yQ2FsbGJhY2ssXG5cdFx0fVxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCBlcnJvckNhbGxiYWNrLCBuYW1lLCBudW1Db21wb25lbnRzLCBpbnRlcm5hbFR5cGUsIHdyaXRhYmxlLCBnbHNsVmVyc2lvbiB9ID0gcGFyYW1zO1xuXHRcdC8vIGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL3NwZWNzL2xhdGVzdC8yLjAvI1RFWFRVUkVfVFlQRVNfRk9STUFUU19GUk9NX0RPTV9FTEVNRU5UU19UQUJMRVxuXHRcdGxldCBnbFR5cGU6IG51bWJlciB8IHVuZGVmaW5lZCxcblx0XHRcdGdsRm9ybWF0OiBudW1iZXIgfCB1bmRlZmluZWQsXG5cdFx0XHRnbEludGVybmFsRm9ybWF0OiBudW1iZXIgfCB1bmRlZmluZWQsXG5cdFx0XHRnbE51bUNoYW5uZWxzOiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cblx0XHRpZiAoaXNXZWJHTDIoZ2wpKSB7XG5cdFx0XHRnbE51bUNoYW5uZWxzID0gbnVtQ29tcG9uZW50cztcblx0XHRcdC8vIGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdC9cblx0XHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJHTFJlbmRlcmluZ0NvbnRleHQvdGV4SW1hZ2UyRFxuXHRcdFx0Ly8gVGhlIHNpemVkIGludGVybmFsIGZvcm1hdCBSR0J4eHggYXJlIG5vdCBjb2xvci1yZW5kZXJhYmxlIGZvciBzb21lIHJlYXNvbi5cblx0XHRcdC8vIElmIG51bUNvbXBvbmVudHMgPT0gMyBmb3IgYSB3cml0YWJsZSB0ZXh0dXJlLCB1c2UgUkdCQSBpbnN0ZWFkLlxuXHRcdFx0Ly8gUGFnZSA1IG9mIGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL2ZpbGVzL3dlYmdsMjAtcmVmZXJlbmNlLWd1aWRlLnBkZlxuXHRcdFx0aWYgKG51bUNvbXBvbmVudHMgPT09IDMgJiYgd3JpdGFibGUpIHtcblx0XHRcdFx0Z2xOdW1DaGFubmVscyA9IDQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoaW50ZXJuYWxUeXBlID09PSBGTE9BVCB8fCBpbnRlcm5hbFR5cGUgPT09IEhBTEZfRkxPQVQpIHtcblx0XHRcdFx0c3dpdGNoIChnbE51bUNoYW5uZWxzKSB7XG5cdFx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdFx0Z2xGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkVEO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdFx0Z2xGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkc7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0XHRnbEZvcm1hdCA9IGdsLlJHQjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgNDpcblx0XHRcdFx0XHRcdGdsRm9ybWF0ID0gZ2wuUkdCQTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGdsTnVtQ2hhbm5lbHMgJHtnbE51bUNoYW5uZWxzfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGdsc2xWZXJzaW9uID09PSBHTFNMMSAmJiBpbnRlcm5hbFR5cGUgPT09IFVOU0lHTkVEX0JZVEUpIHtcblx0XHRcdFx0c3dpdGNoIChnbE51bUNoYW5uZWxzKSB7XG5cdFx0XHRcdFx0Ly8gRm9yIHJlYWQgb25seSB0ZXh0dXJlcyBpbiBXZWJHTCAxLjAsIHVzZSBnbC5BTFBIQSBhbmQgZ2wuTFVNSU5BTkNFX0FMUEhBLlxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgUkdCL1JHQkEuXG5cdFx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdFx0aWYgKCF3cml0YWJsZSkge1xuXHRcdFx0XHRcdFx0XHRnbEZvcm1hdCA9IGdsLkFMUEhBO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRpZiAoIXdyaXRhYmxlKSB7XG5cdFx0XHRcdFx0XHRcdGdsRm9ybWF0ID0gZ2wuTFVNSU5BTkNFX0FMUEhBO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0XHRnbEZvcm1hdCA9IGdsLlJHQjtcblx0XHRcdFx0XHRcdGdsTnVtQ2hhbm5lbHMgPSAzO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRcdFx0Z2xGb3JtYXQgPSBnbC5SR0JBO1xuXHRcdFx0XHRcdFx0Z2xOdW1DaGFubmVscyA9IDQ7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBnbE51bUNoYW5uZWxzICR7Z2xOdW1DaGFubmVsc30gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c3dpdGNoIChnbE51bUNoYW5uZWxzKSB7XG5cdFx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdFx0Z2xGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkVEX0lOVEVHRVI7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRnbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR19JTlRFR0VSO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdFx0Z2xGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCX0lOVEVHRVI7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdFx0XHRnbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0JBX0lOVEVHRVI7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBnbE51bUNoYW5uZWxzICR7Z2xOdW1DaGFubmVsc30gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0c3dpdGNoIChpbnRlcm5hbFR5cGUpIHtcblx0XHRcdFx0Y2FzZSBIQUxGX0ZMT0FUOlxuXHRcdFx0XHRcdGdsVHlwZSA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5IQUxGX0ZMT0FUO1xuXHRcdFx0XHRcdHN3aXRjaCAoZ2xOdW1DaGFubmVscykge1xuXHRcdFx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlIxNkY7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHMTZGO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0IxNkY7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQkExNkY7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBnbE51bUNoYW5uZWxzICR7Z2xOdW1DaGFubmVsc30gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgRkxPQVQ6XG5cdFx0XHRcdFx0Z2xUeXBlID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLkZMT0FUO1xuXHRcdFx0XHRcdHN3aXRjaCAoZ2xOdW1DaGFubmVscykge1xuXHRcdFx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlIzMkY7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHMzJGO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0IzMkY7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQkEzMkY7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBnbE51bUNoYW5uZWxzICR7Z2xOdW1DaGFubmVsc30gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgVU5TSUdORURfQllURTpcblx0XHRcdFx0XHRnbFR5cGUgPSBnbC5VTlNJR05FRF9CWVRFO1xuXHRcdFx0XHRcdGlmIChnbHNsVmVyc2lvbiA9PT0gR0xTTDEgJiYgaW50ZXJuYWxUeXBlID09PSBVTlNJR05FRF9CWVRFKSB7XG5cdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gZ2xGb3JtYXQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHN3aXRjaCAoZ2xOdW1DaGFubmVscykge1xuXHRcdFx0XHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SOFVJO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SRzhVSTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCOFVJO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0JBOFVJO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZ2xOdW1DaGFubmVscyAke2dsTnVtQ2hhbm5lbHN9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuYCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIEJZVEU6XG5cdFx0XHRcdFx0Z2xUeXBlID0gZ2wuQllURTtcblx0XHRcdFx0XHRzd2l0Y2ggKGdsTnVtQ2hhbm5lbHMpIHtcblx0XHRcdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SOEk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHOEk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQjhJO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgNDpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0JBOEk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBnbE51bUNoYW5uZWxzICR7Z2xOdW1DaGFubmVsc30gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgU0hPUlQ6XG5cdFx0XHRcdFx0Z2xUeXBlID0gZ2wuU0hPUlQ7XG5cdFx0XHRcdFx0c3dpdGNoIChnbE51bUNoYW5uZWxzKSB7XG5cdFx0XHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUjE2STtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkcxNkk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQjE2STtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCQTE2STtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGdsTnVtQ2hhbm5lbHMgJHtnbE51bUNoYW5uZWxzfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBVTlNJR05FRF9TSE9SVDpcblx0XHRcdFx0XHRnbFR5cGUgPSBnbC5VTlNJR05FRF9TSE9SVDtcblx0XHRcdFx0XHRzd2l0Y2ggKGdsTnVtQ2hhbm5lbHMpIHtcblx0XHRcdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SMTZVSTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkcxNlVJO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0IxNlVJO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgNDpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0JBMTZVSTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGdsTnVtQ2hhbm5lbHMgJHtnbE51bUNoYW5uZWxzfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBJTlQ6XG5cdFx0XHRcdFx0Z2xUeXBlID0gZ2wuSU5UO1xuXHRcdFx0XHRcdHN3aXRjaCAoZ2xOdW1DaGFubmVscykge1xuXHRcdFx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlIzMkk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHMzJJO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0IzMkk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQkEzMkk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBnbE51bUNoYW5uZWxzICR7Z2xOdW1DaGFubmVsc30gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgVU5TSUdORURfSU5UOlxuXHRcdFx0XHRcdGdsVHlwZSA9IGdsLlVOU0lHTkVEX0lOVDtcblx0XHRcdFx0XHRzd2l0Y2ggKGdsTnVtQ2hhbm5lbHMpIHtcblx0XHRcdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SMzJVSTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkczMlVJO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0IzMlVJO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgNDpcblx0XHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0JBMzJVSTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGdsTnVtQ2hhbm5lbHMgJHtnbE51bUNoYW5uZWxzfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHR5cGUgJHtpbnRlcm5hbFR5cGV9IGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuYCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN3aXRjaCAobnVtQ29tcG9uZW50cykge1xuXHRcdFx0XHQvLyBUT0RPOiBmb3IgcmVhZCBvbmx5IHRleHR1cmVzIGluIFdlYkdMIDEuMCwgd2UgY291bGQgdXNlIGdsLkFMUEhBIGFuZCBnbC5MVU1JTkFOQ0VfQUxQSEEgaGVyZS5cblx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdGlmICghd3JpdGFibGUpIHtcblx0XHRcdFx0XHRcdGdsRm9ybWF0ID0gZ2wuQUxQSEE7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRpZiAoIXdyaXRhYmxlKSB7XG5cdFx0XHRcdFx0XHRnbEZvcm1hdCA9IGdsLkxVTUlOQU5DRV9BTFBIQTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdGdsRm9ybWF0ID0gZ2wuUkdCO1xuXHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSBnbC5SR0I7XG5cdFx0XHRcdFx0Z2xOdW1DaGFubmVscyA9IDM7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgNDpcblx0XHRcdFx0XHRnbEZvcm1hdCA9IGdsLlJHQkE7XG5cdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IGdsLlJHQkE7XG5cdFx0XHRcdFx0Z2xOdW1DaGFubmVscyA9IDQ7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBudW1Db21wb25lbnRzICR7bnVtQ29tcG9uZW50c30gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdH1cblx0XHRcdHN3aXRjaCAoaW50ZXJuYWxUeXBlKSB7XG5cdFx0XHRcdGNhc2UgRkxPQVQ6XG5cdFx0XHRcdFx0Z2xUeXBlID0gZ2wuRkxPQVQ7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgSEFMRl9GTE9BVDpcblx0XHRcdFx0XHRnbFR5cGUgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuSEFMRl9GTE9BVCB8fCBnZXRFeHRlbnNpb24oZ2wsIE9FU19URVhUVVJFX0hBTEZfRkxPQVQsIGVycm9yQ2FsbGJhY2spLkhBTEZfRkxPQVRfT0VTIGFzIG51bWJlcjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBVTlNJR05FRF9CWVRFOlxuXHRcdFx0XHRcdGdsVHlwZSA9IGdsLlVOU0lHTkVEX0JZVEU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdC8vIE5vIG90aGVyIHR5cGVzIGFyZSBzdXBwb3J0ZWQgaW4gZ2xzbDEueFxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgdHlwZSAke2ludGVybmFsVHlwZX0gaW4gV2ViR0wgMS4wIGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCIuYCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgZm9yIG1pc3NpbmcgcGFyYW1zLlxuXHRcdGlmIChnbFR5cGUgPT09IHVuZGVmaW5lZCB8fCBnbEZvcm1hdCA9PT0gdW5kZWZpbmVkIHx8IGdsSW50ZXJuYWxGb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29uc3QgbWlzc2luZ1BhcmFtcyA9IFtdO1xuXHRcdFx0aWYgKGdsVHlwZSA9PT0gdW5kZWZpbmVkKSBtaXNzaW5nUGFyYW1zLnB1c2goJ2dsVHlwZScpO1xuXHRcdFx0aWYgKGdsRm9ybWF0ID09PSB1bmRlZmluZWQpIG1pc3NpbmdQYXJhbXMucHVzaCgnZ2xGb3JtYXQnKTtcblx0XHRcdGlmIChnbEludGVybmFsRm9ybWF0ID09PSB1bmRlZmluZWQpIG1pc3NpbmdQYXJhbXMucHVzaCgnZ2xJbnRlcm5hbEZvcm1hdCcpO1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHR5cGU6ICR7aW50ZXJuYWxUeXBlfSBmb3IgbnVtQ29tcG9uZW50cyAke251bUNvbXBvbmVudHN9LCB1bmFibGUgdG8gaW5pdCBwYXJhbWV0ZXIke21pc3NpbmdQYXJhbXMubGVuZ3RoID4gMSA/ICdzJyA6ICcnfSAke21pc3NpbmdQYXJhbXMuam9pbignLCAnKX0gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIi5gKTtcblx0XHR9XG5cdFx0aWYgKGdsTnVtQ2hhbm5lbHMgPT09IHVuZGVmaW5lZCB8fCBudW1Db21wb25lbnRzIDwgMSB8fCBudW1Db21wb25lbnRzID4gNCB8fCBnbE51bUNoYW5uZWxzIDwgbnVtQ29tcG9uZW50cykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG51bUNoYW5uZWxzICR7Z2xOdW1DaGFubmVsc30gZm9yIG51bUNvbXBvbmVudHMgJHtudW1Db21wb25lbnRzfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLmApO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRnbEZvcm1hdCxcblx0XHRcdGdsSW50ZXJuYWxGb3JtYXQsXG5cdFx0XHRnbFR5cGUsXG5cdFx0XHRnbE51bUNoYW5uZWxzLFxuXHRcdH07XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyB0ZXN0RnJhbWVidWZmZXJXcml0ZShcblx0XHRwYXJhbXM6IHtcblx0XHRcdGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxuXHRcdFx0dHlwZTogRGF0YUxheWVyVHlwZSxcblx0XHRcdGdsc2xWZXJzaW9uOiBHTFNMVmVyc2lvbixcblx0XHR9LFxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCB0eXBlLCBnbHNsVmVyc2lvbiB9ID0gcGFyYW1zO1xuXHRcdGNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cdFx0aWYgKCF0ZXh0dXJlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuXG5cdFx0Ly8gRGVmYXVsdCB0byBtb3N0IHdpZGVseSBzdXBwb3J0ZWQgc2V0dGluZ3MuXG5cdFx0Y29uc3Qgd3JhcFMgPSBnbFtDTEFNUF9UT19FREdFXTtcblx0XHRjb25zdCB3cmFwVCA9IGdsW0NMQU1QX1RPX0VER0VdO1xuXHRcdGNvbnN0IGZpbHRlciA9IGdsW05FQVJFU1RdO1xuXHRcdC8vIFVzZSBub24tcG93ZXIgb2YgdHdvIGRpbWVuc2lvbnMgdG8gY2hlY2sgZm9yIG1vcmUgdW5pdmVyc2FsIHN1cHBvcnQuXG5cdFx0Ly8gKEluIGNhc2Ugc2l6ZSBvZiBEYXRhTGF5ZXIgaXMgY2hhbmdlZCBhdCBhIGxhdGVyIHBvaW50KS5cblx0XHRjb25zdCB3aWR0aCA9IDEwMDtcblx0XHRjb25zdCBoZWlnaHQgPSAxMDA7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgd3JhcFMpO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIHdyYXBUKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZmlsdGVyKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZmlsdGVyKTtcblxuXHRcdGNvbnN0IHsgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSB9ID0gRGF0YUxheWVyLmdldEdMVGV4dHVyZVBhcmFtZXRlcnMoe1xuXHRcdFx0Z2wsXG5cdFx0XHRuYW1lOiAndGVzdEZyYW1lYnVmZmVyV3JpdGUnLFxuXHRcdFx0bnVtQ29tcG9uZW50czogMSxcblx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0aW50ZXJuYWxUeXBlOiB0eXBlLFxuXHRcdFx0Z2xzbFZlcnNpb24sXG5cdFx0XHRlcnJvckNhbGxiYWNrOiAoKSA9PiB7fSxcblx0XHR9KTtcblx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIHdpZHRoLCBoZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG51bGwpO1xuXG5cdFx0Ly8gSW5pdCBhIGZyYW1lYnVmZmVyIGZvciB0aGlzIHRleHR1cmUgc28gd2UgY2FuIHdyaXRlIHRvIGl0LlxuXHRcdGNvbnN0IGZyYW1lYnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblx0XHRpZiAoIWZyYW1lYnVmZmVyKSB7XG5cdFx0XHQvLyBDbGVhciBvdXQgYWxsb2NhdGVkIG1lbW9yeS5cblx0XHRcdGdsLmRlbGV0ZVRleHR1cmUodGV4dHVyZSk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIpO1xuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJHTFJlbmRlcmluZ0NvbnRleHQvZnJhbWVidWZmZXJUZXh0dXJlMkRcblx0XHRnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChnbC5GUkFNRUJVRkZFUiwgZ2wuQ09MT1JfQVRUQUNITUVOVDAsIGdsLlRFWFRVUkVfMkQsIHRleHR1cmUsIDApO1xuXG5cdFx0Y29uc3Qgc3RhdHVzID0gZ2wuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyhnbC5GUkFNRUJVRkZFUik7XG5cdFx0Y29uc3QgdmFsaWRTdGF0dXMgPSBzdGF0dXMgPT09IGdsLkZSQU1FQlVGRkVSX0NPTVBMRVRFO1xuXG5cdFx0Ly8gQ2xlYXIgb3V0IGFsbG9jYXRlZCBtZW1vcnkuXG5cdFx0Z2wuZGVsZXRlVGV4dHVyZSh0ZXh0dXJlKTtcblx0XHRnbC5kZWxldGVGcmFtZWJ1ZmZlcihmcmFtZWJ1ZmZlcik7XG5cblx0XHRyZXR1cm4gdmFsaWRTdGF0dXM7XG5cdH1cblxuXHRwcml2YXRlIHZhbGlkYXRlRGF0YUFycmF5KFxuXHRcdF9kYXRhPzogRGF0YUxheWVyQXJyYXlUeXBlLFxuXHQpIHtcblx0XHRpZiAoIV9kYXRhKXtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgeyB3aWR0aCwgaGVpZ2h0LCBsZW5ndGgsIG51bUNvbXBvbmVudHMsIGdsTnVtQ2hhbm5lbHMsIHR5cGUsIGludGVybmFsVHlwZSwgbmFtZSB9ID0gdGhpcztcblxuXHRcdC8vIENoZWNrIHRoYXQgZGF0YSBpcyBjb3JyZWN0IGxlbmd0aCAodXNlciBlcnJvcikuXG5cdFx0aWYgKChsZW5ndGggJiYgX2RhdGEubGVuZ3RoICE9PSBsZW5ndGggKiBudW1Db21wb25lbnRzKSB8fCAoIWxlbmd0aCAmJiBfZGF0YS5sZW5ndGggIT09IHdpZHRoICogaGVpZ2h0ICogbnVtQ29tcG9uZW50cykpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBkYXRhIGxlbmd0aCAke19kYXRhLmxlbmd0aH0gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIiBvZiBzaXplICR7bGVuZ3RoID8gbGVuZ3RoIDogYCR7d2lkdGh9eCR7aGVpZ2h0fWB9eCR7bnVtQ29tcG9uZW50c30uYCk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgdGhhdCBkYXRhIGlzIGNvcnJlY3QgdHlwZSAodXNlciBlcnJvcikuXG5cdFx0bGV0IGludmFsaWRUeXBlRm91bmQgPSBmYWxzZTtcblx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdGNhc2UgSEFMRl9GTE9BVDpcblx0XHRcdFx0Ly8gU2luY2UgdGhlcmUgaXMgbm8gRmxvYXQxNkFycmF5LCB3ZSBtdXN0IHVzZSBGbG9hdDMyQXJyYXlzIHRvIGluaXQgdGV4dHVyZS5cblx0XHRcdFx0Ly8gQ29udGludWUgdG8gbmV4dCBjYXNlLlxuXHRcdFx0Y2FzZSBGTE9BVDpcblx0XHRcdFx0aW52YWxpZFR5cGVGb3VuZCA9IGludmFsaWRUeXBlRm91bmQgfHwgX2RhdGEuY29uc3RydWN0b3IgIT09IEZsb2F0MzJBcnJheTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFVOU0lHTkVEX0JZVEU6XG5cdFx0XHRcdGludmFsaWRUeXBlRm91bmQgPSBpbnZhbGlkVHlwZUZvdW5kIHx8IF9kYXRhLmNvbnN0cnVjdG9yICE9PSBVaW50OEFycmF5O1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgQllURTpcblx0XHRcdFx0aW52YWxpZFR5cGVGb3VuZCA9IGludmFsaWRUeXBlRm91bmQgfHwgX2RhdGEuY29uc3RydWN0b3IgIT09IEludDhBcnJheTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFVOU0lHTkVEX1NIT1JUOlxuXHRcdFx0XHRpbnZhbGlkVHlwZUZvdW5kID0gaW52YWxpZFR5cGVGb3VuZCB8fCBfZGF0YS5jb25zdHJ1Y3RvciAhPT0gVWludDE2QXJyYXk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBTSE9SVDpcblx0XHRcdFx0aW52YWxpZFR5cGVGb3VuZCA9IGludmFsaWRUeXBlRm91bmQgfHwgX2RhdGEuY29uc3RydWN0b3IgIT09IEludDE2QXJyYXk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBVTlNJR05FRF9JTlQ6XG5cdFx0XHRcdGludmFsaWRUeXBlRm91bmQgPSBpbnZhbGlkVHlwZUZvdW5kIHx8IF9kYXRhLmNvbnN0cnVjdG9yICE9PSBVaW50MzJBcnJheTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIElOVDpcblx0XHRcdFx0aW52YWxpZFR5cGVGb3VuZCA9IGludmFsaWRUeXBlRm91bmQgfHwgX2RhdGEuY29uc3RydWN0b3IgIT09IEludDMyQXJyYXk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBFcnJvciBpbml0aW5nIERhdGFMYXllciBcIiR7bmFtZX1cIi4gIFVuc3VwcG9ydGVkIHR5cGUgXCIke3R5cGV9XCIgZm9yIFdlYkdMQ29tcHV0ZS5pbml0RGF0YUxheWVyLmApO1xuXHRcdH1cblx0XHRpZiAoaW52YWxpZFR5cGVGb3VuZCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIFR5cGVkQXJyYXkgb2YgdHlwZSAkeyhfZGF0YS5jb25zdHJ1Y3RvciBhcyBhbnkpLm5hbWV9IHN1cHBsaWVkIHRvIERhdGFMYXllciBcIiR7bmFtZX1cIiBvZiB0eXBlIFwiJHt0eXBlfVwiLmApO1xuXHRcdH1cblxuXHRcdGxldCBkYXRhID0gX2RhdGE7XG5cdFx0Y29uc3QgaW1hZ2VTaXplID0gd2lkdGggKiBoZWlnaHQgKiBnbE51bUNoYW5uZWxzO1xuXHRcdC8vIFRoZW4gY2hlY2sgaWYgYXJyYXkgbmVlZHMgdG8gYmUgbGVuZ3RoZW5lZC5cblx0XHQvLyBUaGlzIGNvdWxkIGJlIGJlY2F1c2UgZ2xOdW1DaGFubmVscyAhPT0gbnVtQ29tcG9uZW50cy5cblx0XHQvLyBPciBiZWNhdXNlIGxlbmd0aCAhPT0gd2lkdGggKiBoZWlnaHQuXG5cdFx0Y29uc3QgaW5jb3JyZWN0U2l6ZSA9IGRhdGEubGVuZ3RoICE9PSBpbWFnZVNpemU7XG5cdFx0Ly8gV2UgaGF2ZSB0byBoYW5kbGUgdGhlIGNhc2Ugb2YgRmxvYXQxNiBzcGVjaWFsbHkgYnkgY29udmVydGluZyBkYXRhIHRvIFVpbnQxNkFycmF5LlxuXHRcdGNvbnN0IGhhbmRsZUZsb2F0MTYgPSBpbnRlcm5hbFR5cGUgPT09IEhBTEZfRkxPQVQ7XG5cdFx0Ly8gRm9yIHdlYmdsMS4wIHdlIG1heSBuZWVkIHRvIGNhc3QgYW4gaW50IHR5cGUgdG8gYSBGTE9BVCBvciBIQUxGX0ZMT0FULlxuXHRcdGNvbnN0IHNob3VsZFR5cGVDYXN0ID0gdHlwZSAhPT0gaW50ZXJuYWxUeXBlO1xuXG5cdFx0aWYgKHNob3VsZFR5cGVDYXN0IHx8IGluY29ycmVjdFNpemUgfHwgaGFuZGxlRmxvYXQxNikge1xuXHRcdFx0c3dpdGNoIChpbnRlcm5hbFR5cGUpIHtcblx0XHRcdFx0Y2FzZSBIQUxGX0ZMT0FUOlxuXHRcdFx0XHRcdGRhdGEgPSBuZXcgVWludDE2QXJyYXkoaW1hZ2VTaXplKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBGTE9BVDpcblx0XHRcdFx0XHRkYXRhID0gbmV3IEZsb2F0MzJBcnJheShpbWFnZVNpemUpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFVOU0lHTkVEX0JZVEU6XG5cdFx0XHRcdFx0ZGF0YSA9IG5ldyBVaW50OEFycmF5KGltYWdlU2l6ZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgQllURTpcblx0XHRcdFx0XHRkYXRhID0gbmV3IEludDhBcnJheShpbWFnZVNpemUpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFVOU0lHTkVEX1NIT1JUOlxuXHRcdFx0XHRcdGRhdGEgPSBuZXcgVWludDE2QXJyYXkoaW1hZ2VTaXplKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBTSE9SVDpcblx0XHRcdFx0XHRkYXRhID0gbmV3IEludDE2QXJyYXkoaW1hZ2VTaXplKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBVTlNJR05FRF9JTlQ6XG5cdFx0XHRcdFx0ZGF0YSA9IG5ldyBVaW50MzJBcnJheShpbWFnZVNpemUpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIElOVDpcblx0XHRcdFx0XHRkYXRhID0gbmV3IEludDMyQXJyYXkoaW1hZ2VTaXplKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBFcnJvciBpbml0aW5nICR7bmFtZX0uICBVbnN1cHBvcnRlZCBpbnRlcm5hbFR5cGUgJHtpbnRlcm5hbFR5cGV9IGZvciBXZWJHTENvbXB1dGUuaW5pdERhdGFMYXllci5gKTtcblx0XHRcdH1cblx0XHRcdC8vIEZpbGwgbmV3IGRhdGEgYXJyYXkgd2l0aCBvbGQgZGF0YS5cblx0XHRcdGNvbnN0IHZpZXcgPSBoYW5kbGVGbG9hdDE2ID8gbmV3IERhdGFWaWV3KGRhdGEuYnVmZmVyKSA6IG51bGw7XG5cdFx0XHRmb3IgKGxldCBpID0gMCwgX2xlbiA9IF9kYXRhLmxlbmd0aCAvIG51bUNvbXBvbmVudHM7IGkgPCBfbGVuOyBpKyspIHtcblx0XHRcdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBudW1Db21wb25lbnRzOyBqKyspIHtcblx0XHRcdFx0XHRjb25zdCB2YWx1ZSA9IF9kYXRhW2kgKiBudW1Db21wb25lbnRzICsgal07XG5cdFx0XHRcdFx0Y29uc3QgaW5kZXggPSBpICogZ2xOdW1DaGFubmVscyArIGo7XG5cdFx0XHRcdFx0aWYgKGhhbmRsZUZsb2F0MTYpIHtcblx0XHRcdFx0XHRcdHNldEZsb2F0MTYodmlldyEsIDIgKiBpbmRleCwgdmFsdWUsIHRydWUpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRkYXRhW2luZGV4XSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cblx0cHJpdmF0ZSBpbml0QnVmZmVycyhcblx0XHRfZGF0YT86IERhdGFMYXllckFycmF5VHlwZSxcblx0KSB7XG5cdFx0Y29uc3Qge1xuXHRcdFx0bmFtZSxcblx0XHRcdG51bUJ1ZmZlcnMsXG5cdFx0XHRnbCxcblx0XHRcdHdpZHRoLFxuXHRcdFx0aGVpZ2h0LFxuXHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCxcblx0XHRcdGdsRm9ybWF0LFxuXHRcdFx0Z2xUeXBlLFxuXHRcdFx0Z2xGaWx0ZXIsXG5cdFx0XHRnbFdyYXBTLFxuXHRcdFx0Z2xXcmFwVCxcblx0XHRcdHdyaXRhYmxlLFxuXHRcdFx0ZXJyb3JDYWxsYmFjayxcblx0XHR9ID0gdGhpcztcblxuXHRcdGNvbnN0IGRhdGEgPSB0aGlzLnZhbGlkYXRlRGF0YUFycmF5KF9kYXRhKTtcblxuXHRcdC8vIEluaXQgYSB0ZXh0dXJlIGZvciBlYWNoIGJ1ZmZlci5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG51bUJ1ZmZlcnM7IGkrKykge1xuXHRcdFx0Y29uc3QgdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblx0XHRcdGlmICghdGV4dHVyZSkge1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrKGBDb3VsZCBub3QgaW5pdCB0ZXh0dXJlIGZvciBEYXRhTGF5ZXIgXCIke25hbWV9XCI6ICR7Z2wuZ2V0RXJyb3IoKX0uYCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuXG5cdFx0XHQvLyBUT0RPOiBhcmUgdGhlcmUgb3RoZXIgcGFyYW1zIHRvIGxvb2sgaW50bzpcblx0XHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJHTFJlbmRlcmluZ0NvbnRleHQvdGV4UGFyYW1ldGVyXG5cdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbFdyYXBTKTtcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsV3JhcFQpO1xuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsRmlsdGVyKTtcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbEZpbHRlcik7XG5cblx0XHRcdGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgd2lkdGgsIGhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgZGF0YSA/IGRhdGEgOiBudWxsKTtcblx0XHRcdFxuXHRcdFx0Y29uc3QgYnVmZmVyOiBEYXRhTGF5ZXJCdWZmZXIgPSB7XG5cdFx0XHRcdHRleHR1cmUsXG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAod3JpdGFibGUpIHtcblx0XHRcdFx0Ly8gSW5pdCBhIGZyYW1lYnVmZmVyIGZvciB0aGlzIHRleHR1cmUgc28gd2UgY2FuIHdyaXRlIHRvIGl0LlxuXHRcdFx0XHRjb25zdCBmcmFtZWJ1ZmZlciA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cdFx0XHRcdGlmICghZnJhbWVidWZmZXIpIHtcblx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKGBDb3VsZCBub3QgaW5pdCBmcmFtZWJ1ZmZlciBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiOiAke2dsLmdldEVycm9yKCl9LmApO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGZyYW1lYnVmZmVyKTtcblx0XHRcdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYkdMUmVuZGVyaW5nQ29udGV4dC9mcmFtZWJ1ZmZlclRleHR1cmUyRFxuXHRcdFx0XHRnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChnbC5GUkFNRUJVRkZFUiwgZ2wuQ09MT1JfQVRUQUNITUVOVDAsIGdsLlRFWFRVUkVfMkQsIHRleHR1cmUsIDApO1xuXG5cdFx0XHRcdGNvbnN0IHN0YXR1cyA9IGdsLmNoZWNrRnJhbWVidWZmZXJTdGF0dXMoZ2wuRlJBTUVCVUZGRVIpO1xuXHRcdFx0XHRpZihzdGF0dXMgIT0gZ2wuRlJBTUVCVUZGRVJfQ09NUExFVEUpe1xuXHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soYEludmFsaWQgc3RhdHVzIGZvciBmcmFtZWJ1ZmZlciBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiOiAke3N0YXR1c30uYCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgZnJhbWVidWZmZXIuXG5cdFx0XHRcdGJ1ZmZlci5mcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvLyBTYXZlIHRoaXMgYnVmZmVyIHRvIHRoZSBsaXN0LlxuXHRcdFx0dGhpcy5idWZmZXJzLnB1c2goYnVmZmVyKTtcblx0XHR9XG5cdFx0Ly8gVW5iaW5kLlxuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG5cdH1cblxuXHRnZXRDdXJyZW50U3RhdGVUZXh0dXJlKCkge1xuXHRcdHJldHVybiB0aGlzLmJ1ZmZlcnNbdGhpcy5idWZmZXJJbmRleF0udGV4dHVyZTtcblx0fVxuXG5cdGdldFByZXZpb3VzU3RhdGVUZXh0dXJlKGluZGV4ID0gLTEpIHtcblx0XHRpZiAodGhpcy5udW1CdWZmZXJzID09PSAxKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjYWxsIGdldFByZXZpb3VzU3RhdGVUZXh0dXJlIG9uIERhdGFMYXllciBcIiR7dGhpcy5uYW1lfVwiIHdpdGggb25seSBvbmUgYnVmZmVyLmApO1xuXHRcdH1cblx0XHRjb25zdCBwcmV2aW91c0luZGV4ID0gdGhpcy5idWZmZXJJbmRleCArIGluZGV4ICsgdGhpcy5udW1CdWZmZXJzO1xuXHRcdGlmIChwcmV2aW91c0luZGV4IDwgMCB8fCBwcmV2aW91c0luZGV4ID49IHRoaXMubnVtQnVmZmVycykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGluZGV4ICR7aW5kZXh9IHBhc3NlZCB0byBnZXRQcmV2aW91c1N0YXRlVGV4dHVyZSBvbiBEYXRhTGF5ZXIgJHt0aGlzLm5hbWV9IHdpdGggJHt0aGlzLm51bUJ1ZmZlcnN9IGJ1ZmZlcnMuYCk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmJ1ZmZlcnNbcHJldmlvdXNJbmRleF0udGV4dHVyZTtcblx0fVxuXG5cdGJpbmRPdXRwdXRCdWZmZXIoXG5cdFx0aW5jcmVtZW50QnVmZmVySW5kZXg6IGJvb2xlYW4sXG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cdFx0aWYgKGluY3JlbWVudEJ1ZmZlckluZGV4KSB7XG5cdFx0XHQvLyBJbmNyZW1lbnQgYnVmZmVySW5kZXguXG5cdFx0XHR0aGlzLmJ1ZmZlckluZGV4ID0gKHRoaXMuYnVmZmVySW5kZXggKyAxKSAlIHRoaXMubnVtQnVmZmVycztcblx0XHR9XG5cdFx0Y29uc3QgeyBmcmFtZWJ1ZmZlciB9ID0gdGhpcy5idWZmZXJzW3RoaXMuYnVmZmVySW5kZXhdO1xuXHRcdGlmICghZnJhbWVidWZmZXIpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgRGF0YUxheWVyIFwiJHt0aGlzLm5hbWV9XCIgaXMgbm90IHdyaXRhYmxlLmApO1xuXHRcdH1cblx0XHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGZyYW1lYnVmZmVyKTtcblx0fVxuXG5cdHNldERhdGEoZGF0YTogRGF0YUxheWVyQXJyYXlUeXBlKSB7XG5cdFx0Ly8gVE9ETzogUmF0aGVyIHRoYW4gZGVzdHJveWluZyBidWZmZXJzLCB3ZSBjb3VsZCB3cml0ZSB0byBjZXJ0YWluIHdpbmRvdy5cblx0XHR0aGlzLmRlc3Ryb3lCdWZmZXJzKCk7XG5cdFx0dGhpcy5pbml0QnVmZmVycyhkYXRhKTtcblx0fVxuXG5cdHJlc2l6ZShcblx0XHRkaW1lbnNpb25zOiBudW1iZXIgfCBbbnVtYmVyLCBudW1iZXJdLFxuXHRcdGRhdGE/OiBEYXRhTGF5ZXJBcnJheVR5cGUsXG5cdCkge1xuXHRcdGNvbnN0IHsgbGVuZ3RoLCB3aWR0aCwgaGVpZ2h0IH0gPSBEYXRhTGF5ZXIuY2FsY1NpemUoZGltZW5zaW9ucywgdGhpcy5uYW1lKTtcblx0XHR0aGlzLmxlbmd0aCA9IGxlbmd0aDtcblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0dGhpcy5kZXN0cm95QnVmZmVycygpO1xuXHRcdHRoaXMuaW5pdEJ1ZmZlcnMoZGF0YSk7XG5cdH1cblxuXHRjbGVhcigpIHtcblx0XHQvLyBSZXNldCBldmVyeXRoaW5nIHRvIHplcm8uXG5cdFx0Ly8gVE9ETzogVGhpcyBpcyBub3QgdGhlIG1vc3QgZWZmaWNpZW50IHdheSB0byBkbyB0aGlzIChyZWFsbG9jYXRpbmcgYWxsIHRleHR1cmVzIGFuZCBmcmFtZWJ1ZmZlcnMpLCBidXQgb2sgZm9yIG5vdy5cblx0XHR0aGlzLmRlc3Ryb3lCdWZmZXJzKCk7XG5cdFx0dGhpcy5pbml0QnVmZmVycygpO1xuXHR9XG5cblx0Z2V0RGltZW5zaW9ucygpIHtcblx0XHRyZXR1cm4gW1xuXHRcdFx0dGhpcy53aWR0aCxcblx0XHRcdHRoaXMuaGVpZ2h0LFxuXHRcdF0gYXMgW251bWJlciwgbnVtYmVyXTtcblx0fVxuXG5cdGdldFRleHR1cmVzKCkge1xuXHRcdHJldHVybiB0aGlzLmJ1ZmZlcnMubWFwKGJ1ZmZlciA9PiBidWZmZXIudGV4dHVyZSk7XG5cdH1cblxuXHRnZXRMZW5ndGgoKSB7XG5cdFx0aWYgKCF0aGlzLmxlbmd0aCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY2FsbCBnZXRMZW5ndGgoKSBvbiAyRCBEYXRhTGF5ZXIgXCIke3RoaXMubmFtZX1cIi5gKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMubGVuZ3RoO1xuXHR9XG5cblx0cHJpdmF0ZSBkZXN0cm95QnVmZmVycygpIHtcblx0XHRjb25zdCB7IGdsLCBidWZmZXJzIH0gPSB0aGlzO1xuXHRcdGJ1ZmZlcnMuZm9yRWFjaChidWZmZXIgPT4ge1xuXHRcdFx0Y29uc3QgeyBmcmFtZWJ1ZmZlciwgdGV4dHVyZSB9ID0gYnVmZmVyO1xuXHRcdFx0Z2wuZGVsZXRlVGV4dHVyZSh0ZXh0dXJlKTtcblx0XHRcdGlmIChmcmFtZWJ1ZmZlcikge1xuXHRcdFx0XHRnbC5kZWxldGVGcmFtZWJ1ZmZlcihmcmFtZWJ1ZmZlcik7XG5cdFx0XHR9XG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRkZWxldGUgYnVmZmVyLnRleHR1cmU7XG5cdFx0XHRkZWxldGUgYnVmZmVyLmZyYW1lYnVmZmVyO1xuXHRcdH0pO1xuXHRcdGJ1ZmZlcnMubGVuZ3RoID0gMDtcblx0fVxuXG5cdGRlc3Ryb3koKSB7XG5cdFx0dGhpcy5kZXN0cm95QnVmZmVycygpO1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRkZWxldGUgdGhpcy5nbDtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0ZGVsZXRlIHRoaXMuZXJyb3JDYWxsYmFjaztcblx0fVxufVxuIiwiaW1wb3J0IHsgaXNBcnJheSwgaXNJbnRlZ2VyLCBpc051bWJlciwgaXNTdHJpbmcgfSBmcm9tICcuL0NoZWNrcyc7XG5pbXBvcnQge1xuXHRGTE9BVCxcblx0RkxPQVRfMURfVU5JRk9STSwgRkxPQVRfMkRfVU5JRk9STSwgRkxPQVRfM0RfVU5JRk9STSwgRkxPQVRfNERfVU5JRk9STSxcblx0R0xTTDMsXG5cdEdMU0xWZXJzaW9uLFxuXHRJTlQsXG5cdElOVF8xRF9VTklGT1JNLCBJTlRfMkRfVU5JRk9STSwgSU5UXzNEX1VOSUZPUk0sIElOVF80RF9VTklGT1JNLFxuXHRVbmlmb3JtLCBVbmlmb3JtRGF0YVR5cGUsIFVuaWZvcm1UeXBlLCBVbmlmb3JtVmFsdWVUeXBlLFxufSBmcm9tICcuL0NvbnN0YW50cyc7XG5pbXBvcnQgeyBjb21waWxlU2hhZGVyIH0gZnJvbSAnLi91dGlscyc7XG5jb25zdCBkZWZhdWx0VmVydGV4U2hhZGVyU291cmNlX2dsc2wzID0gcmVxdWlyZSgnLi9nbHNsXzMvRGVmYXVsdFZlcnRleFNoYWRlci5nbHNsJyk7XG5jb25zdCBkZWZhdWx0VmVydGV4U2hhZGVyU291cmNlX2dsc2wxID0gcmVxdWlyZSgnLi9nbHNsXzEvRGVmYXVsdFZlcnRleFNoYWRlci5nbHNsJyk7XG5jb25zdCBzZWdtZW50VmVydGV4U2hhZGVyU291cmNlX2dsc2wzID0gcmVxdWlyZSgnLi9nbHNsXzMvU2VnbWVudFZlcnRleFNoYWRlci5nbHNsJyk7XG5jb25zdCBzZWdtZW50VmVydGV4U2hhZGVyU291cmNlX2dsc2wxID0gcmVxdWlyZSgnLi9nbHNsXzEvU2VnbWVudFZlcnRleFNoYWRlci5nbHNsJyk7XG5jb25zdCBwb2ludHNWZXJ0ZXhTaGFkZXJTb3VyY2VfZ2xzbDEgPSByZXF1aXJlKCcuL2dsc2xfMS9Qb2ludHNWZXJ0ZXhTaGFkZXIuZ2xzbCcpO1xuY29uc3QgdmVjdG9yRmllbGRWZXJ0ZXhTaGFkZXJTb3VyY2VfZ2xzbDEgPSByZXF1aXJlKCcuL2dsc2xfMS9WZWN0b3JGaWVsZFZlcnRleFNoYWRlci5nbHNsJyk7XG5cbmNvbnN0IERFRkFVTFRfUFJPR1JBTV9OQU1FID0gJ0RFRkFVTFQnO1xuY29uc3QgU0VHTUVOVF9QUk9HUkFNX05BTUUgPSAnU0VHTUVOVCc7XG5jb25zdCBQT0lOVFNfUFJPR1JBTV9OQU1FID0gJ1BPSU5UUyc7XG5jb25zdCBWRUNUT1JfRklFTERfUFJPR1JBTV9OQU1FID0gJ1ZFQ1RPUl9GSUVMRCc7XG5cbmV4cG9ydCBjbGFzcyBHUFVQcm9ncmFtIHtcblx0cmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXHRwcml2YXRlIHJlYWRvbmx5IGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0O1xuXHRwcml2YXRlIHJlYWRvbmx5IGVycm9yQ2FsbGJhY2s6IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQ7XG5cdHByaXZhdGUgcmVhZG9ubHkgZ2xzbFZlcnNpb246IEdMU0xWZXJzaW9uO1xuXHRwcml2YXRlIHJlYWRvbmx5IHVuaWZvcm1zOiB7IFsga2V5OiBzdHJpbmddOiBVbmlmb3JtIH0gPSB7fTtcblx0cHJpdmF0ZSByZWFkb25seSBmcmFnbWVudFNoYWRlciE6IFdlYkdMU2hhZGVyO1xuXHQvLyBTdG9yZSBnbCBwcm9ncmFtcy5cblx0cHJpdmF0ZSBfZGVmYXVsdFByb2dyYW0/OiBXZWJHTFByb2dyYW07XG5cdHByaXZhdGUgX3NlZ21lbnRQcm9ncmFtPzogV2ViR0xQcm9ncmFtO1xuXHRwcml2YXRlIF9wb2ludHNQcm9ncmFtPzogV2ViR0xQcm9ncmFtO1xuXHRwcml2YXRlIF92ZWN0b3JGaWVsZFByb2dyYW0/OiBXZWJHTFByb2dyYW07XG5cdC8vIFN0b3JlIHZlcnRleFNoYWRlcnMgYXMgY2xhc3MgcHJvcGVydGllcyAoZm9yIHNoYXJpbmcpLlxuXHRwcml2YXRlIHN0YXRpYyBkZWZhdWx0VmVydGV4U2hhZGVyPzogV2ViR0xTaGFkZXI7XG5cdHByaXZhdGUgc3RhdGljIHNlZ21lbnRWZXJ0ZXhTaGFkZXI/OiBXZWJHTFNoYWRlcjtcblx0cHJpdmF0ZSBzdGF0aWMgcG9pbnRzVmVydGV4U2hhZGVyPzogV2ViR0xTaGFkZXI7XG5cdHByaXZhdGUgc3RhdGljIHZlY3RvckZpZWxkVmVydGV4U2hhZGVyPzogV2ViR0xTaGFkZXI7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cGFyYW1zOiB7XG5cdFx0XHRnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCxcblx0XHRcdG5hbWU6IHN0cmluZyxcblx0XHRcdGZyYWdtZW50U2hhZGVyOiBzdHJpbmcgfCBzdHJpbmdbXSB8IFdlYkdMU2hhZGVyLC8vIFdlIG1heSB3YW50IHRvIHBhc3MgaW4gYW4gYXJyYXkgb2Ygc2hhZGVyIHN0cmluZyBzb3VyY2VzLCBpZiBzcGxpdCBhY3Jvc3Mgc2V2ZXJhbCBmaWxlcy5cblx0XHRcdGVycm9yQ2FsbGJhY2s6IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQsXG5cdFx0XHRnbHNsVmVyc2lvbjogR0xTTFZlcnNpb24sXG5cdFx0XHR1bmlmb3Jtcz86IHtcblx0XHRcdFx0bmFtZTogc3RyaW5nLFxuXHRcdFx0XHR2YWx1ZTogVW5pZm9ybVZhbHVlVHlwZSxcblx0XHRcdFx0ZGF0YVR5cGU6IFVuaWZvcm1EYXRhVHlwZSxcblx0XHRcdH1bXSxcblx0XHRcdGRlZmluZXM/OiB7Ly8gV2UnbGwgYWxsb3cgc29tZSB2YXJpYWJsZXMgdG8gYmUgcGFzc2VkIGluIGFzICNkZWZpbmUgdG8gdGhlIHByZXByb2Nlc3NvciBmb3IgdGhlIGZyYWdtZW50IHNoYWRlci5cblx0XHRcdFx0W2tleTogc3RyaW5nXTogc3RyaW5nLCAvLyBXZSdsbCBkbyB0aGVzZSBhcyBzdHJpbmdzIHRvIG1ha2UgaXQgZWFzaWVyIHRvIGNvbnRyb2wgZmxvYXQgdnMgaW50LlxuXHRcdFx0fSxcblx0XHR9LFxuXHRcdFxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCBlcnJvckNhbGxiYWNrLCBuYW1lLCBmcmFnbWVudFNoYWRlciwgZ2xzbFZlcnNpb24sIHVuaWZvcm1zLCBkZWZpbmVzIH0gPSBwYXJhbXM7XG5cblx0XHQvLyBTYXZlIGFyZ3VtZW50cy5cblx0XHR0aGlzLmdsID0gZ2w7XG5cdFx0dGhpcy5lcnJvckNhbGxiYWNrID0gZXJyb3JDYWxsYmFjaztcblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXHRcdHRoaXMuZ2xzbFZlcnNpb24gPSBnbHNsVmVyc2lvbjtcblxuXHRcdC8vIENvbXBpbGUgZnJhZ21lbnQgc2hhZGVyLlxuXHRcdGlmICh0eXBlb2YoZnJhZ21lbnRTaGFkZXIpID09PSAnc3RyaW5nJyB8fCB0eXBlb2YoKGZyYWdtZW50U2hhZGVyIGFzIHN0cmluZ1tdKVswXSkgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRsZXQgc291cmNlU3RyaW5nID0gdHlwZW9mKGZyYWdtZW50U2hhZGVyKSA9PT0gJ3N0cmluZycgP1xuXHRcdFx0XHRmcmFnbWVudFNoYWRlciA6XG5cdFx0XHRcdChmcmFnbWVudFNoYWRlciBhcyBzdHJpbmdbXSkuam9pbignXFxuJyk7XG5cdFx0XHRpZiAoZGVmaW5lcykge1xuXHRcdFx0XHQvLyBGaXJzdCBjb252ZXJ0IGRlZmluZXMgdG8gYSBzdHJpbmcuXG5cdFx0XHRcdGNvbnN0IGRlZmluZXNTb3VyY2UgPSBPYmplY3Qua2V5cyhkZWZpbmVzKS5tYXAoa2V5ID0+IHtcblx0XHRcdFx0XHQvLyBDaGVjayB0aGF0IGRlZmluZSBpcyBwYXNzZWQgaW4gYXMgYSBzdHJpbmcuXG5cdFx0XHRcdFx0aWYgKCFpc1N0cmluZyhrZXkpIHx8ICFpc1N0cmluZyhkZWZpbmVzW2tleV0pKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEdQVVByb2dyYW0gZGVmaW5lcyBtdXN0IGJlIHBhc3NlZCBpbiBhcyBrZXkgdmFsdWUgcGFpcnMgdGhhdCBhcmUgYm90aCBzdHJpbmdzLCBnb3Qga2V5IHZhbHVlIHBhaXIgb2YgdHlwZSAke3R5cGVvZiBrZXl9IDogJHt0eXBlb2YgZGVmaW5lc1trZXldfS5gKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gYCNkZWZpbmUgJHtrZXl9ICR7ZGVmaW5lc1trZXldfVxcbmA7XG5cdFx0XHRcdH0pLmpvaW4oJ1xcbicpO1xuXHRcdFx0XHRzb3VyY2VTdHJpbmcgPSBkZWZpbmVzU291cmNlICsgc291cmNlU3RyaW5nO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3Qgc2hhZGVyID0gY29tcGlsZVNoYWRlcihnbCwgZXJyb3JDYWxsYmFjaywgc291cmNlU3RyaW5nLCBnbC5GUkFHTUVOVF9TSEFERVIsIG5hbWUpO1xuXHRcdFx0aWYgKCFzaGFkZXIpIHtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayhgVW5hYmxlIHRvIGNvbXBpbGUgZnJhZ21lbnQgc2hhZGVyIGZvciBwcm9ncmFtIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmZyYWdtZW50U2hhZGVyID0gc2hhZGVyO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoZGVmaW5lcykge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBhdHRhY2ggZGVmaW5lcyB0byBwcm9ncmFtIFwiJHtuYW1lfVwiIGJlY2F1c2UgZnJhZ21lbnQgc2hhZGVyIGlzIGFscmVhZHkgY29tcGlsZWQuYCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dW5pZm9ybXM/LmZvckVhY2godW5pZm9ybSA9PiB7XG5cdFx0XHRjb25zdCB7IG5hbWUsIHZhbHVlLCBkYXRhVHlwZSB9ID0gdW5pZm9ybTtcblx0XHRcdHRoaXMuc2V0VW5pZm9ybShuYW1lLCB2YWx1ZSwgZGF0YVR5cGUpO1xuXHRcdH0pO1xuXHR9XG5cblx0cHJpdmF0ZSBpbml0UHJvZ3JhbSh2ZXJ0ZXhTaGFkZXI6IFdlYkdMU2hhZGVyLCBwcm9ncmFtTmFtZTogc3RyaW5nKSB7XG5cdFx0Y29uc3QgeyBnbCwgZnJhZ21lbnRTaGFkZXIsIGVycm9yQ2FsbGJhY2ssIHVuaWZvcm1zIH0gPSB0aGlzO1xuXHRcdC8vIENyZWF0ZSBhIHByb2dyYW0uXG5cdFx0Y29uc3QgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcblx0XHRpZiAoIXByb2dyYW0pIHtcblx0XHRcdGVycm9yQ2FsbGJhY2soYFVuYWJsZSB0byBpbml0IGdsIHByb2dyYW06ICR7bmFtZX0uYCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC8vIFRPRE86IGNoZWNrIHRoYXQgYXR0YWNoU2hhZGVyIHdvcmtlZC5cblx0XHRnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgZnJhZ21lbnRTaGFkZXIpO1xuXHRcdGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xuXHRcdC8vIExpbmsgdGhlIHByb2dyYW0uXG5cdFx0Z2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7XG5cdFx0Ly8gQ2hlY2sgaWYgaXQgbGlua2VkLlxuXHRcdGNvbnN0IHN1Y2Nlc3MgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkxJTktfU1RBVFVTKTtcblx0XHRpZiAoIXN1Y2Nlc3MpIHtcblx0XHRcdC8vIFNvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggdGhlIGxpbmsuXG5cdFx0XHRlcnJvckNhbGxiYWNrKGBQcm9ncmFtIFwiJHtuYW1lfVwiIGZhaWxlZCB0byBsaW5rOiAke2dsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pfWApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHQvLyBJZiB3ZSBoYXZlIGFueSB1bmlmb3JtcyBzZXQgZm9yIHRoaXMgR1BVUHJvZ3JhbSwgYWRkIHRob3NlIHRvIFdlYkdMUHJvZ3JhbSB3ZSBqdXN0IGluaXRlZC5cblx0XHRjb25zdCB1bmlmb3JtTmFtZXMgPSBPYmplY3Qua2V5cyh1bmlmb3Jtcyk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB1bmlmb3JtTmFtZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IHVuaWZvcm1OYW1lID0gdW5pZm9ybU5hbWVzW2ldO1xuXHRcdFx0Y29uc3QgdW5pZm9ybSA9IHVuaWZvcm1zW3VuaWZvcm1OYW1lXTtcblx0XHRcdGNvbnN0IHsgdmFsdWUsIHR5cGUgfSA9IHVuaWZvcm07XG5cdFx0XHR0aGlzLnNldFByb2dyYW1Vbmlmb3JtKHByb2dyYW0sIHByb2dyYW1OYW1lLCB1bmlmb3JtTmFtZSwgdmFsdWUsIHR5cGUpO1xuXHRcdH1cblx0XHRyZXR1cm4gcHJvZ3JhbTtcblx0fVxuXG5cdGdldCBkZWZhdWx0UHJvZ3JhbSgpIHtcblx0XHRpZiAodGhpcy5fZGVmYXVsdFByb2dyYW0pIHJldHVybiB0aGlzLl9kZWZhdWx0UHJvZ3JhbTtcblx0XHRpZiAoR1BVUHJvZ3JhbS5kZWZhdWx0VmVydGV4U2hhZGVyID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnN0IHsgZ2wsIG5hbWUsIGVycm9yQ2FsbGJhY2ssIGdsc2xWZXJzaW9uIH0gPSB0aGlzO1xuXHRcdFx0Ly8gSW5pdCBhIGRlZmF1bHQgdmVydGV4IHNoYWRlciB0aGF0IGp1c3QgcGFzc2VzIHRocm91Z2ggc2NyZWVuIGNvb3Jkcy5cblx0XHRcdGNvbnN0IHZlcnRleFNoYWRlclNvdXJjZSA9IGdsc2xWZXJzaW9uID09PSBHTFNMMyA/IGRlZmF1bHRWZXJ0ZXhTaGFkZXJTb3VyY2VfZ2xzbDMgOiBkZWZhdWx0VmVydGV4U2hhZGVyU291cmNlX2dsc2wxO1xuXHRcdFx0Y29uc3Qgc2hhZGVyID0gY29tcGlsZVNoYWRlcihnbCwgZXJyb3JDYWxsYmFjaywgdmVydGV4U2hhZGVyU291cmNlLCBnbC5WRVJURVhfU0hBREVSLCBuYW1lKTtcblx0XHRcdGlmICghc2hhZGVyKSB7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2soYFVuYWJsZSB0byBjb21waWxlIGRlZmF1bHQgdmVydGV4IHNoYWRlciBmb3IgcHJvZ3JhbSBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0R1BVUHJvZ3JhbS5kZWZhdWx0VmVydGV4U2hhZGVyID0gc2hhZGVyO1xuXHRcdH1cblx0XHRjb25zdCBwcm9ncmFtID0gdGhpcy5pbml0UHJvZ3JhbShHUFVQcm9ncmFtLmRlZmF1bHRWZXJ0ZXhTaGFkZXIsIERFRkFVTFRfUFJPR1JBTV9OQU1FKTtcblx0XHR0aGlzLl9kZWZhdWx0UHJvZ3JhbSA9IHByb2dyYW07XG5cdFx0cmV0dXJuIHRoaXMuX2RlZmF1bHRQcm9ncmFtO1xuXHR9XG5cblx0Z2V0IHNlZ21lbnRQcm9ncmFtKCkge1xuXHRcdGlmICh0aGlzLl9zZWdtZW50UHJvZ3JhbSkgcmV0dXJuIHRoaXMuX3NlZ21lbnRQcm9ncmFtO1xuXHRcdGlmIChHUFVQcm9ncmFtLnNlZ21lbnRWZXJ0ZXhTaGFkZXIgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29uc3QgeyBnbCwgbmFtZSwgZXJyb3JDYWxsYmFjaywgZ2xzbFZlcnNpb24gfSA9IHRoaXM7XG5cdFx0XHQvLyBJbml0IGEgZGVmYXVsdCB2ZXJ0ZXggc2hhZGVyIHRoYXQganVzdCBwYXNzZXMgdGhyb3VnaCBzY3JlZW4gY29vcmRzLlxuXHRcdFx0Y29uc3QgdmVydGV4U2hhZGVyU291cmNlID0gZ2xzbFZlcnNpb24gPT09IEdMU0wzID8gc2VnbWVudFZlcnRleFNoYWRlclNvdXJjZV9nbHNsMyA6IHNlZ21lbnRWZXJ0ZXhTaGFkZXJTb3VyY2VfZ2xzbDE7XG5cdFx0XHRjb25zdCBzaGFkZXIgPSBjb21waWxlU2hhZGVyKGdsLCBlcnJvckNhbGxiYWNrLCB2ZXJ0ZXhTaGFkZXJTb3VyY2UsIGdsLlZFUlRFWF9TSEFERVIsIG5hbWUpO1xuXHRcdFx0aWYgKCFzaGFkZXIpIHtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayhgVW5hYmxlIHRvIGNvbXBpbGUgc2VnbWVudCB2ZXJ0ZXggc2hhZGVyIGZvciBwcm9ncmFtIFwiJHtuYW1lfVwiLmApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRHUFVQcm9ncmFtLnNlZ21lbnRWZXJ0ZXhTaGFkZXIgPSBzaGFkZXI7XG5cdFx0fVxuXHRcdGNvbnN0IHByb2dyYW0gPSB0aGlzLmluaXRQcm9ncmFtKEdQVVByb2dyYW0uc2VnbWVudFZlcnRleFNoYWRlciwgU0VHTUVOVF9QUk9HUkFNX05BTUUpO1xuXHRcdHRoaXMuX3NlZ21lbnRQcm9ncmFtID0gcHJvZ3JhbTtcblx0XHRyZXR1cm4gdGhpcy5fc2VnbWVudFByb2dyYW07XG5cdH1cblxuXHRnZXQgcG9pbnRzUHJvZ3JhbSgpIHtcblx0XHRpZiAodGhpcy5fcG9pbnRzUHJvZ3JhbSkgcmV0dXJuIHRoaXMuX3BvaW50c1Byb2dyYW07XG5cdFx0aWYgKEdQVVByb2dyYW0ucG9pbnRzVmVydGV4U2hhZGVyID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnN0IHsgZ2wsIG5hbWUsIGVycm9yQ2FsbGJhY2ssIGdsc2xWZXJzaW9uIH0gPSB0aGlzO1xuXHRcdFx0Ly8gSW5pdCBhIGRlZmF1bHQgdmVydGV4IHNoYWRlciB0aGF0IGp1c3QgcGFzc2VzIHRocm91Z2ggc2NyZWVuIGNvb3Jkcy5cblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGNvbnN0IHZlcnRleFNoYWRlclNvdXJjZSA9IGdsc2xWZXJzaW9uID09PSBHTFNMMyA/IHBvaW50c1ZlcnRleFNoYWRlclNvdXJjZV9nbHNsMyA6IHBvaW50c1ZlcnRleFNoYWRlclNvdXJjZV9nbHNsMTtcblx0XHRcdGlmICh2ZXJ0ZXhTaGFkZXJTb3VyY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ05lZWQgdG8gd3JpdGUgZ2xzbDMgdmVyc2lvbiBvZiBwb2ludHNWZXJ0ZXhTaGFkZXIuJyk7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBzaGFkZXIgPSBjb21waWxlU2hhZGVyKGdsLCBlcnJvckNhbGxiYWNrLCB2ZXJ0ZXhTaGFkZXJTb3VyY2UsIGdsLlZFUlRFWF9TSEFERVIsIG5hbWUpO1xuXHRcdFx0aWYgKCFzaGFkZXIpIHtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayhgVW5hYmxlIHRvIGNvbXBpbGUgcG9pbnRzIHZlcnRleCBzaGFkZXIgZm9yIHByb2dyYW0gXCIke25hbWV9XCIuYCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdEdQVVByb2dyYW0ucG9pbnRzVmVydGV4U2hhZGVyID0gc2hhZGVyO1xuXHRcdH1cblx0XHRjb25zdCBwcm9ncmFtID0gdGhpcy5pbml0UHJvZ3JhbShHUFVQcm9ncmFtLnBvaW50c1ZlcnRleFNoYWRlciwgUE9JTlRTX1BST0dSQU1fTkFNRSk7XG5cdFx0dGhpcy5fcG9pbnRzUHJvZ3JhbSA9IHByb2dyYW07XG5cdFx0cmV0dXJuIHRoaXMuX3BvaW50c1Byb2dyYW07XG5cdH1cblxuXHRnZXQgdmVjdG9yRmllbGRQcm9ncmFtKCkge1xuXHRcdGlmICh0aGlzLl92ZWN0b3JGaWVsZFByb2dyYW0pIHJldHVybiB0aGlzLl92ZWN0b3JGaWVsZFByb2dyYW07XG5cdFx0aWYgKEdQVVByb2dyYW0udmVjdG9yRmllbGRWZXJ0ZXhTaGFkZXIgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29uc3QgeyBnbCwgbmFtZSwgZXJyb3JDYWxsYmFjaywgZ2xzbFZlcnNpb24gfSA9IHRoaXM7XG5cdFx0XHQvLyBJbml0IGEgZGVmYXVsdCB2ZXJ0ZXggc2hhZGVyIHRoYXQganVzdCBwYXNzZXMgdGhyb3VnaCBzY3JlZW4gY29vcmRzLlxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0Y29uc3QgdmVydGV4U2hhZGVyU291cmNlID0gZ2xzbFZlcnNpb24gPT09IEdMU0wzID8gdmVjdG9yRmllbGRWZXJ0ZXhTaGFkZXJTb3VyY2VfZ2xzbDMgOiB2ZWN0b3JGaWVsZFZlcnRleFNoYWRlclNvdXJjZV9nbHNsMTtcblx0XHRcdGlmICh2ZXJ0ZXhTaGFkZXJTb3VyY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ05lZWQgdG8gd3JpdGUgZ2xzbDMgdmVyc2lvbiBvZiB2ZWN0b3JGaWVsZFZlcnRleFNoYWRlci4nKTtcblx0XHRcdH1cblx0XHRcdGNvbnN0IHNoYWRlciA9IGNvbXBpbGVTaGFkZXIoZ2wsIGVycm9yQ2FsbGJhY2ssIHZlcnRleFNoYWRlclNvdXJjZSwgZ2wuVkVSVEVYX1NIQURFUiwgbmFtZSk7XG5cdFx0XHRpZiAoIXNoYWRlcikge1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrKGBVbmFibGUgdG8gY29tcGlsZSB2ZWN0b3IgZmllbGQgdmVydGV4IHNoYWRlciBmb3IgcHJvZ3JhbSBcIiR7bmFtZX1cIi5gKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0R1BVUHJvZ3JhbS52ZWN0b3JGaWVsZFZlcnRleFNoYWRlciA9IHNoYWRlcjtcblx0XHR9XG5cdFx0Y29uc3QgcHJvZ3JhbSA9IHRoaXMuaW5pdFByb2dyYW0oR1BVUHJvZ3JhbS52ZWN0b3JGaWVsZFZlcnRleFNoYWRlciwgVkVDVE9SX0ZJRUxEX1BST0dSQU1fTkFNRSk7XG5cdFx0dGhpcy5fdmVjdG9yRmllbGRQcm9ncmFtID0gcHJvZ3JhbTtcblx0XHRyZXR1cm4gdGhpcy5fdmVjdG9yRmllbGRQcm9ncmFtO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXQgYWN0aXZlUHJvZ3JhbXMoKSB7XG5cdFx0Y29uc3QgcHJvZ3JhbXMgPSBbXTtcblx0XHRpZiAodGhpcy5fZGVmYXVsdFByb2dyYW0pIHByb2dyYW1zLnB1c2goe1xuXHRcdFx0cHJvZ3JhbTogdGhpcy5fZGVmYXVsdFByb2dyYW0sXG5cdFx0XHRwcm9ncmFtTmFtZTogREVGQVVMVF9QUk9HUkFNX05BTUUsXG5cdFx0fSk7XG5cdFx0aWYgKHRoaXMuX3NlZ21lbnRQcm9ncmFtKSBwcm9ncmFtcy5wdXNoKHtcblx0XHRcdHByb2dyYW06IHRoaXMuX3NlZ21lbnRQcm9ncmFtLFxuXHRcdFx0cHJvZ3JhbU5hbWU6IFNFR01FTlRfUFJPR1JBTV9OQU1FLFxuXHRcdH0pO1xuXHRcdGlmICh0aGlzLl9wb2ludHNQcm9ncmFtKSBwcm9ncmFtcy5wdXNoKHtcblx0XHRcdHByb2dyYW06IHRoaXMuX3BvaW50c1Byb2dyYW0sXG5cdFx0XHRwcm9ncmFtTmFtZTogUE9JTlRTX1BST0dSQU1fTkFNRSxcblx0XHR9KTtcblx0XHRpZiAodGhpcy5fdmVjdG9yRmllbGRQcm9ncmFtKSBwcm9ncmFtcy5wdXNoKHtcblx0XHRcdHByb2dyYW06IHRoaXMuX3ZlY3RvckZpZWxkUHJvZ3JhbSxcblx0XHRcdHByb2dyYW1OYW1lOiBWRUNUT1JfRklFTERfUFJPR1JBTV9OQU1FLFxuXHRcdH0pO1xuXHRcdHJldHVybiBwcm9ncmFtcztcblx0fVxuXG5cdHByaXZhdGUgdW5pZm9ybVR5cGVGb3JWYWx1ZShcblx0XHR2YWx1ZTogbnVtYmVyIHwgbnVtYmVyW10sXG5cdFx0ZGF0YVR5cGU6IFVuaWZvcm1EYXRhVHlwZSxcblx0KSB7XG5cdFx0aWYgKGRhdGFUeXBlID09PSBGTE9BVCkge1xuXHRcdFx0Ly8gQ2hlY2sgdGhhdCB3ZSBhcmUgZGVhbGluZyB3aXRoIGEgbnVtYmVyLlxuXHRcdFx0aWYgKGlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRcdCh2YWx1ZSBhcyBudW1iZXJbXSkuZm9yRWFjaChlbGVtZW50ID0+IHtcblx0XHRcdFx0XHRpZiAoIWlzTnVtYmVyKGVsZW1lbnQpKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdW5pZm9ybSB2YWx1ZTogJHt2YWx1ZX0gZm9yIHByb2dyYW0gXCIke3RoaXMubmFtZX1cIiwgZXhwZWN0ZWQgZmxvYXQgb3IgZmxvYXRbXSBvZiBsZW5ndGggMS00LmApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB1bmlmb3JtIHZhbHVlOiAke3ZhbHVlfSBmb3IgcHJvZ3JhbSBcIiR7dGhpcy5uYW1lfVwiLCBleHBlY3RlZCBmbG9hdCBvciBmbG9hdFtdIG9mIGxlbmd0aCAxLTQuYCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICghaXNBcnJheSh2YWx1ZSkgfHwgKHZhbHVlIGFzIG51bWJlcltdKS5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0cmV0dXJuIEZMT0FUXzFEX1VOSUZPUk07XG5cdFx0XHR9XG5cdFx0XHRpZiAoKHZhbHVlIGFzIG51bWJlcltdKS5sZW5ndGggPT09IDIpIHtcblx0XHRcdFx0cmV0dXJuIEZMT0FUXzJEX1VOSUZPUk07XG5cdFx0XHR9XG5cdFx0XHRpZiAoKHZhbHVlIGFzIG51bWJlcltdKS5sZW5ndGggPT09IDMpIHtcblx0XHRcdFx0cmV0dXJuIEZMT0FUXzNEX1VOSUZPUk07XG5cdFx0XHR9XG5cdFx0XHRpZiAoKHZhbHVlIGFzIG51bWJlcltdKS5sZW5ndGggPT09IDQpIHtcblx0XHRcdFx0cmV0dXJuIEZMT0FUXzREX1VOSUZPUk07XG5cdFx0XHR9XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdW5pZm9ybSB2YWx1ZTogJHt2YWx1ZX0gZm9yIHByb2dyYW0gXCIke3RoaXMubmFtZX1cIiwgZXhwZWN0ZWQgZmxvYXQgb3IgZmxvYXRbXSBvZiBsZW5ndGggMS00LmApO1xuXHRcdH0gZWxzZSBpZiAoZGF0YVR5cGUgPT09IElOVCkge1xuXHRcdFx0Ly8gQ2hlY2sgdGhhdCB3ZSBhcmUgZGVhbGluZyB3aXRoIGFuIGludC5cblx0XHRcdGlmIChpc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0XHQodmFsdWUgYXMgbnVtYmVyW10pLmZvckVhY2goZWxlbWVudCA9PiB7XG5cdFx0XHRcdFx0aWYgKCFpc0ludGVnZXIoZWxlbWVudCkpIHtcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB1bmlmb3JtIHZhbHVlOiAke3ZhbHVlfSBmb3IgcHJvZ3JhbSBcIiR7dGhpcy5uYW1lfVwiLCBleHBlY3RlZCBpbnQgb3IgaW50W10gb2YgbGVuZ3RoIDEtNC5gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKCFpc0ludGVnZXIodmFsdWUpKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHVuaWZvcm0gdmFsdWU6ICR7dmFsdWV9IGZvciBwcm9ncmFtIFwiJHt0aGlzLm5hbWV9XCIsIGV4cGVjdGVkIGludCBvciBpbnRbXSBvZiBsZW5ndGggMS00LmApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWlzQXJyYXkodmFsdWUpIHx8ICh2YWx1ZSBhcyBudW1iZXJbXSkubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdHJldHVybiBJTlRfMURfVU5JRk9STTtcblx0XHRcdH1cblx0XHRcdGlmICgodmFsdWUgYXMgbnVtYmVyW10pLmxlbmd0aCA9PT0gMikge1xuXHRcdFx0XHRyZXR1cm4gSU5UXzJEX1VOSUZPUk07XG5cdFx0XHR9XG5cdFx0XHRpZiAoKHZhbHVlIGFzIG51bWJlcltdKS5sZW5ndGggPT09IDMpIHtcblx0XHRcdFx0cmV0dXJuIElOVF8zRF9VTklGT1JNO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCh2YWx1ZSBhcyBudW1iZXJbXSkubGVuZ3RoID09PSA0KSB7XG5cdFx0XHRcdHJldHVybiBJTlRfNERfVU5JRk9STTtcblx0XHRcdH1cblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB1bmlmb3JtIHZhbHVlOiAke3ZhbHVlfSBmb3IgcHJvZ3JhbSBcIiR7dGhpcy5uYW1lfVwiLCBleHBlY3RlZCBpbnQgb3IgaW50W10gb2YgbGVuZ3RoIDEtNC5gKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHVuaWZvcm0gZGF0YSB0eXBlOiAke2RhdGFUeXBlfSBmb3IgcHJvZ3JhbSBcIiR7dGhpcy5uYW1lfVwiLCBleHBlY3RlZCAke0ZMT0FUfSBvciAke0lOVH0uYCk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBzZXRQcm9ncmFtVW5pZm9ybShcblx0XHRwcm9ncmFtOiBXZWJHTFByb2dyYW0sXG5cdFx0cHJvZ3JhbU5hbWU6IHN0cmluZyxcblx0XHR1bmlmb3JtTmFtZTogc3RyaW5nLFxuXHRcdHZhbHVlOiBVbmlmb3JtVmFsdWVUeXBlLFxuXHRcdHR5cGU6IFVuaWZvcm1UeXBlLFxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCB1bmlmb3JtcywgZXJyb3JDYWxsYmFjayB9ID0gdGhpcztcblx0XHQvLyBTZXQgYWN0aXZlIHByb2dyYW0uXG5cdFx0Z2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcblxuXHRcdGxldCBsb2NhdGlvbiA9IHVuaWZvcm1zW3VuaWZvcm1OYW1lXT8ubG9jYXRpb25bcHJvZ3JhbU5hbWVdO1xuXHRcdC8vIEluaXQgYSBsb2NhdGlvbiBmb3IgV2ViR0xQcm9ncmFtIGlmIG5lZWRlZC5cblx0XHRpZiAobG9jYXRpb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29uc3QgX2xvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIHVuaWZvcm1OYW1lKTtcblx0XHRcdGlmICghX2xvY2F0aW9uKSB7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2soYENvdWxkIG5vdCBpbml0IHVuaWZvcm0gXCIke3VuaWZvcm1OYW1lfVwiIGZvciBwcm9ncmFtIFwiJHt0aGlzLm5hbWV9XCIuXG5cdFx0Q2hlY2sgdGhhdCB1bmlmb3JtIGlzIHByZXNlbnQgaW4gc2hhZGVyIGNvZGUsIHVudXNlZCB1bmlmb3JtcyBtYXkgYmUgcmVtb3ZlZCBieSBjb21waWxlci5cblx0XHRBbHNvIGNoZWNrIHRoYXQgdW5pZm9ybSB0eXBlIGluIHNoYWRlciBjb2RlIG1hdGNoZXMgdHlwZSAke3R5cGV9LlxuXHRcdEVycm9yIGNvZGU6ICR7Z2wuZ2V0RXJyb3IoKX0uYCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGxvY2F0aW9uID0gX2xvY2F0aW9uO1xuXHRcdFx0Ly8gU2F2ZSBsb2NhdGlvbiBmb3IgZnV0dXJlIHVzZS5cblx0XHRcdGlmICh1bmlmb3Jtc1t1bmlmb3JtTmFtZV0pIHtcblx0XHRcdFx0dW5pZm9ybXNbdW5pZm9ybU5hbWVdLmxvY2F0aW9uW3Byb2dyYW1OYW1lXSA9IGxvY2F0aW9uO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB1bmlmb3JtLlxuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJHTFJlbmRlcmluZ0NvbnRleHQvdW5pZm9ybVxuXHRcdHN3aXRjaCAodHlwZSkge1xuXHRcdFx0Y2FzZSBGTE9BVF8xRF9VTklGT1JNOlxuXHRcdFx0XHRnbC51bmlmb3JtMWYobG9jYXRpb24sIHZhbHVlIGFzIG51bWJlcik7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBGTE9BVF8yRF9VTklGT1JNOlxuXHRcdFx0XHRnbC51bmlmb3JtMmZ2KGxvY2F0aW9uLCB2YWx1ZSBhcyBudW1iZXJbXSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBGTE9BVF8zRF9VTklGT1JNOlxuXHRcdFx0XHRnbC51bmlmb3JtM2Z2KGxvY2F0aW9uLCB2YWx1ZSBhcyBudW1iZXJbXSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBGTE9BVF80RF9VTklGT1JNOlxuXHRcdFx0XHRnbC51bmlmb3JtNGZ2KGxvY2F0aW9uLCB2YWx1ZSBhcyBudW1iZXJbXSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBJTlRfMURfVU5JRk9STTpcblx0XHRcdFx0Z2wudW5pZm9ybTFpKGxvY2F0aW9uLCB2YWx1ZSBhcyBudW1iZXIpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgSU5UXzJEX1VOSUZPUk06XG5cdFx0XHRcdGdsLnVuaWZvcm0yaXYobG9jYXRpb24sIHZhbHVlIGFzIG51bWJlcltdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIElOVF8zRF9VTklGT1JNOlxuXHRcdFx0XHRnbC51bmlmb3JtM2l2KGxvY2F0aW9uLCB2YWx1ZSBhcyBudW1iZXJbXSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBJTlRfNERfVU5JRk9STTpcblx0XHRcdFx0Z2wudW5pZm9ybTRpdihsb2NhdGlvbiwgdmFsdWUgYXMgbnVtYmVyW10pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5rbm93biB1bmlmb3JtIHR5cGUgJHt0eXBlfSBmb3IgR1BVUHJvZ3JhbSBcIiR7dGhpcy5uYW1lfVwiLmApO1xuXHRcdH1cblx0fVxuXG5cdHNldFVuaWZvcm0oXG5cdFx0dW5pZm9ybU5hbWU6IHN0cmluZyxcblx0XHR2YWx1ZTogVW5pZm9ybVZhbHVlVHlwZSxcblx0XHRkYXRhVHlwZT86IFVuaWZvcm1EYXRhVHlwZSxcblx0KSB7XG5cdFx0Y29uc3QgeyBhY3RpdmVQcm9ncmFtcywgdW5pZm9ybXMgfSA9IHRoaXM7XG5cblx0XHRsZXQgdHlwZSA9IHVuaWZvcm1zW3VuaWZvcm1OYW1lXSA/IHVuaWZvcm1zW3VuaWZvcm1OYW1lXS50eXBlIDogdW5kZWZpbmVkO1xuXHRcdGlmIChkYXRhVHlwZSkge1xuXHRcdFx0Y29uc3QgdHlwZVBhcmFtID0gdGhpcy51bmlmb3JtVHlwZUZvclZhbHVlKHZhbHVlLCBkYXRhVHlwZSk7XG5cdFx0XHRpZiAodHlwZSA9PT0gdW5kZWZpbmVkKSB0eXBlID0gdHlwZVBhcmFtO1xuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdC8vIGNvbnNvbGUud2FybihgRG9uJ3QgbmVlZCB0byBwYXNzIGluIGRhdGFUeXBlIHRvIEdQVVByb2dyYW0uc2V0VW5pZm9ybSBmb3IgcHJldmlvdXNseSBpbml0ZWQgdW5pZm9ybSBcIiR7dW5pZm9ybU5hbWV9XCJgKTtcblx0XHRcdFx0Ly8gQ2hlY2sgdGhhdCB0eXBlcyBtYXRjaCBwcmV2aW91c2x5IHNldCB1bmlmb3JtLlxuXHRcdFx0XHRpZiAodHlwZSAhPT0gdHlwZVBhcmFtKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmlmb3JtIFwiJHt1bmlmb3JtTmFtZX1cIiBmb3IgR1BVUHJvZ3JhbSBcIiR7dGhpcy5uYW1lfVwiIGNhbm5vdCBjaGFuZ2UgZnJvbSB0eXBlICR7dHlwZX0gdG8gdHlwZSAke3R5cGVQYXJhbX0uYCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHR5cGUgZm9yIHVuaWZvcm0gXCIke3VuaWZvcm1OYW1lfVwiLCBwbGVhc2UgcGFzcyBpbiBkYXRhVHlwZSB0byBHUFVQcm9ncmFtLnNldFVuaWZvcm0gd2hlbiBpbml0aW5nIGEgbmV3IHVuaWZvcm0uYCk7XG5cdFx0fVxuXG5cdFx0aWYgKCF1bmlmb3Jtc1t1bmlmb3JtTmFtZV0pIHtcblx0XHRcdC8vIEluaXQgdW5pZm9ybSBpZiBuZWVkZWQuXG5cdFx0XHR1bmlmb3Jtc1t1bmlmb3JtTmFtZV0gPSB7IHR5cGUsIGxvY2F0aW9uOiB7fSwgdmFsdWUgfTtcblx0XHR9XG5cblx0XHQvLyBVcGRhdGUgYW55IGFjdGl2ZSBwcm9ncmFtcy5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGFjdGl2ZVByb2dyYW1zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCB7IHByb2dyYW0sIHByb2dyYW1OYW1lIH0gPSBhY3RpdmVQcm9ncmFtc1tpXTtcblx0XHRcdHRoaXMuc2V0UHJvZ3JhbVVuaWZvcm0ocHJvZ3JhbSwgcHJvZ3JhbU5hbWUsIHVuaWZvcm1OYW1lLCB2YWx1ZSwgdHlwZSk7XG5cdFx0fVxuXHR9O1xuXG5cdHNldFZlcnRleFVuaWZvcm0oXG5cdFx0cHJvZ3JhbTogV2ViR0xQcm9ncmFtLFxuXHRcdHVuaWZvcm1OYW1lOiBzdHJpbmcsXG5cdFx0dmFsdWU6IFVuaWZvcm1WYWx1ZVR5cGUsXG5cdFx0ZGF0YVR5cGU6IFVuaWZvcm1EYXRhVHlwZSxcblx0KSB7XG5cdFx0Y29uc3QgdHlwZSA9IHRoaXMudW5pZm9ybVR5cGVGb3JWYWx1ZSh2YWx1ZSwgZGF0YVR5cGUpO1xuXHRcdGlmIChwcm9ncmFtID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignTXVzdCBwYXNzIGluIHZhbGlkIFdlYkdMUHJvZ3JhbSB0byBzZXRWZXJ0ZXhVbmlmb3JtLCBnb3QgdW5kZWZpbmVkLicpO1xuXHRcdH1cblx0XHRsZXQgcHJvZ3JhbU5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcblx0XHRpZiAocHJvZ3JhbSA9PT0gdGhpcy5fZGVmYXVsdFByb2dyYW0pIHtcblx0XHRcdHByb2dyYW1OYW1lID0gREVGQVVMVF9QUk9HUkFNX05BTUU7XG5cdFx0fSBlbHNlIGlmIChwcm9ncmFtID09PSB0aGlzLl9zZWdtZW50UHJvZ3JhbSkge1xuXHRcdFx0cHJvZ3JhbU5hbWUgPSBTRUdNRU5UX1BST0dSQU1fTkFNRTtcblx0XHR9IGVsc2UgaWYgKHByb2dyYW0gPT09IHRoaXMuX3BvaW50c1Byb2dyYW0pIHtcblx0XHRcdHByb2dyYW1OYW1lID0gUE9JTlRTX1BST0dSQU1fTkFNRTtcblx0XHR9IGVsc2UgaWYgKHByb2dyYW0gPT09IHRoaXMuX3ZlY3RvckZpZWxkUHJvZ3JhbSkge1xuXHRcdFx0cHJvZ3JhbU5hbWUgPSBWRUNUT1JfRklFTERfUFJPR1JBTV9OQU1FO1xuXHRcdH1cblx0XHRpZiAocHJvZ3JhbU5hbWUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCB2YWxpZCBwcm9ncmFtTmFtZSBmb3IgV2ViR0xQcm9ncmFtLicpO1xuXHRcdH1cblx0XHR0aGlzLnNldFByb2dyYW1Vbmlmb3JtKHByb2dyYW0sIHByb2dyYW1OYW1lLCB1bmlmb3JtTmFtZSwgdmFsdWUsIHR5cGUpO1xuXHR9XG5cblx0ZGVzdHJveSgpIHtcblx0XHRjb25zdCB7IGdsLCBmcmFnbWVudFNoYWRlciwgYWN0aXZlUHJvZ3JhbXMgfSA9IHRoaXM7XG5cdFx0Ly8gVW5iaW5kIGFsbCBnbCBkYXRhIGJlZm9yZSBkZWxldGluZy5cblx0XHRhY3RpdmVQcm9ncmFtcy5mb3JFYWNoKCh7IHByb2dyYW0gfSkgPT4ge1xuXHRcdFx0Z2wuZGVsZXRlUHJvZ3JhbShwcm9ncmFtKTtcblx0XHR9KTtcblx0XHQvLyBGcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJHTFJlbmRlcmluZ0NvbnRleHQvZGVsZXRlU2hhZGVyXG5cdFx0Ly8gVGhpcyBtZXRob2QgaGFzIG5vIGVmZmVjdCBpZiB0aGUgc2hhZGVyIGhhcyBhbHJlYWR5IGJlZW4gZGVsZXRlZFxuXHRcdGdsLmRlbGV0ZVNoYWRlcihmcmFnbWVudFNoYWRlcik7XG5cblx0XHRkZWxldGUgdGhpcy5fZGVmYXVsdFByb2dyYW07XG5cdFx0ZGVsZXRlIHRoaXMuX3NlZ21lbnRQcm9ncmFtO1xuXHRcdGRlbGV0ZSB0aGlzLl9wb2ludHNQcm9ncmFtO1xuXHRcdGRlbGV0ZSB0aGlzLl92ZWN0b3JGaWVsZFByb2dyYW07XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGRlbGV0ZSB0aGlzLmZyYWdtZW50U2hhZGVyO1xuXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGRlbGV0ZSB0aGlzLmdsO1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRkZWxldGUgdGhpcy5lcnJvckNhbGxiYWNrO1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRkZWxldGUgdGhpcy5wcm9ncmFtO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBEYXRhTGF5ZXIgfSBmcm9tICcuL0RhdGFMYXllcic7XG5pbXBvcnQge1xuXHREYXRhTGF5ZXJBcnJheVR5cGUsIERhdGFMYXllckZpbHRlclR5cGUsIERhdGFMYXllck51bUNvbXBvbmVudHMsIERhdGFMYXllclR5cGUsIERhdGFMYXllcldyYXBUeXBlLFxuXHRGTE9BVCwgSEFMRl9GTE9BVCwgVU5TSUdORURfQllURSwgQllURSwgVU5TSUdORURfU0hPUlQsIFNIT1JULCBVTlNJR05FRF9JTlQsIElOVCxcblx0VW5pZm9ybURhdGFUeXBlLCBVbmlmb3JtVmFsdWVUeXBlLCBHTFNMVmVyc2lvbiwgR0xTTDEsIEdMU0wzLCBDTEFNUF9UT19FREdFLCBUZXh0dXJlRm9ybWF0VHlwZSwgTkVBUkVTVCwgUkdCQSwgVGV4dHVyZURhdGFUeXBlLFxufSBmcm9tICcuL0NvbnN0YW50cyc7XG5pbXBvcnQgeyBHUFVQcm9ncmFtIH0gZnJvbSAnLi9HUFVQcm9ncmFtJztcbmltcG9ydCB7IFdlYkdMUmVuZGVyZXIsIFRleHR1cmUsIFZlY3RvcjQgfSBmcm9tICd0aHJlZSc7Ly8gSnVzdCBpbXBvcnRpbmcgdGhlIHR5cGVzIGhlcmUuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzL1ZlY3RvcjQnO1xuaW1wb3J0IHsgY29tcGlsZVNoYWRlciwgaXNXZWJHTDIsIGlzUG93ZXJPZjIgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGdldEZsb2F0MTYgfSBmcm9tICdAcGV0YW1vcmlrZW4vZmxvYXQxNic7XG5pbXBvcnQge1xuXHRpc1N0cmluZywgaXNWYWxpZEZpbHRlclR5cGUsIGlzVmFsaWRUZXh0dXJlRGF0YVR5cGUsIGlzVmFsaWRUZXh0dXJlRm9ybWF0VHlwZSwgaXNWYWxpZFdyYXBUeXBlLFxuXHR2YWxpZEZpbHRlclR5cGVzLCB2YWxpZFRleHR1cmVEYXRhVHlwZXMsIHZhbGlkVGV4dHVyZUZvcm1hdFR5cGVzLCB2YWxpZFdyYXBUeXBlcyB9IGZyb20gJy4vQ2hlY2tzJztcbmNvbnN0IGNvcHlGbG9hdEZyYWdtZW50U2hhZGVyU291cmNlX2dsc2wzID0gcmVxdWlyZSgnLi9nbHNsXzMvQ29weUZsb2F0RnJhZ1NoYWRlci5nbHNsJyk7XG5jb25zdCBjb3B5SW50RnJhZ21lbnRTaGFkZXJTb3VyY2VfZ2xzbDMgPSByZXF1aXJlKCcuL2dsc2xfMy9Db3B5SW50RnJhZ1NoYWRlci5nbHNsJyk7XG5jb25zdCBjb3B5VWludEZyYWdtZW50U2hhZGVyU291cmNlX2dsc2wzID0gcmVxdWlyZSgnLi9nbHNsXzMvQ29weVVpbnRGcmFnU2hhZGVyLmdsc2wnKTtcbmNvbnN0IGNvcHlGcmFnbWVudFNoYWRlclNvdXJjZV9nbHNsMSA9IHJlcXVpcmUoJy4vZ2xzbF8xL0NvcHlGcmFnU2hhZGVyLmdsc2wnKTtcblxuY29uc3QgTlVNX1NFR01FTlRTX0NJUkNMRSA9IDE4Oy8vIE11c3QgYmUgZGl2aXNpYmxlIGJ5IDYgdG8gd29yayB3aXRoIHN0ZXBTZWdtZW50KCkuXG5cbnR5cGUgRXJyb3JDYWxsYmFjayA9IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQ7XG5cbmV4cG9ydCBjbGFzcyBXZWJHTENvbXB1dGUge1xuXHRyZWFkb25seSBnbCE6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQ7XG5cdHJlYWRvbmx5IGdsc2xWZXJzaW9uITogR0xTTFZlcnNpb247XG5cdC8vIFRoZXNlIHdpZHRoIGFuZCBoZWlnaHQgYXJlIHRoZSBjdXJyZW50IGNhbnZhcyBhdCBmdWxsIHJlcy5cblx0cHJpdmF0ZSB3aWR0aCE6IG51bWJlcjtcblx0cHJpdmF0ZSBoZWlnaHQhOiBudW1iZXI7XG5cblx0cHJpdmF0ZSBlcnJvclN0YXRlID0gZmFsc2U7XG5cdHByaXZhdGUgcmVhZG9ubHkgZXJyb3JDYWxsYmFjazogRXJyb3JDYWxsYmFjaztcblxuXHQvLyBTYXZlIHRocmVlanMgcmVuZGVyZXIgaWYgcGFzc2VkIGluLlxuXHRwcml2YXRlIHJlbmRlcmVyPzogV2ViR0xSZW5kZXJlcjtcblx0cHJpdmF0ZSByZWFkb25seSBtYXhOdW1UZXh0dXJlcyE6IG51bWJlcjtcblx0XG5cdC8vIFByZWNvbXB1dGVkIGJ1ZmZlcnMgKGluaXRlZCBhcyBuZWVkZWQpLlxuXHRwcml2YXRlIF9xdWFkUG9zaXRpb25zQnVmZmVyPzogV2ViR0xCdWZmZXI7XG5cdHByaXZhdGUgX2JvdW5kYXJ5UG9zaXRpb25zQnVmZmVyPzogV2ViR0xCdWZmZXI7XG5cdHByaXZhdGUgX2NpcmNsZVBvc2l0aW9uc0J1ZmZlcj86IFdlYkdMQnVmZmVyO1xuXG5cdHByaXZhdGUgcG9pbnRJbmRleEFycmF5PzogRmxvYXQzMkFycmF5O1xuXHRwcml2YXRlIHBvaW50SW5kZXhCdWZmZXI/OiBXZWJHTEJ1ZmZlcjtcblx0cHJpdmF0ZSB2ZWN0b3JGaWVsZEluZGV4QXJyYXk/OiBGbG9hdDMyQXJyYXk7XG5cdHByaXZhdGUgdmVjdG9yRmllbGRJbmRleEJ1ZmZlcj86IFdlYkdMQnVmZmVyO1xuXG5cdC8vIFByb2dyYW1zIGZvciBjb3B5aW5nIGRhdGEgKHRoZXNlIGFyZSBuZWVkZWQgZm9yIHJlbmRlcmluZyBwYXJ0aWFsIHNjcmVlbiBnZW9tZXRyaWVzKS5cblx0cmVhZG9ubHkgY29weUZsb2F0UHJvZ3JhbSE6IEdQVVByb2dyYW07XG5cdHJlYWRvbmx5IGNvcHlJbnRQcm9ncmFtITogR1BVUHJvZ3JhbTtcblx0cmVhZG9ubHkgY29weVVpbnRQcm9ncmFtITogR1BVUHJvZ3JhbTtcblxuXHRzdGF0aWMgaW5pdFdpdGhUaHJlZVJlbmRlcmVyKFxuXHRcdHJlbmRlcmVyOiBXZWJHTFJlbmRlcmVyLFxuXHRcdHBhcmFtczoge1xuXHRcdFx0Z2xzbFZlcnNpb24/OiBHTFNMVmVyc2lvbixcblx0XHR9LFxuXHRcdGVycm9yQ2FsbGJhY2s/OiBFcnJvckNhbGxiYWNrLFxuXHQpIHtcblx0XHRyZXR1cm4gbmV3IFdlYkdMQ29tcHV0ZShcblx0XHRcdHtcblx0XHRcdFx0Y2FudmFzOiByZW5kZXJlci5kb21FbGVtZW50LFxuXHRcdFx0XHRjb250ZXh0OiByZW5kZXJlci5nZXRDb250ZXh0KCksXG5cdFx0XHRcdC4uLnBhcmFtcyxcblx0XHRcdH0sXG5cdFx0XHRlcnJvckNhbGxiYWNrLFxuXHRcdFx0cmVuZGVyZXIsXG5cdFx0KTtcblx0fVxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHBhcmFtczoge1xuXHRcdFx0Y2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCxcblx0XHRcdGNvbnRleHQ/OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0IHwgbnVsbCxcblx0XHRcdGFudGlhbGlhcz86IGJvb2xlYW4sXG5cdFx0XHRnbHNsVmVyc2lvbj86IEdMU0xWZXJzaW9uLFxuXHRcdH0sXG5cdFx0Ly8gT3B0aW9uYWxseSBwYXNzIGluIGFuIGVycm9yIGNhbGxiYWNrIGluIGNhc2Ugd2Ugd2FudCB0byBoYW5kbGUgZXJyb3JzIHJlbGF0ZWQgdG8gd2ViZ2wgc3VwcG9ydC5cblx0XHQvLyBlLmcuIHRocm93IHVwIGEgbW9kYWwgdGVsbGluZyB1c2VyIHRoaXMgd2lsbCBub3Qgd29yayBvbiB0aGVpciBkZXZpY2UuXG5cdFx0ZXJyb3JDYWxsYmFjazogRXJyb3JDYWxsYmFjayA9IChtZXNzYWdlOiBzdHJpbmcpID0+IHsgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpIH0sXG5cdFx0cmVuZGVyZXI/OiBXZWJHTFJlbmRlcmVyLFxuXHQpIHtcblx0XHQvLyBDaGVjayBwYXJhbXMuXG5cdFx0Y29uc3QgdmFsaWRLZXlzID0gWydjYW52YXMnLCAnY29udGV4dCcsICdhbnRpYWxpYXMnLCAnZ2xzbFZlcnNpb24nXTtcblx0XHRPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goa2V5ID0+IHtcblx0XHRcdGlmICh2YWxpZEtleXMuaW5kZXhPZihrZXkpIDwgMCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQga2V5ICR7a2V5fSBwYXNzZWQgdG8gV2ViR0xDb21wdXRlLmNvbnN0cnVjdG9yLiAgVmFsaWQga2V5cyBhcmUgJHt2YWxpZEtleXMuam9pbignLCAnKX0uYCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0Ly8gU2F2ZSBjYWxsYmFjayBpbiBjYXNlIHdlIHJ1biBpbnRvIGFuIGVycm9yLlxuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdHRoaXMuZXJyb3JDYWxsYmFjayA9IChtZXNzYWdlOiBzdHJpbmcpID0+IHtcblx0XHRcdGlmIChzZWxmLmVycm9yU3RhdGUpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0c2VsZi5lcnJvclN0YXRlID0gdHJ1ZTtcblx0XHRcdGVycm9yQ2FsbGJhY2sobWVzc2FnZSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgeyBjYW52YXMgfSA9IHBhcmFtcztcblx0XHRsZXQgZ2wgPSBwYXJhbXMuY29udGV4dDtcblxuXHRcdC8vIEluaXQgR0wuXG5cdFx0aWYgKCFnbCkge1xuXHRcdFx0Y29uc3Qgb3B0aW9uczogYW55ID0ge307XG5cdFx0XHRpZiAocGFyYW1zLmFudGlhbGlhcyAhPT0gdW5kZWZpbmVkKSBvcHRpb25zLmFudGlhbGlhcyA9IHBhcmFtcy5hbnRpYWxpYXM7XG5cdFx0XHQvLyBJbml0IGEgZ2wgY29udGV4dCBpZiBub3QgcGFzc2VkIGluLlxuXHRcdFx0Z2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wyJywgb3B0aW9ucykgIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgfCBudWxsXG5cdFx0XHRcdHx8IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcsIG9wdGlvbnMpICBhcyBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBudWxsXG5cdFx0XHRcdHx8IGNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnLCBvcHRpb25zKSAgYXMgV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgbnVsbDtcblx0XHRcdGlmIChnbCA9PT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLmVycm9yQ2FsbGJhY2soJ1VuYWJsZSB0byBpbml0aWFsaXplIFdlYkdMIGNvbnRleHQuJyk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGlzV2ViR0wyKGdsKSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ1VzaW5nIFdlYkdMIDIuMCBjb250ZXh0LicpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLmxvZygnVXNpbmcgV2ViR0wgMS4wIGNvbnRleHQuJyk7XG5cdFx0fVxuXHRcdHRoaXMuZ2wgPSBnbDtcblx0XHR0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG5cblx0XHQvLyBTYXZlIGdsc2wgdmVyc2lvbiwgZGVmYXVsdCB0byAxLnguXG5cdFx0Y29uc3QgZ2xzbFZlcnNpb24gPSBwYXJhbXMuZ2xzbFZlcnNpb24gPT09IHVuZGVmaW5lZCA/IEdMU0wxIDogcGFyYW1zLmdsc2xWZXJzaW9uO1xuXHRcdHRoaXMuZ2xzbFZlcnNpb24gPSBnbHNsVmVyc2lvbjtcblx0XHRpZiAoIWlzV2ViR0wyKGdsKSAmJiBnbHNsVmVyc2lvbiA9PT0gR0xTTDMpIHtcblx0XHRcdGNvbnNvbGUud2FybignR0xTTDMueCBpcyBpbmNvbXBhdGlibGUgd2l0aCBXZWJHTDEuMCBjb250ZXh0cy4nKTtcblx0XHR9XG5cblx0XHQvLyBHTCBzZXR1cC5cblx0XHQvLyBEaXNhYmxlIGRlcHRoIHRlc3RpbmcgZ2xvYmFsbHkuXG5cdFx0Z2wuZGlzYWJsZShnbC5ERVBUSF9URVNUKTtcblx0XHQvLyBTZXQgdW5wYWNrIGFsaWdubWVudCB0byAxIHNvIHdlIGNhbiBoYXZlIHRleHR1cmVzIG9mIGFyYml0cmFyeSBkaW1lbnNpb25zLlxuXHRcdC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzUxNTgyMjgyL2Vycm9yLXdoZW4tY3JlYXRpbmctdGV4dHVyZXMtaW4td2ViZ2wtd2l0aC10aGUtcmdiLWZvcm1hdFxuXHRcdGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19BTElHTk1FTlQsIDEpO1xuXHRcdC8vIFRPRE86IGxvb2sgaW50byBtb3JlIG9mIHRoZXNlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2ViR0xSZW5kZXJpbmdDb250ZXh0L3BpeGVsU3RvcmVpXG5cdFx0Ly8gLy8gU29tZSBpbXBsZW1lbnRhdGlvbnMgb2YgSFRNTENhbnZhc0VsZW1lbnQncyBvciBPZmZzY3JlZW5DYW52YXMncyBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgc3RvcmUgY29sb3IgdmFsdWVzXG5cdFx0Ly8gLy8gaW50ZXJuYWxseSBpbiBwcmVtdWx0aXBsaWVkIGZvcm0uIElmIHN1Y2ggYSBjYW52YXMgaXMgdXBsb2FkZWQgdG8gYSBXZWJHTCB0ZXh0dXJlIHdpdGggdGhlXG5cdFx0Ly8gLy8gVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIHBpeGVsIHN0b3JhZ2UgcGFyYW1ldGVyIHNldCB0byBmYWxzZSwgdGhlIGNvbG9yIGNoYW5uZWxzIHdpbGwgaGF2ZSB0byBiZSB1bi1tdWx0aXBsaWVkXG5cdFx0Ly8gLy8gYnkgdGhlIGFscGhhIGNoYW5uZWwsIHdoaWNoIGlzIGEgbG9zc3kgb3BlcmF0aW9uLiBUaGUgV2ViR0wgaW1wbGVtZW50YXRpb24gdGhlcmVmb3JlIGNhbiBub3QgZ3VhcmFudGVlIHRoYXQgY29sb3JzXG5cdFx0Ly8gLy8gd2l0aCBhbHBoYSA8IDEuMCB3aWxsIGJlIHByZXNlcnZlZCBsb3NzbGVzc2x5IHdoZW4gZmlyc3QgZHJhd24gdG8gYSBjYW52YXMgdmlhIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCBhbmQgdGhlblxuXHRcdC8vIC8vIHVwbG9hZGVkIHRvIGEgV2ViR0wgdGV4dHVyZSB3aGVuIHRoZSBVTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wgcGl4ZWwgc3RvcmFnZSBwYXJhbWV0ZXIgaXMgc2V0IHRvIGZhbHNlLlxuXHRcdC8vIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgdHJ1ZSk7XG5cblx0XHQvLyBJbml0IHByb2dyYW1zIHRvIHBhc3MgdmFsdWVzIGZyb20gb25lIHRleHR1cmUgdG8gYW5vdGhlci5cblx0XHR0aGlzLmNvcHlGbG9hdFByb2dyYW0gPSB0aGlzLmluaXRQcm9ncmFtKHtcblx0XHRcdG5hbWU6ICdjb3B5RmxvYXQnLFxuXHRcdFx0ZnJhZ21lbnRTaGFkZXI6IGdsc2xWZXJzaW9uID09PSBHTFNMMyA/IGNvcHlGbG9hdEZyYWdtZW50U2hhZGVyU291cmNlX2dsc2wzIDogY29weUZyYWdtZW50U2hhZGVyU291cmNlX2dsc2wxLFxuXHRcdFx0dW5pZm9ybXM6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRuYW1lOiAndV9zdGF0ZScsXG5cdFx0XHRcdFx0XHR2YWx1ZTogMCxcblx0XHRcdFx0XHRcdGRhdGFUeXBlOiBJTlQsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSxcblx0XHRcdH0sXG5cdFx0KTtcblx0XHRpZiAoZ2xzbFZlcnNpb24gPT09IEdMU0wzKSB7XG5cdFx0XHR0aGlzLmNvcHlJbnRQcm9ncmFtID0gdGhpcy5pbml0UHJvZ3JhbSh7XG5cdFx0XHRcdG5hbWU6ICdjb3B5SW50Jyxcblx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IGNvcHlJbnRGcmFnbWVudFNoYWRlclNvdXJjZV9nbHNsMyxcblx0XHRcdFx0dW5pZm9ybXM6IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bmFtZTogJ3Vfc3RhdGUnLFxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogMCxcblx0XHRcdFx0XHRcdFx0ZGF0YVR5cGU6IElOVCxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0fSxcblx0XHRcdCk7XG5cdFx0XHR0aGlzLmNvcHlVaW50UHJvZ3JhbSA9IHRoaXMuaW5pdFByb2dyYW0oe1xuXHRcdFx0XHRuYW1lOiAnY29weVVpbnQnLFxuXHRcdFx0XHRmcmFnbWVudFNoYWRlcjogY29weVVpbnRGcmFnbWVudFNoYWRlclNvdXJjZV9nbHNsMyxcblx0XHRcdFx0dW5pZm9ybXM6IFtcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bmFtZTogJ3Vfc3RhdGUnLFxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogMCxcblx0XHRcdFx0XHRcdFx0ZGF0YVR5cGU6IElOVCxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0fSxcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuY29weUludFByb2dyYW0gPSB0aGlzLmNvcHlGbG9hdFByb2dyYW07XG5cdFx0XHR0aGlzLmNvcHlVaW50UHJvZ3JhbSA9IHRoaXMuY29weUZsb2F0UHJvZ3JhbTtcblx0XHR9XG5cblx0XHQvLyBVbmJpbmQgYWN0aXZlIGJ1ZmZlci5cblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgbnVsbCk7XG5cblx0XHQvLyBDYW52YXMgc2V0dXAuXG5cdFx0dGhpcy5vblJlc2l6ZShjYW52YXMpO1xuXG5cdFx0Ly8gTG9nIG51bWJlciBvZiB0ZXh0dXJlcyBhdmFpbGFibGUuXG5cdFx0dGhpcy5tYXhOdW1UZXh0dXJlcyA9IHRoaXMuZ2wuZ2V0UGFyYW1ldGVyKHRoaXMuZ2wuTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMpO1xuXHRcdGNvbnNvbGUubG9nKGAke3RoaXMubWF4TnVtVGV4dHVyZXN9IHRleHR1cmVzIG1heC5gKTtcblx0fVxuXG5cdGlzV2ViR0wyKCkge1xuXHRcdHJldHVybiBpc1dlYkdMMih0aGlzLmdsKTtcblx0fVxuXG5cdHByaXZhdGUgZ2V0IHF1YWRQb3NpdGlvbnNCdWZmZXIoKSB7XG5cdFx0aWYgKHRoaXMuX3F1YWRQb3NpdGlvbnNCdWZmZXIgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29uc3QgZnNRdWFkUG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheShbIC0xLCAtMSwgMSwgLTEsIC0xLCAxLCAxLCAxIF0pO1xuXHRcdFx0dGhpcy5fcXVhZFBvc2l0aW9uc0J1ZmZlciA9IHRoaXMuaW5pdFZlcnRleEJ1ZmZlcihmc1F1YWRQb3NpdGlvbnMpITtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuX3F1YWRQb3NpdGlvbnNCdWZmZXIhO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXQgYm91bmRhcnlQb3NpdGlvbnNCdWZmZXIoKSB7XG5cdFx0aWYgKHRoaXMuX2JvdW5kYXJ5UG9zaXRpb25zQnVmZmVyID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnN0IGJvdW5kYXJ5UG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheShbIC0xLCAtMSwgMSwgLTEsIDEsIDEsIC0xLCAxLCAtMSwgLTEgXSk7XG5cdFx0XHR0aGlzLl9ib3VuZGFyeVBvc2l0aW9uc0J1ZmZlciA9IHRoaXMuaW5pdFZlcnRleEJ1ZmZlcihib3VuZGFyeVBvc2l0aW9ucykhO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5fYm91bmRhcnlQb3NpdGlvbnNCdWZmZXIhO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXQgY2lyY2xlUG9zaXRpb25zQnVmZmVyKCkge1xuXHRcdGlmICh0aGlzLl9jaXJjbGVQb3NpdGlvbnNCdWZmZXIgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29uc3QgdW5pdENpcmNsZVBvaW50cyA9IFswLCAwXTtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDw9IE5VTV9TRUdNRU5UU19DSVJDTEU7IGkrKykge1xuXHRcdFx0XHR1bml0Q2lyY2xlUG9pbnRzLnB1c2goXG5cdFx0XHRcdFx0TWF0aC5jb3MoMiAqIE1hdGguUEkgKiBpIC8gTlVNX1NFR01FTlRTX0NJUkNMRSksXG5cdFx0XHRcdFx0TWF0aC5zaW4oMiAqIE1hdGguUEkgKiBpIC8gTlVNX1NFR01FTlRTX0NJUkNMRSksXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBjaXJjbGVQb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KHVuaXRDaXJjbGVQb2ludHMpO1xuXHRcdFx0dGhpcy5fY2lyY2xlUG9zaXRpb25zQnVmZmVyID0gdGhpcy5pbml0VmVydGV4QnVmZmVyKGNpcmNsZVBvc2l0aW9ucykhO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5fY2lyY2xlUG9zaXRpb25zQnVmZmVyITtcblx0fVxuXG5cdHByaXZhdGUgaW5pdFZlcnRleEJ1ZmZlcihcblx0XHRkYXRhOiBGbG9hdDMyQXJyYXksXG5cdCkge1xuXHRcdGNvbnN0IHsgZXJyb3JDYWxsYmFjaywgZ2wgfSA9IHRoaXM7XG5cdFx0Y29uc3QgYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0aWYgKCFidWZmZXIpIHtcblx0XHRcdGVycm9yQ2FsbGJhY2soJ1VuYWJsZSB0byBhbGxvY2F0ZSBnbCBidWZmZXIuJyk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIpO1xuXHRcdC8vIEFkZCBidWZmZXIgZGF0YS5cblx0XHRnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgZGF0YSwgZ2wuU1RBVElDX0RSQVcpO1xuXHRcdHJldHVybiBidWZmZXI7XG5cdH1cblxuXHRpbml0UHJvZ3JhbShcblx0XHRwYXJhbXM6IHtcblx0XHRcdG5hbWU6IHN0cmluZyxcblx0XHRcdGZyYWdtZW50U2hhZGVyOiBzdHJpbmcgfCBXZWJHTFNoYWRlcixcblx0XHRcdHVuaWZvcm1zPzoge1xuXHRcdFx0XHRuYW1lOiBzdHJpbmcsXG5cdFx0XHRcdHZhbHVlOiBVbmlmb3JtVmFsdWVUeXBlLFxuXHRcdFx0XHRkYXRhVHlwZTogVW5pZm9ybURhdGFUeXBlLFxuXHRcdFx0fVtdLFxuXHRcdFx0ZGVmaW5lcz86IHtcblx0XHRcdFx0W2tleSA6IHN0cmluZ106IHN0cmluZyxcblx0XHRcdH0sXG5cdFx0fSxcblx0KSB7XG5cdFx0Ly8gQ2hlY2sgcGFyYW1zLlxuXHRcdGNvbnN0IHZhbGlkS2V5cyA9IFsnbmFtZScsICdmcmFnbWVudFNoYWRlcicsICd1bmlmb3JtcycsICdkZWZpbmVzJ107XG5cdFx0T2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0XHRpZiAodmFsaWRLZXlzLmluZGV4T2Yoa2V5KSA8IDApIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGtleSAke2tleX0gcGFzc2VkIHRvIFdlYkdMQ29tcHV0ZS5pbml0UHJvZ3JhbS4gIFZhbGlkIGtleXMgYXJlICR7dmFsaWRLZXlzLmpvaW4oJywgJyl9LmApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGNvbnN0IHsgZ2wsIGVycm9yQ2FsbGJhY2ssIGdsc2xWZXJzaW9uIH0gPSB0aGlzO1xuXHRcdHJldHVybiBuZXcgR1BVUHJvZ3JhbShcblx0XHRcdHtcblx0XHRcdFx0Li4ucGFyYW1zLFxuXHRcdFx0XHRnbCxcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayxcblx0XHRcdFx0Z2xzbFZlcnNpb24sXG5cdFx0XHR9LFxuXHRcdCk7XG5cdH07XG5cblx0aW5pdERhdGFMYXllcihcblx0XHRwYXJhbXM6IHtcblx0XHRcdG5hbWU6IHN0cmluZyxcblx0XHRcdGRpbWVuc2lvbnM6IG51bWJlciB8IFtudW1iZXIsIG51bWJlcl0sXG5cdFx0XHR0eXBlOiBEYXRhTGF5ZXJUeXBlLFxuXHRcdFx0bnVtQ29tcG9uZW50czogRGF0YUxheWVyTnVtQ29tcG9uZW50cyxcblx0XHRcdGRhdGE/OiBEYXRhTGF5ZXJBcnJheVR5cGUsXG5cdFx0XHRmaWx0ZXI/OiBEYXRhTGF5ZXJGaWx0ZXJUeXBlLFxuXHRcdFx0d3JhcFM/OiBEYXRhTGF5ZXJXcmFwVHlwZSxcblx0XHRcdHdyYXBUPzogRGF0YUxheWVyV3JhcFR5cGUsXG5cdFx0XHR3cml0YWJsZT86IGJvb2xlYW4sXG5cdFx0XHRudW1CdWZmZXJzPzogbnVtYmVyLFxuXHRcdH0sXG5cdCkge1xuXHRcdC8vIENoZWNrIHBhcmFtcy5cblx0XHRjb25zdCB2YWxpZEtleXMgPSBbJ25hbWUnLCAnZGltZW5zaW9ucycsICd0eXBlJywgJ251bUNvbXBvbmVudHMnLCAnZGF0YScsICdmaWx0ZXInLCAnd3JhcFMnLCAnd3JhcFQnLCAnd3JpdGFibGUnLCAnbnVtQnVmZmVycyddO1xuXHRcdE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaChrZXkgPT4ge1xuXHRcdFx0aWYgKHZhbGlkS2V5cy5pbmRleE9mKGtleSkgPCAwKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBrZXkgJHtrZXl9IHBhc3NlZCB0byBXZWJHTENvbXB1dGUuaW5pdERhdGFMYXllci4gIFZhbGlkIGtleXMgYXJlICR7dmFsaWRLZXlzLmpvaW4oJywgJyl9LmApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGNvbnN0IHsgZ2wsIGVycm9yQ2FsbGJhY2ssIGdsc2xWZXJzaW9uIH0gPSB0aGlzO1xuXHRcdHJldHVybiBuZXcgRGF0YUxheWVyKHtcblx0XHRcdC4uLnBhcmFtcyxcblx0XHRcdGdsLFxuXHRcdFx0Z2xzbFZlcnNpb24sXG5cdFx0XHRlcnJvckNhbGxiYWNrLFxuXHRcdH0pO1xuXHR9O1xuXG5cdGluaXRUZXh0dXJlKFxuXHRcdHBhcmFtczoge1xuXHRcdFx0bmFtZTogc3RyaW5nLFxuXHRcdFx0dXJsOiBzdHJpbmcsXG5cdFx0XHRmaWx0ZXI/OiBEYXRhTGF5ZXJGaWx0ZXJUeXBlLFxuXHRcdFx0d3JhcFM/OiBEYXRhTGF5ZXJXcmFwVHlwZSxcblx0XHRcdHdyYXBUPzogRGF0YUxheWVyV3JhcFR5cGUsXG5cdFx0XHRmb3JtYXQ/OiBUZXh0dXJlRm9ybWF0VHlwZSxcblx0XHRcdHR5cGU/OiBUZXh0dXJlRGF0YVR5cGUsXG5cdFx0fSxcblx0XHRjYWxsYmFjazogKHRleHR1cmU6IFdlYkdMVGV4dHVyZSkgPT4gdm9pZCxcblx0KSB7XG5cdFx0Ly8gQ2hlY2sgcGFyYW1zLlxuXHRcdGNvbnN0IHZhbGlkS2V5cyA9IFsnbmFtZScsICd1cmwnLCAnZmlsdGVyJywgJ3dyYXBTJywgJ3dyYXBUJywgJ2Zvcm1hdCddO1xuXHRcdE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaChrZXkgPT4ge1xuXHRcdFx0aWYgKHZhbGlkS2V5cy5pbmRleE9mKGtleSkgPCAwKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBrZXkgJHtrZXl9IHBhc3NlZCB0byBXZWJHTENvbXB1dGUuaW5pdFRleHR1cmUuICBWYWxpZCBrZXlzIGFyZSAke3ZhbGlkS2V5cy5qb2luKCcsICcpfS5gKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRjb25zdCB7IHVybCwgbmFtZSB9ID0gcGFyYW1zO1xuXHRcdGlmICghaXNTdHJpbmcodXJsKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBXZWJHTENvbXB1dGUuaW5pdFRleHR1cmUgcGFyYW1zIHRvIGhhdmUgdXJsIG9mIHR5cGUgc3RyaW5nLCBnb3QgJHt1cmx9IG9mIHR5cGUgJHt0eXBlb2YgdXJsfS5gKVxuXHRcdH1cblx0XHRpZiAoIWlzU3RyaW5nKG5hbWUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIFdlYkdMQ29tcHV0ZS5pbml0VGV4dHVyZSBwYXJhbXMgdG8gaGF2ZSBuYW1lIG9mIHR5cGUgc3RyaW5nLCBnb3QgJHtuYW1lfSBvZiB0eXBlICR7dHlwZW9mIG5hbWV9LmApXG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGZpbHRlciB0eXBlLCBkZWZhdWx0IHRvIG5lYXJlc3QuXG5cdFx0Y29uc3QgZmlsdGVyID0gcGFyYW1zLmZpbHRlciAhPT0gdW5kZWZpbmVkID8gcGFyYW1zLmZpbHRlciA6IE5FQVJFU1Q7XG5cdFx0aWYgKCFpc1ZhbGlkRmlsdGVyVHlwZShmaWx0ZXIpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZmlsdGVyOiAke2ZpbHRlcn0gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIiwgbXVzdCBiZSAke3ZhbGlkRmlsdGVyVHlwZXMuam9pbignLCAnKX0uYCk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IHdyYXAgdHlwZXMsIGRlZmF1bHQgdG8gY2xhbXAgdG8gZWRnZS5cblx0XHRjb25zdCB3cmFwUyA9IHBhcmFtcy53cmFwUyAhPT0gdW5kZWZpbmVkID8gcGFyYW1zLndyYXBTIDogQ0xBTVBfVE9fRURHRTtcblx0XHRpZiAoIWlzVmFsaWRXcmFwVHlwZSh3cmFwUykpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB3cmFwUzogJHt3cmFwU30gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIiwgbXVzdCBiZSAke3ZhbGlkV3JhcFR5cGVzLmpvaW4oJywgJyl9LmApO1xuXHRcdH1cblx0XHRjb25zdCB3cmFwVCA9IHBhcmFtcy53cmFwVCAhPT0gdW5kZWZpbmVkID8gcGFyYW1zLndyYXBUIDogQ0xBTVBfVE9fRURHRTtcblx0XHRpZiAoIWlzVmFsaWRXcmFwVHlwZSh3cmFwVCkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB3cmFwVDogJHt3cmFwVH0gZm9yIERhdGFMYXllciBcIiR7bmFtZX1cIiwgbXVzdCBiZSAke3ZhbGlkV3JhcFR5cGVzLmpvaW4oJywgJyl9LmApO1xuXHRcdH1cblxuXHRcdC8vIEdldCBpbWFnZSBmb3JtYXQgdHlwZSwgZGVmYXVsdCB0byByZ2JhLlxuXHRcdGNvbnN0IGZvcm1hdCA9IHBhcmFtcy5mb3JtYXQgIT09IHVuZGVmaW5lZCA/IHBhcmFtcy5mb3JtYXQgOiBSR0JBO1xuXHRcdGlmICghaXNWYWxpZFRleHR1cmVGb3JtYXRUeXBlKGZvcm1hdCkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBmb3JtYXQ6ICR7Zm9ybWF0fSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLCBtdXN0IGJlICR7dmFsaWRUZXh0dXJlRm9ybWF0VHlwZXMuam9pbignLCAnKX0uYCk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGltYWdlIGRhdGEgdHlwZSwgZGVmYXVsdCB0byB1bnNpZ25lZCBieXRlLlxuXHRcdGNvbnN0IHR5cGUgPSBwYXJhbXMudHlwZSAhPT0gdW5kZWZpbmVkID8gcGFyYW1zLnR5cGUgOiBVTlNJR05FRF9CWVRFO1xuXHRcdGlmICghaXNWYWxpZFRleHR1cmVEYXRhVHlwZShmb3JtYXQpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdHlwZTogJHt0eXBlfSBmb3IgRGF0YUxheWVyIFwiJHtuYW1lfVwiLCBtdXN0IGJlICR7dmFsaWRUZXh0dXJlRGF0YVR5cGVzLmpvaW4oJywgJyl9LmApO1xuXHRcdH1cblxuXHRcdGNvbnN0IHsgZ2wsIGVycm9yQ2FsbGJhY2sgfSA9IHRoaXM7XG5cdFx0Y29uc3QgdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblx0XHRpZiAodGV4dHVyZSA9PT0gbnVsbCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gaW5pdCBnbFRleHR1cmUuYCk7XG5cdFx0fVxuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuXHRcdC8vIEJlY2F1c2UgaW1hZ2VzIGhhdmUgdG8gYmUgZG93bmxvYWRlZCBvdmVyIHRoZSBpbnRlcm5ldFxuXHRcdC8vIHRoZXkgbWlnaHQgdGFrZSBhIG1vbWVudCB1bnRpbCB0aGV5IGFyZSByZWFkeS5cblx0XHQvLyBVbnRpbCB0aGVuIHB1dCBhIHNpbmdsZSBwaXhlbCBpbiB0aGUgdGV4dHVyZSBzbyB3ZSBjYW5cblx0XHQvLyB1c2UgaXQgaW1tZWRpYXRlbHkuIFdoZW4gdGhlIGltYWdlIGhhcyBmaW5pc2hlZCBkb3dubG9hZGluZ1xuXHRcdC8vIHdlJ2xsIHVwZGF0ZSB0aGUgdGV4dHVyZSB3aXRoIHRoZSBjb250ZW50cyBvZiB0aGUgaW1hZ2UuXG5cdFx0Y29uc3QgbGV2ZWwgPSAwO1xuXHRcdGNvbnN0IGludGVybmFsRm9ybWF0ID0gZ2wuUkdCQTtcblx0XHRjb25zdCB3aWR0aCA9IDE7XG5cdFx0Y29uc3QgaGVpZ2h0ID0gMTtcblx0XHRjb25zdCBib3JkZXIgPSAwO1xuXHRcdGNvbnN0IHNyY0Zvcm1hdCA9IGdsW2Zvcm1hdF07XG5cdFx0Y29uc3Qgc3JjVHlwZSA9IGdsW3R5cGVdO1xuXHRcdGNvbnN0IHBpeGVsID0gbmV3IFVpbnQ4QXJyYXkoWzAsIDAsIDAsIDBdKTtcblx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIGxldmVsLCBpbnRlcm5hbEZvcm1hdCxcblx0XHRcdHdpZHRoLCBoZWlnaHQsIGJvcmRlciwgc3JjRm9ybWF0LCBzcmNUeXBlLCBwaXhlbCk7XG5cblx0XHRjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuXHRcdGltYWdlLm9ubG9hZCA9ICgpID0+IHtcblx0XHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuXHRcdFx0Z2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCBsZXZlbCwgaW50ZXJuYWxGb3JtYXQsXG5cdFx0XHRcdHNyY0Zvcm1hdCwgc3JjVHlwZSwgaW1hZ2UpO1xuXG5cdFx0XHQvLyBXZWJHTDEgaGFzIGRpZmZlcmVudCByZXF1aXJlbWVudHMgZm9yIHBvd2VyIG9mIDIgaW1hZ2VzXG5cdFx0XHQvLyB2cyBub24gcG93ZXIgb2YgMiBpbWFnZXMgc28gY2hlY2sgaWYgdGhlIGltYWdlIGlzIGFcblx0XHRcdC8vIHBvd2VyIG9mIDIgaW4gYm90aCBkaW1lbnNpb25zLlxuXHRcdFx0aWYgKGlzUG93ZXJPZjIoaW1hZ2Uud2lkdGgpICYmIGlzUG93ZXJPZjIoaW1hZ2UuaGVpZ2h0KSkge1xuXHRcdFx0XHQvLyAvLyBZZXMsIGl0J3MgYSBwb3dlciBvZiAyLiBHZW5lcmF0ZSBtaXBzLlxuXHRcdFx0XHQvLyBnbC5nZW5lcmF0ZU1pcG1hcChnbC5URVhUVVJFXzJEKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIFRPRE86IGZpbmlzaCBpbXBsZW1lbnRpbmcgdGhpcy5cblx0XHRcdFx0Y29uc29sZS53YXJuKGBUZXh0dXJlICR7bmFtZX0gZGltZW5zaW9ucyBbJHtpbWFnZS53aWR0aH0sICR7aW1hZ2UuaGVpZ2h0fV0gYXJlIG5vdCBwb3dlciBvZiAyLmApO1xuXHRcdFx0XHQvLyAvLyBObywgaXQncyBub3QgYSBwb3dlciBvZiAyLiBUdXJuIG9mZiBtaXBzIGFuZCBzZXRcblx0XHRcdFx0Ly8gLy8gd3JhcHBpbmcgdG8gY2xhbXAgdG8gZWRnZVxuXHRcdFx0XHQvLyBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcblx0XHRcdFx0Ly8gZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG5cdFx0XHR9XG5cdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbFt3cmFwU10pO1xuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2xbd3JhcFRdKTtcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbFtmaWx0ZXJdKTtcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbFtmaWx0ZXJdKTtcblxuXHRcdFx0Ly8gQ2FsbGJhY2sgd2hlbiB0ZXh0dXJlIGhhcyBsb2FkZWQuXG5cdFx0XHRpZiAoY2FsbGJhY2spIGNhbGxiYWNrKHRleHR1cmUpO1xuXHRcdH07XG5cdFx0aW1hZ2Uub25lcnJvciA9IChlKSA9PiB7XG5cdFx0XHRlcnJvckNhbGxiYWNrKGBFcnJvciBsb2FkaW5nIGltYWdlICR7bmFtZX06ICR7ZX1gKTtcblx0XHR9XG5cdFx0aW1hZ2Uuc3JjID0gdXJsO1xuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cdH1cblxuXHRvblJlc2l6ZShjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50KSB7XG5cdFx0Y29uc3Qgd2lkdGggPSBjYW52YXMuY2xpZW50V2lkdGg7XG5cdFx0Y29uc3QgaGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodDtcblx0XHQvLyBTZXQgY29ycmVjdCBjYW52YXMgcGl4ZWwgc2l6ZS5cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2ViR0xfQVBJL0J5X2V4YW1wbGUvQ2FudmFzX3NpemVfYW5kX1dlYkdMXG5cdFx0Y2FudmFzLndpZHRoID0gd2lkdGg7XG5cdFx0Y2FudmFzLmhlaWdodCA9IGhlaWdodDtcblx0XHQvLyBTYXZlIGRpbWVuc2lvbnMuXG5cdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXHR9O1xuXG5cdHByaXZhdGUgZHJhd1NldHVwKFxuXHRcdHByb2dyYW06IFdlYkdMUHJvZ3JhbSxcblx0XHRmdWxsc2NyZWVuUmVuZGVyOiBib29sZWFuLFxuXHRcdGlucHV0TGF5ZXJzOiAoRGF0YUxheWVyIHwgV2ViR0xUZXh0dXJlKVtdLFxuXHRcdG91dHB1dExheWVyPzogRGF0YUxheWVyLFxuXHQpIHtcblx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXHRcdC8vIENoZWNrIGlmIHdlIGFyZSBpbiBhbiBlcnJvciBzdGF0ZS5cblx0XHRpZiAoIXByb2dyYW0pIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDQVVUSU9OOiB0aGUgb3JkZXIgb2YgdGhlc2UgbmV4dCBmZXcgbGluZXMgaXMgaW1wb3J0YW50LlxuXG5cdFx0Ly8gR2V0IGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnQgdGV4dHVyZXMuXG5cdFx0Ly8gVGhpcyBsaW5lIG11c3QgY29tZSBiZWZvcmUgdGhpcy5zZXRPdXRwdXQoKSBhcyBpdCBkZXBlbmRzIG9uIGN1cnJlbnQgaW50ZXJuYWwgc3RhdGUuXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGNvbnN0IGlucHV0VGV4dHVyZXMgPSBpbnB1dExheWVycy5tYXAobGF5ZXIgPT4gbGF5ZXIuZ2V0Q3VycmVudFN0YXRlVGV4dHVyZSA/IChsYXllciBhcyBEYXRhTGF5ZXIpLmdldEN1cnJlbnRTdGF0ZVRleHR1cmUoKSA6IGxheWVyKTtcblxuXHRcdC8vIFNldCBvdXRwdXQgZnJhbWVidWZmZXIuXG5cdFx0Ly8gVGhpcyBtYXkgbW9kaWZ5IFdlYkdMIGludGVybmFsIHN0YXRlLlxuXHRcdHRoaXMuc2V0T3V0cHV0TGF5ZXIoZnVsbHNjcmVlblJlbmRlciwgaW5wdXRMYXllcnMsIG91dHB1dExheWVyKTtcblxuXHRcdC8vIFNldCBjdXJyZW50IHByb2dyYW0uXG5cdFx0Z2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcblxuXHRcdC8vIFNldCBpbnB1dCB0ZXh0dXJlcy5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0VGV4dHVyZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyBpKTtcblx0XHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIGlucHV0VGV4dHVyZXNbaV0pO1xuXHRcdH1cblx0fVxuXG5cdGNvcHlQcm9ncmFtRm9yVHlwZSh0eXBlOiBEYXRhTGF5ZXJUeXBlKSB7XG5cdFx0c3dpdGNoICh0eXBlKSB7XG5cdFx0XHRjYXNlIEhBTEZfRkxPQVQ6XG5cdFx0XHRjYXNlIEZMT0FUOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb3B5RmxvYXRQcm9ncmFtO1xuXHRcdFx0Y2FzZSBVTlNJR05FRF9CWVRFOlxuXHRcdFx0Y2FzZSBVTlNJR05FRF9TSE9SVDpcblx0XHRcdGNhc2UgVU5TSUdORURfSU5UOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb3B5VWludFByb2dyYW07XG5cdFx0XHRjYXNlIEJZVEU6XG5cdFx0XHRjYXNlIFNIT1JUOlxuXHRcdFx0Y2FzZSBJTlQ6XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvcHlJbnRQcm9ncmFtO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHR5cGU6ICR7dHlwZX0gcGFzc2VkIHRvIFdlYkdMQ29tcHV0ZS5jb3B5UHJvZ3JhbUZvclR5cGUuYCk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBzZXRPdXRwdXRMYXllcihcblx0XHRmdWxsc2NyZWVuUmVuZGVyOiBib29sZWFuLFxuXHRcdGlucHV0TGF5ZXJzOiAoRGF0YUxheWVyIHwgV2ViR0xUZXh0dXJlKVtdLFxuXHRcdG91dHB1dExheWVyPzogRGF0YUxheWVyLCAvLyBVbmRlZmluZWQgcmVuZGVycyB0byBzY3JlZW4uXG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cblx0XHQvLyBSZW5kZXIgdG8gc2NyZWVuLlxuXHRcdGlmICghb3V0cHV0TGF5ZXIpIHtcblx0XHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG5cdFx0XHQvLyBSZXNpemUgdmlld3BvcnQuXG5cdFx0XHRjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRoaXM7XG5cdFx0XHRnbC52aWV3cG9ydCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBpZiBvdXRwdXQgaXMgc2FtZSBhcyBvbmUgb2YgaW5wdXQgbGF5ZXJzLlxuXHRcdGlmIChpbnB1dExheWVycy5pbmRleE9mKG91dHB1dExheWVyKSA+IC0xKSB7XG5cdFx0XHRpZiAob3V0cHV0TGF5ZXIubnVtQnVmZmVycyA9PT0gMSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFxuQ2Fubm90IHVzZSBzYW1lIGJ1ZmZlciBmb3IgaW5wdXQgYW5kIG91dHB1dCBvZiBhIHByb2dyYW0uXG5UcnkgaW5jcmVhc2luZyB0aGUgbnVtYmVyIG9mIGJ1ZmZlcnMgaW4geW91ciBvdXRwdXQgbGF5ZXIgdG8gYXQgbGVhc3QgMiBzbyB5b3VcbmNhbiByZW5kZXIgdG8gbmV4dFN0YXRlIHVzaW5nIGN1cnJlbnRTdGF0ZSBhcyBhbiBpbnB1dC5gKTtcblx0XHRcdH1cblx0XHRcdGlmIChmdWxsc2NyZWVuUmVuZGVyKSB7XG5cdFx0XHRcdC8vIFJlbmRlciBhbmQgaW5jcmVtZW50IGJ1ZmZlciBzbyB3ZSBhcmUgcmVuZGVyaW5nIHRvIGEgZGlmZmVyZW50IHRhcmdldFxuXHRcdFx0XHQvLyB0aGFuIHRoZSBpbnB1dCB0ZXh0dXJlLlxuXHRcdFx0XHRvdXRwdXRMYXllci5iaW5kT3V0cHV0QnVmZmVyKHRydWUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gUGFzcyBpbnB1dCB0ZXh0dXJlIHRocm91Z2ggdG8gb3V0cHV0LlxuXHRcdFx0XHRjb25zdCBjb3B5UHJvZ3JhbSA9IHRoaXMuY29weVByb2dyYW1Gb3JUeXBlKG91dHB1dExheWVyLmludGVybmFsVHlwZSk7XG5cdFx0XHRcdHRoaXMuc3RlcChjb3B5UHJvZ3JhbSwgW291dHB1dExheWVyXSwgb3V0cHV0TGF5ZXIpO1xuXHRcdFx0XHQvLyBSZW5kZXIgdG8gb3V0cHV0IHdpdGhvdXQgaW5jcmVtZW50aW5nIGJ1ZmZlci5cblx0XHRcdFx0b3V0cHV0TGF5ZXIuYmluZE91dHB1dEJ1ZmZlcihmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFJlbmRlciB0byBjdXJyZW50IGJ1ZmZlci5cblx0XHRcdG91dHB1dExheWVyLmJpbmRPdXRwdXRCdWZmZXIoZmFsc2UpO1xuXHRcdH1cblx0XHRcblx0XHQvLyBSZXNpemUgdmlld3BvcnQuXG5cdFx0Y29uc3QgWyB3aWR0aCwgaGVpZ2h0IF0gPSBvdXRwdXRMYXllci5nZXREaW1lbnNpb25zKCk7XG5cdFx0Z2wudmlld3BvcnQoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG5cdH07XG5cblx0cHJpdmF0ZSBzZXRQb3NpdGlvbkF0dHJpYnV0ZShwcm9ncmFtOiBXZWJHTFByb2dyYW0pIHtcblx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXHRcdC8vIFBvaW50IGF0dHJpYnV0ZSB0byB0aGUgY3VycmVudGx5IGJvdW5kIFZCTy5cblx0XHRjb25zdCBsb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sICdhX2ludGVybmFsX3Bvc2l0aW9uJyk7XG5cdFx0Z2wudmVydGV4QXR0cmliUG9pbnRlcihsb2NhdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcblx0XHQvLyBFbmFibGUgdGhlIGF0dHJpYnV0ZS5cblx0XHRnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShsb2NhdGlvbik7XG5cdH1cblxuXHRwcml2YXRlIHNldEluZGV4QXR0cmlidXRlKHByb2dyYW06IFdlYkdMUHJvZ3JhbSkge1xuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cdFx0Ly8gUG9pbnQgYXR0cmlidXRlIHRvIHRoZSBjdXJyZW50bHkgYm91bmQgVkJPLlxuXHRcdGNvbnN0IGxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgJ2FfaW50ZXJuYWxfaW5kZXgnKTtcblx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGxvY2F0aW9uLCAxLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXHRcdC8vIEVuYWJsZSB0aGUgYXR0cmlidXRlLlxuXHRcdGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGxvY2F0aW9uKTtcblx0fVxuXG5cdC8vIFN0ZXAgZm9yIGVudGlyZSBmdWxsc2NyZWVuIHF1YWQuXG5cdHN0ZXAoXG5cdFx0cHJvZ3JhbTogR1BVUHJvZ3JhbSxcblx0XHRpbnB1dExheWVyczogKERhdGFMYXllciB8IFdlYkdMVGV4dHVyZSlbXSA9IFtdLFxuXHRcdG91dHB1dExheWVyPzogRGF0YUxheWVyLCAvLyBVbmRlZmluZWQgcmVuZGVycyB0byBzY3JlZW4uXG5cdFx0b3B0aW9ucz86IHtcblx0XHRcdHNob3VsZEJsZW5kQWxwaGE/OiBib29sZWFuLFxuXHRcdH0sXG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wsIGVycm9yU3RhdGUsIHF1YWRQb3NpdGlvbnNCdWZmZXIgfSA9IHRoaXM7XG5cblx0XHQvLyBJZ25vcmUgaWYgd2UgYXJlIGluIGVycm9yIHN0YXRlLlxuXHRcdGlmIChlcnJvclN0YXRlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgZ2xQcm9ncmFtID0gcHJvZ3JhbS5kZWZhdWx0UHJvZ3JhbSE7XG5cblx0XHQvLyBEbyBzZXR1cCAtIHRoaXMgbXVzdCBjb21lIGZpcnN0LlxuXHRcdHRoaXMuZHJhd1NldHVwKHByb2dyYW0uZGVmYXVsdFByb2dyYW0hLCB0cnVlLCBpbnB1dExheWVycywgb3V0cHV0TGF5ZXIpO1xuXG5cdFx0Ly8gVXBkYXRlIHVuaWZvcm1zIGFuZCBidWZmZXJzLlxuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3NjYWxlJywgWzEsIDFdLCBGTE9BVCk7XG5cdFx0cHJvZ3JhbS5zZXRWZXJ0ZXhVbmlmb3JtKGdsUHJvZ3JhbSwgJ3VfaW50ZXJuYWxfdHJhbnNsYXRpb24nLCBbMCwgMF0sIEZMT0FUKTtcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgcXVhZFBvc2l0aW9uc0J1ZmZlcik7XG5cdFx0dGhpcy5zZXRQb3NpdGlvbkF0dHJpYnV0ZShwcm9ncmFtLmRlZmF1bHRQcm9ncmFtISk7XG5cblx0XHQvLyBEcmF3LlxuXHRcdGlmIChvcHRpb25zPy5zaG91bGRCbGVuZEFscGhhKSB7XG5cdFx0XHRnbC5lbmFibGUoZ2wuQkxFTkQpO1xuXHRcdFx0Z2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG5cdFx0fVxuXHRcdGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVfU1RSSVAsIDAsIDQpO1xuXHRcdGdsLmRpc2FibGUoZ2wuQkxFTkQpO1xuXHR9XG5cblx0Ly8gU3RlcCBwcm9ncmFtIG9ubHkgZm9yIGEgc3RyaXAgb2YgcHggYWxvbmcgdGhlIGJvdW5kYXJ5LlxuXHRzdGVwQm91bmRhcnkoXG5cdFx0cHJvZ3JhbTogR1BVUHJvZ3JhbSxcblx0XHRpbnB1dExheWVyczogKERhdGFMYXllciB8IFdlYkdMVGV4dHVyZSlbXSA9IFtdLFxuXHRcdG91dHB1dExheWVyPzogRGF0YUxheWVyLCAvLyBVbmRlZmluZWQgcmVuZGVycyB0byBzY3JlZW4uXG5cdFx0b3B0aW9ucz86IHtcblx0XHRcdHNob3VsZEJsZW5kQWxwaGE/OiBib29sZWFuLFxuXHRcdFx0c2luZ2xlRWRnZT86ICdMRUZUJyB8ICdSSUdIVCcgfCAnVE9QJyB8ICdCT1RUT00nO1xuXHRcdH0sXG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wsIGVycm9yU3RhdGUsIGJvdW5kYXJ5UG9zaXRpb25zQnVmZmVyfSA9IHRoaXM7XG5cblx0XHQvLyBJZ25vcmUgaWYgd2UgYXJlIGluIGVycm9yIHN0YXRlLlxuXHRcdGlmIChlcnJvclN0YXRlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgZ2xQcm9ncmFtID0gcHJvZ3JhbS5kZWZhdWx0UHJvZ3JhbSE7XG5cblx0XHQvLyBEbyBzZXR1cCAtIHRoaXMgbXVzdCBjb21lIGZpcnN0LlxuXHRcdHRoaXMuZHJhd1NldHVwKGdsUHJvZ3JhbSwgZmFsc2UsIGlucHV0TGF5ZXJzLCBvdXRwdXRMYXllcik7XG5cblx0XHQvLyBVcGRhdGUgdW5pZm9ybXMgYW5kIGJ1ZmZlcnMuXG5cdFx0Ly8gRnJhbWUgbmVlZHMgdG8gYmUgb2Zmc2V0IGFuZCBzY2FsZWQgc28gdGhhdCBhbGwgZm91ciBzaWRlcyBhcmUgaW4gdmlld3BvcnQuXG5cdFx0Y29uc3QgWyB3aWR0aCwgaGVpZ2h0IF0gPSBvdXRwdXRMYXllciA/IG91dHB1dExheWVyLmdldERpbWVuc2lvbnMoKSA6IFsgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgXTtcblx0XHRjb25zdCBvbmVQeCA9IFsgMSAvIHdpZHRoLCAxIC8gaGVpZ2h0XSBhcyBbbnVtYmVyLCBudW1iZXJdO1xuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3NjYWxlJywgWzEgLSBvbmVQeFswXSwgMSAtIG9uZVB4WzFdXSwgRkxPQVQpO1xuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3RyYW5zbGF0aW9uJywgb25lUHgsIEZMT0FUKTtcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYm91bmRhcnlQb3NpdGlvbnNCdWZmZXIpO1xuXHRcdHRoaXMuc2V0UG9zaXRpb25BdHRyaWJ1dGUoZ2xQcm9ncmFtKTtcblxuXHRcdC8vIERyYXcuXG5cdFx0aWYgKG9wdGlvbnM/LnNob3VsZEJsZW5kQWxwaGEpIHtcblx0XHRcdGdsLmVuYWJsZShnbC5CTEVORCk7XG5cdFx0XHRnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblx0XHR9XG5cdFx0aWYgKG9wdGlvbnM/LnNpbmdsZUVkZ2UpIHtcblx0XHRcdHN3aXRjaChvcHRpb25zPy5zaW5nbGVFZGdlKSB7XG5cdFx0XHRcdGNhc2UgJ0xFRlQnOlxuXHRcdFx0XHRcdGdsLmRyYXdBcnJheXMoZ2wuTElORVMsIDMsIDIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdSSUdIVCc6XG5cdFx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FUywgMSwgMik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1RPUCc6XG5cdFx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FUywgMiwgMik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0JPVFRPTSc6XG5cdFx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FUywgMCwgMik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGJvdW5kYXJ5IGVkZ2UgdHlwZTogJHtvcHRpb25zPy5zaW5nbGVFZGdlfS5gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FX0xPT1AsIDAsIDQpO1xuXHRcdH1cblx0XHRcblx0XHRnbC5kaXNhYmxlKGdsLkJMRU5EKTtcblx0fVxuXG5cdC8vIFN0ZXAgcHJvZ3JhbSBmb3IgYWxsIGJ1dCBhIHN0cmlwIG9mIHB4IGFsb25nIHRoZSBib3VuZGFyeS5cblx0c3RlcE5vbkJvdW5kYXJ5KFxuXHRcdHByb2dyYW06IEdQVVByb2dyYW0sXG5cdFx0aW5wdXRMYXllcnM6IChEYXRhTGF5ZXIgfCBXZWJHTFRleHR1cmUpW10gPSBbXSxcblx0XHRvdXRwdXRMYXllcj86IERhdGFMYXllciwgLy8gVW5kZWZpbmVkIHJlbmRlcnMgdG8gc2NyZWVuLlxuXHRcdG9wdGlvbnM/OiB7XG5cdFx0XHRzaG91bGRCbGVuZEFscGhhPzogYm9vbGVhbixcblx0XHR9LFxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCBlcnJvclN0YXRlLCBxdWFkUG9zaXRpb25zQnVmZmVyIH0gPSB0aGlzO1xuXG5cdFx0Ly8gSWdub3JlIGlmIHdlIGFyZSBpbiBlcnJvciBzdGF0ZS5cblx0XHRpZiAoZXJyb3JTdGF0ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGdsUHJvZ3JhbSA9IHByb2dyYW0uZGVmYXVsdFByb2dyYW0hO1xuXG5cdFx0Ly8gRG8gc2V0dXAgLSB0aGlzIG11c3QgY29tZSBmaXJzdC5cblx0XHR0aGlzLmRyYXdTZXR1cChnbFByb2dyYW0sIGZhbHNlLCBpbnB1dExheWVycywgb3V0cHV0TGF5ZXIpO1xuXG5cdFx0Ly8gVXBkYXRlIHVuaWZvcm1zIGFuZCBidWZmZXJzLlxuXHRcdGNvbnN0IFsgd2lkdGgsIGhlaWdodCBdID0gb3V0cHV0TGF5ZXIgPyBvdXRwdXRMYXllci5nZXREaW1lbnNpb25zKCkgOiBbIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0IF07XG5cdFx0Y29uc3Qgb25lUHggPSBbIDEgLyB3aWR0aCwgMSAvIGhlaWdodF0gYXMgW251bWJlciwgbnVtYmVyXTtcblx0XHRwcm9ncmFtLnNldFZlcnRleFVuaWZvcm0oZ2xQcm9ncmFtLCAndV9pbnRlcm5hbF9zY2FsZScsIFsxIC0gMiAqIG9uZVB4WzBdLCAxIC0gMiAqIG9uZVB4WzFdXSwgRkxPQVQpO1xuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3RyYW5zbGF0aW9uJywgb25lUHgsIEZMT0FUKTtcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgcXVhZFBvc2l0aW9uc0J1ZmZlcik7XG5cdFx0dGhpcy5zZXRQb3NpdGlvbkF0dHJpYnV0ZShnbFByb2dyYW0pO1xuXHRcdFxuXHRcdC8vIERyYXcuXG5cdFx0aWYgKG9wdGlvbnM/LnNob3VsZEJsZW5kQWxwaGEpIHtcblx0XHRcdGdsLmVuYWJsZShnbC5CTEVORCk7XG5cdFx0XHRnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblx0XHR9XG5cdFx0Z2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgMCwgNCk7XG5cdFx0Z2wuZGlzYWJsZShnbC5CTEVORCk7XG5cdH1cblxuXHQvLyBTdGVwIHByb2dyYW0gb25seSBmb3IgYSBjaXJjdWxhciBzcG90LlxuXHRzdGVwQ2lyY2xlKFxuXHRcdHByb2dyYW06IEdQVVByb2dyYW0sXG5cdFx0cG9zaXRpb246IFtudW1iZXIsIG51bWJlcl0sIC8vIHBvc2l0aW9uIGlzIGluIHNjcmVlbiBzcGFjZSBjb29yZHMuXG5cdFx0cmFkaXVzOiBudW1iZXIsIC8vIHJhZGl1cyBpcyBpbiBweC5cblx0XHRpbnB1dExheWVyczogKERhdGFMYXllciB8IFdlYkdMVGV4dHVyZSlbXSA9IFtdLFxuXHRcdG91dHB1dExheWVyPzogRGF0YUxheWVyLCAvLyBVbmRlZmluZWQgcmVuZGVycyB0byBzY3JlZW4uXG5cdFx0b3B0aW9ucz86IHtcblx0XHRcdHNob3VsZEJsZW5kQWxwaGE/OiBib29sZWFuLFxuXHRcdH0sXG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wsIGVycm9yU3RhdGUsIGNpcmNsZVBvc2l0aW9uc0J1ZmZlciB9ID0gdGhpcztcblx0XHRjb25zdCBbIHdpZHRoLCBoZWlnaHQgXSA9IG91dHB1dExheWVyID8gb3V0cHV0TGF5ZXIuZ2V0RGltZW5zaW9ucygpIDogWyB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCBdO1xuXG5cdFx0Ly8gSWdub3JlIGlmIHdlIGFyZSBpbiBlcnJvciBzdGF0ZS5cblx0XHRpZiAoZXJyb3JTdGF0ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGdsUHJvZ3JhbSA9IHByb2dyYW0uZGVmYXVsdFByb2dyYW0hO1xuXG5cdFx0Ly8gRG8gc2V0dXAgLSB0aGlzIG11c3QgY29tZSBmaXJzdC5cblx0XHR0aGlzLmRyYXdTZXR1cChnbFByb2dyYW0sIGZhbHNlLCBpbnB1dExheWVycywgb3V0cHV0TGF5ZXIpO1xuXG5cdFx0Ly8gVXBkYXRlIHVuaWZvcm1zIGFuZCBidWZmZXJzLlxuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3NjYWxlJywgW3JhZGl1cyAqIDIgLyB3aWR0aCwgcmFkaXVzICogMiAvIGhlaWdodF0sIEZMT0FUKTtcblx0XHRwcm9ncmFtLnNldFZlcnRleFVuaWZvcm0oZ2xQcm9ncmFtLCAndV9pbnRlcm5hbF90cmFuc2xhdGlvbicsIFsyICogcG9zaXRpb25bMF0gLyB3aWR0aCAtIDEsIDIgKiBwb3NpdGlvblsxXSAvIGhlaWdodCAtIDFdLCBGTE9BVCk7XG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGNpcmNsZVBvc2l0aW9uc0J1ZmZlcik7XG5cdFx0dGhpcy5zZXRQb3NpdGlvbkF0dHJpYnV0ZShnbFByb2dyYW0pO1xuXHRcdFxuXHRcdC8vIERyYXcuXG5cdFx0aWYgKG9wdGlvbnM/LnNob3VsZEJsZW5kQWxwaGEpIHtcblx0XHRcdGdsLmVuYWJsZShnbC5CTEVORCk7XG5cdFx0XHRnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblx0XHR9XG5cdFx0Z2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9GQU4sIDAsIE5VTV9TRUdNRU5UU19DSVJDTEUgKyAyKTtcdFxuXHRcdGdsLmRpc2FibGUoZ2wuQkxFTkQpO1xuXHR9XG5cblx0Ly8gU3RlcCBwcm9ncmFtIG9ubHkgZm9yIGEgdGhpY2tlbmVkIGxpbmUgc2VnbWVudHMgKHJvdW5kZWQgZW5kIGNhcHMpLlxuXHRzdGVwU2VnbWVudChcblx0XHRwcm9ncmFtOiBHUFVQcm9ncmFtLFxuXHRcdHBvc2l0aW9uMTogW251bWJlciwgbnVtYmVyXSwgLy8gcG9zaXRpb24gaXMgaW4gc2NyZWVuIHNwYWNlIGNvb3Jkcy5cblx0XHRwb3NpdGlvbjI6IFtudW1iZXIsIG51bWJlcl0sIC8vIHBvc2l0aW9uIGlzIGluIHNjcmVlbiBzcGFjZSBjb29yZHMuXG5cdFx0cmFkaXVzOiBudW1iZXIsIC8vIHJhZGl1cyBpcyBpbiBweC5cblx0XHRpbnB1dExheWVyczogKERhdGFMYXllciB8IFdlYkdMVGV4dHVyZSlbXSA9IFtdLFxuXHRcdG91dHB1dExheWVyPzogRGF0YUxheWVyLCAvLyBVbmRlZmluZWQgcmVuZGVycyB0byBzY3JlZW4uXG5cdFx0b3B0aW9ucz86IHtcblx0XHRcdHNob3VsZEJsZW5kQWxwaGE/OiBib29sZWFuLFxuXHRcdH0sXG5cdCkge1xuXHRcdGNvbnN0IHsgZ2wsIGVycm9yU3RhdGUsIGNpcmNsZVBvc2l0aW9uc0J1ZmZlciB9ID0gdGhpcztcblx0XHRjb25zdCBbIHdpZHRoLCBoZWlnaHQgXSA9IG91dHB1dExheWVyID8gb3V0cHV0TGF5ZXIuZ2V0RGltZW5zaW9ucygpIDogWyB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCBdO1xuXG5cdFx0Ly8gSWdub3JlIGlmIHdlIGFyZSBpbiBlcnJvciBzdGF0ZS5cblx0XHRpZiAoZXJyb3JTdGF0ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGdsUHJvZ3JhbSA9IHByb2dyYW0uc2VnbWVudFByb2dyYW0hO1xuXG5cdFx0Ly8gRG8gc2V0dXAgLSB0aGlzIG11c3QgY29tZSBmaXJzdC5cblx0XHR0aGlzLmRyYXdTZXR1cChnbFByb2dyYW0sIGZhbHNlLCBpbnB1dExheWVycywgb3V0cHV0TGF5ZXIpO1xuXG5cdFx0Ly8gVXBkYXRlIHVuaWZvcm1zIGFuZCBidWZmZXJzLlxuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3JhZGl1cycsIHJhZGl1cywgRkxPQVQpO1xuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3NjYWxlJywgWzIgLyB3aWR0aCwgMiAvIGhlaWdodF0sIEZMT0FUKTtcblx0XHRjb25zdCBkaWZmWCA9IHBvc2l0aW9uMVswXSAtIHBvc2l0aW9uMlswXTtcblx0XHRjb25zdCBkaWZmWSA9IHBvc2l0aW9uMVsxXSAtIHBvc2l0aW9uMlsxXTtcblx0XHRjb25zdCBhbmdsZSA9IE1hdGguYXRhbjIoZGlmZlksIGRpZmZYKTtcblx0XHRwcm9ncmFtLnNldFZlcnRleFVuaWZvcm0oZ2xQcm9ncmFtLCAndV9pbnRlcm5hbF9yb3RhdGlvbicsIGFuZ2xlLCBGTE9BVCk7XG5cdFx0Y29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KGRpZmZYICogZGlmZlggKyBkaWZmWSAqIGRpZmZZKTtcblx0XHRwcm9ncmFtLnNldFZlcnRleFVuaWZvcm0oZ2xQcm9ncmFtLCAndV9pbnRlcm5hbF9sZW5ndGgnLCBsZW5ndGgsIEZMT0FUKTtcblx0XHRjb25zdCBwb3NpdGlvblggPSAocG9zaXRpb24xWzBdICsgcG9zaXRpb24yWzBdKSAvIDI7XG5cdFx0Y29uc3QgcG9zaXRpb25ZID0gKHBvc2l0aW9uMVsxXSArIHBvc2l0aW9uMlsxXSkgLyAyO1xuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3RyYW5zbGF0aW9uJywgWzIgKiBwb3NpdGlvblggLyB3aWR0aCAtIDEsIDIgKiBwb3NpdGlvblkgLyBoZWlnaHQgLSAxXSwgRkxPQVQpO1xuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBjaXJjbGVQb3NpdGlvbnNCdWZmZXIpO1xuXHRcdHRoaXMuc2V0UG9zaXRpb25BdHRyaWJ1dGUoZ2xQcm9ncmFtKTtcblx0XHRcblx0XHQvLyBEcmF3LlxuXHRcdGlmIChvcHRpb25zPy5zaG91bGRCbGVuZEFscGhhKSB7XG5cdFx0XHRnbC5lbmFibGUoZ2wuQkxFTkQpO1xuXHRcdFx0Z2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG5cdFx0fVxuXHRcdGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVfRkFOLCAwLCBOVU1fU0VHTUVOVFNfQ0lSQ0xFICsgMik7XG5cdFx0Z2wuZGlzYWJsZShnbC5CTEVORCk7XG5cdH1cblxuXHRkcmF3UG9pbnRzKFxuXHRcdHByb2dyYW06IEdQVVByb2dyYW0sXG5cdFx0aW5wdXRMYXllcnM6IChEYXRhTGF5ZXIgfCBXZWJHTFRleHR1cmUpW10sXG5cdFx0b3V0cHV0TGF5ZXI/OiBEYXRhTGF5ZXIsXG5cdFx0b3B0aW9ucz86IHtcblx0XHRcdHBvaW50U2l6ZT86IG51bWJlcixcblx0XHRcdG51bVBvaW50cz86IG51bWJlcixcblx0XHRcdHNob3VsZEJsZW5kQWxwaGE/OiBib29sZWFuLFxuXHRcdH1cblx0KSB7XG5cdFx0Y29uc3QgeyBnbCwgZXJyb3JTdGF0ZSwgcG9pbnRJbmRleEFycmF5IH0gPSB0aGlzO1xuXHRcdGNvbnN0IFsgd2lkdGgsIGhlaWdodCBdID0gb3V0cHV0TGF5ZXIgPyBvdXRwdXRMYXllci5nZXREaW1lbnNpb25zKCkgOiBbIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0IF07XG5cblx0XHQvLyBJZ25vcmUgaWYgd2UgYXJlIGluIGVycm9yIHN0YXRlLlxuXHRcdGlmIChlcnJvclN0YXRlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKGlucHV0TGF5ZXJzLmxlbmd0aCA8IDEpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBpbnB1dExheWVycyBmb3IgZHJhd1BvaW50cyBvbiBwcm9ncmFtIFwiJHtwcm9ncmFtLm5hbWV9XCI6IG11c3QgcGFzcyBhIHBvc2l0aW9uRGF0YUxheWVyIGFzIGZpcnN0IGVsZW1lbnQgb2YgaW5wdXRMYXllcnMuYCk7XG5cdFx0fVxuXHRcdGNvbnN0IHBvc2l0aW9uTGF5ZXIgPSBpbnB1dExheWVyc1swXSBhcyBEYXRhTGF5ZXI7XG5cblx0XHQvLyBDaGVjayB0aGF0IG51bVBvaW50cyBpcyB2YWxpZC5cblx0XHRpZiAocG9zaXRpb25MYXllci5udW1Db21wb25lbnRzICE9PSAyICYmIHBvc2l0aW9uTGF5ZXIubnVtQ29tcG9uZW50cyAhPT0gNCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBXZWJHTENvbXB1dGUuZHJhd1BvaW50cygpIG11c3QgYmUgcGFzc2VkIGEgcG9zaXRpb25EYXRhTGF5ZXIgd2l0aCBlaXRoZXIgMiBvciA0IGNvbXBvbmVudHMsIGdvdCBwb3NpdGlvbkRhdGFMYXllciBcIiR7cG9zaXRpb25MYXllci5uYW1lfVwiIHdpdGggJHtwb3NpdGlvbkxheWVyLm51bUNvbXBvbmVudHN9IGNvbXBvbmVudHMuYClcblx0XHR9XG5cdFx0Y29uc3QgbGVuZ3RoID0gcG9zaXRpb25MYXllci5nZXRMZW5ndGgoKTtcblx0XHRjb25zdCBudW1Qb2ludHMgPSBvcHRpb25zPy5udW1Qb2ludHMgfHwgbGVuZ3RoO1xuXHRcdGlmIChudW1Qb2ludHMgPiBsZW5ndGgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBudW1Qb2ludCAke251bVBvaW50c30gZm9yIHBvc2l0aW9uRGF0YUxheWVyIG9mIGxlbmd0aCAke2xlbmd0aH0uYCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgZ2xQcm9ncmFtID0gcHJvZ3JhbS5wb2ludHNQcm9ncmFtITtcblxuXHRcdC8vIERvIHNldHVwIC0gdGhpcyBtdXN0IGNvbWUgZmlyc3QuXG5cdFx0dGhpcy5kcmF3U2V0dXAoZ2xQcm9ncmFtLCBmYWxzZSwgaW5wdXRMYXllcnMsIG91dHB1dExheWVyKTtcblxuXHRcdC8vIFVwZGF0ZSB1bmlmb3JtcyBhbmQgYnVmZmVycy5cblx0XHRwcm9ncmFtLnNldFZlcnRleFVuaWZvcm0oZ2xQcm9ncmFtLCAndV9pbnRlcm5hbF9kYXRhJywgMCwgSU5UKTtcblx0XHRwcm9ncmFtLnNldFZlcnRleFVuaWZvcm0oZ2xQcm9ncmFtLCAndV9pbnRlcm5hbF9zY2FsZScsIFsxIC8gd2lkdGgsIDEgLyBoZWlnaHRdLCBGTE9BVCk7XG5cdFx0Ly8gU2V0IGRlZmF1bHQgcG9pbnRTaXplLlxuXHRcdGNvbnN0IHBvaW50U2l6ZSA9IG9wdGlvbnM/LnBvaW50U2l6ZSB8fCAxO1xuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX3BvaW50U2l6ZScsIHBvaW50U2l6ZSwgRkxPQVQpO1xuXHRcdGNvbnN0IHBvc2l0aW9uTGF5ZXJEaW1lbnNpb25zID0gcG9zaXRpb25MYXllci5nZXREaW1lbnNpb25zKCk7XG5cdFx0cHJvZ3JhbS5zZXRWZXJ0ZXhVbmlmb3JtKGdsUHJvZ3JhbSwgJ3VfaW50ZXJuYWxfZGltZW5zaW9ucycsIHBvc2l0aW9uTGF5ZXJEaW1lbnNpb25zLCBGTE9BVCk7XG5cdFx0aWYgKHRoaXMucG9pbnRJbmRleEJ1ZmZlciA9PT0gdW5kZWZpbmVkIHx8IChwb2ludEluZGV4QXJyYXkgJiYgcG9pbnRJbmRleEFycmF5Lmxlbmd0aCA8IG51bVBvaW50cykpIHtcblx0XHRcdC8vIEhhdmUgdG8gdXNlIGZsb2F0MzIgYXJyYXkgYmMgaW50IGlzIG5vdCBzdXBwb3J0ZWQgYXMgYSB2ZXJ0ZXggYXR0cmlidXRlIHR5cGUuXG5cdFx0XHRjb25zdCBpbmRpY2VzID0gbmV3IEZsb2F0MzJBcnJheShsZW5ndGgpO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpbmRpY2VzW2ldID0gaTtcblx0XHRcdH1cblx0XHRcdHRoaXMucG9pbnRJbmRleEFycmF5ID0gaW5kaWNlcztcblx0XHRcdHRoaXMucG9pbnRJbmRleEJ1ZmZlciA9IHRoaXMuaW5pdFZlcnRleEJ1ZmZlcihpbmRpY2VzKTtcblx0XHR9XG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMucG9pbnRJbmRleEJ1ZmZlciEpO1xuXHRcdHRoaXMuc2V0SW5kZXhBdHRyaWJ1dGUoZ2xQcm9ncmFtKTtcblxuXHRcdC8vIERyYXcuXG5cdFx0Ly8gRGVmYXVsdCB0byBibGVuZCA9PT0gdHJ1ZS5cblx0XHRjb25zdCBzaG91bGRCbGVuZEFscGhhID0gb3B0aW9ucz8uc2hvdWxkQmxlbmRBbHBoYSA9PT0gZmFsc2UgPyBmYWxzZSA6IHRydWU7XG5cdFx0aWYgKHNob3VsZEJsZW5kQWxwaGEpIHtcblx0XHRcdGdsLmVuYWJsZShnbC5CTEVORCk7XG5cdFx0XHRnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblx0XHR9XG5cdFx0Z2wuZHJhd0FycmF5cyhnbC5QT0lOVFMsIDAsIG51bVBvaW50cyk7XG5cdFx0Z2wuZGlzYWJsZShnbC5CTEVORCk7XG5cdH1cblxuXHRkcmF3VmVjdG9yRmllbGQoXG5cdFx0cHJvZ3JhbTogR1BVUHJvZ3JhbSxcblx0XHRpbnB1dExheWVyczogKERhdGFMYXllciB8IFdlYkdMVGV4dHVyZSlbXSxcblx0XHRvdXRwdXRMYXllcj86IERhdGFMYXllcixcblx0XHRvcHRpb25zPzoge1xuXHRcdFx0dmVjdG9yU3BhY2luZz86IG51bWJlcixcblx0XHRcdHZlY3RvclNjYWxlPzogbnVtYmVyLFxuXHRcdFx0c2hvdWxkQmxlbmRBbHBoYT86IGJvb2xlYW4sXG5cdFx0fVxuXHQpIHtcblx0XHRjb25zdCB7IGdsLCBlcnJvclN0YXRlLCB2ZWN0b3JGaWVsZEluZGV4QXJyYXkgfSA9IHRoaXM7XG5cdFx0Y29uc3QgWyB3aWR0aCwgaGVpZ2h0IF0gPSBvdXRwdXRMYXllciA/IG91dHB1dExheWVyLmdldERpbWVuc2lvbnMoKSA6IFsgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgXTtcblxuXHRcdC8vIElnbm9yZSBpZiB3ZSBhcmUgaW4gZXJyb3Igc3RhdGUuXG5cdFx0aWYgKGVycm9yU3RhdGUpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoaW5wdXRMYXllcnMubGVuZ3RoIDwgMSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGlucHV0TGF5ZXJzIGZvciBkcmF3VmVjdG9yRmllbGQgb24gcHJvZ3JhbSBcIiR7cHJvZ3JhbS5uYW1lfVwiOiBtdXN0IHBhc3MgYSB2ZWN0b3JEYXRhTGF5ZXIgYXMgZmlyc3QgZWxlbWVudCBvZiBpbnB1dExheWVycy5gKTtcblx0XHR9XG5cdFx0Y29uc3QgdmVjdG9yTGF5ZXIgPSBpbnB1dExheWVyc1swXSBhcyBEYXRhTGF5ZXI7XG5cblx0XHQvLyBDaGVjayB0aGF0IHZlY3RvckxheWVyIGlzIHZhbGlkLlxuXHRcdGlmICh2ZWN0b3JMYXllci5udW1Db21wb25lbnRzICE9PSAyKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFdlYkdMQ29tcHV0ZS5kcmF3VmVjdG9yRmllbGQoKSBtdXN0IGJlIHBhc3NlZCBhIHZlY3RvckRhdGFMYXllciB3aXRoIDIgY29tcG9uZW50cywgZ290IHZlY3RvckRhdGFMYXllciBcIiR7dmVjdG9yTGF5ZXIubmFtZX1cIiB3aXRoICR7dmVjdG9yTGF5ZXIubnVtQ29tcG9uZW50c30gY29tcG9uZW50cy5gKVxuXHRcdH1cblx0XHQvLyBDaGVjayBhc3BlY3QgcmF0aW8uXG5cdFx0Y29uc3QgZGltZW5zaW9ucyA9IHZlY3RvckxheWVyLmdldERpbWVuc2lvbnMoKTtcblx0XHRpZiAoTWF0aC5hYnMoZGltZW5zaW9uc1swXSAvIGRpbWVuc2lvbnNbMV0gLSB3aWR0aCAvIGhlaWdodCkgPiAwLjAwMSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGFzcGVjdCByYXRpbyAkeyhkaW1lbnNpb25zWzBdIC8gZGltZW5zaW9uc1sxXSkudG9GaXhlZCgzKX0gdmVjdG9yRGF0YUxheWVyIHdpdGggZGltZW5zaW9ucyBbJHtkaW1lbnNpb25zWzBdfSwgJHtkaW1lbnNpb25zWzFdfV0sIGV4cGVjdGVkIFske3dpZHRofSwgJHtoZWlnaHR9XS5gKTtcblx0XHR9XG5cblx0XHRjb25zdCBnbFByb2dyYW0gPSBwcm9ncmFtLnZlY3RvckZpZWxkUHJvZ3JhbSE7XG5cblx0XHQvLyBEbyBzZXR1cCAtIHRoaXMgbXVzdCBjb21lIGZpcnN0LlxuXHRcdHRoaXMuZHJhd1NldHVwKGdsUHJvZ3JhbSwgZmFsc2UsIGlucHV0TGF5ZXJzLCBvdXRwdXRMYXllcik7XG5cblx0XHQvLyBUT0RPOiBhZGQgb3B0aW9ucyB0byByZWR1Y2UgZGVuc2l0eSBvZiB2ZWN0b3JzLlxuXG5cdFx0Ly8gVXBkYXRlIHVuaWZvcm1zIGFuZCBidWZmZXJzLlxuXHRcdHByb2dyYW0uc2V0VmVydGV4VW5pZm9ybShnbFByb2dyYW0sICd1X2ludGVybmFsX2RhdGEnLCAwLCBJTlQpO1xuXHRcdC8vIFNldCBkZWZhdWx0IHNjYWxlLlxuXHRcdGNvbnN0IHZlY3RvclNjYWxlID0gb3B0aW9ucz8udmVjdG9yU2NhbGUgfHwgMTA7XG5cdFx0cHJvZ3JhbS5zZXRWZXJ0ZXhVbmlmb3JtKGdsUHJvZ3JhbSwgJ3VfaW50ZXJuYWxfc2NhbGUnLCBbdmVjdG9yU2NhbGUgLyB3aWR0aCwgdmVjdG9yU2NhbGUgLyBoZWlnaHRdLCBGTE9BVCk7XG5cdFx0Y29uc3QgdmVjdG9yU3BhY2luZyA9IG9wdGlvbnM/LnZlY3RvclNwYWNpbmcgfHwgMTtcblx0XHRjb25zdCBzcGFjZWREaW1lbnNpb25zID0gW01hdGguZmxvb3Iod2lkdGggLyB2ZWN0b3JTcGFjaW5nKSwgTWF0aC5mbG9vcihoZWlnaHQgLyB2ZWN0b3JTcGFjaW5nKV0gYXMgW251bWJlciwgbnVtYmVyXTtcblx0XHRwcm9ncmFtLnNldFZlcnRleFVuaWZvcm0oZ2xQcm9ncmFtLCAndV9pbnRlcm5hbF9kaW1lbnNpb25zJywgc3BhY2VkRGltZW5zaW9ucywgRkxPQVQpO1xuXHRcdGNvbnN0IGxlbmd0aCA9IDIgKiBzcGFjZWREaW1lbnNpb25zWzBdICogc3BhY2VkRGltZW5zaW9uc1sxXTtcblx0XHRpZiAodGhpcy52ZWN0b3JGaWVsZEluZGV4QnVmZmVyID09PSB1bmRlZmluZWQgfHwgKHZlY3RvckZpZWxkSW5kZXhBcnJheSAmJiB2ZWN0b3JGaWVsZEluZGV4QXJyYXkubGVuZ3RoIDwgbGVuZ3RoKSkge1xuXHRcdFx0Ly8gSGF2ZSB0byB1c2UgZmxvYXQzMiBhcnJheSBiYyBpbnQgaXMgbm90IHN1cHBvcnRlZCBhcyBhIHZlcnRleCBhdHRyaWJ1dGUgdHlwZS5cblx0XHRcdGNvbnN0IGluZGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGluZGljZXNbaV0gPSBpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy52ZWN0b3JGaWVsZEluZGV4QXJyYXkgPSBpbmRpY2VzO1xuXHRcdFx0dGhpcy52ZWN0b3JGaWVsZEluZGV4QnVmZmVyID0gdGhpcy5pbml0VmVydGV4QnVmZmVyKGluZGljZXMpO1xuXHRcdH1cblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy52ZWN0b3JGaWVsZEluZGV4QnVmZmVyISk7XG5cdFx0dGhpcy5zZXRJbmRleEF0dHJpYnV0ZShnbFByb2dyYW0pO1xuXG5cdFx0Ly8gRHJhdy5cblx0XHQvLyBEZWZhdWx0IHRvIGJsZW5kID09PSB0cnVlLlxuXHRcdGNvbnN0IHNob3VsZEJsZW5kQWxwaGEgPSBvcHRpb25zPy5zaG91bGRCbGVuZEFscGhhID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcblx0XHRpZiAoc2hvdWxkQmxlbmRBbHBoYSkge1xuXHRcdFx0Z2wuZW5hYmxlKGdsLkJMRU5EKTtcblx0XHRcdGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXHRcdH1cblx0XHRnbC5kcmF3QXJyYXlzKGdsLkxJTkVTLCAwLCBsZW5ndGgpO1xuXHRcdGdsLmRpc2FibGUoZ2wuQkxFTkQpO1xuXHR9XG5cdFxuXHRnZXRDb250ZXh0KCkge1xuXHRcdHJldHVybiB0aGlzLmdsO1xuXHR9XG5cblx0Z2V0VmFsdWVzKGRhdGFMYXllcjogRGF0YUxheWVyKSB7XG5cdFx0Y29uc3QgeyBnbCwgZ2xzbFZlcnNpb24gfSA9IHRoaXM7XG5cblx0XHQvLyBUT0RPOiBpbiBjYXNlIGRhdGFMYXllciB3YXMgbm90IHRoZSBsYXN0IG91dHB1dCB3cml0dGVuIHRvLlxuXHRcdC8vIGRhdGFMYXllci5iaW5kT3V0cHV0QnVmZmVyKGZhbHNlKTtcblxuXHRcdGNvbnN0IFsgd2lkdGgsIGhlaWdodCBdID0gZGF0YUxheWVyLmdldERpbWVuc2lvbnMoKTtcblx0XHRsZXQgeyBnbE51bUNoYW5uZWxzLCBnbFR5cGUsIGdsRm9ybWF0LCBpbnRlcm5hbFR5cGUgfSA9IGRhdGFMYXllcjtcblx0XHRsZXQgdmFsdWVzO1xuXHRcdHN3aXRjaCAoaW50ZXJuYWxUeXBlKSB7XG5cdFx0XHRjYXNlIEhBTEZfRkxPQVQ6XG5cdFx0XHRcdGlmIChnbC5GTE9BVCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0Ly8gRmlyZWZveCByZXF1aXJlcyB0aGF0IFJHQkEvRkxPQVQgaXMgdXNlZCBmb3IgcmVhZFBpeGVscyBvZiBmbG9hdDE2IHR5cGVzLlxuXHRcdFx0XHRcdGdsTnVtQ2hhbm5lbHMgPSA0O1xuXHRcdFx0XHRcdGdsRm9ybWF0ID0gZ2wuUkdCQTtcblx0XHRcdFx0XHRnbFR5cGUgPSBnbC5GTE9BVDtcblx0XHRcdFx0XHR2YWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KHdpZHRoICogaGVpZ2h0ICogZ2xOdW1DaGFubmVscyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsdWVzID0gbmV3IFVpbnQxNkFycmF5KHdpZHRoICogaGVpZ2h0ICogZ2xOdW1DaGFubmVscyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gLy8gVGhlIGZvbGxvd2luZyB3b3JrcyBpbiBDaHJvbWUuXG5cdFx0XHRcdC8vIHZhbHVlcyA9IG5ldyBVaW50MTZBcnJheSh3aWR0aCAqIGhlaWdodCAqIGdsTnVtQ2hhbm5lbHMpO1xuXHRcdFx0XHRicmVha1xuXHRcdFx0Y2FzZSBGTE9BVDpcblx0XHRcdFx0Ly8gQ2hyb21lIGFuZCBGaXJlZm94IHJlcXVpcmUgdGhhdCBSR0JBL0ZMT0FUIGlzIHVzZWQgZm9yIHJlYWRQaXhlbHMgb2YgZmxvYXQzMiB0eXBlcy5cblx0XHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9XZWJHTC9pc3N1ZXMvMjc0N1xuXHRcdFx0XHRnbE51bUNoYW5uZWxzID0gNDtcblx0XHRcdFx0Z2xGb3JtYXQgPSBnbC5SR0JBO1xuXHRcdFx0XHR2YWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KHdpZHRoICogaGVpZ2h0ICogZ2xOdW1DaGFubmVscyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBVTlNJR05FRF9CWVRFOlxuXHRcdFx0XHRpZiAoZ2xzbFZlcnNpb24gPT09IEdMU0wxKSB7XG5cdFx0XHRcdFx0Ly8gRmlyZWZveCByZXF1aXJlcyB0aGF0IFJHQkEvVU5TSUdORURfQllURSBpcyB1c2VkIGZvciByZWFkUGl4ZWxzIG9mIHVuc2lnbmVkIGJ5dGUgdHlwZXMuXG5cdFx0XHRcdFx0Z2xOdW1DaGFubmVscyA9IDQ7XG5cdFx0XHRcdFx0Z2xGb3JtYXQgPSBnbC5SR0JBO1xuXHRcdFx0XHRcdHZhbHVlcyA9IG5ldyBVaW50OEFycmF5KHdpZHRoICogaGVpZ2h0ICogZ2xOdW1DaGFubmVscyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gRmlyZWZveCByZXF1aXJlcyB0aGF0IFJHQkFfSU5URUdFUi9VTlNJR05FRF9JTlQgaXMgdXNlZCBmb3IgcmVhZFBpeGVscyBvZiB1bnNpZ25lZCBpbnQgdHlwZXMuXG5cdFx0XHRcdGdsTnVtQ2hhbm5lbHMgPSA0O1xuXHRcdFx0XHRnbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0JBX0lOVEVHRVI7XG5cdFx0XHRcdGdsVHlwZSA9IGdsLlVOU0lHTkVEX0lOVDtcblx0XHRcdFx0dmFsdWVzID0gbmV3IFVpbnQzMkFycmF5KHdpZHRoICogaGVpZ2h0ICogZ2xOdW1DaGFubmVscyk7XG5cdFx0XHRcdC8vIC8vIFRoZSBmb2xsb3dpbmcgd29ya3MgaW4gQ2hyb21lLlxuXHRcdFx0XHQvLyB2YWx1ZXMgPSBuZXcgVWludDhBcnJheSh3aWR0aCAqIGhlaWdodCAqIGdsTnVtQ2hhbm5lbHMpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgVU5TSUdORURfU0hPUlQ6XG5cdFx0XHRcdC8vIEZpcmVmb3ggcmVxdWlyZXMgdGhhdCBSR0JBX0lOVEVHRVIvVU5TSUdORURfSU5UIGlzIHVzZWQgZm9yIHJlYWRQaXhlbHMgb2YgdW5zaWduZWQgaW50IHR5cGVzLlxuXHRcdFx0XHRnbE51bUNoYW5uZWxzID0gNDtcblx0XHRcdFx0Z2xGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCQV9JTlRFR0VSO1xuXHRcdFx0XHRnbFR5cGUgPSBnbC5VTlNJR05FRF9JTlQ7XG5cdFx0XHRcdHZhbHVlcyA9IG5ldyBVaW50MzJBcnJheSh3aWR0aCAqIGhlaWdodCAqIGdsTnVtQ2hhbm5lbHMpO1xuXHRcdFx0XHQvLyAvLyBUaGUgZm9sbG93aW5nIHdvcmtzIGluIENocm9tZS5cblx0XHRcdFx0Ly8gdmFsdWVzID0gbmV3IFVpbnQxNkFycmF5KHdpZHRoICogaGVpZ2h0ICogZ2xOdW1DaGFubmVscyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBVTlNJR05FRF9JTlQ6XG5cdFx0XHRcdC8vIEZpcmVmb3ggcmVxdWlyZXMgdGhhdCBSR0JBX0lOVEVHRVIvVU5TSUdORURfSU5UIGlzIHVzZWQgZm9yIHJlYWRQaXhlbHMgb2YgdW5zaWduZWQgaW50IHR5cGVzLlxuXHRcdFx0XHRnbE51bUNoYW5uZWxzID0gNDtcblx0XHRcdFx0Z2xGb3JtYXQgPSAoZ2wgYXMgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkuUkdCQV9JTlRFR0VSO1xuXHRcdFx0XHR2YWx1ZXMgPSBuZXcgVWludDMyQXJyYXkod2lkdGggKiBoZWlnaHQgKiBnbE51bUNoYW5uZWxzKTtcblx0XHRcdFx0Ly8gLy8gVGhlIGZvbGxvd2luZyB3b3JrcyBpbiBDaHJvbWUuXG5cdFx0XHRcdC8vIHZhbHVlcyA9IG5ldyBVaW50MzJBcnJheSh3aWR0aCAqIGhlaWdodCAqIGdsTnVtQ2hhbm5lbHMpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgQllURTpcblx0XHRcdFx0Ly8gRmlyZWZveCByZXF1aXJlcyB0aGF0IFJHQkFfSU5URUdFUi9JTlQgaXMgdXNlZCBmb3IgcmVhZFBpeGVscyBvZiBpbnQgdHlwZXMuXG5cdFx0XHRcdGdsTnVtQ2hhbm5lbHMgPSA0O1xuXHRcdFx0XHRnbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0JBX0lOVEVHRVI7XG5cdFx0XHRcdGdsVHlwZSA9IGdsLklOVDtcblx0XHRcdFx0dmFsdWVzID0gbmV3IEludDMyQXJyYXkod2lkdGggKiBoZWlnaHQgKiBnbE51bUNoYW5uZWxzKTtcblx0XHRcdFx0Ly8gLy8gVGhlIGZvbGxvd2luZyB3b3JrcyBpbiBDaHJvbWUuXG5cdFx0XHRcdC8vIHZhbHVlcyA9IG5ldyBJbnQ4QXJyYXkod2lkdGggKiBoZWlnaHQgKiBnbE51bUNoYW5uZWxzKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFNIT1JUOlxuXHRcdFx0XHQvLyBGaXJlZm94IHJlcXVpcmVzIHRoYXQgUkdCQV9JTlRFR0VSL0lOVCBpcyB1c2VkIGZvciByZWFkUGl4ZWxzIG9mIGludCB0eXBlcy5cblx0XHRcdFx0Z2xOdW1DaGFubmVscyA9IDQ7XG5cdFx0XHRcdGdsRm9ybWF0ID0gKGdsIGFzIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpLlJHQkFfSU5URUdFUjtcblx0XHRcdFx0Z2xUeXBlID0gZ2wuSU5UO1xuXHRcdFx0XHR2YWx1ZXMgPSBuZXcgSW50MzJBcnJheSh3aWR0aCAqIGhlaWdodCAqIGdsTnVtQ2hhbm5lbHMpO1xuXHRcdFx0XHQvLyAvLyBUaGUgZm9sbG93aW5nIHdvcmtzIGluIENocm9tZS5cblx0XHRcdFx0Ly8gdmFsdWVzID0gbmV3IEludDE2QXJyYXkod2lkdGggKiBoZWlnaHQgKiBnbE51bUNoYW5uZWxzKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIElOVDpcblx0XHRcdFx0Ly8gRmlyZWZveCByZXF1aXJlcyB0aGF0IFJHQkFfSU5URUdFUi9JTlQgaXMgdXNlZCBmb3IgcmVhZFBpeGVscyBvZiBpbnQgdHlwZXMuXG5cdFx0XHRcdGdsTnVtQ2hhbm5lbHMgPSA0O1xuXHRcdFx0XHRnbEZvcm1hdCA9IChnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5SR0JBX0lOVEVHRVI7XG5cdFx0XHRcdHZhbHVlcyA9IG5ldyBJbnQzMkFycmF5KHdpZHRoICogaGVpZ2h0ICogZ2xOdW1DaGFubmVscyk7XG5cdFx0XHRcdC8vIC8vIFRoZSBmb2xsb3dpbmcgd29ya3MgaW4gQ2hyb21lLlxuXHRcdFx0XHQvLyB2YWx1ZXMgPSBuZXcgSW50MzJBcnJheSh3aWR0aCAqIGhlaWdodCAqIGdsTnVtQ2hhbm5lbHMpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgaW50ZXJuYWxUeXBlICR7aW50ZXJuYWxUeXBlfSBmb3IgZ2V0VmFsdWVzKCkuYCk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMucmVhZHlUb1JlYWQoKSkge1xuXHRcdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYkdMUmVuZGVyaW5nQ29udGV4dC9yZWFkUGl4ZWxzXG5cdFx0XHRnbC5yZWFkUGl4ZWxzKDAsIDAsIHdpZHRoLCBoZWlnaHQsIGdsRm9ybWF0LCBnbFR5cGUsIHZhbHVlcyk7XG5cdFx0XHRjb25zdCB7IG51bUNvbXBvbmVudHMsIHR5cGUgfSA9IGRhdGFMYXllcjtcblx0XHRcdGNvbnN0IE9VVFBVVF9MRU5HVEggPSB3aWR0aCAqIGhlaWdodCAqIG51bUNvbXBvbmVudHM7XG5cblx0XHRcdC8vIENvbnZlcnQgdWludDE2IHRvIGZsb2F0MzIgaWYgbmVlZGVkLlxuXHRcdFx0Y29uc3QgaGFuZGxlRmxvYXQxNkNvbnZlcnNpb24gPSBpbnRlcm5hbFR5cGUgPT09IEhBTEZfRkxPQVQgJiYgdmFsdWVzLmNvbnN0cnVjdG9yID09PSBVaW50MTZBcnJheTtcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGNvbnN0IHZpZXcgPSBoYW5kbGVGbG9hdDE2Q29udmVyc2lvbiA/IG5ldyBEYXRhVmlldygodmFsdWVzIGFzIFVpbnQxNkFycmF5KS5idWZmZXIpIDogdW5kZWZpbmVkO1xuXG5cdFx0XHRsZXQgb3V0cHV0OiBEYXRhTGF5ZXJBcnJheVR5cGUgPSB2YWx1ZXM7XG5cdFx0XHRcblx0XHRcdC8vIFdlIG1heSB1c2UgYSBkaWZmZXJlbnQgaW50ZXJuYWwgdHlwZSB0aGFuIHRoZSBhc3NpZ25lZCB0eXBlIG9mIHRoZSBEYXRhTGF5ZXIuXG5cdFx0XHRpZiAoaW50ZXJuYWxUeXBlICE9PSB0eXBlKSB7XG5cdFx0XHRcdHN3aXRjaCAodHlwZSkge1xuXHRcdFx0XHRcdGNhc2UgSEFMRl9GTE9BVDpcblx0XHRcdFx0XHRjYXNlIEZMT0FUOlxuXHRcdFx0XHRcdFx0b3V0cHV0ID0gbmV3IEZsb2F0MzJBcnJheShPVVRQVVRfTEVOR1RIKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgVU5TSUdORURfQllURTpcblx0XHRcdFx0XHRcdG91dHB1dCA9IG5ldyBVaW50OEFycmF5KE9VVFBVVF9MRU5HVEgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBCWVRFOlxuXHRcdFx0XHRcdFx0b3V0cHV0ID0gbmV3IEludDhBcnJheShPVVRQVVRfTEVOR1RIKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgVU5TSUdORURfU0hPUlQ6XG5cdFx0XHRcdFx0XHRvdXRwdXQgPSBuZXcgVWludDE2QXJyYXkoT1VUUFVUX0xFTkdUSCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFNIT1JUOlxuXHRcdFx0XHRcdFx0b3V0cHV0ID0gbmV3IEludDE2QXJyYXkoT1VUUFVUX0xFTkdUSCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFVOU0lHTkVEX0lOVDpcblx0XHRcdFx0XHRcdG91dHB1dCA9IG5ldyBVaW50MzJBcnJheShPVVRQVVRfTEVOR1RIKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgSU5UOlxuXHRcdFx0XHRcdFx0b3V0cHV0ID0gbmV3IEludDMyQXJyYXkoT1VUUFVUX0xFTkdUSCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCB0eXBlICR7dHlwZX0gZm9yIGdldFZhbHVlcygpLmApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEluIHNvbWUgY2FzZXMgZ2xOdW1DaGFubmVscyBtYXkgYmUgPiBudW1Db21wb25lbnRzLlxuXHRcdFx0aWYgKGhhbmRsZUZsb2F0MTZDb252ZXJzaW9uIHx8IG91dHB1dCAhPT0gdmFsdWVzIHx8IG51bUNvbXBvbmVudHMgIT09IGdsTnVtQ2hhbm5lbHMpIHtcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHdpZHRoICogaGVpZ2h0OyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRjb25zdCBpbmRleDEgPSBpICogZ2xOdW1DaGFubmVscztcblx0XHRcdFx0XHRjb25zdCBpbmRleDIgPSBpICogbnVtQ29tcG9uZW50cztcblx0XHRcdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IG51bUNvbXBvbmVudHM7IGorKykge1xuXHRcdFx0XHRcdFx0aWYgKGhhbmRsZUZsb2F0MTZDb252ZXJzaW9uKSB7XG5cdFx0XHRcdFx0XHRcdG91dHB1dFtpbmRleDIgKyBqXSA9IGdldEZsb2F0MTYodmlldyEsIDIgKiAoaW5kZXgxICsgaiksIHRydWUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0b3V0cHV0W2luZGV4MiArIGpdID0gdmFsdWVzW2luZGV4MSArIGpdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3V0cHV0Lmxlbmd0aCAhPT0gT1VUUFVUX0xFTkdUSCkge1xuXHRcdFx0XHRvdXRwdXQgPSBvdXRwdXQuc2xpY2UoMCwgT1VUUFVUX0xFTkdUSCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gb3V0cHV0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byByZWFkIHZhbHVlcyBmcm9tIEJ1ZmZlciB3aXRoIHN0YXR1czogJHtnbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKGdsLkZSQU1FQlVGRkVSKX0uYCk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSByZWFkeVRvUmVhZCgpIHtcblx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXHRcdHJldHVybiBnbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKGdsLkZSQU1FQlVGRkVSKSA9PSBnbC5GUkFNRUJVRkZFUl9DT01QTEVURTtcblx0fTtcblxuICAgIHJlc2V0KCkge1xuXHRcdC8vIFRPRE86IGltcGxlbWVudCB0aGlzLlxuXHR9O1xuXG5cdGF0dGFjaERhdGFMYXllclRvVGhyZWVUZXh0dXJlKGRhdGFMYXllcjogRGF0YUxheWVyLCB0ZXh0dXJlOiBUZXh0dXJlKSB7XG5cdFx0aWYgKCF0aGlzLnJlbmRlcmVyKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1dlYkdMQ29tcHV0ZSB3YXMgbm90IGluaXRlZCB3aXRoIGEgcmVuZGVyZXIuJyk7XG5cdFx0fVxuXHRcdC8vIExpbmsgd2ViZ2wgdGV4dHVyZSB0byB0aHJlZWpzIG9iamVjdC5cblx0XHQvLyBUaGlzIGlzIG5vdCBvZmZpY2lhbGx5IHN1cHBvcnRlZC5cblx0XHRjb25zdCB0ZXh0dXJlcyA9IGRhdGFMYXllci5nZXRUZXh0dXJlcygpO1xuXHRcdGlmICh0ZXh0dXJlcy5sZW5ndGggPiAxKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYERhdGFMYXllciBcIiR7ZGF0YUxheWVyLm5hbWV9XCIgY29udGFpbnMgbXVsdGlwbGUgV2ViR0wgdGV4dHVyZXMgKG9uZSBmb3IgZWFjaCBidWZmZXIpIHRoYXQgYXJlIGZsaXAtZmxvcHBlZCBkdXJpbmcgY29tcHV0ZSBjeWNsZXMsIHBsZWFzZSBjaG9vc2UgYSBEYXRhTGF5ZXIgd2l0aCBvbmUgYnVmZmVyLmApO1xuXHRcdH1cblx0XHRjb25zdCBvZmZzZXRUZXh0dXJlUHJvcGVydGllcyA9IHRoaXMucmVuZGVyZXIucHJvcGVydGllcy5nZXQodGV4dHVyZSk7XG5cdFx0b2Zmc2V0VGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPSB0ZXh0dXJlc1swXTtcblx0XHRvZmZzZXRUZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9IHRydWU7XG5cdH1cblxuXHRyZXNldFRocmVlU3RhdGUoKSB7XG5cdFx0aWYgKCF0aGlzLnJlbmRlcmVyKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1dlYkdMQ29tcHV0ZSB3YXMgbm90IGluaXRlZCB3aXRoIGEgcmVuZGVyZXIuJyk7XG5cdFx0fVxuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cdFx0Ly8gUmVzZXQgdmlld3BvcnQuXG5cdFx0Y29uc3Qgdmlld3BvcnQgPSB0aGlzLnJlbmRlcmVyLmdldFZpZXdwb3J0KG5ldyB1dGlscy5WZWN0b3I0KCkgYXMgVmVjdG9yNCk7XG5cdFx0Z2wudmlld3BvcnQodmlld3BvcnQueCwgdmlld3BvcnQueSwgdmlld3BvcnQud2lkdGgsIHZpZXdwb3J0LmhlaWdodCk7XG5cdFx0Ly8gVW5iaW5kIGZyYW1lYnVmZmVyIChyZW5kZXIgdG8gc2NyZWVuKS5cblx0XHR0aGlzLnJlbmRlcmVyLnNldFJlbmRlclRhcmdldChudWxsKTtcblx0XHQvLyBSZXNldCB0ZXh0dXJlIGJpbmRpbmdzLlxuXHRcdHRoaXMucmVuZGVyZXIucmVzZXRTdGF0ZSgpO1xuXHR9XG5cdFxuXHRkZXN0cm95KCkge1xuXHRcdC8vIFRPRE86IE5lZWQgdG8gaW1wbGVtZW50IHRoaXMuXG5cdFx0ZGVsZXRlIHRoaXMucmVuZGVyZXI7XG5cdH1cbn0iLCJjb25zdCBleHRlbnNpb25zOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XG5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9PRVNfdGV4dHVyZV9mbG9hdFxuLy8gRmxvYXQgaXMgcHJvdmlkZWQgYnkgZGVmYXVsdCBpbiBXZWJHTDIgY29udGV4dHMuXG4vLyBUaGlzIGV4dGVuc2lvbiBpbXBsaWNpdGx5IGVuYWJsZXMgdGhlIFdFQkdMX2NvbG9yX2J1ZmZlcl9mbG9hdCBleHRlbnNpb24gKGlmIHN1cHBvcnRlZCksIHdoaWNoIGFsbG93cyByZW5kZXJpbmcgdG8gMzItYml0IGZsb2F0aW5nLXBvaW50IGNvbG9yIGJ1ZmZlcnMuXG5leHBvcnQgY29uc3QgT0VTX1RFWFRVUkVfRkxPQVQgPSAnT0VTX3RleHR1cmVfZmxvYXQnO1xuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL09FU190ZXh0dXJlX2hhbGZfZmxvYXRcbi8vIEhhbGYgZmxvYXQgaXMgc3VwcG9ydGVkIGJ5IG1vZGVybiBtb2JpbGUgYnJvd3NlcnMsIGZsb2F0IG5vdCB5ZXQgc3VwcG9ydGVkLlxuLy8gSGFsZiBmbG9hdCBpcyBwcm92aWRlZCBieSBkZWZhdWx0IGZvciBXZWJnbDIgY29udGV4dHMuXG4vLyBUaGlzIGV4dGVuc2lvbiBpbXBsaWNpdGx5IGVuYWJsZXMgdGhlIEVYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdCBleHRlbnNpb24gKGlmIHN1cHBvcnRlZCksIHdoaWNoIGFsbG93cyByZW5kZXJpbmcgdG8gMTYtYml0IGZsb2F0aW5nIHBvaW50IGZvcm1hdHMuXG5leHBvcnQgY29uc3QgT0VTX1RFWFRVUkVfSEFMRl9GTE9BVCA9ICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0Jztcbi8vIFRPRE86IFNlZW1zIGxpa2UgbGluZWFyIGZpbHRlcmluZyBvZiBmbG9hdHMgbWF5IGJlIHN1cHBvcnRlZCBpbiBzb21lIGJyb3dzZXJzIHdpdGhvdXQgdGhlc2UgZXh0ZW5zaW9ucz9cbi8vIGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L09wZW5HTC9leHRlbnNpb25zL09FUy9PRVNfdGV4dHVyZV9mbG9hdF9saW5lYXIudHh0XG5leHBvcnQgY29uc3QgT0VTX1RFWFRVUkVfRkxPQVRfTElORUFSID0gJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcic7XG5leHBvcnQgY29uc3QgT0VTX1RFWFRVUkVfSEFsRl9GTE9BVF9MSU5FQVIgPSAnT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXInO1xuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dFQkdMX2RlcHRoX3RleHR1cmVcbi8vIEFkZHMgZ2wuVU5TSUdORURfU0hPUlQsIGdsLlVOU0lHTkVEX0lOVCB0eXBlcyB0byB0ZXh0SW1hZ2UyRCBpbiBXZWJHTDEuMFxuZXhwb3J0IGNvbnN0IFdFQkdMX0RFUFRIX1RFWFRVUkUgPSAnV0VCR0xfZGVwdGhfdGV4dHVyZSc7XG4vLyBFWFRfQ09MT1JfQlVGRkVSX0ZMT0FUIGFkZHMgYWJpbGl0eSB0byByZW5kZXIgdG8gYSB2YXJpZXR5IG9mIGZsb2F0aW5nIHB0IHRleHR1cmVzLlxuLy8gVGhpcyBpcyBuZWVkZWQgZm9yIHRoZSBXZWJHTDIgY29udGV4dHMgdGhhdCBkbyBub3Qgc3VwcG9ydCBPRVNfVEVYVFVSRV9GTE9BVCAvIE9FU19URVhUVVJFX0hBTEZfRkxPQVQgZXh0ZW5zaW9ucy5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FWFRfY29sb3JfYnVmZmVyX2Zsb2F0XG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNDI2MjQ5My9mcmFtZWJ1ZmZlci1pbmNvbXBsZXRlLWF0dGFjaG1lbnQtZm9yLXRleHR1cmUtd2l0aC1pbnRlcm5hbC1mb3JtYXRcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM2MTA5MzQ3L2ZyYW1lYnVmZmVyLWluY29tcGxldGUtYXR0YWNobWVudC1vbmx5LWhhcHBlbnMtb24tYW5kcm9pZC13LWZpcmVmb3hcbmV4cG9ydCBjb25zdCBFWFRfQ09MT1JfQlVGRkVSX0ZMT0FUID0gJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXh0ZW5zaW9uKFxuXHRnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCxcblx0ZXh0ZW5zaW9uTmFtZTogc3RyaW5nLFxuXHRlcnJvckNhbGxiYWNrOiAobWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkLFxuXHRvcHRpb25hbCA9IGZhbHNlLFxuKSB7XG5cdC8vIENoZWNrIGlmIHdlJ3ZlIGFscmVhZHkgbG9hZGVkIHRoZSBleHRlbnNpb24uXG5cdGlmIChleHRlbnNpb25zW2V4dGVuc2lvbk5hbWVdICE9PSB1bmRlZmluZWQpIHJldHVybiBleHRlbnNpb25zW2V4dGVuc2lvbk5hbWVdO1xuXG5cdGxldCBleHRlbnNpb247XG5cdHRyeSB7XG5cdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKGV4dGVuc2lvbk5hbWUpO1xuXHR9IGNhdGNoIChlKSB7fVxuXHRpZiAoZXh0ZW5zaW9uKSB7XG5cdFx0Ly8gQ2FjaGUgdGhpcyBleHRlbnNpb24uXG5cdFx0ZXh0ZW5zaW9uc1tleHRlbnNpb25OYW1lXSA9IGV4dGVuc2lvbjtcblx0XHRjb25zb2xlLmxvZyhgTG9hZGVkIGV4dGVuc2lvbjogJHtleHRlbnNpb25OYW1lfS5gKTtcblx0fSBlbHNlIHtcblx0XHRleHRlbnNpb25zW2V4dGVuc2lvbk5hbWVdID0gZmFsc2U7IC8vIENhY2hlIHRoZSBiYWQgZXh0ZW5zaW9uIGxvb2t1cC5cblx0XHRjb25zb2xlLndhcm4oYFVuc3VwcG9ydGVkICR7b3B0aW9uYWwgPyAnb3B0aW9uYWwgJyA6ICcnfWV4dGVuc2lvbjogJHtleHRlbnNpb25OYW1lfS5gKTtcblx0fVxuXHQvLyBJZiB0aGUgZXh0ZW5zaW9uIGlzIG5vdCBvcHRpb25hbCwgdGhyb3cgZXJyb3IuXG5cdGlmICghZXh0ZW5zaW9uICYmICFvcHRpb25hbCkge1xuXHRcdGVycm9yQ2FsbGJhY2soYFJlcXVpcmVkIGV4dGVuc2lvbiB1bnN1cHBvcnRlZCBieSB0aGlzIGRldmljZSAvIGJyb3dzZXI6ICR7ZXh0ZW5zaW9uTmFtZX0uYCk7XG5cdH1cblx0cmV0dXJuIGV4dGVuc2lvbjtcbn0iLCIvLyBDb3BpZWQgZnJvbSBodHRwOi8vd2ViZ2xmdW5kYW1lbnRhbHMub3JnL3dlYmdsL2xlc3NvbnMvd2ViZ2wtYm9pbGVycGxhdGUuaHRtbFxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGVTaGFkZXIoXG5cdGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LFxuXHRlcnJvckNhbGxiYWNrOiAobWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkLFxuXHRzaGFkZXJTb3VyY2U6IHN0cmluZyxcblx0c2hhZGVyVHlwZTogbnVtYmVyLFxuXHRwcm9ncmFtTmFtZT86IHN0cmluZyxcbikge1xuXHQvLyBDcmVhdGUgdGhlIHNoYWRlciBvYmplY3Rcblx0Y29uc3Qgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKHNoYWRlclR5cGUpO1xuXHRpZiAoIXNoYWRlcikge1xuXHRcdGVycm9yQ2FsbGJhY2soJ1VuYWJsZSB0byBpbml0IGdsIHNoYWRlci4nKTtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFNldCB0aGUgc2hhZGVyIHNvdXJjZSBjb2RlLlxuXHRnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzaGFkZXJTb3VyY2UpO1xuXG5cdC8vIENvbXBpbGUgdGhlIHNoYWRlclxuXHRnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XG5cblx0Ly8gQ2hlY2sgaWYgaXQgY29tcGlsZWRcblx0Y29uc3Qgc3VjY2VzcyA9IGdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKTtcblx0aWYgKCFzdWNjZXNzKSB7XG5cdFx0Ly8gU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIGNvbXBpbGF0aW9uIC0gcHJpbnQgdGhlIGVycm9yLlxuXHRcdGVycm9yQ2FsbGJhY2soYENvdWxkIG5vdCBjb21waWxlICR7c2hhZGVyVHlwZSA9PT0gZ2wuRlJBR01FTlRfU0hBREVSID8gJ2ZyYWdtZW50JyA6ICd2ZXJ0ZXgnfVxuXHRcdFx0IHNoYWRlciR7cHJvZ3JhbU5hbWUgPyBgIGZvciBwcm9ncmFtIFwiJHtwcm9ncmFtTmFtZX1cImAgOiAnJ306ICR7Z2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpfS5gKTtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHRyZXR1cm4gc2hhZGVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNXZWJHTDIoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpIHtcblx0Ly8gVGhpcyBjb2RlIGlzIHB1bGxlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvYmxvYi9tYXN0ZXIvc3JjL3JlbmRlcmVycy93ZWJnbC9XZWJHTENhcGFiaWxpdGllcy5qc1xuXHQvLyBAdHMtaWdub3JlXG5cdHJldHVybiAodHlwZW9mIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgIT09ICd1bmRlZmluZWQnICYmIGdsIGluc3RhbmNlb2YgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkgfHwgKHR5cGVvZiBXZWJHTDJDb21wdXRlUmVuZGVyaW5nQ29udGV4dCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2wgaW5zdGFuY2VvZiBXZWJHTDJDb21wdXRlUmVuZGVyaW5nQ29udGV4dCk7XG5cdC8vIHJldHVybiAhIShnbCBhcyBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KS5IQUxGX0ZMT0FUO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQb3dlck9mMih2YWx1ZTogbnVtYmVyKSB7XG5cdHJldHVybiAodmFsdWUgJiAodmFsdWUgLSAxKSkgPT0gMDtcbn0iLCIvLyBUaGVzZSBhcmUgdGhlIHBhcnRzIG9mIHRocmVlanMgVmVjdG9yNCB0aGF0IHdlIG5lZWQuXG5leHBvcnQgY2xhc3MgVmVjdG9yNCB7XG5cdHg6IG51bWJlcjtcblx0eTogbnVtYmVyO1xuXHR6OiBudW1iZXI7XG5cdHc6IG51bWJlcjtcblx0Y29uc3RydWN0b3IoIHggPSAwLCB5ID0gMCwgeiA9IDAsIHcgPSAxICkge1xuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblx0XHR0aGlzLnogPSB6O1xuXHRcdHRoaXMudyA9IHc7XG5cdH1cblx0Z2V0IHdpZHRoKCkge1xuXHRcdHJldHVybiB0aGlzLno7XG5cdH1cblx0Z2V0IGhlaWdodCgpIHtcblx0XHRyZXR1cm4gdGhpcy53O1xuXHR9XG5cdGNvcHkodjogVmVjdG9yNCkge1xuXHRcdHRoaXMueCA9IHYueDtcblx0XHR0aGlzLnkgPSB2Lnk7XG5cdFx0dGhpcy56ID0gdi56O1xuXHRcdHRoaXMudyA9IHYudztcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSIsIm1vZHVsZS5leHBvcnRzID0gXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuXFxudmFyeWluZyB2ZWMyIHZfVVY7XFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgdV9zdGF0ZTtcXG5cXG52b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHVfc3RhdGUsIHZfVVYpO1xcbn1cIiIsIm1vZHVsZS5leHBvcnRzID0gXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuXFxuYXR0cmlidXRlIHZlYzIgYV9pbnRlcm5hbF9wb3NpdGlvbjtcXG5cXG51bmlmb3JtIHZlYzIgdV9pbnRlcm5hbF9zY2FsZTtcXG51bmlmb3JtIHZlYzIgdV9pbnRlcm5hbF90cmFuc2xhdGlvbjtcXG5cXG52YXJ5aW5nIHZlYzIgdl9VVl9sb2NhbDtcXG52YXJ5aW5nIHZlYzIgdl9VVjtcXG5cXG52b2lkIG1haW4oKSB7XFxuXFx0Ly8gQ2FsY3VsYXRlIFVWIGNvb3JkaW5hdGVzIG9mIGN1cnJlbnQgcmVuZGVyZWQgb2JqZWN0LlxcblxcdHZfVVZfbG9jYWwgPSAwLjUgKiAoYV9pbnRlcm5hbF9wb3NpdGlvbiArIDEuMCk7XFxuXFxuXFx0Ly8gQXBwbHkgdHJhbnNmb3JtYXRpb25zLlxcblxcdHZlYzIgcG9zaXRpb24gPSB1X2ludGVybmFsX3NjYWxlICogYV9pbnRlcm5hbF9wb3NpdGlvbiArIHVfaW50ZXJuYWxfdHJhbnNsYXRpb247XFxuXFxuXFx0Ly8gQ2FsY3VsYXRlIGEgZ2xvYmFsIHV2IGZvciB0aGUgdmlld3BvcnQuXFxuXFx0dl9VViA9IDAuNSAqIChwb3NpdGlvbiArIDEuMCk7XFxuXFxuXFx0Ly8gQ2FsY3VsYXRlIHZlcnRleCBwb3NpdGlvbi5cXG5cXHRnbF9Qb3NpdGlvbiA9IHZlYzQocG9zaXRpb24sIDAsIDEpO1xcbn1cIiIsIm1vZHVsZS5leHBvcnRzID0gXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxucHJlY2lzaW9uIGhpZ2hwIGludDtcXG5cXG4vKipcXG4gKiBSZXR1cm5zIGFjY3VyYXRlIE1PRCB3aGVuIGFyZ3VtZW50cyBhcmUgYXBwcm94aW1hdGUgaW50ZWdlcnMuXFxuICovXFxuZmxvYXQgbW9kSShmbG9hdCBhLCBmbG9hdCBiKSB7XFxuICAgIGZsb2F0IG0gPSBhIC0gZmxvb3IoKGEgKyAwLjUpIC8gYikgKiBiO1xcbiAgICByZXR1cm4gZmxvb3IobSArIDAuNSk7XFxufVxcblxcbi8vIENhbm5vdCB1c2UgaW50IHZlcnRleCBhdHRyaWJ1dGVzOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yNzg3NDk4My93ZWJnbC1ob3ctdG8tdXNlLWludGVnZXItYXR0cmlidXRlcy1pbi1nbHNsXFxuYXR0cmlidXRlIGZsb2F0IGFfaW50ZXJuYWxfaW5kZXg7IC8vIEluZGV4IG9mIHBvaW50LlxcblxcbnVuaWZvcm0gc2FtcGxlcjJEIHVfaW50ZXJuYWxfZGF0YTsgLy8gVGV4dHVyZSBsb29rdXAgd2l0aCBwb3NpdGlvbiBkYXRhLlxcbnVuaWZvcm0gdmVjMiB1X2ludGVybmFsX2RpbWVuc2lvbnM7XFxudW5pZm9ybSB2ZWMyIHVfaW50ZXJuYWxfc2NhbGU7XFxudW5pZm9ybSBmbG9hdCB1X2ludGVybmFsX3BvaW50U2l6ZTtcXG5cXG52YXJ5aW5nIHZlYzIgdl9VVjtcXG5cXG52b2lkIG1haW4oKSB7XFxuXFx0Ly8gQ2FsY3VsYXRlIGEgdXYgYmFzZWQgb24gdGhlIHBvaW50J3MgaW5kZXggYXR0cmlidXRlLlxcblxcdHZlYzIgcGFydGljbGVVViA9IHZlYzIoXFxuXFx0XFx0bW9kSShhX2ludGVybmFsX2luZGV4LCB1X2ludGVybmFsX2RpbWVuc2lvbnMueCksXFxuXFx0XFx0Zmxvb3IoZmxvb3IoYV9pbnRlcm5hbF9pbmRleCArIDAuNSkgLyB1X2ludGVybmFsX2RpbWVuc2lvbnMueClcXG5cXHQpIC8gdV9pbnRlcm5hbF9kaW1lbnNpb25zO1xcblxcblxcdC8vIENhbGN1bGF0ZSBhIGdsb2JhbCB1diBmb3IgdGhlIHZpZXdwb3J0LlxcblxcdC8vIExvb2t1cCB2ZXJ0ZXggcG9zaXRpb24gYW5kIHNjYWxlIHRvIFswLCAxXSByYW5nZS5cXG5cXHQvLyBXZSBoYXZlIHBhY2tlZCBhIDJEIGRpc3BsYWNlbWVudCB3aXRoIHRoZSBwb3NpdGlvbi5cXG5cXHR2ZWM0IHBvc2l0aW9uRGF0YSA9IHRleHR1cmUyRCh1X2ludGVybmFsX2RhdGEsIHBhcnRpY2xlVVYpO1xcblxcdC8vIHBvc2l0aW9uID0gZmlyc3QgdHdvIGNvbXBvbmVudHMgcGx1cyBsYXN0IHR3byBjb21wb25lbnRzIChvcHRpb25hbCBhY2N1bXVsYXRpb24gYnVmZmVyKS5cXG5cXHR2ZWMyIHBvc2l0aW9uQWJzb2x1dGUgPSBwb3NpdGlvbkRhdGEucmcgKyBwb3NpdGlvbkRhdGEuYmE7XFxuXFx0dl9VViA9IHBvc2l0aW9uQWJzb2x1dGUgKiB1X2ludGVybmFsX3NjYWxlO1xcblxcblxcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpbiBbLTEsIDFdIHJhbmdlLlxcblxcdHZlYzIgcG9zaXRpb24gPSB2X1VWICogMi4wIC0gMS4wO1xcblxcblxcdGdsX1BvaW50U2l6ZSA9IHVfaW50ZXJuYWxfcG9pbnRTaXplO1xcblxcdGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMCwgMSk7XFxufVwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIi8vIFZlcnRleCBzaGFkZXIgZm9yIGZ1bGxzY3JlZW4gcXVhZC5cXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuXFxuYXR0cmlidXRlIHZlYzIgYV9pbnRlcm5hbF9wb3NpdGlvbjtcXG5cXG51bmlmb3JtIGZsb2F0IHVfaW50ZXJuYWxfcmFkaXVzO1xcbnVuaWZvcm0gdmVjMiB1X2ludGVybmFsX3NjYWxlO1xcbnVuaWZvcm0gZmxvYXQgdV9pbnRlcm5hbF9sZW5ndGg7XFxudW5pZm9ybSBmbG9hdCB1X2ludGVybmFsX3JvdGF0aW9uO1xcbnVuaWZvcm0gdmVjMiB1X2ludGVybmFsX3RyYW5zbGF0aW9uO1xcblxcbnZhcnlpbmcgdmVjMiB2X1VWX2xvY2FsO1xcbnZhcnlpbmcgdmVjMiB2X1VWO1xcblxcbm1hdDIgcm90YXRlMmQoZmxvYXQgX2FuZ2xlKXtcXG5cXHRyZXR1cm4gbWF0Mihjb3MoX2FuZ2xlKSwgLXNpbihfYW5nbGUpLCBzaW4oX2FuZ2xlKSwgY29zKF9hbmdsZSkpO1xcbn1cXG5cXG52b2lkIG1haW4oKSB7XFxuXFx0Ly8gQ2FsY3VsYXRlIFVWIGNvb3JkaW5hdGVzIG9mIGN1cnJlbnQgcmVuZGVyZWQgb2JqZWN0LlxcblxcdHZfVVZfbG9jYWwgPSAwLjUgKiAoYV9pbnRlcm5hbF9wb3NpdGlvbiArIDEuMCk7XFxuXFxuXFx0dmVjMiBwb3NpdGlvbiA9IGFfaW50ZXJuYWxfcG9zaXRpb247XFxuXFxuXFx0Ly8gQXBwbHkgcmFkaXVzLlxcblxcdHBvc2l0aW9uICo9IHVfaW50ZXJuYWxfcmFkaXVzO1xcblxcblxcdC8vIFN0cmV0Y2ggY2VudGVyIG9mIHNoYXBlIHRvIGZvcm0gYSByb3VuZC1jYXBwZWQgbGluZSBzZWdtZW50LlxcblxcdGlmIChwb3NpdGlvbi54IDwgMC4wKSB7XFxuXFx0XFx0cG9zaXRpb24ueCAtPSB1X2ludGVybmFsX2xlbmd0aCAvIDIuMDtcXG5cXHR9IGVsc2UgaWYgKHBvc2l0aW9uLnggPiAwLjApIHtcXG5cXHRcXHRwb3NpdGlvbi54ICs9IHVfaW50ZXJuYWxfbGVuZ3RoIC8gMi4wO1xcblxcdH1cXG5cXG5cXHQvLyBBcHBseSB0cmFuc2Zvcm1hdGlvbnMuXFxuXFx0cG9zaXRpb24gPSB1X2ludGVybmFsX3NjYWxlICogKHJvdGF0ZTJkKC11X2ludGVybmFsX3JvdGF0aW9uKSAqIHBvc2l0aW9uKSArIHVfaW50ZXJuYWxfdHJhbnNsYXRpb247XFxuXFxuXFx0Ly8gQ2FsY3VsYXRlIGEgZ2xvYmFsIHV2IGZvciB0aGUgdmlld3BvcnQuXFxuXFx0dl9VViA9IDAuNSAqIChwb3NpdGlvbiArIDEuMCk7XFxuXFxuXFx0Ly8gQ2FsY3VsYXRlIHZlcnRleCBwb3NpdGlvbi5cXG5cXHRnbF9Qb3NpdGlvbiA9IHZlYzQocG9zaXRpb24sIDAsIDEpO1xcbn1cIiIsIm1vZHVsZS5leHBvcnRzID0gXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxucHJlY2lzaW9uIGhpZ2hwIGludDtcXG5cXG4vKipcXG4gKiBSZXR1cm5zIGFjY3VyYXRlIE1PRCB3aGVuIGFyZ3VtZW50cyBhcmUgYXBwcm94aW1hdGUgaW50ZWdlcnMuXFxuICovXFxuZmxvYXQgbW9kSShmbG9hdCBhLCBmbG9hdCBiKSB7XFxuICAgIGZsb2F0IG0gPSBhIC0gZmxvb3IoKGEgKyAwLjUpIC8gYikgKiBiO1xcbiAgICByZXR1cm4gZmxvb3IobSArIDAuNSk7XFxufVxcblxcbi8vIENhbm5vdCB1c2UgaW50IHZlcnRleCBhdHRyaWJ1dGVzOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yNzg3NDk4My93ZWJnbC1ob3ctdG8tdXNlLWludGVnZXItYXR0cmlidXRlcy1pbi1nbHNsXFxuYXR0cmlidXRlIGZsb2F0IGFfaW50ZXJuYWxfaW5kZXg7IC8vIEluZGV4IG9mIHBvaW50LlxcblxcbnVuaWZvcm0gc2FtcGxlcjJEIHVfaW50ZXJuYWxfZGF0YTsgLy8gVGV4dHVyZSBsb29rdXAgd2l0aCB2ZWN0b3IgZGF0YS5cXG51bmlmb3JtIHZlYzIgdV9pbnRlcm5hbF9kaW1lbnNpb25zO1xcbnVuaWZvcm0gdmVjMiB1X2ludGVybmFsX3NjYWxlO1xcblxcbnZhcnlpbmcgdmVjMiB2X1VWO1xcblxcbnZvaWQgbWFpbigpIHtcXG5cXHQvLyBEaXZpZGUgaW5kZXggYnkgMi5cXG5cXHRmbG9hdCBpbmRleCA9IGZsb29yKChhX2ludGVybmFsX2luZGV4ICsgMC41KSAvIDIuMCk7XFxuXFx0Ly8gQ2FsY3VsYXRlIGEgdXYgYmFzZWQgb24gdGhlIHZlcnRleCBpbmRleCBhdHRyaWJ1dGUuXFxuXFx0dl9VViA9IHZlYzIoXFxuXFx0XFx0bW9kSShpbmRleCwgdV9pbnRlcm5hbF9kaW1lbnNpb25zLngpLFxcblxcdFxcdGZsb29yKGZsb29yKGluZGV4ICsgMC41KSAvIHVfaW50ZXJuYWxfZGltZW5zaW9ucy54KVxcblxcdCkgLyB1X2ludGVybmFsX2RpbWVuc2lvbnM7XFxuXFxuXFx0Ly8gQWRkIHZlY3RvciBkaXNwbGFjZW1lbnQgaWYgbmVlZGVkLlxcblxcdGlmIChtb2RJKGFfaW50ZXJuYWxfaW5kZXgsIDIuMCkgPiAwLjApIHtcXG5cXHRcXHQvLyBMb29rdXAgdmVjdG9yRGF0YSBhdCBjdXJyZW50IFVWLlxcblxcdFxcdHZlYzIgdmVjdG9yRGF0YSA9IHRleHR1cmUyRCh1X2ludGVybmFsX2RhdGEsIHZfVVYpLnh5O1xcblxcdFxcdHZfVVYgKz0gdmVjdG9yRGF0YSAqIHVfaW50ZXJuYWxfc2NhbGU7XFxuXFx0fVxcblxcblxcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpbiBbLTEsIDFdIHJhbmdlLlxcblxcdHZlYzIgcG9zaXRpb24gPSB2X1VWICogMi4wIC0gMS4wO1xcblxcblxcdGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMCwgMSk7XFxufVwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIiN2ZXJzaW9uIDMwMCBlc1xcbnByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5wcmVjaXNpb24gaGlnaHAgc2FtcGxlcjJEO1xcblxcbmluIHZlYzIgdl9VVjtcXG5cXG51bmlmb3JtIHNhbXBsZXIyRCB1X3N0YXRlO1xcblxcbm91dCB2ZWM0IG91dF9mcmFnQ29sb3I7XFxuXFxudm9pZCBtYWluKCkge1xcblxcdG91dF9mcmFnQ29sb3IgPSB0ZXh0dXJlKHVfc3RhdGUsIHZfVVYpO1xcbn1cIiIsIm1vZHVsZS5leHBvcnRzID0gXCIjdmVyc2lvbiAzMDAgZXNcXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxucHJlY2lzaW9uIGhpZ2hwIGludDtcXG5wcmVjaXNpb24gaGlnaHAgaXNhbXBsZXIyRDtcXG5cXG5pbiB2ZWMyIHZfVVY7XFxuXFxudW5pZm9ybSBpc2FtcGxlcjJEIHVfc3RhdGU7XFxuXFxub3V0IGl2ZWM0IG91dF9mcmFnQ29sb3I7XFxuXFxudm9pZCBtYWluKCkge1xcblxcdG91dF9mcmFnQ29sb3IgPSB0ZXh0dXJlKHVfc3RhdGUsIHZfVVYpO1xcbn1cIiIsIm1vZHVsZS5leHBvcnRzID0gXCIjdmVyc2lvbiAzMDAgZXNcXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxucHJlY2lzaW9uIGhpZ2hwIGludDtcXG5wcmVjaXNpb24gaGlnaHAgdXNhbXBsZXIyRDtcXG5cXG5pbiB2ZWMyIHZfVVY7XFxuXFxudW5pZm9ybSB1c2FtcGxlcjJEIHVfc3RhdGU7XFxuXFxub3V0IHV2ZWM0IG91dF9mcmFnQ29sb3I7XFxuXFxudm9pZCBtYWluKCkge1xcblxcdG91dF9mcmFnQ29sb3IgPSB0ZXh0dXJlKHVfc3RhdGUsIHZfVVYpO1xcbn1cIiIsIm1vZHVsZS5leHBvcnRzID0gXCIjdmVyc2lvbiAzMDAgZXNcXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuXFxuaW4gdmVjMiBhX2ludGVybmFsX3Bvc2l0aW9uO1xcblxcbnVuaWZvcm0gdmVjMiB1X2ludGVybmFsX3NjYWxlO1xcbnVuaWZvcm0gdmVjMiB1X2ludGVybmFsX3RyYW5zbGF0aW9uO1xcblxcbm91dCB2ZWMyIHZfVVZfbG9jYWw7XFxub3V0IHZlYzIgdl9VVjtcXG5vdXQgdmVjMiBvdXRfcG9zaXRpb247XFxuXFxudm9pZCBtYWluKCkge1xcblxcdC8vIENhbGN1bGF0ZSBVViBjb29yZGluYXRlcyBvZiBjdXJyZW50IHJlbmRlcmVkIG9iamVjdC5cXG5cXHR2X1VWX2xvY2FsID0gMC41ICogKGFfaW50ZXJuYWxfcG9zaXRpb24gKyAxLjApO1xcblxcblxcdC8vIEFwcGx5IHRyYW5zZm9ybWF0aW9ucy5cXG5cXHR2ZWMyIHBvc2l0aW9uID0gdV9pbnRlcm5hbF9zY2FsZSAqIGFfaW50ZXJuYWxfcG9zaXRpb24gKyB1X2ludGVybmFsX3RyYW5zbGF0aW9uO1xcblxcblxcdC8vIENhbGN1bGF0ZSBhIGdsb2JhbCB1diBmb3IgdGhlIHZpZXdwb3J0LlxcblxcdHZfVVYgPSAwLjUgKiAocG9zaXRpb24gKyAxLjApO1xcblxcblxcdC8vIENhbGN1bGF0ZSB2ZXJ0ZXggcG9zaXRpb24uXFxuXFx0b3V0X3Bvc2l0aW9uID0gcG9zaXRpb247XFxufVwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIiN2ZXJzaW9uIDMwMCBlc1xcbnByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5cXG5hdHRyaWJ1dGUgdmVjMiBhX2ludGVybmFsX3Bvc2l0aW9uO1xcblxcbnVuaWZvcm0gZmxvYXQgdV9pbnRlcm5hbF9yYWRpdXM7XFxudW5pZm9ybSB2ZWMyIHVfaW50ZXJuYWxfc2NhbGU7XFxudW5pZm9ybSBmbG9hdCB1X2ludGVybmFsX2xlbmd0aDtcXG51bmlmb3JtIGZsb2F0IHVfaW50ZXJuYWxfcm90YXRpb247XFxudW5pZm9ybSB2ZWMyIHVfaW50ZXJuYWxfdHJhbnNsYXRpb247XFxuXFxudmFyeWluZyB2ZWMyIHZfVVZfbG9jYWw7XFxudmFyeWluZyB2ZWMyIHZfVVY7XFxuXFxubWF0MiByb3RhdGUyZChmbG9hdCBfYW5nbGUpe1xcblxcdHJldHVybiBtYXQyKGNvcyhfYW5nbGUpLCAtc2luKF9hbmdsZSksIHNpbihfYW5nbGUpLCBjb3MoX2FuZ2xlKSk7XFxufVxcblxcbnZvaWQgbWFpbigpIHtcXG5cXHQvLyBDYWxjdWxhdGUgVVYgY29vcmRpbmF0ZXMgb2YgY3VycmVudCByZW5kZXJlZCBvYmplY3QuXFxuXFx0dl9VVl9sb2NhbCA9IDAuNSAqIChhX2ludGVybmFsX3Bvc2l0aW9uICsgMS4wKTtcXG5cXG5cXHR2ZWMyIHBvc2l0aW9uID0gYV9pbnRlcm5hbF9wb3NpdGlvbjtcXG5cXG5cXHQvLyBBcHBseSByYWRpdXMuXFxuXFx0cG9zaXRpb24gKj0gdV9pbnRlcm5hbF9yYWRpdXM7XFxuXFxuXFx0Ly8gU3RyZXRjaCBjZW50ZXIgb2Ygc2hhcGUgdG8gZm9ybSBhIHJvdW5kLWNhcHBlZCBsaW5lIHNlZ21lbnQuXFxuXFx0aWYgKHBvc2l0aW9uLnggPCAwLjApIHtcXG5cXHRcXHRwb3NpdGlvbi54IC09IHVfaW50ZXJuYWxfbGVuZ3RoIC8gMi4wO1xcblxcdH0gZWxzZSBpZiAocG9zaXRpb24ueCA+IDAuMCkge1xcblxcdFxcdHBvc2l0aW9uLnggKz0gdV9pbnRlcm5hbF9sZW5ndGggLyAyLjA7XFxuXFx0fVxcblxcblxcdC8vIEFwcGx5IHRyYW5zZm9ybWF0aW9ucy5cXG5cXHRwb3NpdGlvbiA9IHVfaW50ZXJuYWxfc2NhbGUgKiAocm90YXRlMmQoLXVfaW50ZXJuYWxfcm90YXRpb24pICogcG9zaXRpb24pICsgdV9pbnRlcm5hbF90cmFuc2xhdGlvbjtcXG5cXG5cXHQvLyBDYWxjdWxhdGUgYSBnbG9iYWwgdXYgZm9yIHRoZSB2aWV3cG9ydC5cXG5cXHR2X1VWID0gMC41ICogKHBvc2l0aW9uICsgMS4wKTtcXG5cXG5cXHQvLyBDYWxjdWxhdGUgdmVydGV4IHBvc2l0aW9uLlxcblxcdGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMCwgMSk7XFxufVwiIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlID0gT2JqZWN0LmNyZWF0ZShtb2R1bGUpO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsICdleHBvcnRzJywge1xuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0c2V0OiAoKSA9PiB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0VTIE1vZHVsZXMgbWF5IG5vdCBhc3NpZ24gbW9kdWxlLmV4cG9ydHMgb3IgZXhwb3J0cy4qLCBVc2UgRVNNIGV4cG9ydCBzeW50YXgsIGluc3RlYWQ6ICcgKyBtb2R1bGUuaWQpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgeyBXZWJHTENvbXB1dGUgfSBmcm9tICcuL1dlYkdMQ29tcHV0ZSc7XG5pbXBvcnQge1xuXHRIQUxGX0ZMT0FULCBGTE9BVCwgVU5TSUdORURfQllURSwgQllURSwgVU5TSUdORURfU0hPUlQsIFNIT1JULCBVTlNJR05FRF9JTlQsIElOVCxcblx0TkVBUkVTVCwgTElORUFSLCBDTEFNUF9UT19FREdFLCBSRVBFQVQsXG5cdEdMU0wxLCBHTFNMMyxcbn0gZnJvbSAnLi9Db25zdGFudHMnO1xuLy8gY29uc3QgU2luZ2xlQ29sb3JGcmFnU2hhZGVyID0gcmVxdWlyZSgnLi9rZXJuZWxzXzEuMC9TaW5nbGVDb2xvckZyYWdTaGFkZXIuZ2xzbCcpO1xuLy8gY29uc3QgWmVyb0ZyYWdtZW50U2hhZGVyID0gcmVxdWlyZSgnLi9rZXJuZWxzXzEuMC9aZXJvRnJhZ1NoYWRlci5nbHNsJyk7XG5cbmV4cG9ydCB7XG5cdFdlYkdMQ29tcHV0ZSxcblx0SEFMRl9GTE9BVCxcblx0RkxPQVQsXG5cdFVOU0lHTkVEX0JZVEUsXG5cdEJZVEUsXG5cdFVOU0lHTkVEX1NIT1JULFxuXHRTSE9SVCxcblx0VU5TSUdORURfSU5ULFxuXHRJTlQsXG5cdEdMU0wxLFxuXHRHTFNMMyxcblx0TkVBUkVTVCxcblx0TElORUFSLFxuXHRDTEFNUF9UT19FREdFLFxuXHRSRVBFQVQsXG59OyJdLCJzb3VyY2VSb290IjoiIn0=